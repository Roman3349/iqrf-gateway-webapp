{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/components/Gateway/ResourceUsage.vue?7f12","webpack:///./js/components/SignIn.vue?8d56","webpack:///./js/components/IqrfNet/BinaryOutputManager.vue?931a","webpack:///./js/pages/IqrfNet/SensorManager.vue?fc89","webpack:///./css/app.scss","webpack:///./js/components/LoadingSpinner.vue?77ff","webpack:///./js/pages/Cloud/CloudDisambiguation.vue?7592","webpack:///./js/pages/Cloud/CloudDisambiguation.vue?b875","webpack:///js/pages/Cloud/CloudDisambiguation.vue","webpack:///./js/pages/Cloud/CloudDisambiguation.vue","webpack:///./js/pages/Cloud/AzureCreator.vue?8b64","webpack:///./js/i18n.ts","webpack:///./js/helpers/FormErrorHandler.ts","webpack:///./js/services/CloudService.ts","webpack:///./js/services/ServiceService.ts","webpack:///./js/pages/Cloud/AzureCreator.vue?404b","webpack:///js/pages/Cloud/AzureCreator.vue","webpack:///./js/pages/Cloud/AzureCreator.vue","webpack:///./js/pages/Cloud/HexioCreator.vue?f5f1","webpack:///js/pages/Cloud/HexioCreator.vue","webpack:///./js/pages/Cloud/HexioCreator.vue?a691","webpack:///./js/pages/Cloud/HexioCreator.vue","webpack:///./js/pages/Cloud/IbmCreator.vue?c219","webpack:///js/pages/Cloud/IbmCreator.vue","webpack:///./js/pages/Cloud/IbmCreator.vue?ede2","webpack:///./js/pages/Cloud/IbmCreator.vue","webpack:///./js/pages/Cloud/InteliGlueCreator.vue?b57f","webpack:///js/pages/Cloud/InteliGlueCreator.vue","webpack:///./js/pages/Cloud/InteliGlueCreator.vue?6f6b","webpack:///./js/pages/Cloud/InteliGlueCreator.vue","webpack:///./js/pages/Cloud/PixlaControl.vue?a256","webpack:///./js/components/Cloud/PixlaTokenEditor.vue?f421","webpack:///./js/services/PixlaService.ts","webpack:///./js/components/Cloud/PixlaTokenEditor.vue?d80e","webpack:///js/components/Cloud/PixlaTokenEditor.vue","webpack:///./js/components/Cloud/PixlaTokenEditor.vue","webpack:///./js/pages/Cloud/PixlaControl.vue?a718","webpack:///js/pages/Cloud/PixlaControl.vue","webpack:///./js/pages/Cloud/PixlaControl.vue","webpack:///./js/pages/Gateway/GatewayDisambiguation.vue?f226","webpack:///js/pages/Gateway/GatewayDisambiguation.vue","webpack:///./js/pages/Gateway/GatewayDisambiguation.vue?f9bc","webpack:///./js/pages/Gateway/GatewayDisambiguation.vue","webpack:///./js/pages/Gateway/GatewayInfo.vue?9b4f","webpack:///./js/components/Gateway/CoordinatorInfo.vue?f3f9","webpack:///./js/services/IqrfNetService.ts","webpack:///./js/components/Gateway/CoordinatorInfo.vue?67d0","webpack:///js/components/Gateway/CoordinatorInfo.vue","webpack:///./js/components/Gateway/CoordinatorInfo.vue","webpack:///./js/services/DaemonModeService.ts","webpack:///./js/services/GatewayService.ts","webpack:///./js/components/Gateway/ResourceUsage.vue?f00a","webpack:///js/components/Gateway/ResourceUsage.vue","webpack:///./js/components/Gateway/ResourceUsage.vue?8846","webpack:///./js/components/Gateway/ResourceUsage.vue","webpack:///./js/helpers/fileDownloader.ts","webpack:///js/pages/Gateway/GatewayInfo.vue","webpack:///./js/pages/Gateway/GatewayInfo.vue?5831","webpack:///./js/pages/Gateway/GatewayInfo.vue","webpack:///./js/pages/Gateway/DaemonLogViewer.vue?d7a8","webpack:///js/pages/Gateway/DaemonLogViewer.vue","webpack:///./js/pages/Gateway/DaemonLogViewer.vue?9e76","webpack:///./js/pages/Gateway/DaemonLogViewer.vue","webpack:///./js/pages/Gateway/DaemonMode.vue?2593","webpack:///js/pages/Gateway/DaemonMode.vue","webpack:///./js/pages/Gateway/DaemonMode.vue?749b","webpack:///./js/pages/Gateway/DaemonMode.vue","webpack:///./js/pages/Gateway/PowerControl.vue?f2ed","webpack:///./js/pages/Gateway/PowerControl.vue?9468","webpack:///js/pages/Gateway/PowerControl.vue","webpack:///./js/pages/Gateway/PowerControl.vue","webpack:///./js/pages/Gateway/ServiceControl.vue?32a1","webpack:///js/pages/Gateway/ServiceControl.vue","webpack:///./js/pages/Gateway/ServiceControl.vue?454b","webpack:///./js/pages/Gateway/ServiceControl.vue","webpack:///./js/components/SignIn.vue?3504","webpack:///./js/components/SignIn.vue?4876","webpack:///js/components/SignIn.vue","webpack:///./js/components/SignIn.vue","webpack:///./js/pages/IqrfNet/IqrfNetDisambiguation.vue?453b","webpack:///js/pages/IqrfNet/IqrfNetDisambiguation.vue","webpack:///./js/pages/IqrfNet/IqrfNetDisambiguation.vue?2ef5","webpack:///./js/pages/IqrfNet/IqrfNetDisambiguation.vue","webpack:///./js/pages/IqrfNet/NetworkManager.vue?3e3e","webpack:///./js/components/IqrfNet/BondingManager.vue?b8e5","webpack:///./js/helpers/timeout.ts","webpack:///js/components/IqrfNet/BondingManager.vue","webpack:///./js/components/IqrfNet/BondingManager.vue?087d","webpack:///./js/components/IqrfNet/BondingManager.vue","webpack:///./js/components/IqrfNet/DevicesInfo.vue?0c20","webpack:///./js/helpers/Device.ts","webpack:///./js/components/IqrfNet/DeviceIcon.vue?198e","webpack:///js/components/IqrfNet/DeviceIcon.vue","webpack:///./js/components/IqrfNet/DeviceIcon.vue?130e","webpack:///./js/components/IqrfNet/DeviceIcon.vue","webpack:///./js/components/IqrfNet/DevicesInfo.vue?b2d6","webpack:///js/components/IqrfNet/DevicesInfo.vue","webpack:///./js/components/IqrfNet/DevicesInfo.vue","webpack:///./js/components/IqrfNet/DiscoveryManager.vue?38c0","webpack:///js/components/IqrfNet/DiscoveryManager.vue","webpack:///./js/components/IqrfNet/DiscoveryManager.vue?0dd4","webpack:///./js/components/IqrfNet/DiscoveryManager.vue","webpack:///./js/pages/IqrfNet/NetworkManager.vue?3645","webpack:///js/pages/IqrfNet/NetworkManager.vue","webpack:///./js/pages/IqrfNet/NetworkManager.vue","webpack:///./js/pages/IqrfNet/SendJsonRequest.vue?4a6e","webpack:///./js/iqrfNet/sendJson.ts","webpack:///./js/pages/IqrfNet/SendJsonRequest.vue?9619","webpack:///js/pages/IqrfNet/SendJsonRequest.vue","webpack:///./js/pages/IqrfNet/SendJsonRequest.vue","webpack:///./js/pages/IqrfNet/SendDpaPacket.vue?39ea","webpack:///./js/components/IqrfNet/DpaMacros.vue?07ef","webpack:///./js/services/IqrfService.ts","webpack:///./js/components/IqrfNet/DpaMacros.vue?cc29","webpack:///js/components/IqrfNet/DpaMacros.vue","webpack:///./js/components/IqrfNet/DpaMacros.vue","webpack:///./js/iqrfNet/sendPacket.ts","webpack:///./js/pages/IqrfNet/SendDpaPacket.vue?7896","webpack:///js/pages/IqrfNet/SendDpaPacket.vue","webpack:///./js/pages/IqrfNet/SendDpaPacket.vue","webpack:///./js/pages/IqrfNet/StandardManager.vue?03f8","webpack:///./js/components/IqrfNet/BinaryOutputManager.vue?661d","webpack:///./js/services/DaemonApi/StandardBinaryOutputService.ts","webpack:///./js/components/IqrfNet/BinaryOutputManager.vue?7c8b","webpack:///js/components/IqrfNet/BinaryOutputManager.vue","webpack:///./js/components/IqrfNet/BinaryOutputManager.vue","webpack:///./js/components/IqrfNet/DaliManager.vue?6a65","webpack:///./js/services/DaemonApi/StandardDaliService.ts","webpack:///./js/components/IqrfNet/DaliManager.vue?1bd2","webpack:///js/components/IqrfNet/DaliManager.vue","webpack:///./js/components/IqrfNet/DaliManager.vue","webpack:///./js/components/IqrfNet/LightManager.vue?2058","webpack:///./js/services/DaemonApi/StandardLightService.ts","webpack:///./js/components/IqrfNet/LightManager.vue?7cc2","webpack:///js/components/IqrfNet/LightManager.vue","webpack:///./js/components/IqrfNet/LightManager.vue","webpack:///./js/pages/IqrfNet/SensorManager.vue?ab99","webpack:///./js/services/DaemonApi/StandardSensorService.ts","webpack:///./js/pages/IqrfNet/SensorManager.vue?de9c","webpack:///js/pages/IqrfNet/SensorManager.vue","webpack:///./js/pages/IqrfNet/SensorManager.vue","webpack:///./js/pages/IqrfNet/StandardManager.vue?b5ae","webpack:///js/pages/IqrfNet/StandardManager.vue","webpack:///./js/pages/IqrfNet/StandardManager.vue","webpack:///./js/pages/Config/ConfigMigration.vue?3ea5","webpack:///./js/services/ConfigService.ts","webpack:///./js/pages/Config/ConfigMigration.vue?a824","webpack:///js/pages/Config/ConfigMigration.vue","webpack:///./js/pages/Config/ConfigMigration.vue","webpack:///./js/pages/Config/TranslatorConfig.vue?6666","webpack:///./js/pages/Config/TranslatorConfig.vue?93f6","webpack:///js/pages/Config/TranslatorConfig.vue","webpack:///./js/pages/Config/TranslatorConfig.vue","webpack:///./js/pages/Config/ControllerConfig.vue?ee95","webpack:///js/pages/Config/ControllerConfig.vue","webpack:///./js/pages/Config/ControllerConfig.vue?c42f","webpack:///./js/pages/Config/ControllerConfig.vue","webpack:///./js/pages/Config/MenderConfig.vue?32ec","webpack:///js/pages/Config/MenderConfig.vue","webpack:///./js/pages/Config/MenderConfig.vue?9a47","webpack:///./js/pages/Config/MenderConfig.vue","webpack:///./js/pages/Config/IqrfInfo.vue?5ba7","webpack:///js/pages/Config/IqrfInfo.vue","webpack:///./js/pages/Config/IqrfInfo.vue?5da6","webpack:///./js/pages/Config/IqrfInfo.vue","webpack:///./js/pages/Core/UserEdit.vue?0489","webpack:///./js/services/UserService.ts","webpack:///./js/pages/Core/UserEdit.vue?d35f","webpack:///js/pages/Core/UserEdit.vue","webpack:///./js/pages/Core/UserEdit.vue","webpack:///./js/pages/Core/UserList.vue?8456","webpack:///js/pages/Core/UserList.vue","webpack:///./js/pages/Core/UserList.vue?55b2","webpack:///./js/pages/Core/UserList.vue","webpack:///./js/pages/Network/NetworkDisambiguation.vue?870e","webpack:///js/pages/Network/NetworkDisambiguation.vue","webpack:///./js/pages/Network/NetworkDisambiguation.vue?41bb","webpack:///./js/pages/Network/NetworkDisambiguation.vue","webpack:///./js/router/index.ts","webpack:///./js/components/App.vue?728f","webpack:///js/components/App.vue","webpack:///./js/components/App.vue?af37","webpack:///./js/components/App.vue","webpack:///./js/components/LoadingSpinner.vue?e606","webpack:///js/components/LoadingSpinner.vue","webpack:///./js/components/LoadingSpinner.vue?678f","webpack:///./js/components/LoadingSpinner.vue","webpack:///./js/components/TheHeader.vue?22f2","webpack:///./js/components/TheHeader.vue?444a","webpack:///js/components/TheHeader.vue","webpack:///./js/components/TheHeader.vue","webpack:///./js/components/TheSidebar.vue?c3ca","webpack:///./js/components/TheSidebar.vue?e384","webpack:///js/components/TheSidebar.vue","webpack:///./js/components/TheSidebar.vue","webpack:///./js/components/IqrfNet/TrConfiguration.vue?b032","webpack:///./js/components/IqrfNet/AddressChanger.vue?7033","webpack:///js/components/IqrfNet/AddressChanger.vue","webpack:///./js/components/IqrfNet/AddressChanger.vue?e364","webpack:///./js/components/IqrfNet/AddressChanger.vue","webpack:///js/components/IqrfNet/TrConfiguration.vue","webpack:///./js/components/IqrfNet/TrConfiguration.vue?ce66","webpack:///./js/components/IqrfNet/TrConfiguration.vue","webpack:///./js/pages/Cloud/AWSCreator.vue?e418","webpack:///js/pages/Cloud/AWSCreator.vue","webpack:///./js/pages/Cloud/AWSCreator.vue?ecdb","webpack:///./js/pages/Cloud/AWSCreator.vue","webpack:///./js/components/MainDisambiguation.vue?5efa","webpack:///js/components/MainDisambiguation.vue","webpack:///./js/components/MainDisambiguation.vue?888b","webpack:///./js/components/MainDisambiguation.vue","webpack:///./js/components/Config/InterfacePorts.vue?2166","webpack:///js/components/Config/InterfacePorts.vue","webpack:///./js/components/Config/InterfacePorts.vue?9ed8","webpack:///./js/components/Config/InterfacePorts.vue","webpack:///./js/components/Config/InterfaceMappings.vue?7ef1","webpack:///./js/components/Config/InterfaceMappings.vue?ae2f","webpack:///js/components/Config/InterfaceMappings.vue","webpack:///./js/components/Config/InterfaceMappings.vue","webpack:///./js/main.ts","webpack:///./js/components/Gateway/ResourceUsage.vue?04b3","webpack:///./js/components/SignIn.vue?2bf8","webpack:///./js/components/IqrfNet/BinaryOutputManager.vue?705a","webpack:///./js/pages/IqrfNet/SensorManager.vue?ef3d","webpack:///./js/services/FeatureService.ts","webpack:///./js/store/modules/features.module.ts","webpack:///./js/store/modules/sidebar.module.ts","webpack:///./js/store/modules/spinner.module.ts","webpack:///./js/services/AuthenticationService.ts","webpack:///./js/store/modules/user.module.ts","webpack:///./js/store/modules/webSocketClient.module.ts","webpack:///./js/store/index.ts","webpack:///./js/components/LoadingSpinner.vue?6618","webpack:///./js/helpers/authorizationHeader.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","3","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","content","locals","add","default","render","_vm","this","_h","$createElement","_c","_self","attrs","to","staticClass","_v","_s","$t","$store","getters","_e","_withStripped","component","options","__file","color","size","href","scopedSlots","_u","fn","ref","invalid","rules","required","errors","touched","valid","label","model","connectionString","callback","$$v","expression","disabled","on","click","$event","preventDefault","save","saveAndRestart","messages","use","locale","fallbackLocale","FormErrorHandler","cloudError","error","store","commit","response","status","$toast","i18n","toString","console","message","configError","serviceError","CloudService","serviceName","timeout","a","post","headers","authorizationHeader","ServiceService","disable","enable","getStatus","restart","start","stop","address","clientId","requestTopic","responseTopic","username","password","organizationId","deviceType","deviceId","token","eventId","topic","between","integer","type","min","max","port","_n","showEditor","missing","unsupported","enabled","active","target","show","tokenUpdated","getToken","submit","processSubmit","close","proxy","PixlaService","then","setToken","put","info","board","gwId","pixla","versions","controller","daemon","webapp","hostname","_l","getIpAddresses","iface","addresses","getMacAddresses","diskUsages","usage","fsName","fsType","memoryUsage","swapUsage","downloadDiagnostics","hasData","trMcuType","trType","mcuType","osInfo","mid","osVersion","osBuild","enumeration","dpaVer","flags","rfMode","networkType","supplyVoltage","IqrfNetService","autoNetwork","json","discoveryTxPower","discoveryBeforeStart","skipDiscoveryEachWave","actionRetries","stopConditions","waves","emptyWaves","numberOfTotalNodes","numberOfNewNodes","abortOnTooManyNodesFound","overlappingNetworks","assign","req","hwpidFiltering","dispatch","bondLocal","bondSmartConnect","scCode","testRetries","clearAllBonds","coordinatorOnly","removeBond","discovery","txPower","maxAddr","enumerateDevice","getBonded","getDiscovered","ping","addr","sendJson","writeTrConfiguration","configuration","rfBand","deviceAddr","DaemonModeService","set","newMode","GatewayService","getDiagnosticsArchive","responseType","getInfo","getLatestLog","getLogArchive","performPowerOff","performReboot","used","style","width","role","fileDownloader","contentType","fileName","contentDisposition","fileNameMatch","match","blob","Blob","fileUrl","URL","createObjectURL","file","document","createElement","setAttribute","body","appendChild","log","downloadArchive","setMode","powerOff","$options","icon","cilPowerStandby","reboot","cilReload","refreshStatus","md","alt","src","handleSubmit","placeholder","autocomplete","icons","user","lock","updateDevices","bondMethod","requred","$set","checked","useOverlappingNetworks","networks","network","useHwpidFiltering","hwpidFilter","autoAddress","bondingRetries","unbondCoordinatorOnly","processSubmitBond","modalUnbond","modalClear","processSubmitAutoNetwork","title","processSubmitClearAll","processSubmitUnbond","setTimeout","coordinator","unbonded","bonded","discovered","frcPing","timedOut","Array","keys","num","row","col","device","devices","getAddress","Device","online","getIcon","getIconColor","hasLink","class","mType","directives","rawName","request","highlight","highlighter","readonly","StatusMessages","input","packet","addressOverwrite","timeoutOverwrite","setPacket","macros","group","id","placement","$emit","IqrfService","getInterfacePorts","interfaceType","getMacros","__spreadArrays","il","arguments","k","jl","Packet","nadr","pnum","pcmd","hwpid","pdata","detectTimeout","parse","packetArray","split","nadrLo","nadrHi","parseInt","hwpidLo","hwpidHi","map","hex","int","padStart","join","updateNadr","validatePacket","re","RegExp","index","for","state","shape","submitEnumerate","submitGetStates","submitSetState","numOutputs","ind","states","off","StandardBinaryOutputService","enumerate","getOutputs","setOutputs","outputs","commands","removeDaliCommand","addDaliCommand","sendDali","responseReceived","answers","StandardDaliService","send","power","submitGetPower","submitSetPower","submitIncrementPower","submitDecrementPower","numLights","prevPower","StandardLightService","decrementPower","lights","incrementPower","getPower","light","setPower","disabeld","submitReadAll","sensors","unit","StandardSensorService","readAll","isEmpty","configEmpty","firstConfig","importConfig","exportConfig","ConfigService","createConfig","config","getConfig","saveConfig","mqtt","client_id","cid","visibility","changeVisibility","hidden","shown","pw","rest","api_key_r","api_key","ws_addr","wsServers","api","monitor","logger","filePath","severity","apiCallSetCustom","change","updateApiCall","resetButton","button","statusLed","greenLed","redLed","daemonApi","returnVerbose","factoryReset","ServerURL","TenantToken","InventoryPollIntervalSeconds","RetryPollIntervalSeconds","UpdatePollIntervalSeconds","instance","enumAtStartUp","enumPeriod","enumUniformDpaVer","loaded","language","userId","newPassword","oldPassword","UserService","changePassword","old","new","delete","edit","getLoggedIn","list","items","users","fields","paginator","item","changeRole","changeLanguage","confirmDelete","modals","performDelete","routes","SignIn","path","children","CloudDisambiguation","meta","AzureCreator","HexioCreator","IbmCreator","InteliGlueCreator","PixlaControl","GatewayDisambiguation","GatewayInfo","DaemonLogViewer","DaemonMode","PowerControl","ServiceControl","props","IqrfNetDisambiguation","NetworkManager","StandardManager","SendDpaPacket","SendJsonRequest","IqrfInfo","ConfigMigration","MenderConfig","TranslatorConfig","ControllerConfig","NetworkDisambiguation","UserList","UserEdit","route","Number","params","isNaN","metaInfo","titleTemplate","router","beforeEach","from","next","startsWith","titleEl","getElementById","undefined","innerText","text","parts","metaTranslate","remove","flashes","location","replace","fullPath","fixed","signOut","cilLockLocked","minimize","flat","getNav","nativeOn","rfChannelRules","rule","rfChannelValidatorMessages","rfChannelA","rfChannelB","rfSubChannelA","rfSubChannelB","rfAltDsmChannel","stdAndLpNetwork","rxFilter","lpRxTimeout","rfPgmEnableAfterReset","rfPgmTerminateAfter1Min","rfPgmTerminateMcuPin","rfPgmDualChannel","rfPgmLpMode","rfPgmIncorrectUpload","peripherals","peripheral","unchangeablePeripherals","includes","customDpaHandler","dpaHandlerDetected","ioSetup","dpaAutoexec","routingOff","peerToPeer","dpaPeerToPeer","neverSleep","uartBaudrate","uartBaudRates","nodeDpaInterface","changeAddress","endpoint","certEmpty","firstCert","staticStyle","keyEmpty","firstKey","url","ports","setPort","mappings","setMapping","dsn","integrations","Vue","attachProps","logErrors","$appName","wsApi","format","reconnection","position","duration","defaults","baseURL","host","interceptors","Promise","reject","el","components","App","LoadingSpinner","TheHeader","TheSidebar","TrConfiguration","AWSCreator","MainDisambiguation","InterfacePorts","InterfaceMappings","titleChunk","FeatureService","fetchAll","namespaced","features","actions","fetch","_a","isEnabled","e","mutations","SET","toggleSidebarDesktop","sidebarOpened","toggleSidebarMobile","sidebarClosed","variable","HIDE","SHOW","UPDATE_TEXT","AuthenticationService","apiLogin","netteLogin","URLSearchParams","append","login","all","logout","signIn","credentials","responses","apiResponse","catch","isLoggedIn","getId","getName","getRole","SIGN_IN","SIGN_OUT","socket","isConnected","reconnectError","requests","sendRequest","context","msgId","$socket","sendObj","isSocketConnected","SOCKET_ONOPEN","event","currentTarget","SOCKET_ONCLOSE","SOCKET_ONERROR","SOCKET_ONMESSAGE","SOCKET_ONSEND","SOCKET_RECONNECT","count","SOCKET_RECONNECT_ERROR","Store","sidebar","spinner","webSocketClient","plugins"],"mappings":"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C,EAASvH,GAC7B,OAAO4T,YAAW,WACd7M,EAAA,EAAMC,OAAO,gBACb,UAAIG,OAAOL,MAAMM,EAAK7E,EAAEgF,GAASF,cAClCrH,GCmWP,IC1W4M,GD0W5M,CACA,sBACA,YACA,YACA,UACA,cACA,gBACA,UACA,WACA,oBACA,YACA,aACA,uBACA,wBAEA,KAfA,WAgBA,OACA,UACA,eACA,aACA,mBACA,wBACA,yBACA,gBACA,gBACA,QACA,aACA,uBACA,qBACA,8BAGA,qBACA,WACA,WAEA,kBACA,mBACA,iBACA,cACA,eACA,yBACA,UACA,aACA,qBACA,4BAGA,QAhDA,WAgDA,WACA,2BACA,2BACA,4BACA,kCAEA,OADA,4BACA,WAEA,uCAEA,OADA,yMACA,WAEA,oDAOA,GANA,0BACA,kDAGA,oEAEA,4BACA,oDACA,+CAGA,OAFA,wBACA,gCACA,uBACA,OACA,kFACA,MACA,OACA,4FACA,0BACA,MACA,QACA,kGAGA,2DACA,6CAGA,OAFA,wBACA,gCACA,uBACA,OACA,kFACA,MACA,OACA,+BACA,oGAEA,+FAEA,0BACA,MACA,UACA,kGACA,MACA,QACA,qGAGA,iDAEA,OADA,wBACA,uBACA,OACA,gCACA,kFACA,MACA,OACA,6EACA,8BACA,gCACA,gGACA,2BAEA,MACA,QACA,kGAGA,mCACA,wBACA,gCACA,8FAKA,cAtIA,WAuIA,oBAEA,SACA,oBADA,SACA,GACA,6FAEA,yBAJA,WAKA,uBACA,8BACA,gDAEA,uDACA,yFAEA,mCACA,mBAEA,kBAfA,WAgBA,mCACA,0BACA,iBACA,gBAEA,2BAEA,mCACA,iBACA,uDAEA,oEAIA,oBA/BA,WAgCA,oBACA,mCACA,wDAEA,sBApCA,WAqCA,mBACA,mCACA,gDEnhBI,GAAY,YACd,GACA,GJ2oCoB,IIzoCpB,EACA,KACA,KACA,MAuBF,GAAU4E,QAAQC,OAAS,2CACZ,U,QCtCX,GAAS,WACX,IAAIlB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,QACA,CACEA,E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,CACA,kCACA,mBACA,cACA,0BAEA,CACA,kDACA,mCACA,6BACA,0BAEA,CACA,sCACA,uBACA,kBACA,0BAEA,CACA,oCACA,qBACA,4BAIA,CACA,4BACA,6BACA,cACA,iBACA,oBACA,yBACA,OACA,CACA,kCACA,mBACA,iBAEA,CACA,wCACA,wBACA,iBAEA,CACA,gDACA,wBACA,kBAEA,CACA,qCACA,uBACA,0BACA,0BAEA,CACA,qCACA,uBACA,0BACA,0BAEA,CACA,sCACA,wBACA,2BACA,0BAEA,CACA,qCACA,uBACA,0BAEA,CACA,4CACA,8BACA,0BAEA,CACA,sCACA,wBACA,0BAEA,CACA,oCACA,qBACA,iBAEA,CACA,kCACA,mBACA,0BAEA,CACA,uCACA,wBACA,0BAEA,CACA,gCACA,iBACA,0BAEA,CACA,iCACA,kBACA,0BAEA,CACA,wCACA,2BACA,iBAEA,CACA,gDACA,qCACA,0BAEA,CACA,0CACA,4BACA,iBAEA,CACA,uCACA,wBACA,0BAEA,CACA,oCACA,qBACA,0BAEA,CACA,qCACA,sBACA,0BAEA,CACA,uCACA,wBACA,0BAEA,CACA,uCACA,yBACA,gCACA,0BAEA,CACA,uCACA,yBACA,gCACA,0BAEA,CACA,oCACA,qBACA,iBACA,4BAIA,CACA,4BACA,8BACA,eACA,kBACA,oBACA,yBACA,OACA,CACA,yCACA,wBACA,0BAEA,CACA,uCACA,yBACA,0BAEA,CACA,uCACA,yBACA,mBACA,0BAEA,CACA,8CACA,yBACA,0BAEA,CACA,6CACA,uBACA,0BAEA,CACA,uCACA,wBACA,4BAIA,CACA,4BACA,8BACA,eACA,kBACA,yBACA,oBACA,yBACA,OACA,CACA,uCACA,wBACA,4BAIA,CACA,4BACA,4BACA,aACA,gBACA,oBACA,yBACA,OACA,CACA,qCACA,uBACA,0BAEA,CACA,oCACA,mBACA,0BAEA,CACA,sCACA,iBACA,0BAEA,CACA,kCACA,mBACA,0BAEA,CACA,kDACA,yBACA,0BAEA,CACA,kCACA,mBACA,gBACA,4BAIA,CACA,wBACA,mCACA,kEACA,gBACA,kBACA,qBAEA,CACA,4BACA,mCACA,kBACA,oBACA,yBACA,OACA,CACA,4CACA,kEACA,gBACA,0BAEA,CACA,6CACA,wEACA,gBACA,4BAIA,CACA,wBACA,sCACA,sEACA,gBACA,sBACA,qBAEA,CACA,wBACA,gCACA,YACA,oBACA,0BAEA,CACA,wBACA,yCACA,+DACA,gBACA,eACA,wBAKA,oBAyBA,OAxBA,4CACA,yBACA,2DAGA,eACA,oDAGA,UACA,oCACA,yBACA,2DAGA,eACA,mDAGA,EANA,SASA,GAnBA,QAqBA,QCnaI,GAAY,YACd,GACA,GHsCoB,IGpCpB,EACA,KACA,KACA,MAuBF,GAAUE,QAAQC,OAAS,+BACZ,U,QCtCX,GAAS,WACX,IAAIlB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,MACA,CACEA,EAAG,iBAAkB,CAAEE,MAAO,CAAE,kBAAmBN,EAAI6E,WACvD7E,EAAIS,GAAG,KACQ,OAAfT,EAAI4X,OACAxX,EACE,QACA,CACEA,EAAG,cAAe,CAChBJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,qCAEvBX,EAAIS,GAAG,KACPL,EACE,YACA,CACEA,EAAG,qBAAsB,CACvBkB,YAAatB,EAAIuB,GACf,CACE,CACEtC,IAAK,UACLuC,GAAI,SAASC,GACX,IAAIC,EAAUD,EAAIC,QAClB,MAAO,CACLtB,EACE,QACA,CACEmC,GAAI,CACFkE,OAAQ,SAAShE,GAEf,OADAA,EAAOC,iBACA1C,EAAIuO,aAAa9L,MAI9B,CACErC,EACE,OACA,CACEA,EACE,OACA,CAAEE,MAAO,CAAE8N,GAAI,MACf,CACEhO,EAAG,KAAM,CACPJ,EAAIS,GACFT,EAAIU,GACFV,EAAIW,GACF,uCAKRX,EAAIS,GAAG,KACPL,EAAG,UAAW,CACZE,MAAO,CACL0B,MAAOhC,EAAIW,GACT,uCAEFM,QAAS,CACP,CACEtC,MAAO,MACPqD,MAAOhC,EAAIW,GACT,6CAGJ,CACEhC,MAAO,MACPqD,MAAOhC,EAAIW,GACT,6CAGJ,CACEhC,MAAO,MACPqD,MAAOhC,EAAIW,GACT,8CAIN2B,SAAU,QAEZL,MAAO,CACLtD,MAAOqB,EAAI4X,OAAOpM,OAClBrJ,SAAU,SAASC,GACjBpC,EAAIgP,KACFhP,EAAI4X,OACJ,SACAxV,IAGJC,WAAY,mBAGhBrC,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLqB,MAAO3B,EAAIyf,eAAeC,KAC1B,kBACE1f,EAAI2f,4BAERre,YAAatB,EAAIuB,GACf,CACE,CACEtC,IAAK,UACLuC,GAAI,SAASC,GACX,IAAIM,EAAQN,EAAIM,MACZD,EAAUL,EAAIK,QACdD,EAASJ,EAAII,OACjB,MAAO,CACLzB,EAAG,SAAU,CACXE,MAAO,CACL0B,MAAOhC,EAAIW,GACT,2CAEF,WAAYmB,EACRC,EACA,KACJ,mBAAoB/B,EAAIW,GACtBkB,EAAO,IAET8D,KAAM,SACNE,IACE7F,EAAIyf,eACD5Z,IACLD,IACE5F,EAAIyf,eACD7Z,KAEP3D,MAAO,CACLtD,MACEqB,EAAI4X,OACDgI,WACLzd,SAAU,SACRC,GAEApC,EAAIgP,KACFhP,EAAI4X,OACJ,aACA5X,EAAI+F,GAAG3D,KAGXC,WACE,2BAOd,MACA,KAGJrC,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLqB,MAAO3B,EAAIyf,eAAeC,KAC1B,kBACE1f,EAAI2f,4BAERre,YAAatB,EAAIuB,GACf,CACE,CACEtC,IAAK,UACLuC,GAAI,SAASC,GACX,IAAIM,EAAQN,EAAIM,MACZD,EAAUL,EAAIK,QACdD,EAASJ,EAAII,OACjB,MAAO,CACLzB,EAAG,SAAU,CACXE,MAAO,CACL0B,MAAOhC,EAAIW,GACT,2CAEF,WAAYmB,EACRC,EACA,KACJ,mBAAoB/B,EAAIW,GACtBkB,EAAO,IAET8D,KAAM,SACNE,IACE7F,EAAIyf,eACD5Z,IACLD,IACE5F,EAAIyf,eACD7Z,KAEP3D,MAAO,CACLtD,MACEqB,EAAI4X,OACDiI,WACL1d,SAAU,SACRC,GAEApC,EAAIgP,KACFhP,EAAI4X,OACJ,aACA5X,EAAI+F,GAAG3D,KAGXC,WACE,2BAOd,MACA,KAGJrC,EAAIS,GAAG,UACsB+d,IAA7Bxe,EAAI4X,OAAOkI,cACP1f,EAAG,qBAAsB,CACvBE,MAAO,CACLqB,MACE3B,EAAIyf,eAAeC,KACrB,kBACE1f,EAAI2f,4BAERre,YAAatB,EAAIuB,GACf,CACE,CACEtC,IAAK,UACLuC,GAAI,SAASC,GACX,IAAIM,EAAQN,EAAIM,MACZD,EACFL,EAAIK,QACFD,EAASJ,EAAII,OACjB,MAAO,CACLzB,EAAG,SAAU,CACXE,MAAO,CACL0B,MAAOhC,EAAIW,GACT,8CAEF,WAAYmB,EACRC,EACA,KACJ,mBAAoB/B,EAAIW,GACtBkB,EAAO,IAET8D,KAAM,SACNE,IACE7F,EACGyf,eACA5Z,IACLD,IACE5F,EACGyf,eACA7Z,KAEP3D,MAAO,CACLtD,MACEqB,EAAI4X,OACDkI,cACL3d,SAAU,SACRC,GAEApC,EAAIgP,KACFhP,EAAI4X,OACJ,gBACA5X,EAAI+F,GAAG3D,KAGXC,WACE,8BAOd,MACA,KAGJrC,EAAIc,KACRd,EAAIS,GAAG,UACsB+d,IAA7Bxe,EAAI4X,OAAOmI,cACP3f,EAAG,qBAAsB,CACvBE,MAAO,CACLqB,MACE3B,EAAIyf,eAAeC,KACrB,kBACE1f,EAAI2f,4BAERre,YAAatB,EAAIuB,GACf,CACE,CACEtC,IAAK,UACLuC,GAAI,SAASC,GACX,IAAIM,EAAQN,EAAIM,MACZD,EACFL,EAAIK,QACFD,EAASJ,EAAII,OACjB,MAAO,CACLzB,EAAG,SAAU,CACXE,MAAO,CACL0B,MAAOhC,EAAIW,GACT,8CAEF,WAAYmB,EACRC,EACA,KACJ,mBAAoB/B,EAAIW,GACtBkB,EAAO,IAET8D,KAAM,SACNE,IACE7F,EACGyf,eACA5Z,IACLD,IACE5F,EACGyf,eACA7Z,KAEP3D,MAAO,CACLtD,MACEqB,EAAI4X,OACDmI,cACL5d,SAAU,SACRC,GAEApC,EAAIgP,KACFhP,EAAI4X,OACJ,gBACA5X,EAAI+F,GAAG3D,KAGXC,WACE,8BAOd,MACA,KAGJrC,EAAIc,KACRd,EAAIS,GAAG,UAEP+d,IADAxe,EAAI4X,OAAOoI,gBAEP5f,EAAG,qBAAsB,CACvBE,MAAO,CACLqB,MACE3B,EAAIyf,eAAeC,KACrB,kBACE1f,EAAI2f,4BAERre,YAAatB,EAAIuB,GACf,CACE,CACEtC,IAAK,UACLuC,GAAI,SAASC,GACX,IAAIM,EAAQN,EAAIM,MACZD,EACFL,EAAIK,QACFD,EAASJ,EAAII,OACjB,MAAO,CACLzB,EAAG,SAAU,CACXE,MAAO,CACL0B,MAAOhC,EAAIW,GACT,gDAEF,WAAYmB,EACRC,EACA,KACJ,mBAAoB/B,EAAIW,GACtBkB,EAAO,IAET8D,KAAM,SACNE,IACE7F,EACGyf,eACA5Z,IACLD,IACE5F,EACGyf,eACA7Z,KAEP3D,MAAO,CACLtD,MACEqB,EAAI4X,OACDoI,gBACL7d,SAAU,SACRC,GAEApC,EAAIgP,KACFhP,EAAI4X,OACJ,kBACA5X,EAAI+F,GAAG3D,KAGXC,WACE,gCAOd,MACA,KAGJrC,EAAIc,KACRd,EAAIS,GAAG,MACwB,IAA/BT,EAAI4X,OAAOqI,gBACP7f,EACE,SACA,CAAEE,MAAO,CAAEa,MAAO,YAClB,CACEnB,EAAIS,GACF,qBACET,EAAIU,GACFV,EAAIW,GACF,gEAGJ,sBAIRX,EAAIc,KACRd,EAAIS,GAAG,UAEP+d,IADAxe,EAAI4X,OAAOqI,gBAEP7f,EAAG,iBAAkB,CACnBE,MAAO,CACL2O,QACEjP,EAAI4X,OAAOqI,gBACbje,MAAOhC,EAAIW,GACT,iDAGJ4B,GAAI,CACF,iBAAkB,SAChBE,GAEA,OAAOzC,EAAIgP,KACThP,EAAI4X,OACJ,kBACAnV,OAKRzC,EAAIc,KACRd,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLqB,MACE,+BACF,kBAAmB,CACjB8D,QACE,gDACFC,QACE,gDACF9D,SACE,kDAGNN,YAAatB,EAAIuB,GACf,CACE,CACEtC,IAAK,UACLuC,GAAI,SAASC,GACX,IAAIM,EAAQN,EAAIM,MACZD,EAAUL,EAAIK,QACdD,EAASJ,EAAII,OACjB,MAAO,CACLzB,EAAG,SAAU,CACXE,MAAO,CACL0B,MAAOhC,EAAIW,GACT,wCAEF,WAAYmB,EACRC,EACA,KACJ,mBAAoB/B,EAAIW,GACtBkB,EAAO,IAET8D,KAAM,SACNE,IAAK,IACLD,IAAK,KAEP3D,MAAO,CACLtD,MACEqB,EAAI4X,OAAO9M,QACb3I,SAAU,SACRC,GAEApC,EAAIgP,KACFhP,EAAI4X,OACJ,UACA5X,EAAI+F,GAAG3D,KAGXC,WACE,wBAOd,MACA,KAGJrC,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLqB,MACE,gCACF,kBAAmB,CACjB8D,QACE,iDACFC,QACE,iDACF9D,SACE,mDAGNN,YAAatB,EAAIuB,GACf,CACE,CACEtC,IAAK,UACLuC,GAAI,SAASC,GACX,IAAIM,EAAQN,EAAIM,MACZD,EAAUL,EAAIK,QACdD,EAASJ,EAAII,OACjB,MAAO,CACLzB,EAAG,SAAU,CACXE,MAAO,CACL0B,MAAOhC,EAAIW,GACT,yCAEF,WAAYmB,EACRC,EACA,KACJ,mBAAoB/B,EAAIW,GACtBkB,EAAO,IAET8D,KAAM,SACNE,IAAK,KACLD,IAAK,KAEP3D,MAAO,CACLtD,MACEqB,EAAI4X,OAAOsI,SACb/d,SAAU,SACRC,GAEApC,EAAIgP,KACFhP,EAAI4X,OACJ,WACA5X,EAAI+F,GAAG3D,KAGXC,WACE,yBAOd,MACA,KAGJrC,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLqB,MACE,iCACF,kBAAmB,CACjB8D,QACE,oDACFC,QACE,oDACF9D,SACE,sDAGNN,YAAatB,EAAIuB,GACf,CACE,CACEtC,IAAK,UACLuC,GAAI,SAASC,GACX,IAAIM,EAAQN,EAAIM,MACZD,EAAUL,EAAIK,QACdD,EAASJ,EAAII,OACjB,MAAO,CACLzB,EAAG,SAAU,CACXE,MAAO,CACL0B,MAAOhC,EAAIW,GACT,4CAEF,WAAYmB,EACRC,EACA,KACJ,mBAAoB/B,EAAIW,GACtBkB,EAAO,IAET8D,KAAM,UAER1D,MAAO,CACLtD,MACEqB,EAAI4X,OACDuI,YACLhe,SAAU,SACRC,GAEApC,EAAIgP,KACFhP,EAAI4X,OACJ,cACA5X,EAAI+F,GAAG3D,KAGXC,WACE,4BAOd,MACA,KAGJrC,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPJ,EAAIS,GACFT,EAAIU,GACFV,EAAIW,GACF,0CAKRX,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CACnBE,MAAO,CACL2O,QACEjP,EAAI4X,OACDwI,sBACLpe,MAAOhC,EAAIW,GACT,uDAGJ4B,GAAI,CACF,iBAAkB,SAChBE,GAEA,OAAOzC,EAAIgP,KACThP,EAAI4X,OACJ,wBACAnV,OAKRzC,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CACnBE,MAAO,CACL2O,QACEjP,EAAI4X,OACDyI,wBACLre,MAAOhC,EAAIW,GACT,yDAGJ4B,GAAI,CACF,iBAAkB,SAChBE,GAEA,OAAOzC,EAAIgP,KACThP,EAAI4X,OACJ,0BACAnV,OAKRzC,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CACnBE,MAAO,CACL2O,QACEjP,EAAI4X,OAAO0I,qBACbte,MAAOhC,EAAIW,GACT,sDAGJ4B,GAAI,CACF,iBAAkB,SAChBE,GAEA,OAAOzC,EAAIgP,KACThP,EAAI4X,OACJ,uBACAnV,OAKRzC,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CACnBE,MAAO,CACL2O,QACEjP,EAAI4X,OAAO2I,iBACbve,MAAOhC,EAAIW,GACT,kDAGJ4B,GAAI,CACF,iBAAkB,SAChBE,GAEA,OAAOzC,EAAIgP,KACThP,EAAI4X,OACJ,mBACAnV,OAKRzC,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CACnBE,MAAO,CACL2O,QAASjP,EAAI4X,OAAO4I,YACpBxe,MAAOhC,EAAIW,GACT,6CAGJ4B,GAAI,CACF,iBAAkB,SAChBE,GAEA,OAAOzC,EAAIgP,KACThP,EAAI4X,OACJ,cACAnV,OAKRzC,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CACnBE,MAAO,CACL2O,QACEjP,EAAI4X,OAAO6I,qBACbze,MAAOhC,EAAIW,GACT,qDAEF2B,SAAU,QAEZC,GAAI,CACF,iBAAkB,SAChBE,GAEA,OAAOzC,EAAIgP,KACThP,EAAI4X,OACJ,uBACAnV,QAMV,GAEFzC,EAAIS,GAAG,KACPL,EACE,OACA,CAAEE,MAAO,CAAE8N,GAAI,MACf,CACEhO,EAAG,KAAM,CACPJ,EAAIS,GACFT,EAAIU,GACFV,EAAIW,GACF,4DAKRX,EAAIS,GAAG,KACPT,EAAI0H,GAAG1H,EAAI0gB,aAAa,SACtBC,GAEA,OAAOvgB,EAAG,iBAAkB,CAC1BnB,IAAK0hB,EAAWziB,KAChBoC,MAAO,CACL2O,QAAS0R,EAAWxa,QACpB7D,SAAUtC,EAAI4gB,wBAAwBC,SACpCF,EAAWziB,MAEb8D,MAAOhC,EAAIW,GACT,wCACEggB,EAAWziB,OAGjBqE,GAAI,CACF,iBAAkB,SAChBE,GAEA,OAAOzC,EAAIgP,KACT2R,EACA,UACAle,UAMVzC,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPJ,EAAIS,GACFT,EAAIU,GACFV,EAAIW,GACF,8CAKRX,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CACnBE,MAAO,CACL2O,QACEjP,EAAI4X,OAAOkJ,iBACb9e,MAAOhC,EAAIW,GACT,iDAEF2B,UAAWtC,EAAI+gB,oBAEjBxe,GAAI,CACF,iBAAkB,SAChBE,GAEA,OAAOzC,EAAIgP,KACThP,EAAI4X,OACJ,mBACAnV,OAKRzC,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CACnBE,MAAO,CACL2O,QAASjP,EAAI4X,OAAOoJ,QACpBhf,MAAOhC,EAAIW,GACT,yCAGJ4B,GAAI,CACF,iBAAkB,SAChBE,GAEA,OAAOzC,EAAIgP,KACThP,EAAI4X,OACJ,UACAnV,OAKRzC,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CACnBE,MAAO,CACL2O,QAASjP,EAAI4X,OAAOqJ,YACpBjf,MAAOhC,EAAIW,GACT,6CAGJ4B,GAAI,CACF,iBAAkB,SAChBE,GAEA,OAAOzC,EAAIgP,KACThP,EAAI4X,OACJ,cACAnV,OAKRzC,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CACnBE,MAAO,CACL2O,QAASjP,EAAI4X,OAAOsJ,WACpBlf,MAAOhC,EAAIW,GACT,4CAGJ4B,GAAI,CACF,iBAAkB,SAChBE,GAEA,OAAOzC,EAAIgP,KACThP,EAAI4X,OACJ,aACAnV,OAKRzC,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CACnBE,MAAO,CACL2O,QAASjP,EAAI4X,OAAOuJ,WACpBnf,MAAOhC,EAAIW,GACT,4CAGJ4B,GAAI,CACF,iBAAkB,SAChBE,GAEA,OAAOzC,EAAIgP,KACThP,EAAI4X,OACJ,aACAnV,OAKRzC,EAAIS,GAAG,UACsB+d,IAA7Bxe,EAAI4X,OAAOwJ,cACPhhB,EAAG,iBAAkB,CACnBE,MAAO,CACL2O,QACEjP,EAAI4X,OAAOwJ,cACbpf,MAAOhC,EAAIW,GACT,+CAGJ4B,GAAI,CACF,iBAAkB,SAChBE,GAEA,OAAOzC,EAAIgP,KACThP,EAAI4X,OACJ,gBACAnV,OAKRzC,EAAIc,KACRd,EAAIS,GAAG,UACmB+d,IAA1Bxe,EAAI4X,OAAOyJ,WACPjhB,EAAG,iBAAkB,CACnBE,MAAO,CACL2O,QACEjP,EAAI4X,OAAOyJ,WACbrf,MAAOhC,EAAIW,GACT,4CAGJ4B,GAAI,CACF,iBAAkB,SAChBE,GAEA,OAAOzC,EAAIgP,KACThP,EAAI4X,OACJ,aACAnV,OAKRzC,EAAIc,KACRd,EAAIS,GAAG,KACPL,EAAG,UAAW,CACZE,MAAO,CACL3B,MAAOqB,EAAI4X,OAAO0J,aAClBtf,MAAOhC,EAAIW,GACT,6CAEFM,QAASjB,EAAIuhB,eAEfhf,GAAI,CACF,eAAgB,SAASE,GACvB,OAAOzC,EAAIgP,KACThP,EAAI4X,OACJ,eACAnV,OAKRzC,EAAIS,GAAG,UAEP+d,IADAxe,EAAI4X,OAAO4J,iBAEPphB,EAAG,iBAAkB,CACnBE,MAAO,CACL2O,QACEjP,EAAI4X,OAAO4J,iBACbxf,MAAOhC,EAAIW,GACT,kDAGJ4B,GAAI,CACF,iBAAkB,SAChBE,GAEA,OAAOzC,EAAIgP,KACThP,EAAI4X,OACJ,mBACAnV,OAKRzC,EAAIc,MAEV,IAGJ,GAEFd,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CACLa,MAAO,UACPwE,KAAM,SACNrD,SAAUZ,IAGd,CACE1B,EAAIS,GACF,iBACET,EAAIU,GAAGV,EAAIW,GAAG,gBACd,mBAKV,OAMV,MACA,EACA,eAIN,IAGJ,GAEFX,EAAIc,MAEV,IAIJ,GAAOC,eAAgB,ECljCvB,IAAI,GAAS,WACX,IAAIf,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,QACA,CACEA,EAAG,cAAe,CAChBJ,EAAIS,GACF,SAAWT,EAAIU,GAAGV,EAAIW,GAAG,gCAAkC,UAG/DX,EAAIS,GAAG,KACPL,EACE,YACA,CACEA,EAAG,qBAAsB,CACvBkB,YAAatB,EAAIuB,GAAG,CAClB,CACEtC,IAAK,UACLuC,GAAI,SAASC,GACX,IAAIC,EAAUD,EAAIC,QAClB,MAAO,CACLtB,EACE,QACA,CACEmC,GAAI,CACFkE,OAAQ,SAAShE,GAEf,OADAA,EAAOC,iBACA1C,EAAIyhB,cAAchf,MAI/B,CACErC,EAAG,qBAAsB,CACvBE,MAAO,CACLqB,MAAO,iCACP,kBAAmB,CACjB8D,QAAS,yCACTC,QAAS,yCACT9D,SAAU,2CAGdN,YAAatB,EAAIuB,GACf,CACE,CACEtC,IAAK,UACLuC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL3B,EAAG,SAAU,CACXE,MAAO,CACLqF,KAAM,SACNC,IAAK,IACLC,IAAK,MACL7D,MAAOhC,EAAIW,GACT,iCAEF,WAAYmB,EAAUC,EAAQ,KAC9B,mBAAoB/B,EAAIW,GAAGkB,EAAO,KAEpCI,MAAO,CACLtD,MAAOqB,EAAI6E,QACX1C,SAAU,SAASC,GACjBpC,EAAI6E,QAAU7E,EAAI+F,GAAG3D,IAEvBC,WAAY,iBAOxB,MACA,KAGJrC,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CACLa,MAAO,UACPwE,KAAM,SACNrD,SAAUZ,IAGd,CACE1B,EAAIS,GACF,eACET,EAAIU,GAAGV,EAAIW,GAAG,eACd,iBAKV,WAQd,IAGJ,IAIJ,GAAOI,eAAgB,ECxEvB,ICzC4M,GDyC5M,CACA,sBACA,YACA,YACA,UACA,cACA,gBACA,UACA,WACA,uBACA,wBAEA,OACA,gBACA,YACA,cAGA,KAlBA,WAmBA,OACA,eAGA,QAvBA,WAwBA,2BACA,2BACA,4BACA,kCAEA,SACA,cADA,WAEA,yDEjEI,GAAY,YACd,GACA,GHuGoB,IGrGpB,EACA,KACA,KACA,M,qhCAuBF,GAAUE,QAAQC,OAAS,2CCoO3B,ICzQ6M,GDyQ7M,CACA,uBACA,YACA,eDtOe,G,QCuOf,UACA,cACA,gBACA,UACA,WACA,uBACA,wBAEA,OACA,SACA,YACA,cAGA,KAlBA,WAmBA,OACA,YACA,eACA,wBACA,gBACA,sDAGA,UACA,eADA,WAEA,2BACA,UACA,0DACA,UACA,0DACA,UACA,8DAIA,2BAZA,WAaA,SACA,2BACA,UACA,wDACA,MACA,UACA,wDACA,MACA,UACA,wDAGA,OACA,UACA,UACA,aAGA,cA/BA,WA+BA,WAEA,MADA,sDACA,iBACA,OACA,QACA,6EAKA,OACA,oBACA,iBACA,oBACA,eACA,wCACA,mCACA,oCAIA,QA/EA,WA+EA,WACA,2BACA,2BACA,uBACA,uBACA,4BACA,oDACA,4BAGA,OAFA,qCACA,8BAGA,8BAGA,8CAIA,mDACA,uCAJA,qCAOA,wCACA,mCACA,mCAGA,cA3GA,WA4GA,oBAEA,SACA,0BADA,SACA,GACA,qBAGA,OAFA,wCACA,uFAGA,iBACA,8BACA,0DACA,+CACA,8BACA,mCACA,gDACA,0FAGA,aAjBA,WAkBA,8CACA,wCACA,mCACA,yCAEA,oBAvBA,SAuBA,GACA,mCACA,kBACA,0FAEA,yFAGA,uBA/BA,WAgCA,sDAEA,aADA,oBACA,EACA,qBAGA,2CAGA,0CACA,gDAGA,uBACA,OACA,mCAIA,uBAnDA,WAoDA,IADA,EACA,KADA,KAEA,kBAFA,IAEA,0CACA,qBAHA,8BAKA,YExaI,GAAY,YACd,GACA,GPwiCoB,IOtiCpB,EACA,KACA,KACA,M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","file":"main.bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t3: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([184,0,5]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import mod from \"-!../../../node_modules/vue-style-loader/index.js!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ResourceUsage.vue?vue&type=style&index=0&id=6ed3f697&scoped=true&lang=css&\"; export default mod; export * from \"-!../../../node_modules/vue-style-loader/index.js!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ResourceUsage.vue?vue&type=style&index=0&id=6ed3f697&scoped=true&lang=css&\"","import mod from \"-!../../node_modules/vue-style-loader/index.js!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SignIn.vue?vue&type=style&index=0&id=7b84bbc3&scoped=true&lang=css&\"; export default mod; export * from \"-!../../node_modules/vue-style-loader/index.js!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SignIn.vue?vue&type=style&index=0&id=7b84bbc3&scoped=true&lang=css&\"","import mod from \"-!../../../node_modules/vue-style-loader/index.js!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BinaryOutputManager.vue?vue&type=style&index=0&id=1e7284a8&scoped=true&lang=css&\"; export default mod; export * from \"-!../../../node_modules/vue-style-loader/index.js!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BinaryOutputManager.vue?vue&type=style&index=0&id=1e7284a8&scoped=true&lang=css&\"","import mod from \"-!../../../node_modules/vue-style-loader/index.js!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SensorManager.vue?vue&type=style&index=0&id=571486a2&scoped=true&lang=css&\"; export default mod; export * from \"-!../../../node_modules/vue-style-loader/index.js!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SensorManager.vue?vue&type=style&index=0&id=571486a2&scoped=true&lang=css&\"","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../node_modules/mini-css-extract-plugin/dist/loader.js!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js!./app.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"40d34a10\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../node_modules/mini-css-extract-plugin/dist/loader.js!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js!./app.scss\", function() {\n     var newContent = require(\"!!../node_modules/mini-css-extract-plugin/dist/loader.js!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js!./app.scss\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","import mod from \"-!../../node_modules/vue-style-loader/index.js!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LoadingSpinner.vue?vue&type=style&index=0&id=e0752284&scoped=true&lang=scss&\"; export default mod; export * from \"-!../../node_modules/vue-style-loader/index.js!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LoadingSpinner.vue?vue&type=style&index=0&id=e0752284&scoped=true&lang=scss&\"","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\n        \"CListGroup\",\n        [\n          _c(\"CListGroupItem\", { attrs: { to: \"/cloud/ibm-cloud/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"cloud.ibmCloud.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"cloud.ibmCloud.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/cloud/azure/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"cloud.msAzure.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"cloud.msAzure.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/cloud/aws/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"cloud.amazonAws.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"cloud.amazonAws.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/cloud/hexio/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"cloud.hexio.title\")) + \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"cloud.hexio.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/cloud/inteli-glue/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"cloud.intelimentsInteliGlue.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"cloud.intelimentsInteliGlue.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"pixla\")\n            ? _c(\"CListGroupItem\", { attrs: { to: \"/cloud/pixla/\" } }, [\n                _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"cloud.pixla.title\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"cloud.pixla.description\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ])\n              ])\n            : _vm._e()\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CloudDisambiguation.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CloudDisambiguation.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard body-wrapper>\n\t\t<CListGroup>\n\t\t\t<CListGroupItem to='/cloud/ibm-cloud/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('cloud.ibmCloud.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('cloud.ibmCloud.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/cloud/azure/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('cloud.msAzure.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('cloud.msAzure.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/cloud/aws/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('cloud.amazonAws.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('cloud.amazonAws.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/cloud/hexio/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('cloud.hexio.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('cloud.hexio.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/cloud/inteli-glue/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('cloud.intelimentsInteliGlue.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('cloud.intelimentsInteliGlue.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"pixla\")'\n\t\t\t\tto='/cloud/pixla/'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('cloud.pixla.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('cloud.pixla.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t</CListGroup>\n\t</CCard>\n</template>\n\n<script>\nimport {CCard, CListGroup, CListGroupItem} from '@coreui/vue/src';\n\nexport default {\n\tname: 'CloudDisambiguation',\n\tcomponents: {\n\t\tCCard,\n\t\tCListGroup,\n\t\tCListGroupItem\n\t},\n\tmetaInfo: {\n\t\ttitle: 'cloud.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./CloudDisambiguation.vue?vue&type=template&id=6688c9de&\"\nimport script from \"./CloudDisambiguation.vue?vue&type=script&lang=js&\"\nexport * from \"./CloudDisambiguation.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6688c9de')) {\n      api.createRecord('6688c9de', component.options)\n    } else {\n      api.reload('6688c9de', component.options)\n    }\n    module.hot.accept(\"./CloudDisambiguation.vue?vue&type=template&id=6688c9de&\", function () {\n      api.rerender('6688c9de', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Cloud/CloudDisambiguation.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardHeader\",\n        [\n          _c(\n            \"CButton\",\n            {\n              attrs: {\n                color: \"primary\",\n                size: \"sm\",\n                href:\n                  \"https://github.com/iqrfsdk/iot-starter-kit/blob/master/install/pdf/iqrf-part3b.pdf\"\n              }\n            },\n            [_vm._v(\"\\n\\t\\t\\t\" + _vm._s(_vm.$t(\"cloud.guides.pdf\")) + \"\\n\\t\\t\")]\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CButton\",\n            {\n              attrs: {\n                color: \"danger\",\n                size: \"sm\",\n                href: \"https://youtu.be/SIBoTrYwR2g\"\n              }\n            },\n            [\n              _vm._v(\n                \"\\n\\t\\t\\t\" + _vm._s(_vm.$t(\"cloud.guides.video\")) + \"\\n\\t\\t\"\n              )\n            ]\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"cloud.msAzure.form.messages.connectionString\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.msAzure.form.connectionString\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.connectionString,\n                                        callback: function($$v) {\n                                          _vm.connectionString = $$v\n                                        },\n                                        expression: \"connectionString\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"primary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.save($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.saveAndRestart($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.saveRestart\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import Vue from 'vue';\nimport VueI18n from 'vue-i18n';\nvar en = require('./locales/en.json');\nvar messages = {\n    'en': en\n};\nVue.use(VueI18n);\nexport default new VueI18n({\n    locale: 'en',\n    fallbackLocale: 'en',\n    messages: messages\n});\n","import i18n from '../i18n';\nimport store from '../store';\nimport Vue from 'vue';\n/**\n * Form error handler\n */\nvar FormErrorHandler = /** @class */ (function () {\n    function FormErrorHandler() {\n    }\n    /**\n     * Handles Cloud errors\n     * @param error caught axios error\n     */\n    FormErrorHandler.prototype.cloudError = function (error) {\n        store.commit('spinner/HIDE');\n        if (error.response) {\n            if (error.response.status === 400) {\n                Vue.$toast.error(i18n.t('forms.messages.submitBadRequest').toString());\n            }\n            else if (error.response.status) {\n                Vue.$toast.error(i18n.t('forms.messages.submitServerError').toString());\n            }\n        }\n        else {\n            console.error(error.message);\n        }\n    };\n    /**\n     * Handles Config errors\n     * @param error caught axios error\n     */\n    FormErrorHandler.prototype.configError = function (error) {\n        store.commit('spinner/HIDE');\n        if (error.response) {\n            if (error.response.status === 404) {\n                Vue.$toast.error(i18n.t('forms.messages.componentNotFound').toString());\n            }\n            else if (error.response.status === 500) {\n                Vue.$toast.error(i18n.t('forms.messages.submitServerError').toString());\n            }\n        }\n        else {\n            console.error(error.message);\n        }\n    };\n    /**\n     * Handles Service errors\n     * @param error caught axios error\n     */\n    FormErrorHandler.prototype.serviceError = function (error) {\n        store.commit('spinner/HIDE');\n        if (error.response) {\n            if (error.response.status === 400) {\n                Vue.$toast.error(i18n.t('forms.messages.submitBadRequest').toString());\n            }\n            else if (error.response.status === 404) {\n                Vue.$toast.error(i18n.t('service.errors.unsupportedService').toString());\n            }\n            else if (error.response.status === 500) {\n                Vue.$toast.error(i18n.t('service.errors.unsupportedInit').toString());\n            }\n        }\n        else {\n            console.error(error.message);\n        }\n    };\n    return FormErrorHandler;\n}());\nexport default new FormErrorHandler();\n","import axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\n/**\n * Cloud connections service\n */\nvar CloudService = /** @class */ (function () {\n    function CloudService() {\n    }\n    /**\n     * Saves and creates new mqtt cloud connection.\n     * @param serviceName Cloud service name\n     * @param data Cloud connection configuration\n     * @param timeout HTTP timeout\n     */\n    CloudService.prototype.create = function (serviceName, data, timeout) {\n        return axios.post('clouds/' + serviceName, data, { headers: authorizationHeader(), timeout: timeout });\n    };\n    return CloudService;\n}());\nexport default new CloudService();\n","import axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\n/**\n * System service service\n */\nvar ServiceService = /** @class */ (function () {\n    function ServiceService() {\n    }\n    /**\n     * Disables the service\n     * @param name Service name\n     */\n    ServiceService.prototype.disable = function (name) {\n        return axios.post('services/' + name + '/disable', null, { headers: authorizationHeader() });\n    };\n    /**\n     * Enables the service\n     * @param name Service name\n     */\n    ServiceService.prototype.enable = function (name) {\n        return axios.post('services/' + name + '/enable', null, { headers: authorizationHeader() });\n    };\n    /**\n     * Retrieves the service status\n     * @param name Service name\n     */\n    ServiceService.prototype.getStatus = function (name) {\n        return axios.get('services/' + name, { headers: authorizationHeader() });\n    };\n    /**\n     * Restarts the service\n     * @param name Service name\n     */\n    ServiceService.prototype.restart = function (name) {\n        return axios.post('services/' + name + '/restart', null, { headers: authorizationHeader() });\n    };\n    /**\n     * Starts the service\n     * @param name Service name\n     */\n    ServiceService.prototype.start = function (name) {\n        return axios.post('services/' + name + '/start', null, { headers: authorizationHeader() });\n    };\n    /**\n     * Stops the service\n     * @param name Service name\n     */\n    ServiceService.prototype.stop = function (name) {\n        return axios.post('services/' + name + '/stop', null, { headers: authorizationHeader() });\n    };\n    return ServiceService;\n}());\nexport default new ServiceService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AzureCreator.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AzureCreator.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard>\n\t\t<CCardHeader>\n\t\t\t<CButton color='primary' size='sm' href='https://github.com/iqrfsdk/iot-starter-kit/blob/master/install/pdf/iqrf-part3b.pdf'>\n\t\t\t\t{{ $t('cloud.guides.pdf') }}\n\t\t\t</CButton>\n\t\t\t<CButton color='danger' size='sm' href='https://youtu.be/SIBoTrYwR2g'>\n\t\t\t\t{{ $t('cloud.guides.video') }}\n\t\t\t</CButton>\n\t\t</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.msAzure.form.messages.connectionString\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='connectionString'\n\t\t\t\t\t\t\t:label='$t(\"cloud.msAzure.form.connectionString\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CButton color='primary' :disabled='invalid' @click.prevent='save'>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton color='secondary' :disabled='invalid' @click.prevent='saveAndRestart'>\n\t\t\t\t\t\t{{ $t('forms.saveRestart') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {required} from 'vee-validate/dist/rules';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport CloudService from '../../services/CloudService';\nimport ServiceService from '../../services/ServiceService';\n\nexport default {\n\tname: 'AzureCreator',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tconnectionString: null,\n\t\t\tserviceName: 'azure',\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t},\n\tmethods: {\n\t\tsave() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\treturn CloudService.create(this.serviceName, {'connectionString': this.connectionString}, 10000)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(this.$t('cloud.messages.success'));\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.cloudError(error);\n\t\t\t\t\treturn Promise.reject(error);\n\t\t\t\t});\n\t\t},\n\t\tsaveAndRestart() {\n\t\t\tthis.save()\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\t\t\tServiceService.restart('iqrf-gateway-daemon')\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\t\tthis.$toast.success(this.$t('service.iqrf-gateway-daemon.messages.restart'));\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tFormErrorHandler.serviceError(error);\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => {});\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'cloud.msAzure.form.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./AzureCreator.vue?vue&type=template&id=2edb6a8a&\"\nimport script from \"./AzureCreator.vue?vue&type=script&lang=js&\"\nexport * from \"./AzureCreator.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('2edb6a8a')) {\n      api.createRecord('2edb6a8a', component.options)\n    } else {\n      api.reload('2edb6a8a', component.options)\n    }\n    module.hot.accept(\"./AzureCreator.vue?vue&type=template&id=2edb6a8a&\", function () {\n      api.rerender('2edb6a8a', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Cloud/AzureCreator.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"cloud.hexio.form.messages.broker\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.hexio.form.broker\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.address,\n                                        callback: function($$v) {\n                                          _vm.address = $$v\n                                        },\n                                        expression: \"address\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"cloud.hexio.form.messages.clientId\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.hexio.form.clientId\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.clientId,\n                                        callback: function($$v) {\n                                          _vm.clientId = $$v\n                                        },\n                                        expression: \"clientId\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"cloud.hexio.form.messages.topicRequest\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.hexio.form.topicRequest\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.requestTopic,\n                                        callback: function($$v) {\n                                          _vm.requestTopic = $$v\n                                        },\n                                        expression: \"requestTopic\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"cloud.hexio.form.messages.topicResponse\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.hexio.form.topicResponse\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.responseTopic,\n                                        callback: function($$v) {\n                                          _vm.responseTopic = $$v\n                                        },\n                                        expression: \"responseTopic\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"cloud.hexio.form.messages.username\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.hexio.form.username\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.username,\n                                        callback: function($$v) {\n                                          _vm.username = $$v\n                                        },\n                                        expression: \"username\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"cloud.hexio.form.messages.password\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.hexio.form.password\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.password,\n                                        callback: function($$v) {\n                                          _vm.password = $$v\n                                        },\n                                        expression: \"password\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"primary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.save($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.saveAndRestart($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.saveRestart\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.hexio.form.messages.broker\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='address'\n\t\t\t\t\t\t\t:label='$t(\"cloud.hexio.form.broker\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.hexio.form.messages.clientId\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='clientId'\n\t\t\t\t\t\t\t:label='$t(\"cloud.hexio.form.clientId\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.hexio.form.messages.topicRequest\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='requestTopic'\n\t\t\t\t\t\t\t:label='$t(\"cloud.hexio.form.topicRequest\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.hexio.form.messages.topicResponse\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='responseTopic'\n\t\t\t\t\t\t\t:label='$t(\"cloud.hexio.form.topicResponse\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.hexio.form.messages.username\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='username'\n\t\t\t\t\t\t\t:label='$t(\"cloud.hexio.form.username\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.hexio.form.messages.password\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='password'\n\t\t\t\t\t\t\t:label='$t(\"cloud.hexio.form.password\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CButton color='primary' :disabled='invalid' @click.prevent='save'>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton color='secondary' :disabled='invalid' @click.prevent='saveAndRestart'>\n\t\t\t\t\t\t{{ $t('forms.saveRestart') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {required} from 'vee-validate/dist/rules';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport CloudService from '../../services/CloudService';\nimport ServiceService from '../../services/ServiceService';\n\nexport default {\n\tname: 'HexioCreator',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tserviceName: 'hexio',\n\t\t\taddress: 'connect.hexio.cloud',\n\t\t\tclientId: null,\n\t\t\trequestTopic: 'Iqrf/DpaRequest',\n\t\t\tresponseTopic: 'Iqrf/DpaResponse',\n\t\t\tusername: null,\n\t\t\tpassword: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t},\n\tmethods: {\n\t\tbuildConfig() {\n\t\t\treturn {\n\t\t\t\t'broker': this.address,\n\t\t\t\t'clientId': this.clientId,\n\t\t\t\t'topicRequest': this.requestTopic,\n\t\t\t\t'topicResponse': this.responseTopic,\n\t\t\t\t'username': this.username,\n\t\t\t\t'password': this.password,\n\t\t\t};\n\t\t},\n\t\tsave() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tCloudService.create(this.serviceName, this.buildConfig(), 10000)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(this.$t('cloud.messages.success'));\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.cloudError(error);\n\t\t\t\t\treturn Promise.reject(error);\n\t\t\t\t});\n\t\t},\n\t\tsaveAndRestart() {\n\t\t\tthis.save()\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\t\t\tServiceService.restart('iqrf-gateway-daemon')\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\t\tthis.$toast.success(this.$t('service.iqrf-gateway-daemon.messages.restart'));\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tFormErrorHandler.serviceError(error);\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => {});\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'cloud.hexio.form.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./HexioCreator.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./HexioCreator.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./HexioCreator.vue?vue&type=template&id=ea714750&\"\nimport script from \"./HexioCreator.vue?vue&type=script&lang=js&\"\nexport * from \"./HexioCreator.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('ea714750')) {\n      api.createRecord('ea714750', component.options)\n    } else {\n      api.reload('ea714750', component.options)\n    }\n    module.hot.accept(\"./HexioCreator.vue?vue&type=template&id=ea714750&\", function () {\n      api.rerender('ea714750', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Cloud/HexioCreator.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardHeader\",\n        [\n          _c(\n            \"CButton\",\n            {\n              attrs: {\n                color: \"primary\",\n                size: \"sm\",\n                href:\n                  \"https://github.com/iqrfsdk/iot-starter-kit/blob/master/install/pdf/iqrf-part3c.pdf\"\n              }\n            },\n            [_vm._v(\"\\n\\t\\t\\t\" + _vm._s(_vm.$t(\"cloud.guides.pdf\")) + \"\\n\\t\\t\")]\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CButton\",\n            {\n              attrs: {\n                color: \"danger\",\n                size: \"sm\",\n                href: \"https://youtu.be/xoAReOyrkZ4\"\n              }\n            },\n            [\n              _vm._v(\n                \"\\n\\t\\t\\t\" + _vm._s(_vm.$t(\"cloud.guides.video\")) + \"\\n\\t\\t\"\n              )\n            ]\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"cloud.ibmCloud.form.messages.organizationId\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.ibmCloud.form.organizationId\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.organizationId,\n                                        callback: function($$v) {\n                                          _vm.organizationId = $$v\n                                        },\n                                        expression: \"organizationId\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"cloud.ibmCloud.form.messages.deviceType\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.ibmCloud.form.deviceType\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.deviceType,\n                                        callback: function($$v) {\n                                          _vm.deviceType = $$v\n                                        },\n                                        expression: \"deviceType\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"cloud.ibmCloud.form.messages.deviceId\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.ibmCloud.form.deviceId\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.deviceId,\n                                        callback: function($$v) {\n                                          _vm.deviceId = $$v\n                                        },\n                                        expression: \"deviceId\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"cloud.ibmCloud.form.messages.token\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.ibmCloud.form.token\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.token,\n                                        callback: function($$v) {\n                                          _vm.token = $$v\n                                        },\n                                        expression: \"token\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"cloud.ibmCloud.form.messages.eventId\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.ibmCloud.form.eventId\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.eventId,\n                                        callback: function($$v) {\n                                          _vm.eventId = $$v\n                                        },\n                                        expression: \"eventId\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"primary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.save($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.saveAndRestart($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.saveRestart\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardHeader>\n\t\t\t<CButton color='primary' size='sm' href='https://github.com/iqrfsdk/iot-starter-kit/blob/master/install/pdf/iqrf-part3c.pdf'>\n\t\t\t\t{{ $t('cloud.guides.pdf') }}\n\t\t\t</CButton>\n\t\t\t<CButton color='danger' size='sm' href='https://youtu.be/xoAReOyrkZ4'>\n\t\t\t\t{{ $t('cloud.guides.video') }}\n\t\t\t</CButton>\n\t\t</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.ibmCloud.form.messages.organizationId\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='organizationId'\n\t\t\t\t\t\t\t:label='$t(\"cloud.ibmCloud.form.organizationId\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.ibmCloud.form.messages.deviceType\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='deviceType'\n\t\t\t\t\t\t\t:label='$t(\"cloud.ibmCloud.form.deviceType\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.ibmCloud.form.messages.deviceId\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='deviceId'\n\t\t\t\t\t\t\t:label='$t(\"cloud.ibmCloud.form.deviceId\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.ibmCloud.form.messages.token\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='token'\n\t\t\t\t\t\t\t:label='$t(\"cloud.ibmCloud.form.token\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.ibmCloud.form.messages.eventId\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='eventId'\n\t\t\t\t\t\t\t:label='$t(\"cloud.ibmCloud.form.eventId\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CButton color='primary' :disabled='invalid' @click.prevent='save'>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton color='secondary' :disabled='invalid' @click.prevent='saveAndRestart'>\n\t\t\t\t\t\t{{ $t('forms.saveRestart') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {required} from 'vee-validate/dist/rules';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport CloudService from '../../services/CloudService';\nimport ServiceService from '../../services/ServiceService';\n\nexport default {\n\tname: 'IbmCreator',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tserviceName: 'ibmCloud',\n\t\t\torganizationId: null,\n\t\t\tdeviceType: null,\n\t\t\tdeviceId: null,\n\t\t\ttoken: null,\n\t\t\teventId: 'iqrf',\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t},\n\tmethods: {\n\t\tbuildConfig() {\n\t\t\treturn {\n\t\t\t\t'organizationId': this.organizationId,\n\t\t\t\t'deviceType': this.deviceType,\n\t\t\t\t'deviceId': this.deviceId,\n\t\t\t\t'token': this.token,\n\t\t\t\t'eventId': this.eventId\n\t\t\t};\n\t\t},\n\t\tsave() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tCloudService.create(this.serviceName, this.buildConfig(), 10000)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(this.$t('cloud.messages.success'));\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.cloudError(error);\n\t\t\t\t\treturn Promise.reject(error);\n\t\t\t\t});\n\t\t},\n\t\tsaveAndRestart() {\n\t\t\tthis.save()\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\t\t\tServiceService.restart('iqrf-gateway-daemon')\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\t\tthis.$toast.success(this.$t('service.iqrf-gateway-daemon.messages.restart'));\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tFormErrorHandler.serviceError(error);\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => {});\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'cloud.ibmCloud.form.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IbmCreator.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IbmCreator.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./IbmCreator.vue?vue&type=template&id=5f36f6c5&\"\nimport script from \"./IbmCreator.vue?vue&type=script&lang=js&\"\nexport * from \"./IbmCreator.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('5f36f6c5')) {\n      api.createRecord('5f36f6c5', component.options)\n    } else {\n      api.reload('5f36f6c5', component.options)\n    }\n    module.hot.accept(\"./IbmCreator.vue?vue&type=template&id=5f36f6c5&\", function () {\n      api.rerender('5f36f6c5', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Cloud/IbmCreator.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"cloud.intelimentsInteliGlue.form.messages.rootTopic\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.intelimentsInteliGlue.form.rootTopic\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.topic,\n                                        callback: function($$v) {\n                                          _vm.topic = $$v\n                                        },\n                                        expression: \"topic\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required|integer|between:0,65535\",\n                            \"custom-messages\": {\n                              between:\n                                \"cloud.intelimentsInteliGlue.form.messages.assignedPortRange\",\n                              integer:\n                                \"cloud.intelimentsInteliGlue.form.messages.assignedPortRange\",\n                              required:\n                                \"cloud.intelimentsInteliGlue.form.messages.assignedPort\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        max: \"65535\",\n                                        label: _vm.$t(\n                                          \"cloud.intelimentsInteliGlue.form.assignedPort\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.port,\n                                        callback: function($$v) {\n                                          _vm.port = _vm._n($$v)\n                                        },\n                                        expression: \"port\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"cloud.intelimentsInteliGlue.form.messages.clientId\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.intelimentsInteliGlue.form.clientId\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.clientId,\n                                        callback: function($$v) {\n                                          _vm.clientId = $$v\n                                        },\n                                        expression: \"clientId\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"cloud.intelimentsInteliGlue.form.messages.password\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.intelimentsInteliGlue.form.password\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.password,\n                                        callback: function($$v) {\n                                          _vm.password = $$v\n                                        },\n                                        expression: \"password\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"primary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.save($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.saveAndRestart($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.saveRestart\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.intelimentsInteliGlue.form.messages.rootTopic\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='topic'\n\t\t\t\t\t\t\t:label='$t(\"cloud.intelimentsInteliGlue.form.rootTopic\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required|integer|between:0,65535'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tbetween: \"cloud.intelimentsInteliGlue.form.messages.assignedPortRange\",\n\t\t\t\t\t\t\tinteger: \"cloud.intelimentsInteliGlue.form.messages.assignedPortRange\",\n\t\t\t\t\t\t\trequired: \"cloud.intelimentsInteliGlue.form.messages.assignedPort\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='port'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='65535'\n\t\t\t\t\t\t\t:label='$t(\"cloud.intelimentsInteliGlue.form.assignedPort\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.intelimentsInteliGlue.form.messages.clientId\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='clientId'\n\t\t\t\t\t\t\t:label='$t(\"cloud.intelimentsInteliGlue.form.clientId\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.intelimentsInteliGlue.form.messages.password\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='password'\n\t\t\t\t\t\t\t:label='$t(\"cloud.intelimentsInteliGlue.form.password\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CButton color='primary' :disabled='invalid' @click.prevent='save'>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton color='secondary' :disabled='invalid' @click.prevent='saveAndRestart'>\n\t\t\t\t\t\t{{ $t('forms.saveRestart') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {between, integer, required} from 'vee-validate/dist/rules';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport CloudService from '../../services/CloudService';\nimport ServiceService from '../../services/ServiceService';\n\nexport default {\n\tname: 'InteliGlueCreator',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tserviceName: 'inteliGlue',\n\t\t\ttopic: null,\n\t\t\tport: null,\n\t\t\tclientId: null,\n\t\t\tpassword: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t},\n\tmethods: {\n\t\tbuildConfig() {\n\t\t\treturn {\n\t\t\t\t'rootTopic': this.topic,\n\t\t\t\t'assignedPort': this.port,\n\t\t\t\t'clientId': this.clientId,\n\t\t\t\t'password': this.password,\n\t\t\t};\n\t\t},\n\t\tsave() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tCloudService.create(this.serviceName, this.buildConfig(), 10000)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(this.$t('cloud.messages.success'));\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.cloudError(error);\n\t\t\t\t\treturn Promise.reject(error);\n\t\t\t\t});\n\t\t},\n\t\tsaveAndRestart() {\n\t\t\tthis.save()\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\t\t\tServiceService.restart('iqrf-gateway-daemon')\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\t\tthis.$toast.success(this.$t('service.iqrf-gateway-daemon.messages.restart'));\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tFormErrorHandler.serviceError(error);\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => {});\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'cloud.intelimentsInteliGlue.form.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./InteliGlueCreator.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./InteliGlueCreator.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./InteliGlueCreator.vue?vue&type=template&id=041bb1c7&\"\nimport script from \"./InteliGlueCreator.vue?vue&type=script&lang=js&\"\nexport * from \"./InteliGlueCreator.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('041bb1c7')) {\n      api.createRecord('041bb1c7', component.options)\n    } else {\n      api.reload('041bb1c7', component.options)\n    }\n    module.hot.accept(\"./InteliGlueCreator.vue?vue&type=template&id=041bb1c7&\", function () {\n      api.rerender('041bb1c7', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Cloud/InteliGlueCreator.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\"table\", { staticClass: \"table table-striped\" }, [\n        _c(\"tbody\", [\n          _c(\"tr\", [\n            _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"cloud.pixla.token\")))]),\n            _vm._v(\" \"),\n            _c(\n              \"td\",\n              { staticClass: \"d-flex\" },\n              [\n                _c(\"div\", { staticClass: \"mr-auto\" }, [\n                  _vm._v(\"\\n\\t\\t\\t\\t\\t\\t\" + _vm._s(_vm.token) + \"\\n\\t\\t\\t\\t\\t\")\n                ]),\n                _vm._v(\" \"),\n                _c(\n                  \"CButton\",\n                  {\n                    attrs: { color: \"primary\", size: \"sm\" },\n                    on: {\n                      click: function($event) {\n                        _vm.showEditor = true\n                      }\n                    }\n                  },\n                  [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"forms.edit\")) +\n                        \"\\n\\t\\t\\t\\t\\t\"\n                    )\n                  ]\n                )\n              ],\n              1\n            )\n          ]),\n          _vm._v(\" \"),\n          _c(\"tr\", [\n            _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"service.status\")))]),\n            _vm._v(\" \"),\n            _vm.missing\n              ? _c(\"td\", [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"service.states.missing\")) +\n                      \"\\n\\t\\t\\t\\t\"\n                  )\n                ])\n              : _vm._e(),\n            _vm._v(\" \"),\n            _vm.unsupported\n              ? _c(\"td\", [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"service.states.unsupported\")) +\n                      \"\\n\\t\\t\\t\\t\"\n                  )\n                ])\n              : _c(\n                  \"td\",\n                  { staticClass: \"d-flex\" },\n                  [\n                    _c(\"div\", { staticClass: \"mr-auto\" }, [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\\t\\t\" +\n                          _vm._s(\n                            _vm.$t(\n                              \"service.states.\" +\n                                (_vm.enabled ? \"enabled\" : \"disabled\")\n                            )\n                          ) +\n                          \",\\n\\t\\t\\t\\t\\t\\t\" +\n                          _vm._s(\n                            _vm.$t(\n                              \"service.states.\" +\n                                (_vm.active ? \"active\" : \"inactive\")\n                            )\n                          ) +\n                          \"\\n\\t\\t\\t\\t\\t\"\n                      )\n                    ]),\n                    _vm._v(\" \"),\n                    !_vm.enabled\n                      ? _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"success\", size: \"sm\" },\n                            on: {\n                              click: function($event) {\n                                return _vm.enable()\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"service.actions.enable\")) +\n                                \"\\n\\t\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    _vm.enabled\n                      ? _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"danger\", size: \"sm\" },\n                            on: {\n                              click: function($event) {\n                                return _vm.disable()\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"service.actions.disable\")) +\n                                \"\\n\\t\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      : _vm._e()\n                  ],\n                  1\n                )\n          ])\n        ])\n      ]),\n      _vm._v(\" \"),\n      !_vm.missing && !_vm.unsupported\n        ? _c(\n            \"div\",\n            [\n              _c(\n                \"CButton\",\n                {\n                  attrs: {\n                    color: \"primary\",\n                    href: \"https://www.pixla.online/\",\n                    target: \"_blank\"\n                  }\n                },\n                [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"cloud.pixla.dashboard\")) +\n                      \"\\n\\t\\t\"\n                  )\n                ]\n              )\n            ],\n            1\n          )\n        : _vm._e(),\n      _vm._v(\" \"),\n      _c(\"PixlaTokenEditor\", {\n        attrs: { show: _vm.showEditor },\n        on: {\n          \"update:show\": function($event) {\n            _vm.showEditor = $event\n          },\n          tokenUpdated: _vm.getToken\n        }\n      })\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"ValidationObserver\", {\n    scopedSlots: _vm._u([\n      {\n        key: \"default\",\n        fn: function(ref) {\n          var invalid = ref.invalid\n          return [\n            _c(\n              \"CForm\",\n              {\n                on: {\n                  submit: function($event) {\n                    $event.preventDefault()\n                    return _vm.processSubmit($event)\n                  }\n                }\n              },\n              [\n                _c(\n                  \"CModal\",\n                  {\n                    attrs: { color: \"primary\", show: _vm.show },\n                    on: {\n                      \"update:show\": function($event) {\n                        _vm.show = $event\n                      }\n                    },\n                    scopedSlots: _vm._u(\n                      [\n                        {\n                          key: \"header\",\n                          fn: function() {\n                            return [\n                              _c(\"h5\", { staticClass: \"modal-title\" }, [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\" +\n                                    _vm._s(\n                                      _vm.$t(\"cloud.pixla.editModal.title\")\n                                    ) +\n                                    \"\\n\\t\\t\\t\\t\"\n                                )\n                              ]),\n                              _vm._v(\" \"),\n                              _c(\"CButtonClose\", {\n                                staticClass: \"text-white\",\n                                on: { click: _vm.close }\n                              })\n                            ]\n                          },\n                          proxy: true\n                        },\n                        {\n                          key: \"footer\",\n                          fn: function() {\n                            return [\n                              _c(\n                                \"CButton\",\n                                {\n                                  attrs: { color: \"danger\" },\n                                  on: { click: _vm.close }\n                                },\n                                [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t\\t\\t\" +\n                                      _vm._s(_vm.$t(\"forms.cancel\")) +\n                                      \"\\n\\t\\t\\t\\t\"\n                                  )\n                                ]\n                              ),\n                              _vm._v(\" \"),\n                              _c(\n                                \"CButton\",\n                                {\n                                  attrs: {\n                                    color: \"success\",\n                                    type: \"submit\",\n                                    disabled: invalid\n                                  }\n                                },\n                                [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t\\t\\t\" +\n                                      _vm._s(_vm.$t(\"forms.edit\")) +\n                                      \"\\n\\t\\t\\t\\t\"\n                                  )\n                                ]\n                              )\n                            ]\n                          },\n                          proxy: true\n                        }\n                      ],\n                      null,\n                      true\n                    )\n                  },\n                  [\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required\",\n                        \"custom-messages\": {\n                          required: \"cloud.pixla.editModal.messages.token\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\n                                      \"cloud.pixla.editModal.token\"\n                                    ),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0])\n                                  },\n                                  model: {\n                                    value: _vm.token,\n                                    callback: function($$v) {\n                                      _vm.token = $$v\n                                    },\n                                    expression: \"token\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    })\n                  ],\n                  1\n                )\n              ],\n              1\n            )\n          ]\n        }\n      }\n    ])\n  })\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\n/**\n * PIXLA management service\n */\nvar PixlaService = /** @class */ (function () {\n    function PixlaService() {\n    }\n    /**\n     * Retrieves the device token\n     */\n    PixlaService.prototype.getToken = function () {\n        return axios.get('pixla', { headers: authorizationHeader() })\n            .then(function (response) {\n            return response.data.token;\n        });\n    };\n    /**\n     * Sets the new device token\n     * @param token Net token to set\n     */\n    PixlaService.prototype.setToken = function (token) {\n        return axios.put('pixla', { token: token }, { headers: authorizationHeader() });\n    };\n    return PixlaService;\n}());\nexport default new PixlaService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PixlaTokenEditor.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PixlaTokenEditor.vue?vue&type=script&lang=js&\"","<template>\n\t<ValidationObserver v-slot='{ invalid }'>\n\t\t<CForm @submit.prevent='processSubmit'>\n\t\t\t<CModal\n\t\t\t\tcolor='primary'\n\t\t\t\t:show.sync='show'\n\t\t\t>\n\t\t\t\t<template #header>\n\t\t\t\t\t<h5 class='modal-title'>\n\t\t\t\t\t\t{{ $t('cloud.pixla.editModal.title') }}\n\t\t\t\t\t</h5>\n\t\t\t\t\t<CButtonClose class='text-white' @click='close' />\n\t\t\t\t</template>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\trequired: \"cloud.pixla.editModal.messages.token\"\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='token'\n\t\t\t\t\t\t:label='$t(\"cloud.pixla.editModal.token\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<template #footer>\n\t\t\t\t\t<CButton color='danger' @click='close'>\n\t\t\t\t\t\t{{ $t('forms.cancel') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton color='success' type='submit' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.edit') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</template>\n\t\t\t</CModal>\n\t\t</CForm>\n\t</ValidationObserver>\n</template>\n\n<script>\nimport {CButton, CForm, CInput, CModal} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {required} from 'vee-validate/dist/rules';\nimport PixlaService from '../../services/PixlaService';\n\nexport default {\n\tname: 'PixlaTokenEditor',\n\tcomponents: {\n\t\tCButton,\n\t\tCForm,\n\t\tCInput,\n\t\tCModal,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tprops: {\n\t\tshow: {\n\t\t\ttype: Boolean,\n\t\t\trequired: true,\n\t\t}\n\t},\n\tdata() {\n\t\treturn {\n\t\t\ttoken: '',\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t},\n\tmethods: {\n\t\tclose() {\n\t\t\tthis.$emit('update:show', false);\n\t\t},\n\t\tprocessSubmit() {\n\t\t\tPixlaService.setToken(this.token)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.token = null;\n\t\t\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\t\t\tthis.$emit('update:show', false);\n\t\t\t\t\tthis.$emit('tokenUpdated');\n\t\t\t\t\tthis.$toast.success(this.$t('cloud.pixla.editModal.messages.success').toString());\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tthis.$toast.error(this.$t('cloud.pixla.editModal.messages.failure').toString());\n\t\t\t\t});\n\t\t}\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./PixlaTokenEditor.vue?vue&type=template&id=6ca8028d&\"\nimport script from \"./PixlaTokenEditor.vue?vue&type=script&lang=js&\"\nexport * from \"./PixlaTokenEditor.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6ca8028d')) {\n      api.createRecord('6ca8028d', component.options)\n    } else {\n      api.reload('6ca8028d', component.options)\n    }\n    module.hot.accept(\"./PixlaTokenEditor.vue?vue&type=template&id=6ca8028d&\", function () {\n      api.rerender('6ca8028d', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/Cloud/PixlaTokenEditor.vue\"\nexport default component.exports","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PixlaControl.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PixlaControl.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard body-wrapper>\n\t\t<table class='table table-striped'>\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>{{ $t('cloud.pixla.token') }}</th>\n\t\t\t\t\t<td class='d-flex'>\n\t\t\t\t\t\t<div class='mr-auto'>\n\t\t\t\t\t\t\t{{ token }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<CButton color='primary' size='sm' @click='showEditor = true'>\n\t\t\t\t\t\t\t{{ $t('forms.edit') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>{{ $t('service.status') }}</th>\n\t\t\t\t\t<td v-if='missing'>\n\t\t\t\t\t\t{{ $t('service.states.missing') }}\n\t\t\t\t\t</td>\n\t\t\t\t\t<td v-if='unsupported'>\n\t\t\t\t\t\t{{ $t('service.states.unsupported') }}\n\t\t\t\t\t</td>\n\t\t\t\t\t<td v-else class='d-flex'>\n\t\t\t\t\t\t<div class='mr-auto'>\n\t\t\t\t\t\t\t{{ $t('service.states.' + (enabled ? 'enabled' : 'disabled')) }},\n\t\t\t\t\t\t\t{{ $t('service.states.' + (active ? 'active' : 'inactive')) }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\tv-if='!enabled'\n\t\t\t\t\t\t\tcolor='success'\n\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t@click='enable()'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ $t('service.actions.enable') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\tv-if='enabled'\n\t\t\t\t\t\t\tcolor='danger'\n\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t@click='disable()'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ $t('service.actions.disable') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t\t<div v-if='!missing && !unsupported'>\n\t\t\t<CButton color='primary' href='https://www.pixla.online/' target='_blank'>\n\t\t\t\t{{ $t('cloud.pixla.dashboard') }}\n\t\t\t</CButton>\n\t\t</div>\n\t\t<PixlaTokenEditor :show.sync='showEditor' @tokenUpdated='getToken' />\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard} from '@coreui/vue/src';\nimport PixlaTokenEditor from '../../components/Cloud/PixlaTokenEditor';\nimport PixlaService from '../../services/PixlaService';\nimport ServiceService from '../../services/ServiceService';\n\nexport default {\n\tname: 'PixlaControl',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tPixlaTokenEditor,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tshowEditor: false,\n\t\t\tserviceName: 'gwman-client',\n\t\t\ttoken: null,\n\t\t\tactive: false,\n\t\t\tenabled: false,\n\t\t\tmissing: false,\n\t\t\tstatus: null,\n\t\t\tunsupported: false,\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.$store.commit('spinner/SHOW');\n\t\tthis.getToken();\n\t\tthis.getStatus();\n\t},\n\tmethods: {\n\t\tenable() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.enable(this.serviceName)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getStatus();\n\t\t\t\t\tthis.$toast.success(this.$t('service.' + this.serviceName + '.messages.enable'));\n\t\t\t\t})\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\tdisable() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.disable(this.serviceName)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getStatus();\n\t\t\t\t\tthis.$toast.success(this.$t('service.' + this.serviceName + '.messages.disable'));\n\t\t\t\t})\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\tgetStatus() {\n\t\t\tServiceService.getStatus(this.serviceName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.unsupported = false;\n\t\t\t\t\tthis.active = response.data.active;\n\t\t\t\t\tthis.enabled = response.data.enabled;\n\t\t\t\t\tthis.status = response.data.status;\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t})\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\tgetToken() {\n\t\t\tPixlaService.getToken()\n\t\t\t\t.then((token) => {\n\t\t\t\t\tthis.token = token;\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tthis.token = null;\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t});\n\t\t},\n\t\thandleError(error) {\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tlet response = error.response;\n\t\t\tif (response.status === 404) {\n\t\t\t\tthis.missing = true;\n\t\t\t\tthis.$toast.error(this.$t('service.errors.missingService'));\n\t\t\t}\n\t\t\tif (response.status === 500 &&\n\t\t\t\t\tresponse.data.message === 'Unsupported init system') {\n\t\t\t\tthis.unsupported = false;\n\t\t\t\tthis.$toast.error(this.$t('service.errors.unsupportedInit'));\n\t\t\t}\n\t\t},\n\t\trestart() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.restart(this.serviceName)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getStatus();\n\t\t\t\t\tthis.$toast.success(this.$t('service.' + this.serviceName + '.messages.restart'));\n\t\t\t\t})\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\tstart() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.start(this.serviceName)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getStatus();\n\t\t\t\t\tthis.$toast.success(this.$t('service.' + this.serviceName + '.messages.start'));\n\t\t\t\t})\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\tstop() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.stop(this.serviceName)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getStatus();\n\t\t\t\t\tthis.$toast.success(this.$t('service.' + this.serviceName + '.messages.stop'));\n\t\t\t\t})\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./PixlaControl.vue?vue&type=template&id=03b6e156&\"\nimport script from \"./PixlaControl.vue?vue&type=script&lang=js&\"\nexport * from \"./PixlaControl.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('03b6e156')) {\n      api.createRecord('03b6e156', component.options)\n    } else {\n      api.reload('03b6e156', component.options)\n    }\n    module.hot.accept(\"./PixlaControl.vue?vue&type=template&id=03b6e156&\", function () {\n      api.rerender('03b6e156', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Cloud/PixlaControl.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\n        \"CListGroup\",\n        [\n          _c(\"CListGroupItem\", { attrs: { to: \"/gateway/info/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"gateway.info.title\")) + \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"gateway.info.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/gateway/log/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"gateway.log.title\")) + \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"gateway.log.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/gateway/change-mode/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"gateway.mode.title\")) + \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"gateway.mode.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\n            \"CListGroupItem\",\n            { attrs: { to: \"/service/iqrf-gateway-daemon/\" } },\n            [\n              _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                _vm._v(\n                  \"\\n\\t\\t\\t\\t\" +\n                    _vm._s(_vm.$t(\"service.iqrf-gateway-daemon.title\")) +\n                    \"\\n\\t\\t\\t\"\n                )\n              ]),\n              _vm._v(\" \"),\n              _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                _vm._v(\n                  \"\\n\\t\\t\\t\\t\" +\n                    _vm._s(_vm.$t(\"service.iqrf-gateway-daemon.description\")) +\n                    \"\\n\\t\\t\\t\"\n                )\n              ])\n            ]\n          ),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"ssh\")\n            ? _c(\"CListGroupItem\", { attrs: { to: \"/service/ssh/\" } }, [\n                _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"service.ssh.title\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"service.ssh.description\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ])\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"unattendedUpgrades\")\n            ? _c(\n                \"CListGroupItem\",\n                { attrs: { to: \"/service/unattended-upgrades/\" } },\n                [\n                  _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"service.unattended-upgrades.title\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\"service.unattended-upgrades.description\")\n                        ) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"updater\")\n            ? _c(\"CListGroupItem\", { attrs: { to: \"/gateway/updater/\" } }, [\n                _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"gateway.updater.title\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"gateway.updater.description\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ])\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/gateway/power/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"gateway.power.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"gateway.power.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ])\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<CListGroup>\n\t\t\t<CListGroupItem to='/gateway/info/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('gateway.info.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('gateway.info.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/gateway/log/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('gateway.log.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('gateway.log.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/gateway/change-mode/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('gateway.mode.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('gateway.mode.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/service/iqrf-gateway-daemon/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('service.iqrf-gateway-daemon.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('service.iqrf-gateway-daemon.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"ssh\")'\n\t\t\t\tto='/service/ssh/'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('service.ssh.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('service.ssh.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"unattendedUpgrades\")'\n\t\t\t\tto='/service/unattended-upgrades/'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('service.unattended-upgrades.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('service.unattended-upgrades.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"updater\")'\n\t\t\t\tto='/gateway/updater/'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('gateway.updater.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('gateway.updater.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/gateway/power/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('gateway.power.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('gateway.power.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t</CListGroup>\n\t</CCard>\n</template>\n\n<script>\nimport {CCard, CListGroup, CListGroupItem} from '@coreui/vue/src';\n\nexport default {\n\tname: 'GatewayDisambiguation',\n\tcomponents: {\n\t\tCCard,\n\t\tCListGroup,\n\t\tCListGroupItem\n\t},\n\tmetaInfo: {\n\t\ttitle: 'gateway.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GatewayDisambiguation.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GatewayDisambiguation.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GatewayDisambiguation.vue?vue&type=template&id=3b6d1b7c&\"\nimport script from \"./GatewayDisambiguation.vue?vue&type=script&lang=js&\"\nexport * from \"./GatewayDisambiguation.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('3b6d1b7c')) {\n      api.createRecord('3b6d1b7c', component.options)\n    } else {\n      api.reload('3b6d1b7c', component.options)\n    }\n    module.hot.accept(\"./GatewayDisambiguation.vue?vue&type=template&id=3b6d1b7c&\", function () {\n      api.rerender('3b6d1b7c', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Gateway/GatewayDisambiguation.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _vm.info !== null\n        ? _c(\"table\", { staticClass: \"table table-striped\" }, [\n            _c(\"tbody\", [\n              _c(\"tr\", [\n                _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.board\")))]),\n                _vm._v(\" \"),\n                _c(\"td\", [_vm._v(_vm._s(_vm.info.board))])\n              ]),\n              _vm._v(\" \"),\n              _vm.info.gwId\n                ? _c(\"tr\", [\n                    _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.gwId\")))]),\n                    _vm._v(\" \"),\n                    _c(\"td\", [_vm._v(_vm._s(_vm.info.gwId))])\n                  ])\n                : _vm._e(),\n              _vm._v(\" \"),\n              _vm.info.pixla\n                ? _c(\"tr\", [\n                    _c(\"th\", [\n                      _c(\n                        \"a\",\n                        { attrs: { href: \"https://www.pixla.online/\" } },\n                        [\n                          _vm._v(\n                            \"\\n\\t\\t\\t\\t\\t\\t\" +\n                              _vm._s(_vm.$t(\"gateway.info.gwmonId\")) +\n                              \"\\n\\t\\t\\t\\t\\t\"\n                          )\n                        ]\n                      )\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"td\", [_vm._v(_vm._s(_vm.info.pixla))])\n                  ])\n                : _vm._e(),\n              _vm._v(\" \"),\n              _vm.info.versions.controller\n                ? _c(\"tr\", [\n                    _c(\"th\", [\n                      _vm._v(\n                        _vm._s(\n                          _vm.$t(\"gateway.info.version.iqrfGatewayController\")\n                        )\n                      )\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"td\", [_vm._v(_vm._s(_vm.info.versions.controller))])\n                  ])\n                : _vm._e(),\n              _vm._v(\" \"),\n              _c(\"tr\", [\n                _c(\"th\", [\n                  _vm._v(\n                    _vm._s(_vm.$t(\"gateway.info.version.iqrfGatewayDaemon\"))\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"td\", [_vm._v(_vm._s(_vm.info.versions.daemon))])\n              ]),\n              _vm._v(\" \"),\n              _c(\"tr\", [\n                _c(\"th\", [\n                  _vm._v(\n                    _vm._s(_vm.$t(\"gateway.info.version.iqrfGatewayWebapp\"))\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"td\", [_vm._v(_vm._s(_vm.info.versions.webapp))])\n              ]),\n              _vm._v(\" \"),\n              _c(\"tr\", [\n                _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.hostname\")))]),\n                _vm._v(\" \"),\n                _c(\"td\", [_vm._v(_vm._s(_vm.info.hostname))])\n              ]),\n              _vm._v(\" \"),\n              _c(\"tr\", [\n                _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.addresses.ip\")))]),\n                _vm._v(\" \"),\n                _c(\n                  \"td\",\n                  _vm._l(_vm.getIpAddresses, function(ref) {\n                    var iface = ref.iface\n                    var addresses = ref.addresses\n                    return _c(\"span\", { key: iface }, [\n                      _c(\"strong\", [_vm._v(_vm._s(iface) + \": \")]),\n                      _vm._v(\" \" + _vm._s(addresses)),\n                      _c(\"br\")\n                    ])\n                  }),\n                  0\n                )\n              ]),\n              _vm._v(\" \"),\n              _c(\"tr\", [\n                _c(\"th\", [\n                  _vm._v(_vm._s(_vm.$t(\"gateway.info.addresses.mac\")))\n                ]),\n                _vm._v(\" \"),\n                _c(\n                  \"td\",\n                  _vm._l(_vm.getMacAddresses, function(ref) {\n                    var iface = ref.iface\n                    var address = ref.address\n                    return _c(\"span\", { key: iface }, [\n                      _c(\"strong\", [_vm._v(_vm._s(iface) + \": \")]),\n                      _vm._v(\" \" + _vm._s(address)),\n                      _c(\"br\")\n                    ])\n                  }),\n                  0\n                )\n              ]),\n              _vm._v(\" \"),\n              _c(\"tr\", [\n                _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.usages.disks\")))]),\n                _vm._v(\" \"),\n                _c(\n                  \"td\",\n                  _vm._l(_vm.info.diskUsages, function(usage) {\n                    return _c(\n                      \"div\",\n                      { key: usage.fsName },\n                      [\n                        _c(\"strong\", [\n                          _vm._v(\n                            _vm._s(usage.fsName) +\n                              \" (\" +\n                              _vm._s(usage.fsType) +\n                              \"):\"\n                          )\n                        ]),\n                        _vm._v(\" \"),\n                        _c(\"resource-usage\", { attrs: { usage: usage } }),\n                        _c(\"br\")\n                      ],\n                      1\n                    )\n                  }),\n                  0\n                )\n              ]),\n              _vm._v(\" \"),\n              _c(\"tr\", [\n                _c(\"th\", [\n                  _vm._v(_vm._s(_vm.$t(\"gateway.info.usages.memory\")))\n                ]),\n                _vm._v(\" \"),\n                _c(\n                  \"td\",\n                  [\n                    _c(\"resource-usage\", {\n                      attrs: { usage: _vm.info.memoryUsage }\n                    })\n                  ],\n                  1\n                )\n              ]),\n              _vm._v(\" \"),\n              _vm.info.swapUsage\n                ? _c(\"tr\", [\n                    _c(\"th\", [\n                      _vm._v(_vm._s(_vm.$t(\"gateway.info.usages.swap\")))\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\n                      \"td\",\n                      [\n                        _c(\"resource-usage\", {\n                          attrs: { usage: _vm.info.swapUsage }\n                        })\n                      ],\n                      1\n                    )\n                  ])\n                : _vm._e(),\n              _vm._v(\" \"),\n              _c(\"tr\", [\n                _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.tr.title\")))]),\n                _vm._v(\" \"),\n                _c(\"td\", [_c(\"coordinator-info\")], 1)\n              ]),\n              _vm._v(\" \"),\n              _c(\"tr\", [\n                _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.gwMode\")))]),\n                _vm._v(\" \"),\n                _c(\"td\", [\n                  _vm._v(_vm._s(_vm.$t(\"gateway.mode.modes.\" + _vm.mode)))\n                ])\n              ])\n            ])\n          ])\n        : _vm._e(),\n      _vm._v(\" \"),\n      _c(\n        \"CButton\",\n        {\n          attrs: { color: \"primary\" },\n          on: {\n            click: function($event) {\n              return _vm.downloadDiagnostics()\n            }\n          }\n        },\n        [\n          _vm._v(\n            \"\\n\\t\\t\" + _vm._s(_vm.$t(\"gateway.diagnostics.download\")) + \"\\n\\t\"\n          )\n        ]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.hasData\n    ? _c(\"span\", [\n        _c(\"strong\", [\n          _vm._v(_vm._s(_vm.$t(\"gateway.info.tr.moduleType\")) + \": \")\n        ]),\n        _vm._v(\"\\n\\t\" + _vm._s(_vm.trMcuType.trType)),\n        _c(\"br\"),\n        _vm._v(\" \"),\n        _c(\"strong\", [\n          _vm._v(_vm._s(_vm.$t(\"gateway.info.tr.mcuType\")) + \": \")\n        ]),\n        _vm._v(\"\\n\\t\" + _vm._s(_vm.trMcuType.mcuType)),\n        _c(\"br\"),\n        _vm._v(\" \"),\n        _c(\"strong\", [\n          _vm._v(_vm._s(_vm.$t(\"gateway.info.tr.moduleId\")) + \": \")\n        ]),\n        _vm._v(\" \" + _vm._s(_vm.osInfo.mid)),\n        _c(\"br\"),\n        _vm._v(\" \"),\n        _c(\"strong\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.tr.os\")) + \": \")]),\n        _vm._v(\n          \"\\n\\t\" +\n            _vm._s(_vm.osInfo.osVersion) +\n            \" (\" +\n            _vm._s(_vm.osInfo.osBuild) +\n            \")\"\n        ),\n        _c(\"br\"),\n        _vm._v(\" \"),\n        _c(\"strong\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.tr.dpa\")) + \": \")]),\n        _vm._v(\"\\n\\t\" + _vm._s(_vm.enumeration.dpaVer)),\n        _c(\"br\"),\n        _vm._v(\" \"),\n        _vm.enumeration.flags.rfMode\n          ? _c(\"span\", [\n              _c(\"strong\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.tr.rfMode\")))]),\n              _vm._v(\"\\n\\t\\t\" + _vm._s(_vm.enumeration.flags.rfMode) + \"\\n\\t\")\n            ])\n          : _vm.enumeration.flags.networkType\n          ? _c(\"span\", [\n              _c(\"strong\", [\n                _vm._v(_vm._s(_vm.$t(\"gateway.info.tr.networkType\")))\n              ]),\n              _vm._v(\n                \"\\n\\t\\t\" + _vm._s(_vm.enumeration.flags.networkType) + \"\\n\\t\"\n              )\n            ])\n          : _vm._e(),\n        _vm._v(\" \"),\n        _c(\"strong\", [\n          _vm._v(_vm._s(_vm.$t(\"gateway.info.tr.voltage\")) + \": \")\n        ]),\n        _vm._v(\"\\n\\t\" + _vm._s(_vm.osInfo.supplyVoltage)),\n        _c(\"br\")\n      ])\n    : _c(\"span\", [\n        _vm._v(\"\\n\\t\" + _vm._s(_vm.$t(\"gateway.info.tr.error\")) + \"\\n\")\n      ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import store from '../store';\n/**\n * IQRF Network service\n */\nvar IqrfNetService = /** @class */ (function () {\n    function IqrfNetService() {\n    }\n    /**\n     * Performs AutoNetwork\n     * @param autoNetwork Object containing AutoNetwork parameters\n     */\n    IqrfNetService.prototype.autoNetwork = function (autoNetwork) {\n        var json = {\n            'mType': 'iqmeshNetwork_AutoNetwork',\n            'data': {\n                'req': {\n                    'discoveryTxPower': autoNetwork.discoveryTxPower,\n                    'discoveryBeforeStart': autoNetwork.discoveryBeforeStart,\n                    'skipDiscoveryEachWave': autoNetwork.skipDiscoveryEachWave,\n                    'actionRetries': autoNetwork.actionRetries,\n                    'stopConditions': {\n                        'waves': autoNetwork.stopConditions.waves,\n                        'emptyWaves': autoNetwork.stopConditions.emptyWaves,\n                        'numberOfTotalNodes': autoNetwork.stopConditions.numberOfTotalNodes,\n                        'numberOfNewNodes': autoNetwork.stopConditions.numberOfNewNodes,\n                        'abortOnTooManyNodesFound': autoNetwork.stopConditions.abortOnTooManyNodesFound,\n                    },\n                },\n                'returnVerbose': true,\n            },\n        };\n        if (autoNetwork.overlappingNetworks) {\n            Object.assign(json.data.req, { 'overlappingNetworks': autoNetwork.overlappingNetworks });\n        }\n        if (autoNetwork.hwpidFiltering) {\n            Object.assign(json.data.req, { 'hwpidFiltering': autoNetwork.hwpidFiltering });\n        }\n        return store.dispatch('sendRequest', json);\n    };\n    /**\n     * Bonds a node locally\n     * @param address A requested address for the bonded node. If this parameter equals to 0, then the first free address is assigned to the node.\n     */\n    IqrfNetService.prototype.bondLocal = function (address) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqmeshNetwork_BondNodeLocal',\n            'data': {\n                'repeat': 2,\n                'req': {\n                    'deviceAddr': address,\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Bonds a node via IQRF Smart Connect\n     * @param address Address to bond the device to.  If this parameter equals to 0, then the first free address is assigned to the node.\n     * @param scCode Device Smart Connect code\n     * @param testRetries Maximum number of FRCs used to test whether the Node was successfully bonded\n     */\n    IqrfNetService.prototype.bondSmartConnect = function (address, scCode, testRetries) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqmeshNetwork_SmartConnect',\n            'data': {\n                'repeat': 2,\n                'req': {\n                    'deviceAddr': address,\n                    'smartConnectCode': scCode,\n                    'bondingTestRetries': testRetries,\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Clears all bonds\n     * @param coordinatorOnly Removes bonds only in the coordinator memory\n     */\n    IqrfNetService.prototype.clearAllBonds = function (coordinatorOnly) {\n        if (coordinatorOnly) {\n            return store.dispatch('sendRequest', {\n                'mType': 'iqrfEmbedCoordinator_ClearAllBonds',\n                'data': {\n                    'req': {\n                        'nAdr': 0,\n                        'param': {},\n                    },\n                    'returnVerbose': true,\n                },\n            });\n        }\n        else {\n            return this.removeBond(255, false);\n        }\n    };\n    /**\n     * Performs Coordinator discovery\n     * @param txPower TX Power\n     * @param maxAddr Maximum node address\n     */\n    IqrfNetService.prototype.discovery = function (txPower, maxAddr) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfEmbedCoordinator_Discovery',\n            'data': {\n                'repeat': 2,\n                'req': {\n                    'nAdr': 0,\n                    'param': {\n                        'txPower': txPower,\n                        'maxAddr': maxAddr,\n                    },\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Performs device enumeration\n     * @param address Device address\n     */\n    IqrfNetService.prototype.enumerateDevice = function (address) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqmeshNetwork_EnumerateDevice',\n            'data': {\n                'repeat': 2,\n                'req': {\n                    'deviceAddr': address,\n                    'morePeripheralsInfo': true,\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Retrieves list of bonded devices\n     */\n    IqrfNetService.prototype.getBonded = function () {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfEmbedCoordinator_BondedDevices',\n            'data': {\n                'req': {\n                    'nAdr': 0,\n                    'param': {},\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Retrieves list of discovered devices\n     */\n    IqrfNetService.prototype.getDiscovered = function () {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfEmbedCoordinator_DiscoveredDevices',\n            'data': {\n                'req': {\n                    'nAdr': 0,\n                    'param': {},\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Perform FRC Ping\n     */\n    IqrfNetService.prototype.ping = function () {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfEmbedFrc_Send',\n            'data': {\n                'req': {\n                    'nAdr': 0,\n                    'param': {\n                        'frcCommand': 0,\n                        'userData': [0, 0],\n                    },\n                    'returnVerbose': true,\n                },\n            },\n        });\n    };\n    /**\n     * Removes a bond\n     * @param addr Address of a node bond to be removed\n     * @param coordinatorOnly Removes a bond only in the coordinator memory\n     */\n    IqrfNetService.prototype.removeBond = function (addr, coordinatorOnly) {\n        if (coordinatorOnly) {\n            return store.dispatch('sendRequest', {\n                'mType': 'iqrfEmbedCoordinator_RemoveBond',\n                'data': {\n                    'req': {\n                        'nAdr': 0,\n                        'param': {\n                            'bondAddr': addr,\n                        },\n                    },\n                    'returnVerbose': true,\n                },\n            });\n        }\n        else {\n            return store.dispatch('sendRequest', {\n                'mType': 'iqmeshNetwork_RemoveBond',\n                'data': {\n                    'repeat': 2,\n                    'req': {\n                        'deviceAddr': addr,\n                    },\n                    'returnVerbose': true,\n                },\n            });\n        }\n    };\n    /**\n     * Sends JSON API request\n     * @param json JSON API request string\n     */\n    IqrfNetService.prototype.sendJson = function (json) {\n        return store.dispatch('sendRequest', json);\n    };\n    /**\n     * Writes TR configuration\n     * @param address Device address to write the configuration to\n     * @param configuration New TR configuration\n     */\n    IqrfNetService.prototype.writeTrConfiguration = function (address, configuration) {\n        delete configuration.rfBand;\n        configuration.deviceAddr = address;\n        return store.dispatch('sendRequest', {\n            'mType': 'iqmeshNetwork_WriteTrConf',\n            'data': {\n                'repeat': 2,\n                'req': configuration,\n                'returnVerbose': true,\n            },\n        });\n    };\n    return IqrfNetService;\n}());\nexport default new IqrfNetService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CoordinatorInfo.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CoordinatorInfo.vue?vue&type=script&lang=js&\"","<template>\n\t<span v-if='hasData'>\n\t\t<strong>{{ $t('gateway.info.tr.moduleType') }}: </strong>\n\t\t{{ trMcuType.trType }}<br>\n\t\t<strong>{{ $t('gateway.info.tr.mcuType') }}: </strong>\n\t\t{{ trMcuType.mcuType }}<br>\n\t\t<strong>{{ $t('gateway.info.tr.moduleId') }}: </strong> {{ osInfo.mid }}<br>\n\t\t<strong>{{ $t('gateway.info.tr.os') }}: </strong>\n\t\t{{ osInfo.osVersion }} ({{ osInfo.osBuild }})<br>\n\t\t<strong>{{ $t('gateway.info.tr.dpa') }}: </strong>\n\t\t{{ enumeration.dpaVer }}<br>\n\t\t<span v-if='enumeration.flags.rfMode'>\n\t\t\t<strong>{{ $t('gateway.info.tr.rfMode') }}</strong>\n\t\t\t{{ enumeration.flags.rfMode }}\n\t\t</span>\n\t\t<span v-else-if='enumeration.flags.networkType'>\n\t\t\t<strong>{{ $t('gateway.info.tr.networkType') }}</strong>\n\t\t\t{{ enumeration.flags.networkType }}\n\t\t</span>\n\t\t<strong>{{ $t('gateway.info.tr.voltage') }}: </strong>\n\t\t{{ osInfo.supplyVoltage }}<br>\n\t</span>\n\t<span v-else>\n\t\t{{ $t('gateway.info.tr.error') }}\n\t</span>\n</template>\n\n<script>\nimport IqrfNetService from '../../services/IqrfNetService';\nexport default {\n\tname: 'CoordinatorInfo',\n\tdata() {\n\t\treturn {\n\t\t\tenumeration: null,\n\t\t\thasData: false,\n\t\t\tosInfo: null,\n\t\t\ttrMcuType: null\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type !== 'SOCKET_ONMESSAGE' ||\n\t\t\t\t\tmutation.payload.mType !== 'iqmeshNetwork_EnumerateDevice') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst data = mutation.payload.data.rsp;\n\t\t\t\tthis.enumeration = data.peripheralEnumeration;\n\t\t\t\tthis.osInfo = data.osRead;\n\t\t\t\tthis.trMcuType = this.osInfo.trMcuType;\n\t\t\t\tthis.hasData = true;\n\t\t\t} catch (e) {\n\t\t\t\tthis.hasData = false;\n\t\t\t}\n\t\t});\n\t\tIqrfNetService.enumerateDevice(0);\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./CoordinatorInfo.vue?vue&type=template&id=62cb4fe2&\"\nimport script from \"./CoordinatorInfo.vue?vue&type=script&lang=js&\"\nexport * from \"./CoordinatorInfo.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('62cb4fe2')) {\n      api.createRecord('62cb4fe2', component.options)\n    } else {\n      api.reload('62cb4fe2', component.options)\n    }\n    module.hot.accept(\"./CoordinatorInfo.vue?vue&type=template&id=62cb4fe2&\", function () {\n      api.rerender('62cb4fe2', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/Gateway/CoordinatorInfo.vue\"\nexport default component.exports","import store from '../store';\n/**\n * IQRF Gateway Daemon operational mode service\n */\nvar DaemonModeService = /** @class */ (function () {\n    function DaemonModeService() {\n    }\n    /**\n     * Retrieve the current operational mode\n     */\n    DaemonModeService.prototype.get = function () {\n        return this.set('');\n    };\n    /**\n     * Sets a new mode operational mode\n     * @param newMode New operational mode\n     */\n    DaemonModeService.prototype.set = function (newMode) {\n        return store.dispatch('sendRequest', {\n            'mType': 'mngDaemon_Mode',\n            'data': {\n                'req': {\n                    'operMode': newMode,\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    return DaemonModeService;\n}());\nexport default new DaemonModeService();\n","import axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\n/**\n * Gateway service\n */\nvar GatewayService = /** @class */ (function () {\n    function GatewayService() {\n    }\n    /**\n     * Retrieves a ZIP archive with diagnostics data\n     */\n    GatewayService.prototype.getDiagnosticsArchive = function () {\n        return axios.get('diagnostics', { headers: authorizationHeader(), responseType: 'blob' });\n    };\n    /**\n     * Retrieves information about the gateway\n     */\n    GatewayService.prototype.getInfo = function () {\n        return axios.get('gateway/info', { headers: authorizationHeader() });\n    };\n    /**\n     * Retrieves the latest IQRF gateway Daemon's log file\n     */\n    GatewayService.prototype.getLatestLog = function () {\n        return axios.get('gateway/log', { headers: authorizationHeader() });\n    };\n    /**\n     * Retrieves a ZIP archive with IQRF Gateway Daemon's log files\n     */\n    GatewayService.prototype.getLogArchive = function () {\n        return axios.get('gateway/logs', { headers: authorizationHeader(), responseType: 'blob' });\n    };\n    /**\n     * Performs power off\n     */\n    GatewayService.prototype.performPowerOff = function () {\n        return axios.post('gateway/poweroff', null, { headers: authorizationHeader() });\n    };\n    /**\n     * Performs reboot\n     */\n    GatewayService.prototype.performReboot = function () {\n        return axios.post('gateway/reboot', null, { headers: authorizationHeader() });\n    };\n    return GatewayService;\n}());\nexport default new GatewayService();\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"usage\" }, [\n    _vm._v(\n      \"\\n\\t\" +\n        _vm._s(_vm.$t(\"gateway.info.usages.used\")) +\n        \"\\n\\t\" +\n        _vm._s(_vm.usage.used) +\n        \" / \" +\n        _vm._s(_vm.usage.size) +\n        \"\\n\\t\"\n    ),\n    _c(\"div\", { staticClass: \"progress\" }, [\n      _c(\n        \"div\",\n        {\n          staticClass: \"progress-bar usage-progress-bar\",\n          style: { width: _vm.usage.usage },\n          attrs: { role: \"progressbar\" }\n        },\n        [\n          _vm._v(\n            \"\\n\\t\\t\\t\" +\n              _vm._s(_vm.usage.used) +\n              \" (\" +\n              _vm._s(_vm.usage.usage) +\n              \")\\n\\t\\t\"\n          )\n        ]\n      )\n    ])\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<div class='usage'>\n\t\t{{ $t('gateway.info.usages.used') }}\n\t\t{{ usage.used }} / {{ usage.size }}\n\t\t<div class='progress'>\n\t\t\t<div\n\t\t\t\tclass='progress-bar usage-progress-bar'\n\t\t\t\trole='progressbar'\n\t\t\t\t:style='{ width: usage.usage }'\n\t\t\t>\n\t\t\t\t{{ usage.used }} ({{ usage.usage }})\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nexport default {\n\tname: 'ResourceUsage',\n\tprops: {\n\t\tusage: {\n\t\t\ttype: Object,\n\t\t\trequired: true,\n\t\t}\n\t},\n};\n</script>\n\n<style scoped>\n.usage {\n\tdisplay: inline;\n}\n</style>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ResourceUsage.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ResourceUsage.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ResourceUsage.vue?vue&type=template&id=6ed3f697&scoped=true&\"\nimport script from \"./ResourceUsage.vue?vue&type=script&lang=js&\"\nexport * from \"./ResourceUsage.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ResourceUsage.vue?vue&type=style&index=0&id=6ed3f697&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"6ed3f697\",\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6ed3f697')) {\n      api.createRecord('6ed3f697', component.options)\n    } else {\n      api.reload('6ed3f697', component.options)\n    }\n    module.hot.accept(\"./ResourceUsage.vue?vue&type=template&id=6ed3f697&scoped=true&\", function () {\n      api.rerender('6ed3f697', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/Gateway/ResourceUsage.vue\"\nexport default component.exports","export function fileDownloader(response, contentType, fileName) {\n    var contentDisposition = response.headers['content-disposition'];\n    if (contentDisposition) {\n        var fileNameMatch = contentDisposition.match(/filename=\"(.+)\"/);\n        if (fileNameMatch.length === 2) {\n            fileName = fileNameMatch[1];\n        }\n    }\n    var blob = new Blob([response.data], { type: contentType });\n    var fileUrl = window.URL.createObjectURL(blob);\n    var file = document.createElement('a');\n    file.href = fileUrl;\n    file.setAttribute('download', fileName);\n    document.body.appendChild(file);\n    return file;\n}\n","<template>\n\t<CCard body-wrapper>\n\t\t<table v-if='info !== null' class='table table-striped'>\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>{{ $t('gateway.info.board') }}</th>\n\t\t\t\t\t<td>{{ info.board }}</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr v-if='info.gwId'>\n\t\t\t\t\t<th>{{ $t('gateway.info.gwId') }}</th>\n\t\t\t\t\t<td>{{ info.gwId }}</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr v-if='info.pixla'>\n\t\t\t\t\t<th>\n\t\t\t\t\t\t<a href='https://www.pixla.online/'>\n\t\t\t\t\t\t\t{{ $t('gateway.info.gwmonId') }}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</th>\n\t\t\t\t\t<td>{{ info.pixla }}</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr v-if='info.versions.controller'>\n\t\t\t\t\t<th>{{ $t('gateway.info.version.iqrfGatewayController') }}</th>\n\t\t\t\t\t<td>{{ info.versions.controller }}</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>{{ $t('gateway.info.version.iqrfGatewayDaemon') }}</th>\n\t\t\t\t\t<td>{{ info.versions.daemon }}</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>{{ $t('gateway.info.version.iqrfGatewayWebapp') }}</th>\n\t\t\t\t\t<td>{{ info.versions.webapp }}</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>{{ $t('gateway.info.hostname') }}</th>\n\t\t\t\t\t<td>{{ info.hostname }}</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>{{ $t('gateway.info.addresses.ip') }}</th>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<span v-for='{iface, addresses} of getIpAddresses' :key='iface'>\n\t\t\t\t\t\t\t<strong>{{ iface }}: </strong> {{ addresses }}<br>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>{{ $t('gateway.info.addresses.mac') }}</th>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<span v-for='{iface, address} of getMacAddresses' :key='iface'>\n\t\t\t\t\t\t\t<strong>{{ iface }}: </strong> {{ address }}<br>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>{{ $t('gateway.info.usages.disks') }}</th>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<div v-for='usage of info.diskUsages' :key='usage.fsName'>\n\t\t\t\t\t\t\t<strong>{{ usage.fsName }} ({{ usage.fsType }}):</strong>\n\t\t\t\t\t\t\t<resource-usage :usage='usage' /><br>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>{{ $t('gateway.info.usages.memory') }}</th>\n\t\t\t\t\t<td><resource-usage :usage='info.memoryUsage' /></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr v-if='info.swapUsage'>\n\t\t\t\t\t<th>{{ $t('gateway.info.usages.swap') }}</th>\n\t\t\t\t\t<td><resource-usage :usage='info.swapUsage' /></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>{{ $t('gateway.info.tr.title') }}</th>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<coordinator-info />\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>{{ $t('gateway.info.gwMode') }}</th>\n\t\t\t\t\t<td>{{ $t('gateway.mode.modes.' + mode) }}</td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t\t<CButton color='primary' @click='downloadDiagnostics()'>\n\t\t\t{{ $t('gateway.diagnostics.download') }}\n\t\t</CButton>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard} from '@coreui/vue/src';\nimport CoordinatorInfo from '../../components/Gateway/CoordinatorInfo';\nimport DaemonModeService from '../../services/DaemonModeService';\nimport GatewayService from '../../services/GatewayService';\nimport ResourceUsage from '../../components/Gateway/ResourceUsage';\nimport {fileDownloader} from '../../helpers/fileDownloader';\n\nexport default {\n\tname: 'GatewayInfo',\n\tcomponents: {CButton, CCard, CoordinatorInfo, ResourceUsage},\n\tdata() {\n\t\treturn {\n\t\t\tcoordinator: null,\n\t\t\tinfo: null,\n\t\t\tmode: 'unknown'\n\t\t};\n\t},\n\tcomputed: {\n\t\tgetIpAddresses() {\n\t\t\tlet addresses = [];\n\t\t\tfor (const nInterface of this.info.interfaces) {\n\t\t\t\tif (nInterface.ipAddresses === null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\taddresses.push({\n\t\t\t\t\tiface: nInterface.name,\n\t\t\t\t\taddresses: nInterface.ipAddresses.join(', ')\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn addresses;\n\t\t},\n\t\tgetMacAddresses() {\n\t\t\tlet addresses = [];\n\t\t\tfor (const nInterface of this.info.interfaces) {\n\t\t\t\tif (nInterface.macAddress === null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\taddresses.push({\n\t\t\t\t\tiface: nInterface.name,\n\t\t\t\t\taddress: nInterface.macAddress\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn addresses;\n\t\t}\n\t},\n\tcreated() {\n\t\tthis.$store.commit('spinner/SHOW');\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONOPEN') {\n\t\t\t\tDaemonModeService.get();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (mutation.type !== 'SOCKET_ONMESSAGE' ||\n\t\t\t\t\tmutation.payload.mType !== 'mngDaemon_Mode') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tthis.mode = mutation.payload.data.rsp.operMode;\n\t\t\t} catch (e) {\n\t\t\t\tthis.mode = 'unknown';\n\t\t\t}\n\t\t});\n\t\tif (this.$store.state.webSocketClient.socket.isConnected) {\n\t\t\tDaemonModeService.get();\n\t\t}\n\t\tGatewayService.getInfo()\n\t\t\t.then(\n\t\t\t\t(response) => {\n\t\t\t\t\tthis.info = response.data;\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t}\n\t\t\t)\n\t\t\t.catch(() => this.$store.commit('spinner/HIDE'));\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\tdownloadDiagnostics() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tGatewayService.getDiagnosticsArchive().then(\n\t\t\t\t(response) => {\n\t\t\t\t\tconst file = fileDownloader(response, 'application/zip', 'iqrf-gateway-diagnostics.zip');\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tfile.click();\n\t\t\t\t}\n\t\t\t).catch(() => (this.$store.commit('spinner/HIDE')));\n\t\t}\n\t},\n\tmetaInfo: {\n\t\ttitle: 'gateway.info.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GatewayInfo.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GatewayInfo.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GatewayInfo.vue?vue&type=template&id=2922fd04&\"\nimport script from \"./GatewayInfo.vue?vue&type=script&lang=js&\"\nexport * from \"./GatewayInfo.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('2922fd04')) {\n      api.createRecord('2922fd04', component.options)\n    } else {\n      api.reload('2922fd04', component.options)\n    }\n    module.hot.accept(\"./GatewayInfo.vue?vue&type=template&id=2922fd04&\", function () {\n      api.rerender('2922fd04', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Gateway/GatewayInfo.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.log\n    ? _c(\n        \"CCard\",\n        { attrs: { \"body-wrapper\": \"\" } },\n        [\n          _c(\"pre\", { staticClass: \"log\" }, [_vm._v(_vm._s(_vm.log))]),\n          _vm._v(\" \"),\n          _c(\n            \"CButton\",\n            {\n              attrs: { color: \"info\" },\n              on: {\n                click: function($event) {\n                  return _vm.downloadArchive()\n                }\n              }\n            },\n            [_vm._v(\"\\n\\t\\t\" + _vm._s(_vm.$t(\"gateway.log.download\")) + \"\\n\\t\")]\n          )\n        ],\n        1\n      )\n    : _vm._e()\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard v-if='log' body-wrapper>\n\t\t<pre class='log'>{{ log }}</pre>\n\t\t<CButton color='info' @click='downloadArchive()'>\n\t\t\t{{ $t('gateway.log.download') }}\n\t\t</CButton>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard} from '@coreui/vue/src';\nimport GatewayService from '../../services/GatewayService';\nimport {fileDownloader} from '../../helpers/fileDownloader';\n\nexport default {\n\tname: 'DaemonLogViewer',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tlog: null\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.$store.commit('spinner/SHOW');\n\t\tGatewayService.getLatestLog()\n\t\t\t.then(\n\t\t\t\t(response) => {\n\t\t\t\t\tthis.log = response.data;\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t}\n\t\t\t)\n\t\t\t.catch(() => this.$store.commit('spinner/HIDE'));\n\t},\n\tmethods: {\n\t\tdownloadArchive() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tGatewayService.getLogArchive().then(\n\t\t\t\t(response) => {\n\t\t\t\t\tconst file = fileDownloader(response, 'application/zip', 'iqrf-gateway-logs.zip');\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tfile.click();\n\t\t\t\t}\n\t\t\t).catch(() => (this.$store.commit('spinner/HIDE')));\n\t\t}\n\t},\n\tmetaInfo: {\n\t\ttitle: 'gateway.log.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DaemonLogViewer.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DaemonLogViewer.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DaemonLogViewer.vue?vue&type=template&id=1b439f44&\"\nimport script from \"./DaemonLogViewer.vue?vue&type=script&lang=js&\"\nexport * from \"./DaemonLogViewer.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('1b439f44')) {\n      api.createRecord('1b439f44', component.options)\n    } else {\n      api.reload('1b439f44', component.options)\n    }\n    module.hot.accept(\"./DaemonLogViewer.vue?vue&type=template&id=1b439f44&\", function () {\n      api.rerender('1b439f44', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Gateway/DaemonLogViewer.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"CCard\", { attrs: { \"body-wrapper\": \"\" } }, [\n    _c(\"table\", { staticClass: \"table table-striped\" }, [\n      _c(\"tr\", [\n        _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.gwMode\")))]),\n        _vm._v(\" \"),\n        _c(\"td\", [_vm._v(_vm._s(_vm.$t(\"gateway.mode.modes.\" + _vm.mode)))])\n      ])\n    ]),\n    _vm._v(\" \"),\n    _vm.mode !== \"unknown\"\n      ? _c(\n          \"div\",\n          [\n            _c(\n              \"CButton\",\n              {\n                attrs: { color: \"primary\" },\n                on: {\n                  click: function($event) {\n                    return _vm.setMode(\"operational\")\n                  }\n                }\n              },\n              [\n                _vm._v(\n                  \"\\n\\t\\t\\t\" +\n                    _vm._s(_vm.$t(\"gateway.mode.modes.operational\")) +\n                    \"\\n\\t\\t\"\n                )\n              ]\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"CButton\",\n              {\n                attrs: { color: \"primary\" },\n                on: {\n                  click: function($event) {\n                    return _vm.setMode(\"service\")\n                  }\n                }\n              },\n              [\n                _vm._v(\n                  \"\\n\\t\\t\\t\" +\n                    _vm._s(_vm.$t(\"gateway.mode.modes.service\")) +\n                    \"\\n\\t\\t\"\n                )\n              ]\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"CButton\",\n              {\n                attrs: { color: \"primary\" },\n                on: {\n                  click: function($event) {\n                    return _vm.setMode(\"forwarding\")\n                  }\n                }\n              },\n              [\n                _vm._v(\n                  \"\\n\\t\\t\\t\" +\n                    _vm._s(_vm.$t(\"gateway.mode.modes.forwarding\")) +\n                    \"\\n\\t\\t\"\n                )\n              ]\n            )\n          ],\n          1\n        )\n      : _vm._e()\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<table class='table table-striped'>\n\t\t\t<tr>\n\t\t\t\t<th>{{ $t('gateway.info.gwMode') }}</th>\n\t\t\t\t<td>{{ $t('gateway.mode.modes.' + mode) }}</td>\n\t\t\t</tr>\n\t\t</table>\n\t\t<div v-if='mode !== \"unknown\"'>\n\t\t\t<CButton color='primary' @click='setMode(\"operational\")'>\n\t\t\t\t{{ $t('gateway.mode.modes.operational') }}\n\t\t\t</CButton>\n\t\t\t<CButton color='primary' @click='setMode(\"service\")'>\n\t\t\t\t{{ $t('gateway.mode.modes.service') }}\n\t\t\t</CButton>\n\t\t\t<CButton color='primary' @click='setMode(\"forwarding\")'>\n\t\t\t\t{{ $t('gateway.mode.modes.forwarding') }}\n\t\t\t</CButton>\n\t\t</div>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard} from '@coreui/vue/src';\nimport DaemonModeService from '../../services/DaemonModeService';\n\nexport default {\n\tname: 'DaemonMode',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tloaded: false,\n\t\t\tmode: 'unknown',\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONOPEN') {\n\t\t\t\tthis.getMode();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (mutation.type !== 'SOCKET_ONMESSAGE' ||\n\t\t\t\t\tmutation.payload.mType !== 'mngDaemon_Mode') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tthis.mode = mutation.payload.data.rsp.operMode;\n\t\t\t\tif (this.loaded) {\n\t\t\t\t\tthis.$toast.success(this.$t('gateway.mode.messages.' + this.mode).toString());\n\t\t\t\t} else {\n\t\t\t\t\tthis.loaded = true;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.mode = 'unknown';\n\t\t\t\tthis.$toast.error(this.$t('gateway.mode.messages.' + this.loaded ? 'set' : 'get').toString());\n\t\t\t}\n\t\t});\n\t\tif (this.$store.state.webSocketClient.socket.isConnected) {\n\t\t\tthis.getMode();\n\t\t}\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\tgetMode() {\n\t\t\tDaemonModeService.get();\n\t\t},\n\t\tsetMode(newMode) {\n\t\t\tDaemonModeService.set(newMode);\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'gateway.mode.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DaemonMode.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DaemonMode.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DaemonMode.vue?vue&type=template&id=41db1fc5&\"\nimport script from \"./DaemonMode.vue?vue&type=script&lang=js&\"\nexport * from \"./DaemonMode.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('41db1fc5')) {\n      api.createRecord('41db1fc5', component.options)\n    } else {\n      api.reload('41db1fc5', component.options)\n    }\n    module.hot.accept(\"./DaemonMode.vue?vue&type=template&id=41db1fc5&\", function () {\n      api.rerender('41db1fc5', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Gateway/DaemonMode.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\n        \"CButton\",\n        {\n          attrs: { color: \"danger\" },\n          on: {\n            click: function($event) {\n              return _vm.powerOff()\n            }\n          }\n        },\n        [\n          _c(\"CIcon\", {\n            attrs: { content: _vm.$options.icon.cilPowerStandby }\n          }),\n          _vm._v(\n            \"\\n\\t\\t\" + _vm._s(_vm.$t(\"gateway.power.powerOff.title\")) + \"\\n\\t\"\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CButton\",\n        {\n          attrs: { color: \"primary\" },\n          on: {\n            click: function($event) {\n              return _vm.reboot()\n            }\n          }\n        },\n        [\n          _c(\"CIcon\", { attrs: { content: _vm.$options.icon.cilReload } }),\n          _vm._v(\n            \"\\n\\t\\t\" + _vm._s(_vm.$t(\"gateway.power.reboot.title\")) + \"\\n\\t\"\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PowerControl.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PowerControl.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard body-wrapper>\n\t\t<CButton color='danger' @click='powerOff()'>\n\t\t\t<CIcon :content='$options.icon.cilPowerStandby' />\n\t\t\t{{ $t('gateway.power.powerOff.title') }}\n\t\t</CButton>\n\t\t<CButton color='primary' @click='reboot()'>\n\t\t\t<CIcon :content='$options.icon.cilReload' />\n\t\t\t{{ $t('gateway.power.reboot.title') }}\n\t\t</CButton>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CIcon} from '@coreui/vue/src';\nimport { cilPowerStandby, cilReload } from '@coreui/icons';\nimport GatewayService from '../../services/GatewayService';\n\nexport default {\n\tname: 'PowerControl',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCIcon,\n\t},\n\tmethods: {\n\t\tpowerOff() {\n\t\t\tGatewayService.performPowerOff()\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$toast.success(this.$t('gateway.power.powerOff.success').toString());\n\t\t\t\t});\n\t\t},\n\t\treboot() {\n\t\t\tGatewayService.performReboot()\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$toast.success(this.$t('gateway.power.reboot.success').toString());\n\t\t\t\t});\n\t\t},\n\t},\n\ticon: {\n\t\tcilPowerStandby,\n\t\tcilReload,\n\t},\n\tmetaInfo: {\n\t\ttitle: 'gateway.power.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./PowerControl.vue?vue&type=template&id=9fdc3fd4&\"\nimport script from \"./PowerControl.vue?vue&type=script&lang=js&\"\nexport * from \"./PowerControl.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('9fdc3fd4')) {\n      api.createRecord('9fdc3fd4', component.options)\n    } else {\n      api.reload('9fdc3fd4', component.options)\n    }\n    module.hot.accept(\"./PowerControl.vue?vue&type=template&id=9fdc3fd4&\", function () {\n      api.rerender('9fdc3fd4', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Gateway/PowerControl.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"CCard\", { attrs: { \"body-wrapper\": \"\" } }, [\n    !_vm.missing && !_vm.unsupported\n      ? _c(\n          \"div\",\n          [\n            !_vm.enabled\n              ? _c(\n                  \"CButton\",\n                  {\n                    attrs: { color: \"success\" },\n                    on: {\n                      click: function($event) {\n                        return _vm.enable()\n                      }\n                    }\n                  },\n                  [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"service.actions.enable\")) +\n                        \"\\n\\t\\t\"\n                    )\n                  ]\n                )\n              : _vm._e(),\n            _vm._v(\" \"),\n            _vm.enabled\n              ? _c(\n                  \"CButton\",\n                  {\n                    attrs: { color: \"danger\" },\n                    on: {\n                      click: function($event) {\n                        return _vm.disable()\n                      }\n                    }\n                  },\n                  [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"service.actions.disable\")) +\n                        \"\\n\\t\\t\"\n                    )\n                  ]\n                )\n              : _vm._e(),\n            _vm._v(\" \"),\n            !_vm.active\n              ? _c(\n                  \"CButton\",\n                  {\n                    attrs: { color: \"success\" },\n                    on: {\n                      click: function($event) {\n                        return _vm.start()\n                      }\n                    }\n                  },\n                  [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"service.actions.start\")) +\n                        \"\\n\\t\\t\"\n                    )\n                  ]\n                )\n              : _vm._e(),\n            _vm._v(\" \"),\n            _vm.active\n              ? _c(\n                  \"CButton\",\n                  {\n                    attrs: { color: \"danger\" },\n                    on: {\n                      click: function($event) {\n                        return _vm.stop()\n                      }\n                    }\n                  },\n                  [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"service.actions.stop\")) +\n                        \"\\n\\t\\t\"\n                    )\n                  ]\n                )\n              : _vm._e(),\n            _vm._v(\" \"),\n            _vm.active\n              ? _c(\n                  \"CButton\",\n                  {\n                    attrs: { color: \"primary\" },\n                    on: {\n                      click: function($event) {\n                        return _vm.restart()\n                      }\n                    }\n                  },\n                  [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"service.actions.restart\")) +\n                        \"\\n\\t\\t\"\n                    )\n                  ]\n                )\n              : _vm._e(),\n            _vm._v(\" \"),\n            _c(\n              \"CButton\",\n              {\n                attrs: { color: \"secondary\" },\n                on: {\n                  click: function($event) {\n                    return _vm.refreshStatus()\n                  }\n                }\n              },\n              [\n                _vm._v(\n                  \"\\n\\t\\t\\t\" +\n                    _vm._s(_vm.$t(\"service.actions.status\")) +\n                    \"\\n\\t\\t\"\n                )\n              ]\n            )\n          ],\n          1\n        )\n      : _vm._e(),\n    _vm._v(\" \"),\n    _c(\"br\"),\n    _vm._v(\" \"),\n    _c(\"strong\", [_vm._v(_vm._s(_vm.$t(\"service.status\")) + \": \")]),\n    _vm._v(\" \"),\n    _vm.missing\n      ? _c(\"span\", [\n          _vm._v(\"\\n\\t\\t\" + _vm._s(_vm.$t(\"service.states.missing\")) + \"\\n\\t\")\n        ])\n      : _vm._e(),\n    _vm._v(\" \"),\n    _vm.unsupported\n      ? _c(\"span\", [\n          _vm._v(\n            \"\\n\\t\\t\" + _vm._s(_vm.$t(\"service.states.unsupported\")) + \"\\n\\t\"\n          )\n        ])\n      : _c(\"span\", [\n          _vm._v(\n            \"\\n\\t\\t\" +\n              _vm._s(\n                _vm.$t(\n                  \"service.states.\" + (_vm.enabled ? \"enabled\" : \"disabled\")\n                )\n              ) +\n              \",\\n\\t\\t\" +\n              _vm._s(\n                _vm.$t(\"service.states.\" + (_vm.active ? \"active\" : \"inactive\"))\n              ) +\n              \"\\n\\t\"\n          )\n        ]),\n    _vm._v(\" \"),\n    _c(\"br\"),\n    _c(\"br\"),\n    _vm._v(\" \"),\n    _vm.status\n      ? _c(\"pre\", { staticClass: \"log\" }, [_vm._v(_vm._s(_vm.status))])\n      : _vm._e()\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<div v-if='!missing && !unsupported'>\n\t\t\t<CButton v-if='!enabled' color='success' @click='enable()'>\n\t\t\t\t{{ $t('service.actions.enable') }}\n\t\t\t</CButton>\n\t\t\t<CButton v-if='enabled' color='danger' @click='disable()'>\n\t\t\t\t{{ $t('service.actions.disable') }}\n\t\t\t</CButton>\n\t\t\t<CButton v-if='!active' color='success' @click='start()'>\n\t\t\t\t{{ $t('service.actions.start') }}\n\t\t\t</CButton>\n\t\t\t<CButton v-if='active' color='danger' @click='stop()'>\n\t\t\t\t{{ $t('service.actions.stop') }}\n\t\t\t</CButton>\n\t\t\t<CButton v-if='active' color='primary' @click='restart()'>\n\t\t\t\t{{ $t('service.actions.restart') }}\n\t\t\t</CButton>\n\t\t\t<CButton color='secondary' @click='refreshStatus()'>\n\t\t\t\t{{ $t('service.actions.status') }}\n\t\t\t</CButton>\n\t\t</div>\n\t\t<br>\n\t\t<strong>{{ $t('service.status') }}: </strong>\n\t\t<span v-if='missing'>\n\t\t\t{{ $t('service.states.missing') }}\n\t\t</span>\n\t\t<span v-if='unsupported'>\n\t\t\t{{ $t('service.states.unsupported') }}\n\t\t</span>\n\t\t<span v-else>\n\t\t\t{{ $t('service.states.' + (enabled ? 'enabled' : 'disabled')) }},\n\t\t\t{{ $t('service.states.' + (active ? 'active' : 'inactive')) }}\n\t\t</span>\n\t\t<br><br>\n\t\t<pre v-if='status' class='log'>{{ status }}</pre>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard} from '@coreui/vue/src';\nimport ServiceService from '../../services/ServiceService';\n\nconst whitelisted = ['iqrf-gateway-daemon', 'ssh', 'unattended-upgrades'];\n\nexport default {\n\tname: 'ServiceControl',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t},\n\tprops: {\n\t\tserviceName: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t}\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tactive: false,\n\t\t\tenabled: false,\n\t\t\tmissing: false,\n\t\t\tstatus: null,\n\t\t\tunsupported: false,\n\t\t};\n\t},\n\twatch: {\n\t\tserviceName: function (newVal) {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tthis.serviceName = newVal;\n\t\t\tthis.getStatus();\n\t\t}\n\t},\n\tcreated() {\n\t\tthis.$store.commit('spinner/SHOW');\n\t\tthis.getStatus();\n\t},\n\tmethods: {\n\t\tenable() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.enable(this.serviceName)\n\t\t\t\t.then(() => (this.handleSuccess('enable')))\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\tdisable() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.disable(this.serviceName)\n\t\t\t\t.then(() => (this.handleSuccess('disable')))\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\tgetStatus() {\n\t\t\tif (!whitelisted.includes(this.serviceName)) {\n\t\t\t\tthis.unsupported = true;\n\t\t\t\tthis.status = null;\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\tthis.$toast.error(this.$t('service.errors.unsupportedService').toString());\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tServiceService.getStatus(this.serviceName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.unsupported = false;\n\t\t\t\t\tthis.active = response.data.active;\n\t\t\t\t\tthis.enabled = response.data.enabled;\n\t\t\t\t\tthis.status = response.data.status;\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t})\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\thandleError(error) {\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tlet response = error.response;\n\t\t\tif (response.status === 404) {\n\t\t\t\tthis.missing = true;\n\t\t\t\tthis.$toast.error(this.$t('service.errors.missingService').toString());\n\t\t\t}\n\t\t\tif (response.status === 500 &&\n\t\t\t\t\tresponse.data.message === 'Unsupported init system') {\n\t\t\t\tthis.unsupported = false;\n\t\t\t\tthis.$toast.error(this.$t('service.errors.unsupportedInit').toString());\n\t\t\t}\n\t\t},\n\t\thandleSuccess(action) {\n\t\t\tthis.getStatus();\n\t\t\tthis.$toast.success(this.$t('service.' + this.serviceName + '.messages.' + action).toString());\n\t\t},\n\t\trefreshStatus() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tthis.getStatus();\n\t\t},\n\t\trestart() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.restart(this.serviceName)\n\t\t\t\t.then(() => (this.handleSuccess('restart')))\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\tstart() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.start(this.serviceName)\n\t\t\t\t.then(() => (this.handleSuccess('start')))\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\tstop() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.stop(this.serviceName)\n\t\t\t\t.then(() => (this.handleSuccess('stop')))\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t},\n\tmetaInfo() {\n\t\treturn {\n\t\t\ttitle: whitelisted.includes(this.serviceName) ?\n\t\t\t\t'service.' + this.serviceName + '.title' :\n\t\t\t\t'service.unsupported.title',\n\t\t};\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ServiceControl.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ServiceControl.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ServiceControl.vue?vue&type=template&id=52aeda34&\"\nimport script from \"./ServiceControl.vue?vue&type=script&lang=js&\"\nexport * from \"./ServiceControl.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('52aeda34')) {\n      api.createRecord('52aeda34', component.options)\n    } else {\n      api.reload('52aeda34', component.options)\n    }\n    module.hot.accept(\"./ServiceControl.vue?vue&type=template&id=52aeda34&\", function () {\n      api.rerender('52aeda34', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Gateway/ServiceControl.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"c-app flex-row align-items-center\" },\n    [\n      _c(\n        \"CContainer\",\n        [\n          _c(\n            \"CRow\",\n            { staticClass: \"justify-content-center\" },\n            [\n              _c(\n                \"CCol\",\n                { attrs: { md: \"8\" } },\n                [\n                  _c(\"div\", { staticClass: \"py-5 text-center\" }, [\n                    _c(\"img\", {\n                      staticClass: \"mx-auto logo\",\n                      attrs: {\n                        alt: _vm.$t(\"core.title\"),\n                        src: \"/img/logo-blue.svg\"\n                      }\n                    })\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"CCard\",\n                    { staticClass: \"p-4\" },\n                    [\n                      _c(\n                        \"CCardBody\",\n                        [\n                          _c(\"ValidationObserver\", {\n                            scopedSlots: _vm._u([\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var invalid = ref.invalid\n                                  return [\n                                    _c(\n                                      \"CForm\",\n                                      {\n                                        on: {\n                                          submit: function($event) {\n                                            $event.preventDefault()\n                                            return _vm.handleSubmit($event)\n                                          }\n                                        }\n                                      },\n                                      [\n                                        _c(\n                                          \"h1\",\n                                          { staticClass: \"text-center\" },\n                                          [\n                                            _vm._v(\n                                              \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                                _vm._s(\n                                                  _vm.$t(\"core.sign.in.title\")\n                                                ) +\n                                                \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\"\n                                            )\n                                          ]\n                                        ),\n                                        _vm._v(\" \"),\n                                        _c(\"ValidationProvider\", {\n                                          attrs: {\n                                            rules: \"required\",\n                                            \"custom-messages\": {\n                                              required:\n                                                \"core.sign.in.messages.username\"\n                                            }\n                                          },\n                                          scopedSlots: _vm._u(\n                                            [\n                                              {\n                                                key: \"default\",\n                                                fn: function(ref) {\n                                                  var valid = ref.valid\n                                                  var touched = ref.touched\n                                                  var errors = ref.errors\n                                                  return [\n                                                    _c(\"CInput\", {\n                                                      attrs: {\n                                                        label: _vm.$t(\n                                                          \"core.sign.in.username\"\n                                                        ),\n                                                        placeholder: _vm.$t(\n                                                          \"core.sign.in.username\"\n                                                        ),\n                                                        autocomplete:\n                                                          \"username\",\n                                                        \"is-valid\": touched\n                                                          ? valid\n                                                          : null,\n                                                        \"invalid-feedback\": _vm.$t(\n                                                          errors[0]\n                                                        )\n                                                      },\n                                                      scopedSlots: _vm._u(\n                                                        [\n                                                          {\n                                                            key:\n                                                              \"prepend-content\",\n                                                            fn: function() {\n                                                              return [\n                                                                _c(\"CIcon\", {\n                                                                  attrs: {\n                                                                    content:\n                                                                      _vm\n                                                                        .$options\n                                                                        .icons\n                                                                        .user\n                                                                  }\n                                                                })\n                                                              ]\n                                                            },\n                                                            proxy: true\n                                                          }\n                                                        ],\n                                                        null,\n                                                        true\n                                                      ),\n                                                      model: {\n                                                        value: _vm.username,\n                                                        callback: function(\n                                                          $$v\n                                                        ) {\n                                                          _vm.username = $$v\n                                                        },\n                                                        expression: \"username\"\n                                                      }\n                                                    })\n                                                  ]\n                                                }\n                                              }\n                                            ],\n                                            null,\n                                            true\n                                          )\n                                        }),\n                                        _vm._v(\" \"),\n                                        _c(\"ValidationProvider\", {\n                                          attrs: {\n                                            rules: \"required\",\n                                            \"custom-messages\": {\n                                              required:\n                                                \"core.sign.in.messages.password\"\n                                            }\n                                          },\n                                          scopedSlots: _vm._u(\n                                            [\n                                              {\n                                                key: \"default\",\n                                                fn: function(ref) {\n                                                  var valid = ref.valid\n                                                  var touched = ref.touched\n                                                  var errors = ref.errors\n                                                  return [\n                                                    _c(\"CInput\", {\n                                                      attrs: {\n                                                        label: _vm.$t(\n                                                          \"core.sign.in.password\"\n                                                        ),\n                                                        placeholder: _vm.$t(\n                                                          \"core.sign.in.password\"\n                                                        ),\n                                                        type: \"password\",\n                                                        autocomplete:\n                                                          \"password\",\n                                                        \"is-valid\": touched\n                                                          ? valid\n                                                          : null,\n                                                        \"invalid-feedback\": _vm.$t(\n                                                          errors[0]\n                                                        )\n                                                      },\n                                                      scopedSlots: _vm._u(\n                                                        [\n                                                          {\n                                                            key:\n                                                              \"prepend-content\",\n                                                            fn: function() {\n                                                              return [\n                                                                _c(\"CIcon\", {\n                                                                  attrs: {\n                                                                    content:\n                                                                      _vm\n                                                                        .$options\n                                                                        .icons\n                                                                        .lock\n                                                                  }\n                                                                })\n                                                              ]\n                                                            },\n                                                            proxy: true\n                                                          }\n                                                        ],\n                                                        null,\n                                                        true\n                                                      ),\n                                                      model: {\n                                                        value: _vm.password,\n                                                        callback: function(\n                                                          $$v\n                                                        ) {\n                                                          _vm.password = $$v\n                                                        },\n                                                        expression: \"password\"\n                                                      }\n                                                    })\n                                                  ]\n                                                }\n                                              }\n                                            ],\n                                            null,\n                                            true\n                                          )\n                                        }),\n                                        _vm._v(\" \"),\n                                        _c(\n                                          \"CButton\",\n                                          {\n                                            attrs: {\n                                              color: \"primary\",\n                                              type: \"submit\",\n                                              disabled: invalid\n                                            }\n                                          },\n                                          [\n                                            _vm._v(\n                                              \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                                _vm._s(\n                                                  _vm.$t(\"core.sign.in.send\")\n                                                ) +\n                                                \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\"\n                                            )\n                                          ]\n                                        )\n                                      ],\n                                      1\n                                    )\n                                  ]\n                                }\n                              }\n                            ])\n                          })\n                        ],\n                        1\n                      )\n                    ],\n                    1\n                  )\n                ],\n                1\n              )\n            ],\n            1\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SignIn.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SignIn.vue?vue&type=script&lang=js&\"","<template>\n\t<div class='c-app flex-row align-items-center'>\n\t\t<CContainer>\n\t\t\t<CRow class='justify-content-center'>\n\t\t\t\t<CCol md='8'>\n\t\t\t\t\t<div class='py-5 text-center'>\n\t\t\t\t\t\t<img :alt='$t(\"core.title\")' class='mx-auto logo' src='/img/logo-blue.svg'>\n\t\t\t\t\t</div>\n\t\t\t\t\t<CCard class='p-4'>\n\t\t\t\t\t\t<CCardBody>\n\t\t\t\t\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t\t\t\t\t<CForm @submit.prevent='handleSubmit'>\n\t\t\t\t\t\t\t\t\t<h1 class='text-center'>\n\t\t\t\t\t\t\t\t\t\t{{ $t('core.sign.in.title') }}\n\t\t\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t\t\t\t:custom-messages='{required: \"core.sign.in.messages.username\"}'\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\t\tv-model='username'\n\t\t\t\t\t\t\t\t\t\t\t:label='$t(\"core.sign.in.username\")'\n\t\t\t\t\t\t\t\t\t\t\t:placeholder='$t(\"core.sign.in.username\")'\n\t\t\t\t\t\t\t\t\t\t\tautocomplete='username'\n\t\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<template #prepend-content>\n\t\t\t\t\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.user' />\n\t\t\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t\t\t</CInput>\n\t\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t\t\t\t:custom-messages='{required: \"core.sign.in.messages.password\"}'\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\t\tv-model='password'\n\t\t\t\t\t\t\t\t\t\t\t:label='$t(\"core.sign.in.password\")'\n\t\t\t\t\t\t\t\t\t\t\t:placeholder='$t(\"core.sign.in.password\")'\n\t\t\t\t\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\t\t\t\t\tautocomplete='password'\n\t\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<template #prepend-content>\n\t\t\t\t\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.lock' />\n\t\t\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t\t\t</CInput>\n\t\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t\t\t\t\t\t{{ $t('core.sign.in.send') }}\n\t\t\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t\t</CForm>\n\t\t\t\t\t\t\t</ValidationObserver>\n\t\t\t\t\t\t</CCardBody>\n\t\t\t\t\t</CCard>\n\t\t\t\t</CCol>\n\t\t\t</CRow>\n\t\t</CContainer>\n\t</div>\n</template>\n\n<script>\nimport {CContainer, CCard, CCardBody, CCol, CForm, CIcon, CInput, CRow} from '@coreui/vue/src';\nimport {cilUser, cilLockLocked} from '@coreui/icons';\nimport {required} from 'vee-validate/dist/rules';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\n\nexport default {\n\tname: 'SignIn',\n\tcomponents: {\n\t\tCContainer,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCol,\n\t\tCForm,\n\t\tCIcon,\n\t\tCInput,\n\t\tCRow,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tusername: '',\n\t\t\tpassword: '',\n\t\t\tsubmitted: false,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t},\n\tmethods: {\n\t\thandleSubmit() {\n\t\t\tPromise.all([\n\t\t\t\tthis.$store.dispatch('user/signIn', {username: this.username, password: this.password}),\n\t\t\t\tthis.$store.dispatch('features/fetch'),\n\t\t\t])\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$router.push('/');\n\t\t\t\t\tthis.$toast.success(this.$t('core.sign.in.messages.success').toString());\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tthis.$toast.error(this.$t('core.sign.in.messages.incorrectUsernameOrPassword').toString());\n\t\t\t\t});\n\t\t\tthis.submitted = true;\n\t\t}\n\t},\n\ticons: {\n\t\tuser: cilUser,\n\t\tlock: cilLockLocked,\n\t},\n\tmetaInfo: {\n\t\ttitle: 'core.sign.in.title',\n\t},\n};\n</script>\n\n<style scoped>\n.logo {\n\tmin-width: 320px;\n}\n</style>\n","import { render, staticRenderFns } from \"./SignIn.vue?vue&type=template&id=7b84bbc3&scoped=true&\"\nimport script from \"./SignIn.vue?vue&type=script&lang=js&\"\nexport * from \"./SignIn.vue?vue&type=script&lang=js&\"\nimport style0 from \"./SignIn.vue?vue&type=style&index=0&id=7b84bbc3&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"7b84bbc3\",\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('7b84bbc3')) {\n      api.createRecord('7b84bbc3', component.options)\n    } else {\n      api.reload('7b84bbc3', component.options)\n    }\n    module.hot.accept(\"./SignIn.vue?vue&type=template&id=7b84bbc3&scoped=true&\", function () {\n      api.rerender('7b84bbc3', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/SignIn.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\n        \"CListGroup\",\n        [\n          _c(\"CListGroupItem\", { attrs: { to: \"/iqrfnet/send-raw/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.sendPacket.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.sendPacket.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/iqrfnet/send-json/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.sendJson.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.sendJson.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"trUpload\")\n            ? _c(\"CListGroupItem\", { attrs: { to: \"/iqrfnet/tr-upload/\" } }, [\n                _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"iqrfnet.trUpload.title\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"iqrfnet.trUpload.description\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ])\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/iqrfnet/tr-config/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.trConfiguration.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.trConfiguration.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/iqrfnet/network/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.networkManager.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.networkManager.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/iqrfnet/standard/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.standard.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.standard.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ])\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<CListGroup>\n\t\t\t<CListGroupItem to='/iqrfnet/send-raw/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('iqrfnet.sendPacket.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('iqrfnet.sendPacket.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/iqrfnet/send-json/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('iqrfnet.sendJson.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('iqrfnet.sendJson.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"trUpload\")'\n\t\t\t\tto='/iqrfnet/tr-upload/'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('iqrfnet.trUpload.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('iqrfnet.trUpload.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/iqrfnet/tr-config/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('iqrfnet.trConfiguration.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('iqrfnet.trConfiguration.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/iqrfnet/network/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('iqrfnet.networkManager.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('iqrfnet.networkManager.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/iqrfnet/standard/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('iqrfnet.standard.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('iqrfnet.standard.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t</CListGroup>\n\t</CCard>\n</template>\n\n<script>\nimport {CCard, CListGroup, CListGroupItem} from '@coreui/vue/src';\n\nexport default {\n\tname: 'IqrfNetDisambiguation',\n\tcomponents: {\n\t\tCCard,\n\t\tCListGroup,\n\t\tCListGroupItem\n\t},\n\tmetaInfo: {\n\t\ttitle: 'iqrfnet.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqrfNetDisambiguation.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqrfNetDisambiguation.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./IqrfNetDisambiguation.vue?vue&type=template&id=2fa1e694&\"\nimport script from \"./IqrfNetDisambiguation.vue?vue&type=script&lang=js&\"\nexport * from \"./IqrfNetDisambiguation.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('2fa1e694')) {\n      api.createRecord('2fa1e694', component.options)\n    } else {\n      api.reload('2fa1e694', component.options)\n    }\n    module.hot.accept(\"./IqrfNetDisambiguation.vue?vue&type=template&id=2fa1e694&\", function () {\n      api.rerender('2fa1e694', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/IqrfNet/IqrfNetDisambiguation.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CRow\",\n    [\n      _c(\n        \"CCol\",\n        { attrs: { md: \"6\" } },\n        [\n          _c(\"BondingManager\", { on: { \"update-devices\": _vm.updateDevices } }),\n          _vm._v(\" \"),\n          _c(\"DiscoveryManager\", {\n            on: { \"update-devices\": _vm.updateDevices }\n          })\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CCol\",\n        { attrs: { md: \"6\" } },\n        [_c(\"DevicesInfo\", { ref: \"devs\" })],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\"CCardHeader\", [\n        _vm._v(_vm._s(_vm.$t(\"iqrfnet.networkManager.bonding.title\")))\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"CSelect\", {\n                          attrs: {\n                            value: _vm.bondMethod,\n                            label: _vm.$t(\n                              \"iqrfnet.networkManager.bonding.form.bondMethod\"\n                            ),\n                            options: [\n                              {\n                                value: \"local\",\n                                label: _vm.$t(\n                                  \"iqrfnet.networkManager.bonding.form.bondMethodLocal\"\n                                )\n                              },\n                              {\n                                value: \"smartConnect\",\n                                label: _vm.$t(\n                                  \"iqrfnet.networkManager.bonding.form.bondMethodSmart\"\n                                )\n                              },\n                              {\n                                value: \"autoNetwork\",\n                                label: _vm.$t(\n                                  \"iqrfnet.networkManager.autoNetwork.title\"\n                                )\n                              }\n                            ]\n                          },\n                          on: {\n                            \"update:value\": function($event) {\n                              _vm.bondMethod = $event\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _vm.bondMethod === \"autoNetwork\"\n                          ? _c(\n                              \"span\",\n                              [\n                                _c(\"ValidationProvider\", {\n                                  attrs: {\n                                    rules: \"integer|required|between:0,7\",\n                                    \"custom-messages\": {\n                                      integer:\n                                        \"iqrfnet.networkManager.messages.invalid.integer\",\n                                      required:\n                                        \"iqrfnet.networkManager.messages.discovery.txPower\",\n                                      between:\n                                        \"iqrfnet.networkManager.messages.discovery.txPower\"\n                                    }\n                                  },\n                                  scopedSlots: _vm._u(\n                                    [\n                                      {\n                                        key: \"default\",\n                                        fn: function(ref) {\n                                          var errors = ref.errors\n                                          var touched = ref.touched\n                                          var valid = ref.valid\n                                          return [\n                                            _c(\"CInput\", {\n                                              attrs: {\n                                                requred: \"true\",\n                                                type: \"number\",\n                                                min: \"0\",\n                                                max: \"7\",\n                                                label: _vm.$t(\n                                                  \"iqrfnet.networkManager.autoNetwork.form.discoveryTxPower\"\n                                                ),\n                                                \"is-valid\": touched\n                                                  ? valid\n                                                  : null,\n                                                \"invalid-feedback\": _vm.$t(\n                                                  errors[0]\n                                                )\n                                              },\n                                              model: {\n                                                value:\n                                                  _vm.autoNetwork\n                                                    .discoveryTxPower,\n                                                callback: function($$v) {\n                                                  _vm.$set(\n                                                    _vm.autoNetwork,\n                                                    \"discoveryTxPower\",\n                                                    _vm._n($$v)\n                                                  )\n                                                },\n                                                expression:\n                                                  \"autoNetwork.discoveryTxPower\"\n                                              }\n                                            })\n                                          ]\n                                        }\n                                      }\n                                    ],\n                                    null,\n                                    true\n                                  )\n                                }),\n                                _vm._v(\" \"),\n                                _c(\"CInputCheckbox\", {\n                                  attrs: {\n                                    checked:\n                                      _vm.autoNetwork.discoveryBeforeStart,\n                                    label: _vm.$t(\n                                      \"iqrfnet.networkManager.autoNetwork.form.discoveryBeforeStart\"\n                                    )\n                                  },\n                                  on: {\n                                    \"update:checked\": function($event) {\n                                      return _vm.$set(\n                                        _vm.autoNetwork,\n                                        \"discoveryBeforeStart\",\n                                        $event\n                                      )\n                                    }\n                                  }\n                                }),\n                                _vm._v(\" \"),\n                                _c(\"CInputCheckbox\", {\n                                  attrs: {\n                                    checked:\n                                      _vm.autoNetwork.skipDiscoveryEachWave,\n                                    label: _vm.$t(\n                                      \"iqrfnet.networkManager.autoNetwork.form.skipDiscoveryEachWave\"\n                                    )\n                                  },\n                                  on: {\n                                    \"update:checked\": function($event) {\n                                      return _vm.$set(\n                                        _vm.autoNetwork,\n                                        \"skipDiscoveryEachWave\",\n                                        $event\n                                      )\n                                    }\n                                  }\n                                }),\n                                _c(\"hr\"),\n                                _vm._v(\" \"),\n                                _c(\"ValidationProvider\", {\n                                  attrs: {\n                                    rules: \"integer|required|between:0,3\",\n                                    \"custom-messages\": {\n                                      integer:\n                                        \"iqrfnet.networkManager.messages.invalid.integer\",\n                                      required:\n                                        \"iqrfnet.networkManager.messages.autoNetwork.actionRetries\",\n                                      between:\n                                        \"iqrfnet.networkManager.messages.autoNetwork.actionRetries\"\n                                    }\n                                  },\n                                  scopedSlots: _vm._u(\n                                    [\n                                      {\n                                        key: \"default\",\n                                        fn: function(ref) {\n                                          var errors = ref.errors\n                                          var touched = ref.touched\n                                          var valid = ref.valid\n                                          return [\n                                            _c(\"CInput\", {\n                                              attrs: {\n                                                type: \"number\",\n                                                min: \"0\",\n                                                max: \"3\",\n                                                label: _vm.$t(\n                                                  \"iqrfnet.networkManager.autoNetwork.form.actionRetries\"\n                                                ),\n                                                \"is-valid\": touched\n                                                  ? valid\n                                                  : null,\n                                                \"invalid-feedback\": _vm.$t(\n                                                  errors[0]\n                                                )\n                                              },\n                                              model: {\n                                                value:\n                                                  _vm.autoNetwork.actionRetries,\n                                                callback: function($$v) {\n                                                  _vm.$set(\n                                                    _vm.autoNetwork,\n                                                    \"actionRetries\",\n                                                    _vm._n($$v)\n                                                  )\n                                                },\n                                                expression:\n                                                  \"autoNetwork.actionRetries\"\n                                              }\n                                            })\n                                          ]\n                                        }\n                                      }\n                                    ],\n                                    null,\n                                    true\n                                  )\n                                }),\n                                _c(\"hr\"),\n                                _vm._v(\" \"),\n                                _c(\"h4\", [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                      _vm._s(\n                                        _vm.$t(\n                                          \"iqrfnet.networkManager.autoNetwork.form.bondingControl\"\n                                        )\n                                      ) +\n                                      \"\\n\\t\\t\\t\\t\\t\"\n                                  )\n                                ]),\n                                _vm._v(\" \"),\n                                _c(\"CInputCheckbox\", {\n                                  attrs: {\n                                    checked: _vm.useOverlappingNetworks,\n                                    label: _vm.$t(\n                                      \"iqrfnet.networkManager.autoNetwork.form.overlappingNetworks\"\n                                    )\n                                  },\n                                  on: {\n                                    \"update:checked\": function($event) {\n                                      _vm.useOverlappingNetworks = $event\n                                    }\n                                  }\n                                }),\n                                _vm._v(\" \"),\n                                _c(\"ValidationProvider\", {\n                                  attrs: {\n                                    rules: \"integer|required|between:1,50\",\n                                    \"custom-messages\": {\n                                      integer:\n                                        \"iqrfnet.networkManager.messages.invalid.integer\",\n                                      required:\n                                        \"iqrfnet.networkManager.messages.autoNetwork.networks\",\n                                      between:\n                                        \"iqrfnet.networkManager.messages.autoNetwork.networks\"\n                                    }\n                                  },\n                                  scopedSlots: _vm._u(\n                                    [\n                                      {\n                                        key: \"default\",\n                                        fn: function(ref) {\n                                          var errors = ref.errors\n                                          var touched = ref.touched\n                                          var valid = ref.valid\n                                          return [\n                                            _c(\"CInput\", {\n                                              attrs: {\n                                                type: \"number\",\n                                                min: \"1\",\n                                                max: \"50\",\n                                                label: _vm.$t(\n                                                  \"iqrfnet.networkManager.autoNetwork.form.networks\"\n                                                ),\n                                                \"is-valid\": touched\n                                                  ? valid\n                                                  : null,\n                                                \"invalid-feedback\": _vm.$t(\n                                                  errors[0]\n                                                ),\n                                                disabled: !_vm.useOverlappingNetworks\n                                              },\n                                              model: {\n                                                value:\n                                                  _vm.overlappingNetworks\n                                                    .networks,\n                                                callback: function($$v) {\n                                                  _vm.$set(\n                                                    _vm.overlappingNetworks,\n                                                    \"networks\",\n                                                    _vm._n($$v)\n                                                  )\n                                                },\n                                                expression:\n                                                  \"overlappingNetworks.networks\"\n                                              }\n                                            })\n                                          ]\n                                        }\n                                      }\n                                    ],\n                                    null,\n                                    true\n                                  )\n                                }),\n                                _vm._v(\" \"),\n                                _c(\"ValidationProvider\", {\n                                  attrs: {\n                                    rules: \"integer|required|between:1,50\",\n                                    \"custom-messages\": {\n                                      integer:\n                                        \"iqrfnet.networkManager.messages.invalid.integer\",\n                                      required:\n                                        \"iqrfnet.networkManager.messages.autoNetwork.network\",\n                                      between:\n                                        \"iqrfnet.networkManager.messages.autoNetwork.network\"\n                                    }\n                                  },\n                                  scopedSlots: _vm._u(\n                                    [\n                                      {\n                                        key: \"default\",\n                                        fn: function(ref) {\n                                          var errors = ref.errors\n                                          var touched = ref.touched\n                                          var valid = ref.valid\n                                          return [\n                                            _c(\"CInput\", {\n                                              attrs: {\n                                                type: \"number\",\n                                                min: \"1\",\n                                                max: \"50\",\n                                                label: _vm.$t(\n                                                  \"iqrfnet.networkManager.autoNetwork.form.network\"\n                                                ),\n                                                \"is-valid\": touched\n                                                  ? valid\n                                                  : null,\n                                                \"invalid-feedback\": _vm.$t(\n                                                  errors[0]\n                                                ),\n                                                disabled: !_vm.useOverlappingNetworks\n                                              },\n                                              model: {\n                                                value:\n                                                  _vm.overlappingNetworks\n                                                    .network,\n                                                callback: function($$v) {\n                                                  _vm.$set(\n                                                    _vm.overlappingNetworks,\n                                                    \"network\",\n                                                    _vm._n($$v)\n                                                  )\n                                                },\n                                                expression:\n                                                  \"overlappingNetworks.network\"\n                                              }\n                                            })\n                                          ]\n                                        }\n                                      }\n                                    ],\n                                    null,\n                                    true\n                                  )\n                                }),\n                                _c(\"hr\"),\n                                _vm._v(\" \"),\n                                _c(\"h4\", [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                      _vm._s(\n                                        _vm.$t(\n                                          \"iqrfnet.networkManager.autoNetwork.form.hwpidFiltering\"\n                                        )\n                                      ) +\n                                      \"\\n\\t\\t\\t\\t\\t\"\n                                  )\n                                ]),\n                                _vm._v(\" \"),\n                                _c(\"CInputCheckbox\", {\n                                  attrs: {\n                                    checked: _vm.useHwpidFiltering,\n                                    label: _vm.$t(\n                                      \"iqrfnet.networkManager.autoNetwork.form.hwpidEnable\"\n                                    )\n                                  },\n                                  on: {\n                                    \"update:checked\": function($event) {\n                                      _vm.useHwpidFiltering = $event\n                                    }\n                                  }\n                                }),\n                                _vm._v(\" \"),\n                                _c(\"ValidationProvider\", {\n                                  attrs: {\n                                    rules: \"hwpidFilter\",\n                                    \"custom-messages\": {\n                                      hwpidFilter:\n                                        \"iqrfnet.networkManager.messages.invalid.autoNetwork.hwpidFilter\"\n                                    }\n                                  },\n                                  scopedSlots: _vm._u(\n                                    [\n                                      {\n                                        key: \"default\",\n                                        fn: function(ref) {\n                                          var errors = ref.errors\n                                          var touched = ref.touched\n                                          var valid = ref.valid\n                                          return [\n                                            _c(\"CInput\", {\n                                              attrs: {\n                                                label: _vm.$t(\n                                                  \"iqrfnet.networkManager.autoNetwork.form.hwpids\"\n                                                ),\n                                                \"is-valid\": touched\n                                                  ? valid\n                                                  : null,\n                                                \"invalid-feedback\": _vm.$t(\n                                                  errors[0]\n                                                ),\n                                                disabled: !_vm.useHwpidFiltering\n                                              },\n                                              model: {\n                                                value: _vm.hwpidFiltering,\n                                                callback: function($$v) {\n                                                  _vm.hwpidFiltering = $$v\n                                                },\n                                                expression: \"hwpidFiltering\"\n                                              }\n                                            })\n                                          ]\n                                        }\n                                      }\n                                    ],\n                                    null,\n                                    true\n                                  )\n                                }),\n                                _c(\"hr\"),\n                                _vm._v(\" \"),\n                                _c(\"h4\", [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                      _vm._s(\n                                        _vm.$t(\n                                          \"iqrfnet.networkManager.autoNetwork.form.stopConditions\"\n                                        )\n                                      ) +\n                                      \"\\n\\t\\t\\t\\t\\t\"\n                                  )\n                                ]),\n                                _vm._v(\" \"),\n                                _c(\"ValidationProvider\", {\n                                  attrs: {\n                                    rules: \"integer|required|between:1,127\",\n                                    \"custom-messages\": {\n                                      integer:\n                                        \"iqrfnet.networkManager.messages.invalid.integer\",\n                                      required:\n                                        \"iqrfnet.networkManager.messages.autoNetwork.waves\",\n                                      between:\n                                        \"iqrfnet.networkManager.messages.autoNetwork.waves\"\n                                    }\n                                  },\n                                  scopedSlots: _vm._u(\n                                    [\n                                      {\n                                        key: \"default\",\n                                        fn: function(ref) {\n                                          var errors = ref.errors\n                                          var touched = ref.touched\n                                          var valid = ref.valid\n                                          return [\n                                            _c(\"CInput\", {\n                                              attrs: {\n                                                type: \"number\",\n                                                min: \"1\",\n                                                max: \"127\",\n                                                label: _vm.$t(\n                                                  \"iqrfnet.networkManager.autoNetwork.form.waves\"\n                                                ),\n                                                \"is-valid\": touched\n                                                  ? valid\n                                                  : null,\n                                                \"invalid-feedback\": _vm.$t(\n                                                  errors[0]\n                                                )\n                                              },\n                                              model: {\n                                                value:\n                                                  _vm.autoNetwork.stopConditions\n                                                    .waves,\n                                                callback: function($$v) {\n                                                  _vm.$set(\n                                                    _vm.autoNetwork\n                                                      .stopConditions,\n                                                    \"waves\",\n                                                    _vm._n($$v)\n                                                  )\n                                                },\n                                                expression:\n                                                  \"autoNetwork.stopConditions.waves\"\n                                              }\n                                            })\n                                          ]\n                                        }\n                                      }\n                                    ],\n                                    null,\n                                    true\n                                  )\n                                }),\n                                _vm._v(\" \"),\n                                _c(\"ValidationProvider\", {\n                                  attrs: {\n                                    rules: \"integer|required|between:1,127\",\n                                    \"custom-messages\": {\n                                      integer:\n                                        \"iqrfnet.networkManager.messages.invalid.integer\",\n                                      required:\n                                        \"iqrfnet.networkManager.messages.autoNetwork.emptyWaves\",\n                                      between:\n                                        \"iqrfnet.networkManager.messages.autoNetwork.emptyWaves\"\n                                    }\n                                  },\n                                  scopedSlots: _vm._u(\n                                    [\n                                      {\n                                        key: \"default\",\n                                        fn: function(ref) {\n                                          var errors = ref.errors\n                                          var touched = ref.touched\n                                          var valid = ref.valid\n                                          return [\n                                            _c(\"CInput\", {\n                                              attrs: {\n                                                type: \"number\",\n                                                min: \"1\",\n                                                max: \"127\",\n                                                label: _vm.$t(\n                                                  \"iqrfnet.networkManager.autoNetwork.form.emptyWaves\"\n                                                ),\n                                                \"is-valid\": touched\n                                                  ? valid\n                                                  : null,\n                                                \"invalid-feedback\": _vm.$t(\n                                                  errors[0]\n                                                )\n                                              },\n                                              model: {\n                                                value:\n                                                  _vm.autoNetwork.stopConditions\n                                                    .emptyWaves,\n                                                callback: function($$v) {\n                                                  _vm.$set(\n                                                    _vm.autoNetwork\n                                                      .stopConditions,\n                                                    \"emptyWaves\",\n                                                    _vm._n($$v)\n                                                  )\n                                                },\n                                                expression:\n                                                  \"autoNetwork.stopConditions.emptyWaves\"\n                                              }\n                                            })\n                                          ]\n                                        }\n                                      }\n                                    ],\n                                    null,\n                                    true\n                                  )\n                                }),\n                                _vm._v(\" \"),\n                                _c(\"ValidationProvider\", {\n                                  attrs: {\n                                    rules: \"integer|required|between:1,239\",\n                                    \"custom-messages\": {\n                                      integer:\n                                        \"iqrfnet.networkManager.messages.invalid.integer\",\n                                      required:\n                                        \"iqrfnet.networkManager.messages.autoNetwork.totalNodes\",\n                                      between:\n                                        \"iqrfnet.networkManager.messages.autoNetwork.totalNodes\"\n                                    }\n                                  },\n                                  scopedSlots: _vm._u(\n                                    [\n                                      {\n                                        key: \"default\",\n                                        fn: function(ref) {\n                                          var errors = ref.errors\n                                          var touched = ref.touched\n                                          var valid = ref.valid\n                                          return [\n                                            _c(\"CInput\", {\n                                              attrs: {\n                                                type: \"number\",\n                                                min: \"1\",\n                                                max: \"239\",\n                                                label: _vm.$t(\n                                                  \"iqrfnet.networkManager.autoNetwork.form.numberOfTotalNodes\"\n                                                ),\n                                                \"is-valid\": touched\n                                                  ? valid\n                                                  : null,\n                                                \"invalid-feedback\": _vm.$t(\n                                                  errors[0]\n                                                )\n                                              },\n                                              model: {\n                                                value:\n                                                  _vm.autoNetwork.stopConditions\n                                                    .numberOfTotalNodes,\n                                                callback: function($$v) {\n                                                  _vm.$set(\n                                                    _vm.autoNetwork\n                                                      .stopConditions,\n                                                    \"numberOfTotalNodes\",\n                                                    _vm._n($$v)\n                                                  )\n                                                },\n                                                expression:\n                                                  \"autoNetwork.stopConditions.numberOfTotalNodes\"\n                                              }\n                                            })\n                                          ]\n                                        }\n                                      }\n                                    ],\n                                    null,\n                                    true\n                                  )\n                                }),\n                                _vm._v(\" \"),\n                                _c(\"ValidationProvider\", {\n                                  attrs: {\n                                    rules: \"integer|required|between:1,239\",\n                                    \"custom-messages\": {\n                                      integer:\n                                        \"iqrfnet.networkManager.messages.invalid.integer\",\n                                      required:\n                                        \"iqrfnet.networkManager.messages.autoNetwork.newNodes\",\n                                      between:\n                                        \"iqrfnet.networkManager.messages.autoNetwork.newNodes\"\n                                    }\n                                  },\n                                  scopedSlots: _vm._u(\n                                    [\n                                      {\n                                        key: \"default\",\n                                        fn: function(ref) {\n                                          var errors = ref.errors\n                                          var touched = ref.touched\n                                          var valid = ref.valid\n                                          return [\n                                            _c(\"CInput\", {\n                                              attrs: {\n                                                type: \"number\",\n                                                min: \"1\",\n                                                max: \"239\",\n                                                label: _vm.$t(\n                                                  \"iqrfnet.networkManager.autoNetwork.form.numberOfNewNodes\"\n                                                ),\n                                                \"is-valid\": touched\n                                                  ? valid\n                                                  : null,\n                                                \"invalid-feedback\": _vm.$t(\n                                                  errors[0]\n                                                )\n                                              },\n                                              model: {\n                                                value:\n                                                  _vm.autoNetwork.stopConditions\n                                                    .numberOfNewNodes,\n                                                callback: function($$v) {\n                                                  _vm.$set(\n                                                    _vm.autoNetwork\n                                                      .stopConditions,\n                                                    \"numberOfNewNodes\",\n                                                    _vm._n($$v)\n                                                  )\n                                                },\n                                                expression:\n                                                  \"autoNetwork.stopConditions.numberOfNewNodes\"\n                                              }\n                                            })\n                                          ]\n                                        }\n                                      }\n                                    ],\n                                    null,\n                                    true\n                                  )\n                                }),\n                                _vm._v(\" \"),\n                                _c(\"CInputCheckbox\", {\n                                  attrs: {\n                                    checked:\n                                      _vm.autoNetwork.stopConditions\n                                        .abortOnTooManyNodesFound,\n                                    label: _vm.$t(\n                                      \"iqrfnet.networkManager.autoNetwork.form.abortOnTooManyNodesFound\"\n                                    )\n                                  },\n                                  on: {\n                                    \"update:checked\": function($event) {\n                                      return _vm.$set(\n                                        _vm.autoNetwork.stopConditions,\n                                        \"abortOnTooManyNodesFound\",\n                                        $event\n                                      )\n                                    }\n                                  }\n                                })\n                              ],\n                              1\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _vm.bondMethod !== \"autoNetwork\"\n                          ? _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"integer|required|between:1,239\",\n                                \"custom-messages\": {\n                                  required:\n                                    \"iqrfnet.networkManager.messages.bonding.address\",\n                                  integer:\n                                    \"iqrfnet.networkManager.messages.invalid.integer\",\n                                  between:\n                                    \"iqrfnet.networkManager.messages.bonding.address\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var touched = ref.touched\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CInput\", {\n                                          attrs: {\n                                            type: \"number\",\n                                            min: \"1\",\n                                            max: \"239\",\n                                            label: _vm.$t(\n                                              \"iqrfnet.networkManager.bonding.form.address\"\n                                            ),\n                                            \"is-valid\": touched ? valid : null,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            ),\n                                            disabled: _vm.autoAddress\n                                          },\n                                          model: {\n                                            value: _vm.address,\n                                            callback: function($$v) {\n                                              _vm.address = _vm._n($$v)\n                                            },\n                                            expression: \"address\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            })\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _vm.bondMethod !== \"autoNetwork\"\n                          ? _c(\"CInputCheckbox\", {\n                              attrs: {\n                                checked: _vm.autoAddress,\n                                label: _vm.$t(\n                                  \"iqrfnet.networkManager.bonding.form.autoAddress\"\n                                )\n                              },\n                              on: {\n                                \"update:checked\": function($event) {\n                                  _vm.autoAddress = $event\n                                }\n                              }\n                            })\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _vm.bondMethod !== \"autoNetwork\"\n                          ? _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"integer|required|between:0,255\",\n                                \"custom-messages\": {\n                                  integer:\n                                    \"iqrfnet.networkManager.messages.invalid.integer\",\n                                  required:\n                                    \"iqrfnet.networkManager.messages.bonding.bondingRetries\",\n                                  between:\n                                    \"iqrfnet.networkManager.messages.bonding.bondingRetries\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var touched = ref.touched\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CInput\", {\n                                          attrs: {\n                                            type: \"number\",\n                                            min: \"0\",\n                                            max: \"255\",\n                                            label: _vm.$t(\n                                              \"iqrfnet.networkManager.bonding.form.bondingRetries\"\n                                            ),\n                                            \"is-valid\": touched ? valid : null,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            )\n                                          },\n                                          model: {\n                                            value: _vm.bondingRetries,\n                                            callback: function($$v) {\n                                              _vm.bondingRetries = _vm._n($$v)\n                                            },\n                                            expression: \"bondingRetries\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            })\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _vm.bondMethod === \"smartConnect\"\n                          ? _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"required|scCode\",\n                                \"custom-messages\": {\n                                  required:\n                                    \"iqrfnet.networkManager.messages.missing.bonding.scCode\",\n                                  scCode:\n                                    \"iqrfnet.networkManager.messages.invalid.bonding.scCode\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CInput\", {\n                                          attrs: {\n                                            label: _vm.$t(\n                                              \"iqrfnet.networkManager.bonding.form.smartConnect\"\n                                            ),\n                                            \"is-valid\": valid,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            )\n                                          },\n                                          model: {\n                                            value: _vm.scCode,\n                                            callback: function($$v) {\n                                              _vm.scCode = $$v\n                                            },\n                                            expression: \"scCode\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            })\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _vm.bondMethod !== \"autoNetwork\"\n                          ? _c(\"CInputCheckbox\", {\n                              attrs: {\n                                checked: _vm.unbondCoordinatorOnly,\n                                label: _vm.$t(\n                                  \"iqrfnet.networkManager.bonding.form.unbondCoordinatorOnly\"\n                                )\n                              },\n                              on: {\n                                \"update:checked\": function($event) {\n                                  _vm.unbondCoordinatorOnly = $event\n                                }\n                              }\n                            })\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _vm.bondMethod !== \"autoNetwork\"\n                          ? _c(\n                              \"CButton\",\n                              {\n                                attrs: {\n                                  color: \"primary\",\n                                  type: \"button\",\n                                  disabled: invalid\n                                },\n                                on: {\n                                  click: function($event) {\n                                    $event.preventDefault()\n                                    return _vm.processSubmitBond($event)\n                                  }\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"forms.bond\")) +\n                                    \"\\n\\t\\t\\t\\t\"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _vm.bondMethod !== \"autoNetwork\"\n                          ? _c(\n                              \"CButton\",\n                              {\n                                attrs: {\n                                  color: \"secondary\",\n                                  type: \"button\",\n                                  disabled: invalid || _vm.autoAddress\n                                },\n                                on: {\n                                  click: function($event) {\n                                    _vm.modalUnbond = true\n                                  }\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"forms.unbond\")) +\n                                    \"\\n\\t\\t\\t\\t\"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _vm.bondMethod !== \"autoNetwork\"\n                          ? _c(\n                              \"CButton\",\n                              {\n                                attrs: {\n                                  color: \"secondary\",\n                                  type: \"button\",\n                                  disabled: _vm.autoAddress\n                                },\n                                on: {\n                                  click: function($event) {\n                                    _vm.modalClear = true\n                                  }\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"forms.clearBonds\")) +\n                                    \"\\n\\t\\t\\t\\t\"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _vm.bondMethod === \"autoNetwork\"\n                          ? _c(\n                              \"CButton\",\n                              {\n                                attrs: {\n                                  color: \"primary\",\n                                  type: \"button\",\n                                  disabled: invalid\n                                },\n                                on: { click: _vm.processSubmitAutoNetwork }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"forms.autoNetwork\")) +\n                                    \"\\n\\t\\t\\t\\t\"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CModal\",\n                          {\n                            attrs: {\n                              title: \"Clear All Bonds\",\n                              color: \"secondary\",\n                              show: _vm.modalClear\n                            },\n                            on: {\n                              \"update:show\": function($event) {\n                                _vm.modalClear = $event\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"footer\",\n                                  fn: function() {\n                                    return [\n                                      _c(\n                                        \"CButton\",\n                                        {\n                                          attrs: { color: \"secondary\" },\n                                          on: {\n                                            click: function($event) {\n                                              _vm.modalClear = false\n                                            }\n                                          }\n                                        },\n                                        [\n                                          _vm._v(\n                                            \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                              _vm._s(_vm.$t(\"forms.cancel\")) +\n                                              \"\\n\\t\\t\\t\\t\\t\\t\"\n                                          )\n                                        ]\n                                      ),\n                                      _vm._v(\" \"),\n                                      _c(\n                                        \"CButton\",\n                                        {\n                                          attrs: { color: \"primary\" },\n                                          on: {\n                                            click: _vm.processSubmitClearAll\n                                          }\n                                        },\n                                        [\n                                          _vm._v(\n                                            \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                              _vm._s(_vm.$t(\"forms.ok\")) +\n                                              \"\\n\\t\\t\\t\\t\\t\\t\"\n                                          )\n                                        ]\n                                      )\n                                    ]\n                                  },\n                                  proxy: true\n                                }\n                              ],\n                              null,\n                              true\n                            )\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\n                                    \"iqrfnet.networkManager.messages.submit.removeBond.confirmClear\"\n                                  )\n                                ) +\n                                \"\\n\\t\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CModal\",\n                          {\n                            attrs: {\n                              title: \"Unbond Node\",\n                              color: \"secondary\",\n                              show: _vm.modalUnbond\n                            },\n                            on: {\n                              \"update:show\": function($event) {\n                                _vm.modalUnbond = $event\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"footer\",\n                                  fn: function() {\n                                    return [\n                                      _c(\n                                        \"CButton\",\n                                        {\n                                          attrs: { color: \"secondary\" },\n                                          on: {\n                                            click: function($event) {\n                                              _vm.modalUnbond = false\n                                            }\n                                          }\n                                        },\n                                        [\n                                          _vm._v(\n                                            \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                              _vm._s(_vm.$t(\"forms.cancel\")) +\n                                              \"\\n\\t\\t\\t\\t\\t\\t\"\n                                          )\n                                        ]\n                                      ),\n                                      _vm._v(\" \"),\n                                      _c(\n                                        \"CButton\",\n                                        {\n                                          attrs: { color: \"primary\" },\n                                          on: { click: _vm.processSubmitUnbond }\n                                        },\n                                        [\n                                          _vm._v(\n                                            \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                              _vm._s(_vm.$t(\"forms.ok\")) +\n                                              \"\\n\\t\\t\\t\\t\\t\\t\"\n                                          )\n                                        ]\n                                      )\n                                    ]\n                                  },\n                                  proxy: true\n                                }\n                              ],\n                              null,\n                              true\n                            )\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\n                                    \"iqrfnet.networkManager.messages.submit.removeBond.confirmUnbond\"\n                                  )\n                                ) +\n                                \"\\n\\t\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import i18n from '../i18n';\nimport store from '../store';\nimport Vue from 'vue';\nexport function timeout(message, length) {\n    return setTimeout(function () {\n        store.commit('spinner/HIDE');\n        Vue.$toast.error(i18n.t(message).toString());\n    }, length);\n}\n","<template>\n\t<CCard>\n\t\t<CCardHeader>{{ $t('iqrfnet.networkManager.bonding.title') }}</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<CSelect\n\t\t\t\t\t\t:value.sync='bondMethod'\n\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.bonding.form.bondMethod\")'\n\t\t\t\t\t\t:options='[\n\t\t\t\t\t\t\t{value: \"local\", label: $t(\"iqrfnet.networkManager.bonding.form.bondMethodLocal\")},\n\t\t\t\t\t\t\t{value: \"smartConnect\", label: $t(\"iqrfnet.networkManager.bonding.form.bondMethodSmart\")},\n\t\t\t\t\t\t\t{value: \"autoNetwork\", label: $t(\"iqrfnet.networkManager.autoNetwork.title\")}\n\t\t\t\t\t\t]'\n\t\t\t\t\t/>\n\t\t\t\t\t<span v-if='bondMethod === \"autoNetwork\"'>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='integer|required|between:0,7'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.discovery.txPower\",\n\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.discovery.txPower\"\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model.number='autoNetwork.discoveryTxPower'\n\t\t\t\t\t\t\t\trequred='true'\n\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\tmax='7'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.discoveryTxPower\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t:checked.sync='autoNetwork.discoveryBeforeStart'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.discoveryBeforeStart\")'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t:checked.sync='autoNetwork.skipDiscoveryEachWave'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.skipDiscoveryEachWave\")'\n\t\t\t\t\t\t/><hr>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='integer|required|between:0,3'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.actionRetries\",\n\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.actionRetries\"\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model.number='autoNetwork.actionRetries'\n\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\tmax='3'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.actionRetries\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider><hr>\n\t\t\t\t\t\t<h4>\n\t\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.autoNetwork.form.bondingControl') }}\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t:checked.sync='useOverlappingNetworks'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.overlappingNetworks\")'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='integer|required|between:1,50'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.networks\",\n\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.networks\"\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model.number='overlappingNetworks.networks'\n\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\t\tmax='50'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.networks\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t:disabled='!useOverlappingNetworks'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='integer|required|between:1,50'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.network\",\n\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.network\"\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model.number='overlappingNetworks.network'\n\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\t\tmax='50'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.network\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t:disabled='!useOverlappingNetworks'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider><hr>\n\t\t\t\t\t\t<h4>\n\t\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.autoNetwork.form.hwpidFiltering') }}\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t:checked.sync='useHwpidFiltering'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.hwpidEnable\")'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='hwpidFilter'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\thwpidFilter: \"iqrfnet.networkManager.messages.invalid.autoNetwork.hwpidFilter\"\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model='hwpidFiltering'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.hwpids\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t:disabled='!useHwpidFiltering'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider><hr>\n\t\t\t\t\t\t<h4>\n\t\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.autoNetwork.form.stopConditions') }}\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='integer|required|between:1,127'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.waves\",\n\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.waves\"\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model.number='autoNetwork.stopConditions.waves'\n\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\t\tmax='127'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.waves\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='integer|required|between:1,127'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.emptyWaves\",\n\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.emptyWaves\"\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model.number='autoNetwork.stopConditions.emptyWaves'\n\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\t\tmax='127'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.emptyWaves\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='integer|required|between:1,239'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.totalNodes\",\n\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.totalNodes\"\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model.number='autoNetwork.stopConditions.numberOfTotalNodes'\n\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.numberOfTotalNodes\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='integer|required|between:1,239'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.newNodes\",\n\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.newNodes\"\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model.number='autoNetwork.stopConditions.numberOfNewNodes'\n\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.numberOfNewNodes\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t:checked.sync='autoNetwork.stopConditions.abortOnTooManyNodesFound'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.abortOnTooManyNodesFound\")'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</span>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-if='bondMethod !== \"autoNetwork\"'\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:1,239'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.bonding.address\",\n\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.bonding.address\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='address'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.bonding.form.address\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t:disabled='autoAddress'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\tv-if='bondMethod !== \"autoNetwork\"'\n\t\t\t\t\t\t:checked.sync='autoAddress'\n\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.bonding.form.autoAddress\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-if='bondMethod !== \"autoNetwork\"'\n\t\t\t\t\t\tv-slot='{ errors, touched, valid}'\n\t\t\t\t\t\trules='integer|required|between:0,255'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.bonding.bondingRetries\",\n\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.bonding.bondingRetries\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='bondingRetries'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='255'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.bonding.form.bondingRetries\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-if='bondMethod === \"smartConnect\"'\n\t\t\t\t\t\tv-slot='{ errors, valid }'\n\t\t\t\t\t\trules='required|scCode'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.missing.bonding.scCode\",\n\t\t\t\t\t\t\tscCode: \"iqrfnet.networkManager.messages.invalid.bonding.scCode\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='scCode'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.bonding.form.smartConnect\")'\n\t\t\t\t\t\t\t:is-valid='valid'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\tv-if='bondMethod !== \"autoNetwork\"'\n\t\t\t\t\t\t:checked.sync='unbondCoordinatorOnly'\n\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.bonding.form.unbondCoordinatorOnly\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tv-if='bondMethod !== \"autoNetwork\"'\n\t\t\t\t\t\tcolor='primary' \n\t\t\t\t\t\ttype='button' \n\t\t\t\t\t\t:disabled='invalid' \n\t\t\t\t\t\t@click.prevent='processSubmitBond'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.bond') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tv-if='bondMethod !== \"autoNetwork\"'\n\t\t\t\t\t\tcolor='secondary' \n\t\t\t\t\t\ttype='button' \n\t\t\t\t\t\t:disabled='invalid || autoAddress'\n\t\t\t\t\t\t@click='modalUnbond = true'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.unbond') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tv-if='bondMethod !== \"autoNetwork\"'\n\t\t\t\t\t\tcolor='secondary' \n\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t:disabled='autoAddress'\n\t\t\t\t\t\t@click='modalClear = true'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.clearBonds') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton \n\t\t\t\t\t\tv-if='bondMethod === \"autoNetwork\"'\n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t:disabled='invalid'\n\t\t\t\t\t\t@click='processSubmitAutoNetwork'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.autoNetwork') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CModal\n\t\t\t\t\t\ttitle='Clear All Bonds'\n\t\t\t\t\t\tcolor='secondary'\n\t\t\t\t\t\t:show.sync='modalClear'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.messages.submit.removeBond.confirmClear') }}\n\t\t\t\t\t\t<template #footer>\n\t\t\t\t\t\t\t<CButton color='secondary' @click='modalClear = false'>\n\t\t\t\t\t\t\t\t{{ $t('forms.cancel') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton color='primary' @click='processSubmitClearAll'>\n\t\t\t\t\t\t\t\t{{ $t('forms.ok') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t</CModal>\n\t\t\t\t\t<CModal\n\t\t\t\t\t\ttitle='Unbond Node'\n\t\t\t\t\t\tcolor='secondary'\n\t\t\t\t\t\t:show.sync='modalUnbond'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.messages.submit.removeBond.confirmUnbond') }}\n\t\t\t\t\t\t<template #footer>\n\t\t\t\t\t\t\t<CButton color='secondary' @click='modalUnbond = false'>\n\t\t\t\t\t\t\t\t{{ $t('forms.cancel') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton color='primary' @click='processSubmitUnbond'>\n\t\t\t\t\t\t\t\t{{ $t('forms.ok') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t</CModal>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CForm, CInput, CInputCheckbox, CModal, CSelect} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {timeout} from '../../helpers/timeout';\nimport {between, integer, required} from 'vee-validate/dist/rules';\nimport IqrfNetService from '../../services/IqrfNetService';\n\nexport default {\n\tname: 'BondingManager',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tCModal,\n\t\tCSelect,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\taddress: 1,\n\t\t\tautoAddress: false,\n\t\t\tautoNetwork: {\n\t\t\t\tdiscoveryTxPower: 7,\n\t\t\t\tdiscoveryBeforeStart: false,\n\t\t\t\tskipDiscoveryEachWave: false,\n\t\t\t\tactionRetries: 1,\n\t\t\t\tstopConditions: {\n\t\t\t\t\twaves: 2,\n\t\t\t\t\temptyWaves: 2,\n\t\t\t\t\tnumberOfTotalNodes: 239,\n\t\t\t\t\tnumberOfNewNodes: 239,\n\t\t\t\t\tabortOnTooManyNodesFound: false\n\t\t\t\t}\n\t\t\t},\n\t\t\toverlappingNetworks: {\n\t\t\t\tnetworks: 1,\n\t\t\t\tnetwork: 1\n\t\t\t},\n\t\t\thwpidFiltering: '',\n\t\t\tbondMethod: 'local',\n\t\t\tbondingRetries: 1,\n\t\t\tmodalClear: false,\n\t\t\tmodalUnbond: false,\n\t\t\tunbondCoordinatorOnly: false,\n\t\t\tscCode: '',\n\t\t\ttimeout: null,\n\t\t\tuseHwpidFiltering: false,\n\t\t\tuseOverlappingNetworks: false,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\textend('scCode', (code) => {\n\t\t\tconst regex = RegExp('^[a-zA-Z0-9]{34}$');\n\t\t\treturn regex.test(code);\n\t\t});\n\t\textend('hwpidFilter', (val) => {\n\t\t\tconst regex = RegExp('^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[1-9])( (6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[1-9]))*$');\n\t\t\treturn regex.test(val);\n\t\t});\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONSEND' &&\n\t\t\t\tmutation.payload.mType === ('iqmeshNetwork_BondNodeLocal' ||\n\t\t\t\t\t'iqmeshNetwork_SmartConnect' ||'iqrfEmbedCoordinator_ClearAllBonds' ||\n\t\t\t\t\t'iqrfEmbedCoordinator_RemoveBond' || 'iqmeshNetwork_autoNetwork')) {\n\t\t\t\tthis.timeout = timeout('iqrfnet.networkManager.messages.submit.timeout', 20000);\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONMESSAGE') {\n\t\t\t\tif (mutation.payload.mType === 'iqmeshNetwork_BondNodeLocal' ||\n\t\t\t\t\tmutation.payload.mType === 'iqmeshNetwork_SmartConnect') {\n\t\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tswitch(mutation.payload.data.status) {\n\t\t\t\t\t\tcase -1:\n\t\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.networkManager.messages.submit.timeout').toString());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tthis.$toast.success(this.$t('iqrfnet.networkManager.messages.submit.bonding.success').toString());\n\t\t\t\t\t\t\tthis.$emit('update-devices');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.networkManager.messages.submit.bonding.error_fail').toString());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (mutation.payload.mType === 'iqrfEmbedCoordinator_ClearAllBonds' ||\n\t\t\t\t\t\t\tmutation.payload.mType === 'iqmeshNetwork_RemoveBond') {\n\t\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tswitch(mutation.payload.data.status) {\n\t\t\t\t\t\tcase -1:\n\t\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.networkManager.messages.submit.timeout').toString());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tif (mutation.payload.data.rsp.nodesNr === 0) {\n\t\t\t\t\t\t\t\tthis.$toast.success(this.$t('iqrfnet.networkManager.messages.submit.removeBond.clearSuccess').toString());\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.$toast.success(this.$t('iqrfnet.networkManager.messages.submit.removeBond.success').toString());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.$emit('update-devices');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1002:\n\t\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.networkManager.messages.submit.removeBond.remove_error').toString());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.networkManager.messages.submit.removeBond.error_fail').toString());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (mutation.payload.mType === 'iqmeshNetwork_AutoNetwork') {\n\t\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\t\tswitch(mutation.payload.data.status) {\n\t\t\t\t\t\tcase -1:\n\t\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.networkManager.messages.submit.timeout').toString());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tthis.$store.commit('spinner/UPDATE_TEXT', this.autoNetworkProgress(mutation.payload.data));\n\t\t\t\t\t\t\tif (mutation.payload.data.rsp.lastWave) {\n\t\t\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\t\t\tthis.$toast.success(this.$t('iqrfnet.networkManager.messages.submit.autoNetwork.success').toString());\n\t\t\t\t\t\t\t\tthis.$emit('update-devices');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.networkManager.messages.submit.autoNetwork.failure').toString());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (mutation.payload.mType === 'messageError') {\n\t\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.networkManager.messages.submit.invalidMessage').toString());\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\tautoNetworkProgress(response) {\n\t\t\treturn 'Wave ' + response.rsp.wave + '/' + this.autoNetwork.stopConditions.waves + ' [' + response.rsp.progress + '%]';\n\t\t},\n\t\tprocessSubmitAutoNetwork() {\n\t\t\tlet submitData = this.autoNetwork;\n\t\t\tif (this.useOverlappingNetworks) {\n\t\t\t\tsubmitData['overlappingNetworks'] = this.overlappingNetworks;\n\t\t\t}\n\t\t\tif (this.useHwpidFiltering && this.hwpidFiltering.length > 0) {\n\t\t\t\tsubmitData['hwpidFiltering'] = this.hwpidFiltering.split(', ').map((i) => parseInt(i));\n\t\t\t}\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tIqrfNetService.autoNetwork(submitData);\n\t\t},\n\t\tprocessSubmitBond() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.bondMethod === 'local') {\n\t\t\t\tif (this.autoAddress) {\n\t\t\t\t\tIqrfNetService.bondLocal(0);\n\t\t\t\t} else {\n\t\t\t\t\tIqrfNetService.bondLocal(this.address);\n\t\t\t\t}\n\t\t\t} else if (this.bondMethod === 'smartConnect') {\n\t\t\t\tif (this.autoAddress) {\n\t\t\t\t\tIqrfNetService.bondSmartConnect(0, this.scCode, this.bondingRetries);\n\t\t\t\t} else {\n\t\t\t\t\tIqrfNetService.bondSmartConnect(this.address, this.scCode, this.bondingRetries);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tprocessSubmitUnbond() {\n\t\t\tthis.modalUnbond = false;\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tIqrfNetService.removeBond(this.address, this.unbondCoordinatorOnly);\n\t\t},\n\t\tprocessSubmitClearAll() {\n\t\t\tthis.modalClear = false;\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tIqrfNetService.clearAllBonds(this.unbondCoordinatorOnly);\n\t\t}\n\t}\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BondingManager.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BondingManager.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BondingManager.vue?vue&type=template&id=293b26bd&\"\nimport script from \"./BondingManager.vue?vue&type=script&lang=js&\"\nexport * from \"./BondingManager.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('293b26bd')) {\n      api.createRecord('293b26bd', component.options)\n    } else {\n      api.reload('293b26bd', component.options)\n    }\n    module.hot.accept(\"./BondingManager.vue?vue&type=template&id=293b26bd&\", function () {\n      api.rerender('293b26bd', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/BondingManager.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\"CCardHeader\", [\n        _vm._v(_vm._s(_vm.$t(\"iqrfnet.networkManager.devicesInfo.title\")))\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"table\", { staticClass: \"table text-center\" }, [\n            _c(\"tbody\", [\n              _c(\"tr\", [\n                _c(\n                  \"td\",\n                  [\n                    _c(\"CIcon\", {\n                      staticClass: \"text-info\",\n                      attrs: { content: _vm.$options.icons.coordinator }\n                    }),\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\n                            \"iqrfnet.networkManager.devicesInfo.icons.coordinator\"\n                          )\n                        ) +\n                        \"\\n\\t\\t\\t\\t\\t\"\n                    )\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _c(\n                  \"td\",\n                  [\n                    _c(\"CIcon\", {\n                      staticClass: \"text-danger\",\n                      attrs: { content: _vm.$options.icons.unbonded }\n                    }),\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\n                            \"iqrfnet.networkManager.devicesInfo.icons.unbonded\"\n                          )\n                        ) +\n                        \"\\n\\t\\t\\t\\t\\t\"\n                    )\n                  ],\n                  1\n                )\n              ]),\n              _vm._v(\" \"),\n              _c(\"tr\", [\n                _c(\n                  \"td\",\n                  [\n                    _c(\"CIcon\", {\n                      staticClass: \"text-info\",\n                      attrs: { content: _vm.$options.icons.bonded }\n                    }),\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\n                            \"iqrfnet.networkManager.devicesInfo.icons.bonded\"\n                          )\n                        ) +\n                        \"\\n\\t\\t\\t\\t\\t\"\n                    )\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _c(\n                  \"td\",\n                  [\n                    _c(\"CIcon\", {\n                      staticClass: \"text-info\",\n                      attrs: { content: _vm.$options.icons.discovered }\n                    }),\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\n                            \"iqrfnet.networkManager.devicesInfo.icons.discovered\"\n                          )\n                        ) +\n                        \"\\n\\t\\t\\t\\t\\t\"\n                    )\n                  ],\n                  1\n                )\n              ]),\n              _vm._v(\" \"),\n              _c(\"tr\", [\n                _c(\n                  \"td\",\n                  [\n                    _c(\"CIcon\", {\n                      staticClass: \"text-success\",\n                      attrs: { content: _vm.$options.icons.bonded }\n                    }),\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\n                            \"iqrfnet.networkManager.devicesInfo.icons.bondedOnline\"\n                          )\n                        ) +\n                        \"\\n\\t\\t\\t\\t\\t\"\n                    )\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _c(\n                  \"td\",\n                  [\n                    _c(\"CIcon\", {\n                      staticClass: \"text-success\",\n                      attrs: { content: _vm.$options.icons.discovered }\n                    }),\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\n                            \"iqrfnet.networkManager.devicesInfo.icons.discoveredOnline\"\n                          )\n                        ) +\n                        \"\\n\\t\\t\\t\\t\\t\"\n                    )\n                  ],\n                  1\n                )\n              ])\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\n            \"CButton\",\n            {\n              staticClass: \"w-100\",\n              attrs: { color: \"primary\" },\n              on: { click: _vm.frcPing }\n            },\n            [_vm._v(\"\\n\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.pingNodes\")) + \"\\n\\t\\t\")]\n          ),\n          _vm._v(\" \"),\n          !_vm.timedOut\n            ? _c(\"table\", { staticClass: \"table table-striped\" }, [\n                _c(\n                  \"tbody\",\n                  [\n                    _c(\n                      \"tr\",\n                      [\n                        _c(\"th\"),\n                        _vm._v(\" \"),\n                        _vm._l(Array(10).keys(), function(num) {\n                          return _c(\"th\", { key: num }, [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\\t\" + _vm._s(num) + \"\\n\\t\\t\\t\\t\\t\"\n                            )\n                          ])\n                        })\n                      ],\n                      2\n                    ),\n                    _vm._v(\" \"),\n                    _vm._l(Array(24).keys(), function(row) {\n                      return _c(\n                        \"tr\",\n                        { key: row },\n                        [\n                          _c(\"th\", [_vm._v(_vm._s(row) + \"0\")]),\n                          _vm._v(\" \"),\n                          _vm._l(Array(10).keys(), function(col) {\n                            return _c(\n                              \"td\",\n                              { key: col },\n                              [\n                                _c(\"DeviceIcon\", {\n                                  attrs: {\n                                    device:\n                                      _vm.devices[_vm.getAddress(row, col)]\n                                  }\n                                })\n                              ],\n                              1\n                            )\n                          })\n                        ],\n                        2\n                      )\n                    })\n                  ],\n                  2\n                )\n              ])\n            : _c(\"CAlert\", { attrs: { color: \"danger\" } }, [\n                _vm._v(\n                  \"\\n\\t\\t\\t\" +\n                    _vm._s(\n                      _vm.$t(\n                        \"iqrfnet.networkManager.devicesInfo.messages.empty\"\n                      )\n                    ) +\n                    \"\\n\\t\\t\"\n                )\n              ])\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import { cilHome, cilX, cilCheckAlt, cilSignalCellular4 } from '@coreui/icons';\n/**\n * Class representing a device used in Network Manager.\n */\nvar Device = /** @class */ (function () {\n    /**\n     * Constructor\n     * @param address Device address\n     * @param coordinator Specifies if the device is a coordinator device\n     * @param bonded Specifies if the device is bonded\n     * @param discovered Specifies if the device is discovered\n     * @param online Specifies if the device is online\n     */\n    function Device(address, coordinator, bonded, discovered, online) {\n        if (bonded === void 0) { bonded = false; }\n        if (discovered === void 0) { discovered = false; }\n        if (online === void 0) { online = false; }\n        this.address = address;\n        this.coordinator = coordinator;\n        this.bonded = bonded;\n        this.discovered = discovered;\n        this.online = online;\n    }\n    /**\n     * Returns the icon\n     * @returns Icon to render\n     */\n    Device.prototype.getIcon = function () {\n        if (this.address === 0) {\n            return cilHome;\n        }\n        if (this.bonded) {\n            if (this.discovered) {\n                return cilSignalCellular4;\n            }\n            return cilCheckAlt;\n        }\n        return cilX;\n    };\n    /**\n     * Returns the icon color\n     * @returns Icon color\n     */\n    Device.prototype.getIconColor = function () {\n        if (this.address === 0) {\n            return 'text-info';\n        }\n        if (this.bonded) {\n            if (this.online) {\n                return 'text-success';\n            }\n            return 'text-info';\n        }\n        return 'text-danger';\n    };\n    Device.prototype.hasLink = function () {\n        return this.coordinator || this.bonded;\n    };\n    return Device;\n}());\nexport default Device;\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.device.hasLink()\n    ? _c(\n        \"router-link\",\n        { attrs: { to: \"/iqrfnet/enumeration/\" + _vm.device.address } },\n        [\n          _c(\"CIcon\", {\n            class: _vm.device.getIconColor(),\n            attrs: { content: _vm.device.getIcon() }\n          })\n        ],\n        1\n      )\n    : _c(\"CIcon\", {\n        class: _vm.device.getIconColor(),\n        attrs: { content: _vm.device.getIcon() }\n      })\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<router-link v-if='device.hasLink()' :to='\"/iqrfnet/enumeration/\" + device.address'>\n\t\t<CIcon :class='device.getIconColor()' :content='device.getIcon()' />\n\t</router-link>\n\t<CIcon v-else :class='device.getIconColor()' :content='device.getIcon()' />\n</template>\n\n<script>\nimport Device from '../../helpers/Device';\nimport {CIcon} from '@coreui/vue/src';\n\nexport default {\n\tname: 'DeviceIcon',\n\tcomponents: {\n\t\tCIcon\n\t},\n\tprops: {\n\t\tdevice: {\n\t\t\ttype: Device,\n\t\t\trequired: true,\n\t\t},\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DeviceIcon.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DeviceIcon.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DeviceIcon.vue?vue&type=template&id=579a753e&\"\nimport script from \"./DeviceIcon.vue?vue&type=script&lang=js&\"\nexport * from \"./DeviceIcon.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('579a753e')) {\n      api.createRecord('579a753e', component.options)\n    } else {\n      api.reload('579a753e', component.options)\n    }\n    module.hot.accept(\"./DeviceIcon.vue?vue&type=template&id=579a753e&\", function () {\n      api.rerender('579a753e', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/DeviceIcon.vue\"\nexport default component.exports","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DevicesInfo.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DevicesInfo.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard>\n\t\t<CCardHeader>{{ $t('iqrfnet.networkManager.devicesInfo.title') }}</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<table class='table text-center'>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CIcon class='text-info' :content='$options.icons.coordinator' />\n\t\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.devicesInfo.icons.coordinator') }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CIcon class='text-danger' :content='$options.icons.unbonded' />\n\t\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.devicesInfo.icons.unbonded') }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CIcon class='text-info' :content='$options.icons.bonded' />\n\t\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.devicesInfo.icons.bonded') }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CIcon class='text-info' :content='$options.icons.discovered' />\n\t\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.devicesInfo.icons.discovered') }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CIcon class='text-success' :content='$options.icons.bonded' />\n\t\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.devicesInfo.icons.bondedOnline') }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CIcon class='text-success' :content='$options.icons.discovered' />\n\t\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.devicesInfo.icons.discoveredOnline') }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<CButton color='primary' class='w-100' @click='frcPing'>\n\t\t\t\t{{ $t('forms.pingNodes') }}\n\t\t\t</CButton>\n\t\t\t<table v-if='!timedOut' class='table table-striped'>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th />\n\t\t\t\t\t\t<th v-for='num of Array(10).keys()' :key='num'>\n\t\t\t\t\t\t\t{{ num }}\n\t\t\t\t\t\t</th>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr v-for='row of Array(24).keys()' :key='row'>\n\t\t\t\t\t\t<th>{{ row }}0</th>\n\t\t\t\t\t\t<td v-for='col of Array(10).keys()' :key='col'>\n\t\t\t\t\t\t\t<DeviceIcon :device='devices[getAddress(row, col)]' />\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<CAlert v-else color='danger'>\n\t\t\t\t{{ $t('iqrfnet.networkManager.devicesInfo.messages.empty') }}\n\t\t\t</CAlert>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {cilHome, cilX, cilCheckAlt, cilSignalCellular4} from '@coreui/icons';\nimport {CAlert, CButton, CCard, CCardBody, CCardHeader, CIcon} from '@coreui/vue/src';\nimport Device from '../../helpers/Device';\nimport DeviceIcon from './DeviceIcon';\nimport IqrfNetService from '../../services/IqrfNetService';\n\nexport default {\n\tname: 'DevicesInfo',\n\tcomponents: {\n\t\tCAlert,\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCIcon,\n\t\tDeviceIcon,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tallowedMTypes: [\n\t\t\t\t'iqrfEmbedCoordinator_BondedDevices',\n\t\t\t\t'iqrfEmbedCoordinator_DiscoveredDevices',\n\t\t\t\t'iqrfEmbedFrc_Send',\n\t\t\t],\n\t\t\tdevices: [],\n\t\t\tmanual: false,\n\t\t\tresponseReceived: false,\n\t\t\ttimedOut: false\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.generateDevices();\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONOPEN') {\n\t\t\t\tthis.getDevices();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONSEND') {\n\t\t\t\tif (!this.allowedMTypes.includes(mutation.payload.mType)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.responseReceived = false;\n\t\t\t\tsetTimeout(() => {this.timeOut();}, 10000);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONMESSAGE') {\n\t\t\t\tif (!this.allowedMTypes.includes(mutation.payload.mType)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.responseReceived = true;\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\tif (mutation.payload.mType === 'iqrfEmbedCoordinator_BondedDevices') {\n\t\t\t\t\tthis.parseBondedDevices(mutation.payload);\n\t\t\t\t} else if (mutation.payload.mType === 'iqrfEmbedCoordinator_DiscoveredDevices') {\n\t\t\t\t\tthis.parseDiscoveredDevices(mutation.payload);\n\t\t\t\t} else if (mutation.payload.mType === 'iqrfEmbedFrc_Send') {\n\t\t\t\t\tthis.parseFrcPing(mutation.payload);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tif (this.$store.getters.isSocketConnected) {\n\t\t\tthis.getDevices();\n\t\t}\t\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\tfrcPing() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tIqrfNetService.ping();\n\t\t},\n\t\tgenerateDevices() {\n\t\t\tthis.devices.push(new Device(0, true));\n\t\t\tfor (let i = 1; i <= 239; i++) {\n\t\t\t\tthis.devices.push(new Device(i, false));\n\t\t\t}\n\t\t},\n\t\tgetAddress(row, col) {\n\t\t\treturn row * 10 + col;\n\t\t},\n\t\tgetBondedDevices() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tIqrfNetService.getBonded();\n\t\t},\n\t\tgetDiscoveredDevices() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tIqrfNetService.getDiscovered();\n\t\t},\n\t\tparseBondedDevices(response) {\n\t\t\tswitch (response.data.status) {\n\t\t\t\tcase 0: {\n\t\t\t\t\tthis.devices.forEach(item => {\n\t\t\t\t\t\titem.bonded = false;\n\t\t\t\t\t});\n\t\t\t\t\tconst bonded = response.data.rsp.result.bondedDevices;\n\t\t\t\t\tbonded.forEach(item => {\n\t\t\t\t\t\tthis.devices[item].bonded = true;\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.networkManager.devicesInfo.messages.bonded.failure').toString());\n\t\t\t\t\tthis.timedOut = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t\tparseDiscoveredDevices(response) {\n\t\t\tswitch (response.data.status) {\n\t\t\t\tcase 0: {\n\t\t\t\t\tthis.devices.forEach(item => {\n\t\t\t\t\t\titem.discovered = false;\n\t\t\t\t\t});\n\t\t\t\t\tconst discovered = response.data.rsp.result.discoveredDevices;\n\t\t\t\t\tdiscovered.forEach(item => {\n\t\t\t\t\t\tthis.devices[item].discovered = true;\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.networkManager.devicesInfo.messages.discovered.failure').toString());\n\t\t\t\t\tthis.timedOut = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t\tparseFrcPing(response) {\n\t\t\tswitch(response.data.status) {\n\t\t\t\tcase 0: {\n\t\t\t\t\tconst online = response.data.rsp.result.frcData.slice(0, 30);\n\t\t\t\t\tlet k = 0;\n\t\t\t\t\tonline.forEach(item => {\n\t\t\t\t\t\tfor (let i = 0; i < 8; ++i) {\n\t\t\t\t\t\t\tconst device = (item & (1 << i)) >> i;\n\t\t\t\t\t\t\tthis.devices[k++].online = (device === 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tif (this.manual) {\n\t\t\t\t\t\tthis.manual = false;\n\t\t\t\t\t\tthis.$forceUpdate();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.networkManager.devicesInfo.messages.ping.failure').toString());\n\t\t\t\t\tthis.timedOut = false;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t\tgetDevices() {\n\t\t\tthis.getBondedDevices();\n\t\t\tthis.getDiscoveredDevices();\n\t\t\tthis.frcPing();\n\t\t},\n\t\ttimeOut() {\n\t\t\tif (!this.responseReceived) {\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\tthis.$toast.error(this.$t('iqrfnet.networkManager.messages.submit.timeout').toString());\n\t\t\t}\n\t\t},\n\t\tsubmitFrcPing() {\n\t\t\tthis.manual = true;\n\t\t\tthis.frcPing();\n\t\t},\n\t},\n\ticons: {\n\t\tcoordinator: cilHome,\n\t\tbonded: cilCheckAlt,\n\t\tdiscovered: cilSignalCellular4,\n\t\tunbonded: cilX\n\t}\n};\n</script>\n","import { render, staticRenderFns } from \"./DevicesInfo.vue?vue&type=template&id=22f61cec&\"\nimport script from \"./DevicesInfo.vue?vue&type=script&lang=js&\"\nexport * from \"./DevicesInfo.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('22f61cec')) {\n      api.createRecord('22f61cec', component.options)\n    } else {\n      api.reload('22f61cec', component.options)\n    }\n    module.hot.accept(\"./DevicesInfo.vue?vue&type=template&id=22f61cec&\", function () {\n      api.rerender('22f61cec', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/DevicesInfo.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\"CCardHeader\", [\n        _vm._v(\n          \"\\n\\t\\t\" +\n            _vm._s(_vm.$t(\"iqrfnet.networkManager.discovery.title\")) +\n            \"\\n\\t\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      {\n                        on: {\n                          submit: function($event) {\n                            $event.preventDefault()\n                            return _vm.processSubmit($event)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|between:0,7\",\n                            \"custom-messages\": {\n                              integer:\n                                \"iqrfnet.networkManager.messages.invalid.integer\",\n                              required:\n                                \"iqrfnet.networkManager.messages.discovery.txPower\",\n                              between:\n                                \"iqrfnet.networkManager.messages.discovery.txPower\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        max: \"7\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.networkManager.discovery.form.txPower\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.txPower,\n                                        callback: function($$v) {\n                                          _vm.txPower = _vm._n($$v)\n                                        },\n                                        expression: \"txPower\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|between:0,239\",\n                            \"custom-messages\": {\n                              integer:\n                                \"iqrfnet.networkManager.messages.invalid.integer\",\n                              required:\n                                \"iqrfnet.networkManager.messages.discovery.maxAddr\",\n                              between:\n                                \"iqrfnet.networkManager.messages.discovery.maxAddr\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        max: \"239\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.networkManager.discovery.form.maxAddr\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.maxAddr,\n                                        callback: function($$v) {\n                                          _vm.maxAddr = _vm._n($$v)\n                                        },\n                                        expression: \"maxAddr\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              color: \"primary\",\n                              type: \"submit\",\n                              disabled: invalid\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.discovery\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardHeader>\n\t\t\t{{ $t('iqrfnet.networkManager.discovery.title') }}\n\t\t</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='processSubmit'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:0,7'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.discovery.txPower\",\n\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.discovery.txPower\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='txPower'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='7'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.discovery.form.txPower\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:0,239'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.discovery.maxAddr\",\n\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.discovery.maxAddr\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='maxAddr'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.discovery.form.maxAddr\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t(\"forms.discovery\") }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {timeout} from '../../helpers/timeout';\nimport {between, integer, required} from 'vee-validate/dist/rules';\nimport IqrfNetService from '../../services/IqrfNetService';\n\nexport default {\n\tname: 'DiscoveryManager',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tmaxAddr: 239,\n\t\t\ttxPower: 6,\n\t\t\tresponseReceived: false,\n\t\t\ttimeout: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONSEND' &&\n\t\t\t\tmutation.payload.mType === 'iqrfEmbedCoordinator_Discovery') {\n\t\t\t\tthis.timeout = timeout('iqrfnet.networkManager.messages.submit.timeout', 10000);\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONMESSAGE') {\n\t\t\t\tif (mutation.payload.mType === 'iqrfEmbedCoordinator_Discovery') {\n\t\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tswitch (mutation.payload.data.status) {\n\t\t\t\t\t\tcase -1:\n\t\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.networkManager.messages.submit.timeout').toString());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tthis.$toast.success(this.$t('iqrfnet.networkManager.messages.submit.discovery.success').toString());\n\t\t\t\t\t\t\tthis.$emit('update-devices');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthis.$toast.success(this.$t('iqrfnet.networkManager.messages.submit.discovery.error_fail').toString());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\tprocessSubmit() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tIqrfNetService.discovery(this.txPower, this.maxAddr);\n\t\t},\n\t}\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DiscoveryManager.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DiscoveryManager.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DiscoveryManager.vue?vue&type=template&id=2520b0ec&\"\nimport script from \"./DiscoveryManager.vue?vue&type=script&lang=js&\"\nexport * from \"./DiscoveryManager.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('2520b0ec')) {\n      api.createRecord('2520b0ec', component.options)\n    } else {\n      api.reload('2520b0ec', component.options)\n    }\n    module.hot.accept(\"./DiscoveryManager.vue?vue&type=template&id=2520b0ec&\", function () {\n      api.rerender('2520b0ec', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/DiscoveryManager.vue\"\nexport default component.exports","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetworkManager.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetworkManager.vue?vue&type=script&lang=js&\"","<template>\n\t<CRow>\n\t\t<CCol md='6'>\n\t\t\t<BondingManager @update-devices='updateDevices' />\n\t\t\t<DiscoveryManager @update-devices='updateDevices' />\n\t\t</CCol>\n\t\t<CCol md='6'>\n\t\t\t<DevicesInfo ref='devs' />\n\t\t</CCol>\n\t</CRow>\n</template>\n\n<script>\nimport BondingManager from '../../components/IqrfNet/BondingManager';\nimport DevicesInfo from '../../components/IqrfNet/DevicesInfo';\nimport DiscoveryManager from '../../components/IqrfNet/DiscoveryManager';\n\nexport default {\n\tname: 'NetworkManager',\n\tcomponents: {\n\t\tBondingManager,\n\t\tDevicesInfo,\n\t\tDiscoveryManager,\n\t},\n\tdata() {\n\t\treturn {};\n\t},\n\tmethods: {\n\t\tupdateDevices() {\n\t\t\tthis.$refs.devs.getBondedDevices();\n\t\t\tthis.$refs.devs.getDiscoveredDevices();\n\t\t\tthis.$refs.devs.submitFrcPing();\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'iqrfnet.networkManager.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./NetworkManager.vue?vue&type=template&id=9bbbfec0&\"\nimport script from \"./NetworkManager.vue?vue&type=script&lang=js&\"\nexport * from \"./NetworkManager.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('9bbbfec0')) {\n      api.createRecord('9bbbfec0', component.options)\n    } else {\n      api.reload('9bbbfec0', component.options)\n    }\n    module.hot.accept(\"./NetworkManager.vue?vue&type=template&id=9bbbfec0&\", function () {\n      api.rerender('9bbbfec0', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/IqrfNet/NetworkManager.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        [\n          _c(\n            \"CCardHeader\",\n            [\n              _c(\n                \"CButton\",\n                {\n                  attrs: {\n                    color: \"primary\",\n                    size: \"sm\",\n                    href: \"https://docs.iqrf.org/iqrf-gateway/api.html\",\n                    target: \"_blank\"\n                  }\n                },\n                [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"iqrfnet.sendJson.documentation\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]\n              )\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\"ValidationObserver\", {\n                scopedSlots: _vm._u([\n                  {\n                    key: \"default\",\n                    fn: function(ref) {\n                      var invalid = ref.invalid\n                      return [\n                        _c(\n                          \"CForm\",\n                          {\n                            on: {\n                              submit: function($event) {\n                                $event.preventDefault()\n                                return _vm.processSubmit($event)\n                              }\n                            }\n                          },\n                          [\n                            _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"required|json|mType\",\n                                \"custom-messages\": {\n                                  required:\n                                    \"iqrfnet.sendJson.form.messages.missing\",\n                                  json:\n                                    \"iqrfnet.sendJson.form.messages.invalid\",\n                                  mType: \"iqrfnet.sendJson.form.messages.mType\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var touched = ref.touched\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CTextarea\", {\n                                          directives: [\n                                            {\n                                              name: \"autogrow\",\n                                              rawName: \"v-autogrow\"\n                                            }\n                                          ],\n                                          attrs: {\n                                            label: _vm.$t(\n                                              \"iqrfnet.sendJson.form.json\"\n                                            ),\n                                            \"is-valid\": touched ? valid : null,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            )\n                                          },\n                                          model: {\n                                            value: _vm.json,\n                                            callback: function($$v) {\n                                              _vm.json = $$v\n                                            },\n                                            expression: \"json\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            }),\n                            _vm._v(\" \"),\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: {\n                                  color: \"primary\",\n                                  type: \"submit\",\n                                  disabled: invalid\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"forms.send\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\"\n                                )\n                              ]\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  }\n                ])\n              })\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CRow\",\n        [\n          _vm.request !== null\n            ? _c(\n                \"CCol\",\n                { attrs: { md: \"6\" } },\n                [\n                  _c(\n                    \"CCard\",\n                    [\n                      _c(\"CCardHeader\", [\n                        _vm._v(\n                          \"\\n\\t\\t\\t\\t\\t\" +\n                            _vm._s(_vm.$t(\"iqrfnet.sendJson.request\")) +\n                            \"\\n\\t\\t\\t\\t\"\n                        )\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\n                        \"CCardBody\",\n                        [\n                          _c(\"prism-editor\", {\n                            attrs: {\n                              highlight: _vm.highlighter,\n                              readonly: true\n                            },\n                            model: {\n                              value: _vm.request,\n                              callback: function($$v) {\n                                _vm.request = $$v\n                              },\n                              expression: \"request\"\n                            }\n                          })\n                        ],\n                        1\n                      )\n                    ],\n                    1\n                  )\n                ],\n                1\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.response !== null\n            ? _c(\n                \"CCol\",\n                { attrs: { md: \"6\" } },\n                [\n                  _c(\n                    \"CCard\",\n                    [\n                      _c(\"CCardHeader\", [\n                        _vm._v(\n                          \"\\n\\t\\t\\t\\t\\t\" +\n                            _vm._s(_vm.$t(\"iqrfnet.sendJson.response\")) +\n                            \"\\n\\t\\t\\t\\t\"\n                        )\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\n                        \"CCardBody\",\n                        [\n                          _c(\"prism-editor\", {\n                            attrs: {\n                              highlight: _vm.highlighter,\n                              readonly: true\n                            },\n                            model: {\n                              value: _vm.response,\n                              callback: function($$v) {\n                                _vm.response = $$v\n                              },\n                              expression: \"response\"\n                            }\n                          })\n                        ],\n                        1\n                      )\n                    ],\n                    1\n                  )\n                ],\n                1\n              )\n            : _vm._e()\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","/**\n * JSON request error status code messages\n */\nexport var StatusMessages;\n(function (StatusMessages) {\n    StatusMessages[StatusMessages[\"iqrfnet.sendJson.form.messages.error.timeout\"] = -1] = \"iqrfnet.sendJson.form.messages.error.timeout\";\n    StatusMessages[StatusMessages[\"iqrfnet.sendJson.form.messages.error.fail\"] = 1] = \"iqrfnet.sendJson.form.messages.error.fail\";\n    StatusMessages[StatusMessages[\"iqrfnet.sendJson.form.messages.error.pcmd\"] = 2] = \"iqrfnet.sendJson.form.messages.error.pcmd\";\n    StatusMessages[StatusMessages[\"iqrfnet.sendJson.form.messages.error.pnum\"] = 3] = \"iqrfnet.sendJson.form.messages.error.pnum\";\n    StatusMessages[StatusMessages[\"iqrfnet.sendJson.form.messages.error.addr\"] = 4] = \"iqrfnet.sendJson.form.messages.error.addr\";\n    StatusMessages[StatusMessages[\"iqrfnet.sendJson.form.messages.error.dataLen\"] = 5] = \"iqrfnet.sendJson.form.messages.error.dataLen\";\n    StatusMessages[StatusMessages[\"iqrfnet.sendJson.form.messages.error.data\"] = 6] = \"iqrfnet.sendJson.form.messages.error.data\";\n    StatusMessages[StatusMessages[\"iqrfnet.sendJson.form.messages.error.hwpid\"] = 7] = \"iqrfnet.sendJson.form.messages.error.hwpid\";\n    StatusMessages[StatusMessages[\"iqrfnet.sendJson.form.messages.error.nadr\"] = 8] = \"iqrfnet.sendJson.form.messages.error.nadr\";\n})(StatusMessages || (StatusMessages = {}));\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SendJsonRequest.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SendJsonRequest.vue?vue&type=script&lang=js&\"","<template>\n\t<div>\n\t\t<CCard>\n\t\t\t<CCardHeader>\n\t\t\t\t<CButton \n\t\t\t\t\tcolor='primary'\n\t\t\t\t\tsize='sm' \n\t\t\t\t\thref='https://docs.iqrf.org/iqrf-gateway/api.html'\n\t\t\t\t\ttarget='_blank'\n\t\t\t\t>\n\t\t\t\t\t{{ $t(\"iqrfnet.sendJson.documentation\") }}\n\t\t\t\t</CButton>\n\t\t\t</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t\t<CForm @submit.prevent='processSubmit'>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='required|json|mType'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\trequired: \"iqrfnet.sendJson.form.messages.missing\",\n\t\t\t\t\t\t\t\tjson: \"iqrfnet.sendJson.form.messages.invalid\",\n\t\t\t\t\t\t\t\tmType: \"iqrfnet.sendJson.form.messages.mType\"\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CTextarea\n\t\t\t\t\t\t\t\tv-model='json'\n\t\t\t\t\t\t\t\tv-autogrow\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.sendJson.form.json\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t\t\t{{ $t('forms.send') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</CForm>\n\t\t\t\t</ValidationObserver>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t\t<CRow>\n\t\t\t<CCol v-if='request !== null' md='6'>\n\t\t\t\t<CCard>\n\t\t\t\t\t<CCardHeader>\n\t\t\t\t\t\t{{ $t('iqrfnet.sendJson.request') }}\n\t\t\t\t\t</CCardHeader>\n\t\t\t\t\t<CCardBody>\n\t\t\t\t\t\t<prism-editor v-model='request' :highlight='highlighter' :readonly='true' />\n\t\t\t\t\t</CCardBody>\n\t\t\t\t</CCard>\n\t\t\t</CCol>\n\t\t\t<CCol v-if='response !== null' md='6'>\n\t\t\t\t<CCard>\n\t\t\t\t\t<CCardHeader>\n\t\t\t\t\t\t{{ $t('iqrfnet.sendJson.response') }}\n\t\t\t\t\t</CCardHeader>\n\t\t\t\t\t<CCardBody>\n\t\t\t\t\t\t<prism-editor v-model='response' :highlight='highlighter' :readonly='true' />\n\t\t\t\t\t</CCardBody>\n\t\t\t\t</CCard>\n\t\t\t</CCol>\n\t\t</CRow>\n\t</div>\n</template>\n\n<script>\n\nimport {CButton, CCard, CCardBody, CCardHeader, CForm, CTextarea} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {required} from 'vee-validate/dist/rules';\nimport {timeout} from '../../helpers/timeout';\nimport {TextareaAutogrowDirective} from 'vue-textarea-autogrow-directive/src/VueTextareaAutogrowDirective';\nimport {StatusMessages} from '../../iqrfNet/sendJson';\nimport IqrfNetService from '../../services/IqrfNetService';\n\nimport {PrismEditor} from 'vue-prism-editor';\nimport 'vue-prism-editor/dist/prismeditor.min.css';\nimport Prism from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-json';\nimport 'prismjs/themes/prism.css';\n\nexport default {\n\tname: 'SendJsonRequest',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCTextarea,\n\t\tPrismEditor,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tdirectives: {\n\t\t'autogrow': TextareaAutogrowDirective\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tjson: null,\n\t\t\trequest: null,\n\t\t\tresponse: null,\n\t\t\ttimeout: null\n\t\t};\n\t},\n\tcreated() {\n\t\textend('json', (json) => {\n\t\t\ttry {\n\t\t\t\tJSON.parse(json);\n\t\t\t\treturn true;\n\t\t\t} catch (error) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t\textend('mType', (json) => {\n\t\t\tlet object = JSON.parse(json);\n\t\t\treturn {}.hasOwnProperty.call(object, 'mType');\n\t\t});\n\t\textend('required', required);\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONSEND') {\n\t\t\t\tthis.timeout = timeout('iqrfnet.sendJson.form.messages.timeout', 10000);\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONMESSAGE') {\n\t\t\t\tif ({}.hasOwnProperty.call(mutation.payload, 'mType')) {\n\t\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.response = JSON.stringify(mutation.payload, null, 4);\n\t\t\t\t\tif (mutation.payload.data.status === 0) {\n\t\t\t\t\t\tthis.$toast.success(this.$t('iqrfnet.sendJson.form.messages.success').toString());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (mutation.payload.data.status in StatusMessages) {\n\t\t\t\t\t\t\tthis.$toast.error(this.$t(StatusMessages[mutation.payload.data.status]).toString());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.sendJson.form.messages.error.fail').toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\t/**\n\t\t * JSON highlighter method\n\t\t */\n\t\thighlighter(code) {\n\t\t\treturn Prism.highlight(code, Prism.languages.json, 'json');\n\t\t},\n\t\tprocessSubmit() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tlet json = JSON.parse(this.json);\n\t\t\tthis.request = JSON.stringify(json, null, 4);\n\t\t\tthis.response = null;\n\t\t\tIqrfNetService.sendJson(json);\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'iqrfnet.sendJson.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./SendJsonRequest.vue?vue&type=template&id=39c7ac2e&\"\nimport script from \"./SendJsonRequest.vue?vue&type=script&lang=js&\"\nexport * from \"./SendJsonRequest.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('39c7ac2e')) {\n      api.createRecord('39c7ac2e', component.options)\n    } else {\n      api.reload('39c7ac2e', component.options)\n    }\n    module.hot.accept(\"./SendJsonRequest.vue?vue&type=template&id=39c7ac2e&\", function () {\n      api.rerender('39c7ac2e', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/IqrfNet/SendJsonRequest.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        { attrs: { \"body-wrapper\": \"\" } },\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      {\n                        on: {\n                          submit: function($event) {\n                            $event.preventDefault()\n                            return _vm.handleSubmit($event)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"dpaPacket|required\",\n                            \"custom-messages\": {\n                              required:\n                                \"iqrfnet.sendPacket.form.messages.missing.packet\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var valid = ref.valid\n                                  var touched = ref.touched\n                                  var errors = ref.errors\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"iqrfnet.sendPacket.form.packet\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      on: { input: _vm.setTimeout },\n                                      model: {\n                                        value: _vm.packet,\n                                        callback: function($$v) {\n                                          _vm.packet = $$v\n                                        },\n                                        expression: \"packet\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CRow\",\n                          [\n                            _c(\n                              \"CCol\",\n                              { attrs: { md: \"6\" } },\n                              [\n                                _c(\"CInputCheckbox\", {\n                                  attrs: {\n                                    checked: _vm.addressOverwrite,\n                                    label: _vm.$t(\n                                      \"iqrfnet.sendPacket.form.addressOverwrite\"\n                                    )\n                                  },\n                                  on: {\n                                    \"update:checked\": function($event) {\n                                      _vm.addressOverwrite = $event\n                                    }\n                                  }\n                                }),\n                                _vm._v(\" \"),\n                                _c(\"ValidationProvider\", {\n                                  attrs: {\n                                    disabled: !_vm.addressOverwrite,\n                                    rules: _vm.addressOverwrite\n                                      ? \"integer|between:0,239|required\"\n                                      : \"\",\n                                    \"custom-messages\": {\n                                      between:\n                                        \"iqrfnet.sendPacket.form.messages.invalid.address\",\n                                      integer:\n                                        \"iqrfnet.sendPacket.form.messages.invalid.address\",\n                                      required:\n                                        \"iqrfnet.sendPacket.form.messages.missing.address\"\n                                    }\n                                  },\n                                  scopedSlots: _vm._u(\n                                    [\n                                      {\n                                        key: \"default\",\n                                        fn: function(ref) {\n                                          var valid = ref.valid\n                                          var touched = ref.touched\n                                          var errors = ref.errors\n                                          return [\n                                            _c(\"CInput\", {\n                                              attrs: {\n                                                disabled: !_vm.addressOverwrite,\n                                                label: _vm.$t(\n                                                  \"iqrfnet.sendPacket.form.address\"\n                                                ),\n                                                \"is-valid\":\n                                                  _vm.addressOverwrite &&\n                                                  touched\n                                                    ? valid\n                                                    : null,\n                                                \"invalid-feedback\": _vm.$t(\n                                                  errors[0]\n                                                ),\n                                                type: \"number\",\n                                                min: \"0\",\n                                                max: \"239\"\n                                              },\n                                              model: {\n                                                value: _vm.address,\n                                                callback: function($$v) {\n                                                  _vm.address = _vm._n($$v)\n                                                },\n                                                expression: \"address\"\n                                              }\n                                            })\n                                          ]\n                                        }\n                                      }\n                                    ],\n                                    null,\n                                    true\n                                  )\n                                })\n                              ],\n                              1\n                            ),\n                            _vm._v(\" \"),\n                            _c(\n                              \"CCol\",\n                              { attrs: { md: \"6\" } },\n                              [\n                                _c(\"CInputCheckbox\", {\n                                  attrs: {\n                                    checked: _vm.timeoutOverwrite,\n                                    label: _vm.$t(\n                                      \"iqrfnet.sendPacket.form.timeoutOverwrite\"\n                                    )\n                                  },\n                                  on: {\n                                    \"update:checked\": function($event) {\n                                      _vm.timeoutOverwrite = $event\n                                    }\n                                  }\n                                }),\n                                _vm._v(\" \"),\n                                _c(\"ValidationProvider\", {\n                                  attrs: {\n                                    rules: _vm.timeoutOverwrite\n                                      ? \"integer|min:0|required\"\n                                      : \"\",\n                                    \"custom-messages\": {\n                                      integer:\n                                        \"iqrfnet.sendPacket.form.messages.invalid.timeout\",\n                                      min:\n                                        \"iqrfnet.sendPacket.form.messages.invalid.timeout\",\n                                      required:\n                                        \"iqrfnet.sendPacket.form.messages.missing.timeout\"\n                                    }\n                                  },\n                                  scopedSlots: _vm._u(\n                                    [\n                                      {\n                                        key: \"default\",\n                                        fn: function(ref) {\n                                          var valid = ref.valid\n                                          var touched = ref.touched\n                                          var errors = ref.errors\n                                          return [\n                                            _c(\"CInput\", {\n                                              attrs: {\n                                                disabled: !_vm.timeoutOverwrite,\n                                                label: _vm.$t(\n                                                  \"iqrfnet.sendPacket.form.timeout\"\n                                                ),\n                                                \"is-valid\":\n                                                  _vm.timeoutOverwrite &&\n                                                  touched\n                                                    ? valid\n                                                    : null,\n                                                \"invalid-feedback\": _vm.$t(\n                                                  errors[0]\n                                                ),\n                                                type: \"number\"\n                                              },\n                                              model: {\n                                                value: _vm.timeout,\n                                                callback: function($$v) {\n                                                  _vm.timeout = _vm._n($$v)\n                                                },\n                                                expression: \"timeout\"\n                                              }\n                                            })\n                                          ]\n                                        }\n                                      }\n                                    ],\n                                    null,\n                                    true\n                                  )\n                                })\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              color: \"primary\",\n                              type: \"submit\",\n                              disabled: invalid\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.send\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\"DpaMacros\", {\n        on: {\n          \"set-packet\": function($event) {\n            return _vm.setPacket($event)\n          }\n        }\n      }),\n      _vm._v(\" \"),\n      _c(\n        \"CRow\",\n        [\n          _c(\n            \"CCol\",\n            { attrs: { md: \"6\" } },\n            [\n              _vm.request !== null\n                ? _c(\n                    \"CCard\",\n                    [\n                      _c(\"CCardHeader\", [\n                        _vm._v(_vm._s(_vm.$t(\"iqrfnet.sendPacket.request\")))\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\n                        \"CCardBody\",\n                        [\n                          _c(\"prism-editor\", {\n                            attrs: {\n                              highlight: _vm.highlighter,\n                              readonly: true\n                            },\n                            model: {\n                              value: _vm.request,\n                              callback: function($$v) {\n                                _vm.request = $$v\n                              },\n                              expression: \"request\"\n                            }\n                          })\n                        ],\n                        1\n                      )\n                    ],\n                    1\n                  )\n                : _vm._e()\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CCol\",\n            { attrs: { md: \"6\" } },\n            [\n              _vm.response !== null\n                ? _c(\n                    \"CCard\",\n                    [\n                      _c(\"CCardHeader\", [\n                        _vm._v(_vm._s(_vm.$t(\"iqrfnet.sendPacket.response\")))\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\n                        \"CCardBody\",\n                        [\n                          _c(\"prism-editor\", {\n                            attrs: {\n                              highlight: _vm.highlighter,\n                              readonly: true\n                            },\n                            model: {\n                              value: _vm.response,\n                              callback: function($$v) {\n                                _vm.response = $$v\n                              },\n                              expression: \"response\"\n                            }\n                          })\n                        ],\n                        1\n                      )\n                    ],\n                    1\n                  )\n                : _vm._e()\n            ],\n            1\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.macros\n    ? _c(\n        \"CCard\",\n        [\n          _c(\"CCardHeader\", [\n            _vm._v(\n              \"\\n\\t\\t\" + _vm._s(_vm.$t(\"iqrfnet.sendPacket.macros\")) + \"\\n\\t\"\n            )\n          ]),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\n                \"CButtonGroup\",\n                { staticClass: \"flex-wrap\" },\n                _vm._l(_vm.macros, function(group) {\n                  return _c(\n                    \"CDropdown\",\n                    {\n                      key: group.id,\n                      attrs: {\n                        \"toggler-text\": group.name,\n                        color: \"primary\",\n                        placement: \"top-start\"\n                      }\n                    },\n                    _vm._l(group.macros, function(packet) {\n                      return _c(\n                        \"CDropdownItem\",\n                        {\n                          key: packet.name,\n                          on: {\n                            click: function($event) {\n                              return _vm.$emit(\"set-packet\", packet.request)\n                            }\n                          }\n                        },\n                        [\n                          _vm._v(\n                            \"\\n\\t\\t\\t\\t\\t\" + _vm._s(packet.name) + \"\\n\\t\\t\\t\\t\"\n                          )\n                        ]\n                      )\n                    }),\n                    1\n                  )\n                }),\n                1\n              )\n            ],\n            1\n          )\n        ],\n        1\n      )\n    : _vm._e()\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\n/**\n * IQRF networks service\n */\nvar IqrfService = /** @class */ (function () {\n    function IqrfService() {\n    }\n    /**\n     * Retrieves IQRF interface ports\n     */\n    IqrfService.prototype.getInterfacePorts = function (interfaceType) {\n        return axios.get('iqrf/interfaces/', { headers: authorizationHeader() })\n            .then(function (response) {\n            return response.data[interfaceType];\n        });\n    };\n    /**\n     * Retrieves IQRF IDE Macros\n     */\n    IqrfService.prototype.getMacros = function () {\n        return axios.get('iqrf/macros/', { headers: authorizationHeader() });\n    };\n    return IqrfService;\n}());\nexport default new IqrfService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DpaMacros.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DpaMacros.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard v-if='macros'>\n\t\t<CCardHeader>\n\t\t\t{{ $t('iqrfnet.sendPacket.macros') }}\n\t\t</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<CButtonGroup class='flex-wrap'>\n\t\t\t\t<CDropdown\n\t\t\t\t\tv-for='group of macros'\n\t\t\t\t\t:key='group.id'\n\t\t\t\t\t:toggler-text='group.name'\n\t\t\t\t\tcolor='primary'\n\t\t\t\t\tplacement='top-start'\n\t\t\t\t>\n\t\t\t\t\t<CDropdownItem\n\t\t\t\t\t\tv-for='packet of group.macros'\n\t\t\t\t\t\t:key='packet.name'\n\t\t\t\t\t\t@click='$emit(\"set-packet\", packet.request)'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ packet.name }}\n\t\t\t\t\t</CDropdownItem>\n\t\t\t\t</CDropdown>\n\t\t\t</CButtonGroup>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButtonGroup, CCard, CCardBody, CCardHeader, CDropdown, CDropdownItem} from '@coreui/vue/src';\nimport IqrfService from '../../services/IqrfService';\n\nexport default {\n\tname: 'DpaMacros',\n\tcomponents: {\n\t\tCButtonGroup,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCDropdown,\n\t\tCDropdownItem,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tmacros: null,\n\t\t};\n\t},\n\tcreated() {\n\t\tIqrfService.getMacros()\n\t\t\t.then((response) => {\n\t\t\t\tthis.macros = response.data.filter((group) => {\n\t\t\t\t\tif (!group.enabled) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tgroup.macros = group.macros.filter((packet) => {\n\t\t\t\t\t\tif (packet.enabled) {\n\t\t\t\t\t\t\treturn packet;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\treturn group;\n\t\t\t\t});\n\t\t\t});\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./DpaMacros.vue?vue&type=template&id=676e4146&\"\nimport script from \"./DpaMacros.vue?vue&type=script&lang=js&\"\nexport * from \"./DpaMacros.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('676e4146')) {\n      api.createRecord('676e4146', component.options)\n    } else {\n      api.reload('676e4146', component.options)\n    }\n    module.hot.accept(\"./DpaMacros.vue?vue&type=template&id=676e4146&\", function () {\n      api.rerender('676e4146', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/DpaMacros.vue\"\nexport default component.exports","/**\n * Copyright 2017 MICRORISC s.r.o.\n * Copyright 2017-2019 IQRF Tech s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\n/**\n * DPA packet\n */\nvar Packet = /** @class */ (function () {\n    /**\n     * Constructor\n     * @param nadr NADR\n     * @param pnum PNUM\n     * @param pcmd PCMD\n     * @param hwpid HWPID\n     * @param pdata PDATA\n     */\n    function Packet(nadr, pnum, pcmd, hwpid, pdata) {\n        this.nadr = nadr;\n        this.pnum = pnum;\n        this.pcmd = pcmd;\n        this.hwpid = hwpid;\n        this.pdata = pdata;\n    }\n    /**\n     * Detect timeout from parsed DPA packet\n     * @returns DPA timeout\n     */\n    Packet.prototype.detectTimeout = function () {\n        var timeout = null;\n        if (this.pnum === 0 && this.pcmd === 4) {\n            timeout = 12000;\n        }\n        else if (this.pnum === 0 && this.pcmd === 7) {\n            timeout = 0;\n        }\n        else if (this.pnum === 13 && this.pcmd === 0) {\n            timeout = 6000;\n        }\n        return timeout;\n    };\n    /**\n     * Parses DPA packet\n     * @param {string} packet DPA packet to parse\n     * @returns {Packet} Parsed DPA packet\n     */\n    Packet.parse = function (packet) {\n        var packetArray = packet.split('.');\n        var nadrLo = packetArray.shift();\n        var nadrHi = packetArray.shift();\n        var nadr = parseInt(nadrHi + nadrLo, 16);\n        var pnum = parseInt(packetArray.shift(), 16);\n        var pcmd = parseInt(packetArray.shift(), 16);\n        var hwpidLo = packetArray.shift();\n        var hwpidHi = packetArray.shift();\n        var hwpid = parseInt(hwpidHi + hwpidLo, 16);\n        var pdata = packetArray.map(function (hex) { return parseInt(hex, 16); });\n        return new Packet(nadr, pnum, pcmd, hwpid, pdata);\n    };\n    /**\n     * Returns DPA packet string\n     * @returns {string} DPA packet as string\n     */\n    Packet.prototype.toString = function () {\n        return __spreadArrays([\n            this.nadr & 255, this.nadr >> 8, this.pnum, this.pcmd,\n            this.hwpid & 255, this.hwpid >> 8\n        ], this.pdata).map(function (int) { return int.toString(16).padStart(2, '0'); }).join('.');\n    };\n    return Packet;\n}());\n/**\n * Validate DPA packet\n * @param packet DPA packet to validate\n * @returns Is valid DPA packet?\n */\nfunction validatePacket(packet) {\n    var re = new RegExp('^([0-9a-fA-F]{1,2}\\\\.){4,62}[0-9a-fA-F]{1,2}(\\\\.|)$', 'i');\n    return packet.match(re) !== null;\n}\n/**\n * Updates NADR in DPA packet\n * @param request DPA request to modify\n * @param address New NADR\n * @returns Modified DPA request\n */\nfunction updateNadr(request, address) {\n    var packet = Packet.parse(request);\n    packet.nadr = address;\n    return packet.toString();\n}\nexport default { Packet: Packet, updateNadr: updateNadr, validatePacket: validatePacket };\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SendDpaPacket.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SendDpaPacket.vue?vue&type=script&lang=js&\"","<template>\n\t<div>\n\t\t<CCard body-wrapper>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='handleSubmit'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\trules='dpaPacket|required'\n\t\t\t\t\t\t:custom-messages='{required: \"iqrfnet.sendPacket.form.messages.missing.packet\"}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='packet'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.sendPacket.form.packet\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t@input='setTimeout'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CRow>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='addressOverwrite'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.sendPacket.form.addressOverwrite\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t:disabled='!addressOverwrite'\n\t\t\t\t\t\t\t\t:rules='addressOverwrite ? \"integer|between:0,239|required\" : \"\"'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.sendPacket.form.messages.invalid.address\",\n\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.sendPacket.form.messages.invalid.address\",\n\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.sendPacket.form.messages.missing.address\",\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='address'\n\t\t\t\t\t\t\t\t\t:disabled='!addressOverwrite'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.sendPacket.form.address\")'\n\t\t\t\t\t\t\t\t\t:is-valid='addressOverwrite && touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='timeoutOverwrite'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.sendPacket.form.timeoutOverwrite\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t:rules='timeoutOverwrite ? \"integer|min:0|required\" : \"\"'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.sendPacket.form.messages.invalid.timeout\",\n\t\t\t\t\t\t\t\t\tmin: \"iqrfnet.sendPacket.form.messages.invalid.timeout\",\n\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.sendPacket.form.messages.missing.timeout\",\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='timeout'\n\t\t\t\t\t\t\t\t\t:disabled='!timeoutOverwrite'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.sendPacket.form.timeout\")'\n\t\t\t\t\t\t\t\t\t:is-valid='timeoutOverwrite && touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t</CRow>\n\t\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.send') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCard>\n\t\t<DpaMacros @set-packet='setPacket($event)' />\n\t\t<CRow>\n\t\t\t<CCol md='6'>\n\t\t\t\t<CCard v-if='request !== null'>\n\t\t\t\t\t<CCardHeader>{{ $t('iqrfnet.sendPacket.request') }}</CCardHeader>\n\t\t\t\t\t<CCardBody>\n\t\t\t\t\t\t<prism-editor v-model='request' :highlight='highlighter' :readonly='true' />\n\t\t\t\t\t</CCardBody>\n\t\t\t\t</CCard>\n\t\t\t</CCol>\n\t\t\t<CCol md='6'>\n\t\t\t\t<CCard v-if='response !== null'>\n\t\t\t\t\t<CCardHeader>{{ $t('iqrfnet.sendPacket.response') }}</CCardHeader>\n\t\t\t\t\t<CCardBody>\n\t\t\t\t\t\t<prism-editor v-model='response' :highlight='highlighter' :readonly='true' />\n\t\t\t\t\t</CCardBody>\n\t\t\t\t</CCard>\n\t\t\t</CCol>\n\t\t</CRow>\n\t</div>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CCol, CForm, CInput, CInputCheckbox, CRow} from '@coreui/vue/src';\nimport DpaMacros from '../../components/IqrfNet/DpaMacros';\nimport {between, integer, min_value, required} from 'vee-validate/dist/rules';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport sendPacket from '../../iqrfNet/sendPacket';\n\nimport {PrismEditor} from 'vue-prism-editor';\nimport 'vue-prism-editor/dist/prismeditor.min.css';\nimport Prism from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-json';\nimport 'prismjs/themes/prism.css';\n\nexport default {\n\tname: 'SendDpaPacket',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCCol,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tCRow,\n\t\tDpaMacros,\n\t\tPrismEditor,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tpacket: null,\n\t\t\taddress: 0,\n\t\t\taddressOverwrite: false,\n\t\t\ttimeout: 1000,\n\t\t\ttimeoutOverwrite: false,\n\t\t\trequest: null,\n\t\t\tresponse: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('min', min_value);\n\t\textend('required', required);\n\t\textend('dpaPacket', (packet) => {\n\t\t\treturn sendPacket.validatePacket(packet) ? true : 'iqrfnet.sendPacket.form.messages.invalid.packet';\n\t\t});\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONSEND' &&\n\t\t\t\t\tmutation.payload.mType === 'iqrfRaw') {\n\t\t\t\tthis.request = JSON.stringify(mutation.payload, null, 4);\n\t\t\t\tthis.response = null;\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONMESSAGE' &&\n\t\t\t\t\tmutation.payload.mType === 'iqrfRaw') {\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\tthis.response = JSON.stringify(mutation.payload, null, 4);\n\t\t\t\tswitch (mutation.payload.data.status) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tthis.$toast.success(this.$t('iqrfnet.sendPacket.messages.success').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.sendPacket.messages.incorrect.pcmd').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.sendPacket.messages.incorrect.pnum').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.sendPacket.messages.incorrect.dataLength').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.sendPacket.messages.incorrect.data').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.sendPacket.messages.incorrect.hwpid').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.sendPacket.messages.incorrect.nadr').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.sendPacket.messages.failure').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\t/**\n\t\t * Handles Send DPA packet form submit event\n\t\t */\n\t\thandleSubmit() {\n\t\t\tif (this.packet === null || this.packet === '') {\n\t\t\t\tthis.$toast.error(this.$t('iqrfnet.sendPacket.form.messages.missing.packet').toString());\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tlet json = {\n\t\t\t\t'mType': 'iqrfRaw',\n\t\t\t\t'data': {\n\t\t\t\t\t'req': {\n\t\t\t\t\t\t'rData': this.packet,\n\t\t\t\t\t},\n\t\t\t\t\t'returnVerbose': true,\n\t\t\t\t},\n\t\t\t};\n\t\t\tif (this.addressOverwrite && this.address !== null) {\n\t\t\t\tjson.data.req.rData = sendPacket.updateNadr(this.packet, this.address);\n\t\t\t}\n\t\t\tif (this.timeoutOverwrite && this.timeout !== null) {\n\t\t\t\tjson.data.timeout = this.timeout;\n\t\t\t}\n\t\t\treturn this.$store.dispatch('sendRequest', json);\n\t\t},\n\t\t/**\n\t\t * JSON highlighter method\n\t\t */\n\t\thighlighter(code) {\n\t\t\treturn Prism.highlight(code, Prism.languages.json, 'json');\n\t\t},\n\t\t/**\n\t\t * Sets new DPA packet\n\t\t * @param {string} newPacket New DPA packet\n\t\t */\n\t\tsetPacket(newPacket) {\n\t\t\tthis.packet = newPacket;\n\t\t\tthis.setTimeout();\n\t\t},\n\t\t/**\n\t\t * Sets DPA timeout\n\t\t */\n\t\tsetTimeout() {\n\t\t\tlet packet = sendPacket.Packet.parse(this.packet);\n\t\t\tlet newTimeout = packet.detectTimeout();\n\t\t\tif (newTimeout === null) {\n\t\t\t\tthis.timeoutOverwrite = false;\n\t\t\t\tthis.timeout = 1000;\n\t\t\t} else {\n\t\t\t\tthis.timeoutOverwrite = true;\n\t\t\t\tthis.timeout = newTimeout;\n\t\t\t}\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'iqrfnet.sendPacket.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./SendDpaPacket.vue?vue&type=template&id=fea8cab8&\"\nimport script from \"./SendDpaPacket.vue?vue&type=script&lang=js&\"\nexport * from \"./SendDpaPacket.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('fea8cab8')) {\n      api.createRecord('fea8cab8', component.options)\n    } else {\n      api.reload('fea8cab8', component.options)\n    }\n    module.hot.accept(\"./SendDpaPacket.vue?vue&type=template&id=fea8cab8&\", function () {\n      api.rerender('fea8cab8', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/IqrfNet/SendDpaPacket.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CRow\",\n    [\n      _c(\n        \"CCol\",\n        { attrs: { md: \"6\" } },\n        [_c(\"BinaryOutputManager\"), _vm._v(\" \"), _c(\"SensorManager\")],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CCol\",\n        { attrs: { md: \"6\" } },\n        [_c(\"LightManager\"), _vm._v(\" \"), _c(\"DaliManager\")],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\"CCardHeader\", [\n        _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.binaryOutput.title\")))\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|between:1,239\",\n                            \"custom-messages\": {\n                              integer: \"forms.messages.integer\",\n                              required:\n                                \"iqrfnet.standard.form.messages.address\",\n                              between: \"iqrfnet.standard.form.messages.address\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"1\",\n                                        max: \"239\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.standard.form.address\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.address,\n                                        callback: function($$v) {\n                                          _vm.address = _vm._n($$v)\n                                        },\n                                        expression: \"address\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|between:0,31\",\n                            \"custom-messages\": {\n                              integer: \"forms.messages.integer\",\n                              required:\n                                \"iqrfnet.standard.binaryOutput.form.messages.index\",\n                              between:\n                                \"iqrfnet.standard.binaryOutput.form.messages.index\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        max: \"31\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.standard.binaryOutput.form.index\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.index,\n                                        callback: function($$v) {\n                                          _vm.index = _vm._n($$v)\n                                        },\n                                        expression: \"index\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _c(\"label\", { attrs: { for: \"formStateSwitch\" } }, [\n                              _vm._v(\n                                \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                  _vm._s(\n                                    _vm.$t(\n                                      \"iqrfnet.standard.binaryOutput.form.state\"\n                                    )\n                                  ) +\n                                  \"\\n\\t\\t\\t\\t\\t\"\n                              )\n                            ]),\n                            _c(\"br\"),\n                            _vm._v(\" \"),\n                            _c(\"CSwitch\", {\n                              attrs: {\n                                id: \"formStateSwitch\",\n                                checked: _vm.state,\n                                color: \"primary\",\n                                size: \"lg\",\n                                shape: \"pill\",\n                                \"label-on\": _vm.$t(\n                                  \"iqrfnet.standard.binaryOutput.form.enabled\"\n                                ),\n                                \"label-off\": _vm.$t(\n                                  \"iqrfnet.standard.binaryOutput.form.disabled\"\n                                )\n                              },\n                              on: {\n                                \"update:checked\": function($event) {\n                                  _vm.state = $event\n                                }\n                              }\n                            })\n                          ],\n                          1\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"primary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitEnumerate($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.enumerate\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitGetStates($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\n                                    \"iqrfnet.standard.binaryOutput.form.getStates\"\n                                  )\n                                ) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitSetState($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\n                                    \"iqrfnet.standard.binaryOutput.form.setState\"\n                                  )\n                                ) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _vm.responseType !== null\n        ? _c(\"CCardFooter\", [\n            _vm.responseType === \"enum\"\n              ? _c(\"table\", { staticClass: \"table\" }, [\n                  _c(\"thead\", [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"iqrfnet.standard.binaryOutput.enum\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"tbody\", [\n                    _c(\"tr\", [\n                      _c(\"th\", [\n                        _vm._v(\n                          _vm._s(\n                            _vm.$t(\"iqrfnet.standard.binaryOutput.outputs\")\n                          )\n                        )\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"td\", [_vm._v(_vm._s(_vm.numOutputs))])\n                    ])\n                  ])\n                ])\n              : _vm._e(),\n            _vm._v(\" \"),\n            _vm.responseType === \"set\"\n              ? _c(\"table\", { staticClass: \"table scroll-table\" }, [\n                  _c(\"thead\", [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"iqrfnet.standard.binaryOutput.prev\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"tbody\", [\n                    _c(\n                      \"tr\",\n                      [\n                        _c(\"th\", [\n                          _vm._v(\n                            _vm._s(\n                              _vm.$t(\"iqrfnet.standard.binaryOutput.index\")\n                            )\n                          )\n                        ]),\n                        _vm._v(\" \"),\n                        _vm._l(Array(32).keys(), function(col) {\n                          return _c(\"td\", { key: col }, [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\\t\" + _vm._s(col) + \"\\n\\t\\t\\t\\t\\t\"\n                            )\n                          ])\n                        })\n                      ],\n                      2\n                    ),\n                    _vm._v(\" \"),\n                    _c(\n                      \"tr\",\n                      [\n                        _c(\"th\", [\n                          _vm._v(\n                            _vm._s(\n                              _vm.$t(\"iqrfnet.standard.binaryOutput.state\")\n                            )\n                          )\n                        ]),\n                        _vm._v(\" \"),\n                        _vm._l(Array(32).keys(), function(ind) {\n                          return _c(\n                            \"td\",\n                            { key: ind },\n                            [\n                              _vm.states[ind] === true\n                                ? _c(\"CIcon\", {\n                                    staticClass: \"text-success\",\n                                    attrs: { content: _vm.$options.icons.on }\n                                  })\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              _vm.states[ind] === false\n                                ? _c(\"CIcon\", {\n                                    staticClass: \"text-danger\",\n                                    attrs: { content: _vm.$options.icons.off }\n                                  })\n                                : _vm._e()\n                            ],\n                            1\n                          )\n                        })\n                      ],\n                      2\n                    )\n                  ])\n                ])\n              : _vm._e()\n          ])\n        : _vm._e()\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import store from '../../store';\n/**\n * IQRF Standard binary output service\n */\nvar StandardBinaryOutputService = /** @class */ (function () {\n    function StandardBinaryOutputService() {\n    }\n    /**\n     * Performs Binary Output enumeration on device specified by address.\n     * @param address Node address\n     */\n    StandardBinaryOutputService.prototype.enumerate = function (address) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfBinaryoutput_Enumerate',\n            'data': {\n                'req': {\n                    'nAdr': address,\n                    'param': {},\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Retrieves states of binary outputs.\n     * @param address Node address\n     */\n    StandardBinaryOutputService.prototype.getOutputs = function (address) {\n        return this.setOutputs(address, []);\n    };\n    /**\n     * Sets binary outputs to a specified state.\n     * If no output settings are specified, only previous states of binary outputs are retrieved.\n     * @param address Node address\n     * @param outputs New output setting\n     */\n    StandardBinaryOutputService.prototype.setOutputs = function (address, outputs) {\n        if (outputs === void 0) { outputs = null; }\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfBinaryoutput_SetOutput',\n            'data': {\n                'req': {\n                    'nAdr': address,\n                    'param': {\n                        'binOuts': outputs !== null && outputs !== void 0 ? outputs : [],\n                    },\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    return StandardBinaryOutputService;\n}());\nexport default new StandardBinaryOutputService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BinaryOutputManager.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BinaryOutputManager.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard>\n\t\t<CCardHeader>{{ $t('iqrfnet.standard.binaryOutput.title') }}</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:1,239'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.standard.form.messages.address\",\n\t\t\t\t\t\t\tbetween: \"iqrfnet.standard.form.messages.address\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='address'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.standard.form.address\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:0,31'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.standard.binaryOutput.form.messages.index\",\n\t\t\t\t\t\t\tbetween: \"iqrfnet.standard.binaryOutput.form.messages.index\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='index'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='31'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.standard.binaryOutput.form.index\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<div class='form-group'>\n\t\t\t\t\t\t<label for='formStateSwitch'>\n\t\t\t\t\t\t\t{{ $t('iqrfnet.standard.binaryOutput.form.state') }}\n\t\t\t\t\t\t</label><br>\n\t\t\t\t\t\t<CSwitch\n\t\t\t\t\t\t\tid='formStateSwitch'\n\t\t\t\t\t\t\t:checked.sync='state'\n\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\tsize='lg'\n\t\t\t\t\t\t\tshape='pill'\n\t\t\t\t\t\t\t:label-on='$t(\"iqrfnet.standard.binaryOutput.form.enabled\")'\n\t\t\t\t\t\t\t:label-off='$t(\"iqrfnet.standard.binaryOutput.form.disabled\")'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<CButton color='primary' :disabled='invalid' @click.prevent='submitEnumerate'>\n\t\t\t\t\t\t{{ $t('forms.enumerate') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton color='secondary' :disabled='invalid' @click.prevent='submitGetStates'>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.binaryOutput.form.getStates') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton color='secondary' :disabled='invalid' @click.prevent='submitSetState'>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.binaryOutput.form.setState') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t\t<CCardFooter v-if='responseType !== null'>\n\t\t\t<table v-if='responseType === \"enum\"' class='table'>\n\t\t\t\t<thead>\n\t\t\t\t\t{{ $t('iqrfnet.standard.binaryOutput.enum') }}\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.binaryOutput.outputs') }}</th>\n\t\t\t\t\t\t<td>{{ numOutputs }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<table v-if='responseType === \"set\"' class='table scroll-table'>\n\t\t\t\t<thead>\n\t\t\t\t\t{{ $t('iqrfnet.standard.binaryOutput.prev') }}\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.binaryOutput.index') }}</th>\n\t\t\t\t\t\t<td v-for='col of Array(32).keys()' :key='col'>\n\t\t\t\t\t\t\t{{ col }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.binaryOutput.state') }}</th>\n\t\t\t\t\t\t<td v-for='ind of Array(32).keys()' :key='ind'>\n\t\t\t\t\t\t\t<CIcon\n\t\t\t\t\t\t\t\tv-if='states[ind] === true'\n\t\t\t\t\t\t\t\tclass='text-success'\n\t\t\t\t\t\t\t\t:content='$options.icons.on'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<CIcon\n\t\t\t\t\t\t\t\tv-if='states[ind] === false'\n\t\t\t\t\t\t\t\tclass='text-danger'\n\t\t\t\t\t\t\t\t:content='$options.icons.off'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</CCardFooter>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CForm, CIcon, CInput, CSwitch} from '@coreui/vue/src';\nimport {cilCheckAlt, cilX} from '@coreui/icons';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {timeout} from '../../helpers/timeout';\nimport {between, integer, required} from 'vee-validate/dist/rules';\nimport StandardBinaryOutputService from '../../services/DaemonApi/StandardBinaryOutputService';\n\nexport default {\n\tname: 'BinaryOutputManager',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCIcon,\n\t\tCInput,\n\t\tCSwitch,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\taddress: 1,\n\t\t\tallowedMTypes: [\n\t\t\t\t'iqrfBinaryoutput_Enumerate',\n\t\t\t\t'iqrfBinaryoutput_SetOutput'\n\t\t\t],\n\t\t\tindex: 0,\n\t\t\tnumOutputs: 0,\n\t\t\tresponseType: null,\n\t\t\tstate: false,\n\t\t\tstates: null,\n\t\t\ttimeout: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\textend('between', between);\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONSEND') {\n\t\t\t\tif (!this.allowedMTypes.includes(mutation.payload.mType)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.responseType = null;\n\t\t\t\tthis.timeout = timeout('iqrfnet.networkManager.messages.submit.timeout', 10000);\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONMESSAGE') {\n\t\t\t\tif (!this.allowedMTypes.includes(mutation.payload.mType)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\tswitch(mutation.payload.data.status) {\n\t\t\t\t\tcase -1:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.standard.binaryOutput.messages.timeout').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tthis.$toast.success(this.$t('iqrfnet.standard.binaryOutput.messages.success').toString());\n\t\t\t\t\t\tif (mutation.payload.mType === 'iqrfBinaryoutput_Enumerate') {\n\t\t\t\t\t\t\tthis.numOutputs = mutation.payload.data.rsp.result.binOuts;\n\t\t\t\t\t\t\tthis.responseType = 'enum';\n\t\t\t\t\t\t} else if (mutation.payload.mType === 'iqrfBinaryoutput_SetOutput') {\n\t\t\t\t\t\t\tthis.parseSetOutput(mutation.payload.data.rsp.result.prevVals);\n\t\t\t\t\t\t\tthis.responseType = 'set';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.standard.binaryOutput.messages.fail').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.standard.binaryOutput.messages.pnum').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\t\t});\n\t\tthis.generateStates();\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\tgenerateStates() {\n\t\t\tthis.states = new Array(60).fill(false);\n\t\t},\n\t\tparseSetOutput(states) {\n\t\t\tfor(let i = 0; i < states.length; ++i) {\n\t\t\t\tthis.states[i] = states[i];\n\t\t\t}\n\t\t},\n\t\tsubmitEnumerate() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardBinaryOutputService.enumerate(this.address);\n\t\t},\n\t\tsubmitGetStates() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardBinaryOutputService.getOutputs(this.address);\n\t\t},\n\t\tsubmitSetState() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tlet state = {'index': this.index, 'state': this.state};\n\t\t\tStandardBinaryOutputService.setOutputs(this.address, [state]);\n\t\t},\n\t},\n\ticons: {\n\t\ton: cilCheckAlt,\n\t\toff: cilX,\n\t},\n};\n</script>\n\n<style scoped>\n.scroll-table {\n    display: block;\n    overflow-x: auto;\n    white-space: nowrap;\n}\n</style>\n","import { render, staticRenderFns } from \"./BinaryOutputManager.vue?vue&type=template&id=1e7284a8&scoped=true&\"\nimport script from \"./BinaryOutputManager.vue?vue&type=script&lang=js&\"\nexport * from \"./BinaryOutputManager.vue?vue&type=script&lang=js&\"\nimport style0 from \"./BinaryOutputManager.vue?vue&type=style&index=0&id=1e7284a8&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"1e7284a8\",\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('1e7284a8')) {\n      api.createRecord('1e7284a8', component.options)\n    } else {\n      api.reload('1e7284a8', component.options)\n    }\n    module.hot.accept(\"./BinaryOutputManager.vue?vue&type=template&id=1e7284a8&scoped=true&\", function () {\n      api.rerender('1e7284a8', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/BinaryOutputManager.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\"CCardHeader\", [\n        _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.dali.title\")))\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|between:1,239\",\n                            \"custom-messages\": {\n                              between: \"iqrfnet.standard.form.messages.address\",\n                              integer: \"forms.messages.integer\",\n                              required: \"iqrfnet.standard.form.messages.address\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"1\",\n                                        max: \"239\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.standard.form.address\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.address,\n                                        callback: function($$v) {\n                                          _vm.address = _vm._n($$v)\n                                        },\n                                        expression: \"address\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _vm._l(_vm.commands.length, function(i) {\n                          return _c(\n                            \"div\",\n                            { key: i, staticClass: \"form-group\" },\n                            [\n                              _c(\"ValidationProvider\", {\n                                attrs: {\n                                  rules: \"integer|required|between:0,65535\",\n                                  \"custom-messages\": {\n                                    between:\n                                      \"iqrfnet.standard.dali.form.messages.command\",\n                                    integer: \"forms.messages.integer\",\n                                    required:\n                                      \"iqrfnet.standard.dali.form.messages.command\"\n                                  }\n                                },\n                                scopedSlots: _vm._u(\n                                  [\n                                    {\n                                      key: \"default\",\n                                      fn: function(ref) {\n                                        var errors = ref.errors\n                                        var touched = ref.touched\n                                        var valid = ref.valid\n                                        return [\n                                          _c(\"CInput\", {\n                                            attrs: {\n                                              type: \"number\",\n                                              min: \"0\",\n                                              max: \"65535\",\n                                              label: _vm.$t(\n                                                \"iqrfnet.standard.dali.form.command\"\n                                              ),\n                                              \"is-valid\": touched\n                                                ? valid\n                                                : null,\n                                              \"invalid-feedback\": _vm.$t(\n                                                errors[0]\n                                              )\n                                            },\n                                            model: {\n                                              value: _vm.commands[i - 1],\n                                              callback: function($$v) {\n                                                _vm.$set(\n                                                  _vm.commands,\n                                                  i - 1,\n                                                  _vm._n($$v)\n                                                )\n                                              },\n                                              expression: \"commands[i-1]\"\n                                            }\n                                          })\n                                        ]\n                                      }\n                                    }\n                                  ],\n                                  null,\n                                  true\n                                )\n                              }),\n                              _vm._v(\" \"),\n                              _vm.commands.length > 1\n                                ? _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: { color: \"danger\" },\n                                      on: {\n                                        click: function($event) {\n                                          $event.preventDefault()\n                                          return _vm.removeDaliCommand(i - 1)\n                                        }\n                                      }\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"iqrfnet.standard.dali.form.removeCommand\"\n                                            )\n                                          ) +\n                                          \"\\n\\t\\t\\t\\t\\t\"\n                                      )\n                                    ]\n                                  )\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              i === _vm.commands.length\n                                ? _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: {\n                                        color: \"success\",\n                                        disabled: invalid\n                                      },\n                                      on: {\n                                        click: function($event) {\n                                          $event.preventDefault()\n                                          return _vm.addDaliCommand($event)\n                                        }\n                                      }\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"iqrfnet.standard.dali.form.addCommand\"\n                                            )\n                                          ) +\n                                          \"\\n\\t\\t\\t\\t\\t\"\n                                      )\n                                    ]\n                                  )\n                                : _vm._e()\n                            ],\n                            1\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"primary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.sendDali($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\n                                    \"iqrfnet.standard.dali.form.sendCommand\"\n                                  )\n                                ) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      2\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _vm.responseReceived\n        ? _c(\"CCardFooter\", [\n            _c(\"table\", { staticClass: \"table table-striped\" }, [\n              _c(\"thead\", [\n                _vm._v(\n                  \"\\n\\t\\t\\t\\t\" +\n                    _vm._s(_vm.$t(\"iqrfnet.standard.dali.answers\")) +\n                    \"\\n\\t\\t\\t\"\n                )\n              ]),\n              _vm._v(\" \"),\n              _c(\n                \"tbody\",\n                { staticClass: \"text-center\" },\n                [\n                  _c(\"tr\", [\n                    _c(\"th\", [\n                      _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.dali.status\")))\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"th\", [\n                      _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.dali.value\")))\n                    ])\n                  ]),\n                  _vm._v(\" \"),\n                  _vm._l(_vm.answers.length, function(i) {\n                    return _c(\"tr\", { key: i }, [\n                      _c(\"td\", [_vm._v(_vm._s(_vm.answers[i - 1].status))]),\n                      _vm._v(\" \"),\n                      _c(\"td\", [_vm._v(_vm._s(_vm.answers[i - 1].value))])\n                    ])\n                  })\n                ],\n                2\n              )\n            ])\n          ])\n        : _vm._e()\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import store from '../../store';\n/**\n * IQRF Standard DALI service\n */\nvar StandardDaliService = /** @class */ (function () {\n    function StandardDaliService() {\n    }\n    /**\n     * Sends DALI commands to device specified by address.\n     * @param address Node address\n     * @param commands Array of DALI commands\n     */\n    StandardDaliService.prototype.send = function (address, commands) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfDali_SendCommands',\n            'data': {\n                'req': {\n                    'nAdr': address,\n                    'param': {\n                        'commands': commands,\n                    },\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    return StandardDaliService;\n}());\nexport default new StandardDaliService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DaliManager.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DaliManager.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard>\n\t\t<CCardHeader>{{ $t('iqrfnet.standard.dali.title') }}</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:1,239'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tbetween: \"iqrfnet.standard.form.messages.address\",\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.standard.form.messages.address\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='address'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.standard.form.address\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<div v-for='i of commands.length' :key='i' class='form-group'>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='integer|required|between:0,65535'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tbetween: \"iqrfnet.standard.dali.form.messages.command\",\n\t\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\t\trequired: \"iqrfnet.standard.dali.form.messages.command\"\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model.number='commands[i-1]'\n\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\tmax='65535'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.standard.dali.form.command\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<CButton v-if='commands.length > 1' color='danger' @click.prevent='removeDaliCommand(i-1)'>\n\t\t\t\t\t\t\t{{ $t('iqrfnet.standard.dali.form.removeCommand') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\tv-if='i === commands.length' \n\t\t\t\t\t\t\tcolor='success' \n\t\t\t\t\t\t\t:disabled='invalid' \n\t\t\t\t\t\t\t@click.prevent='addDaliCommand'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ $t('iqrfnet.standard.dali.form.addCommand') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</div>\n\t\t\t\t\t<CButton color='primary' :disabled='invalid' @click.prevent='sendDali'>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.dali.form.sendCommand') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t\t<CCardFooter v-if='responseReceived'>\n\t\t\t<table class='table table-striped'>\n\t\t\t\t<thead>\n\t\t\t\t\t{{ $t('iqrfnet.standard.dali.answers') }}\n\t\t\t\t</thead>\n\t\t\t\t<tbody class='text-center'>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.dali.status') }}</th>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.dali.value') }}</th>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr v-for='i of answers.length' :key='i'>\n\t\t\t\t\t\t<td>{{ answers[i-1].status }}</td>\n\t\t\t\t\t\t<td>{{ answers[i-1].value }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</CCardFooter>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardFooter, CCardHeader, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {timeout} from '../../helpers/timeout';\nimport {between, integer, required} from 'vee-validate/dist/rules';\nimport StandardDaliService from '../../services/DaemonApi/StandardDaliService';\n\nexport default {\n\tname: 'DaliManager',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardFooter,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\taddress: 1,\n\t\t\tanswers: null,\n\t\t\tcommands: [null],\n\t\t\tresponseReceived: false,\n\t\t\ttimeout: null\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONSEND') {\n\t\t\t\tif (mutation.payload.mType === 'iqrfDali_SendCommands') {\n\t\t\t\t\tthis.timeout = timeout('iqrfnet.networkManager.messages.submit.timeout', 10000);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONMESSAGE') {\n\t\t\t\tif (mutation.payload.mType === 'iqrfDali_SendCommands') {\n\t\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tswitch(mutation.payload.data.status) {\n\t\t\t\t\t\tcase -1:\n\t\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.standard.dali.messages.timeout').toString());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tthis.$toast.success(this.$t('iqrfnet.standard.dali.messages.success').toString());\n\t\t\t\t\t\t\tthis.answers = mutation.payload.data.rsp.result.answers;\n\t\t\t\t\t\t\tthis.responseReceived = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.standard.dali.messages.pnum').toString());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.standard.dali.messages.failure').toString());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\taddDaliCommand() {\n\t\t\tthis.commands.push(null);\n\t\t},\n\t\tremoveDaliCommand(index) {\n\t\t\tthis.commands.splice(index, 1);\n\t\t},\n\t\tsendDali() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardDaliService.send(this.address, this.commands);\n\t\t},\n\t}\n};\n</script>\n","import { render, staticRenderFns } from \"./DaliManager.vue?vue&type=template&id=11836d54&\"\nimport script from \"./DaliManager.vue?vue&type=script&lang=js&\"\nexport * from \"./DaliManager.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('11836d54')) {\n      api.createRecord('11836d54', component.options)\n    } else {\n      api.reload('11836d54', component.options)\n    }\n    module.hot.accept(\"./DaliManager.vue?vue&type=template&id=11836d54&\", function () {\n      api.rerender('11836d54', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/DaliManager.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\"CCardHeader\", [\n        _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.light.title\")))\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required|integer|between:1,239\",\n                            \"custom-messages\": {\n                              between: \"iqrfnet.standard.form.messages.address\",\n                              integer: \"forms.messages.integer\",\n                              required: \"iqrfnet.standard.form.messages.address\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"1\",\n                                        max: \"239\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.standard.form.address\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.address,\n                                        callback: function($$v) {\n                                          _vm.address = _vm._n($$v)\n                                        },\n                                        expression: \"address\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required|integer|between:0,31\",\n                            \"custom-messages\": {\n                              between:\n                                \"iqrfnet.standard.light.form.messages.index\",\n                              integer: \"forms.messages.integer\",\n                              required:\n                                \"iqrfnet.standard.light.form.messages.index\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        max: \"31\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.standard.light.form.index\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.index,\n                                        callback: function($$v) {\n                                          _vm.index = _vm._n($$v)\n                                        },\n                                        expression: \"index\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required|integer|between:0,100\",\n                            \"custom-messages\": {\n                              between:\n                                \"iqrfnet.standard.light.form.messages.power\",\n                              integer: \"forms.messages.integer\",\n                              required:\n                                \"iqrfnet.standard.light.form.messages.power\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        max: \"100\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.standard.light.form.power\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.power,\n                                        callback: function($$v) {\n                                          _vm.power = _vm._n($$v)\n                                        },\n                                        expression: \"power\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"primary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitEnumerate($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.enumerate\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitGetPower($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\"iqrfnet.standard.light.form.getPower\")\n                                ) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitSetPower($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\"iqrfnet.standard.light.form.setPower\")\n                                ) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitIncrementPower($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\n                                    \"iqrfnet.standard.light.form.increment\"\n                                  )\n                                ) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitDecrementPower($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\n                                    \"iqrfnet.standard.light.form.decrement\"\n                                  )\n                                ) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _vm.responseType !== null\n        ? _c(\"CCardFooter\", [\n            _c(\"table\", { staticClass: \"table\" }, [\n              _c(\"thead\", [\n                _vm.responseType === \"enum\"\n                  ? _c(\"span\", [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\\t\" +\n                          _vm._s(_vm.$t(\"iqrfnet.standard.light.enum\")) +\n                          \"\\n\\t\\t\\t\\t\"\n                      )\n                    ])\n                  : _c(\"span\", [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\\t\" +\n                          _vm._s(_vm.$t(\"iqrfnet.standard.light.powerInfo\")) +\n                          \"\\n\\t\\t\\t\\t\"\n                      )\n                    ])\n              ]),\n              _vm._v(\" \"),\n              _vm.responseType === \"enum\"\n                ? _c(\"tbody\", [\n                    _c(\"tr\", [\n                      _c(\"th\", [\n                        _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.light.lights\")))\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"td\", [_vm._v(_vm._s(_vm.numLights))])\n                    ])\n                  ])\n                : _c(\"tbody\", [\n                    _c(\"tr\", [\n                      _c(\"th\", [\n                        _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.light.index\")))\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"td\", [_vm._v(_vm._s(_vm.index))])\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"tr\", [\n                      _c(\"th\", [\n                        _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.light.power\")))\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"td\", [_vm._v(_vm._s(_vm.prevPower))])\n                    ])\n                  ])\n            ])\n          ])\n        : _vm._e()\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import store from '../../store';\n/**\n * IQRF Standard light service\n */\nvar StandardLightService = /** @class */ (function () {\n    function StandardLightService() {\n    }\n    /**\n     * Performs Light enumeration on device specified by address.\n     * @param address Node address\n     */\n    StandardLightService.prototype.enumerate = function (address) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfLight_Enumerate',\n            'data': {\n                'req': {\n                    'nAdr': address,\n                    'param': {},\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Decrements power of light at a device specified by address.\n     * @param address Node address\n     * @param lights Object containing light settings\n     */\n    StandardLightService.prototype.decrementPower = function (address, lights) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfLight_DecrementPower',\n            'data': {\n                'req': {\n                    'nAdr': address,\n                    'param': {\n                        'lights': lights,\n                    },\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Increments power of light at a device specified by address.\n     * @param address Node address\n     * @param lights Object containing light settings\n     */\n    StandardLightService.prototype.incrementPower = function (address, lights) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfLight_IncrementPower',\n            'data': {\n                'req': {\n                    'nAdr': address,\n                    'param': {\n                        'lights': lights,\n                    },\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Retrieves current power of a light specified by index.\n     * @param address Node address\n     * @param light Light index\n     */\n    StandardLightService.prototype.getPower = function (address, light) {\n        return this.setPower(address, [{ 'index': light, 'power': 127 }]);\n    };\n    /**\n     * Sets power of lights at a device specified by address.\n     * @param address Node address\n     * @param lights Object containing light settings\n     */\n    StandardLightService.prototype.setPower = function (address, lights) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfLight_SetPower',\n            'data': {\n                'req': {\n                    'nAdr': address,\n                    'param': {\n                        'lights': lights,\n                    },\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    return StandardLightService;\n}());\nexport default new StandardLightService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LightManager.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LightManager.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard>\n\t\t<CCardHeader>{{ $t('iqrfnet.standard.light.title') }}</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required|integer|between:1,239'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tbetween: \"iqrfnet.standard.form.messages.address\",\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.standard.form.messages.address\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='address'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.standard.form.address\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required|integer|between:0,31'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tbetween: \"iqrfnet.standard.light.form.messages.index\",\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.standard.light.form.messages.index\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='index'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='31'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.standard.light.form.index\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required|integer|between:0,100'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tbetween: \"iqrfnet.standard.light.form.messages.power\",\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.standard.light.form.messages.power\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='power'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='100'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.standard.light.form.power\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CButton color='primary' :disabled='invalid' @click.prevent='submitEnumerate'>\n\t\t\t\t\t\t{{ $t('forms.enumerate') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton color='secondary' :disabled='invalid' @click.prevent='submitGetPower'>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.light.form.getPower') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton color='secondary' :disabled='invalid' @click.prevent='submitSetPower'>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.light.form.setPower') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton color='secondary' :disabled='invalid' @click.prevent='submitIncrementPower'>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.light.form.increment') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton color='secondary' :disabled='invalid' @click.prevent='submitDecrementPower'>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.light.form.decrement') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t\t<CCardFooter v-if='responseType !== null'>\n\t\t\t<table class='table'>\n\t\t\t\t<thead>\n\t\t\t\t\t<span v-if='responseType === \"enum\"'>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.light.enum') }}\n\t\t\t\t\t</span>\n\t\t\t\t\t<span v-else>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.light.powerInfo') }}\n\t\t\t\t\t</span>\n\t\t\t\t</thead>\n\t\t\t\t<tbody v-if='responseType === \"enum\"'>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.light.lights') }}</th>\n\t\t\t\t\t\t<td>{{ numLights }}</td>\n\t\t\t\t\t</tr>\t\n\t\t\t\t</tbody>\n\t\t\t\t<tbody v-else>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.light.index') }}</th>\n\t\t\t\t\t\t<td>{{ index }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.light.power') }}</th>\n\t\t\t\t\t\t<td>{{ prevPower }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</CCardFooter>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardFooter, CCardHeader, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {between, integer, required} from 'vee-validate/dist/rules';\nimport {timeout} from '../../helpers/timeout';\nimport StandardLightService from '../../services/DaemonApi/StandardLightService';\n\nexport default {\n\tname: 'LightManager',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardFooter,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\taddress: 1,\n\t\t\tallowedMTypes: [\n\t\t\t\t'iqrfLight_Enumerate',\n\t\t\t\t'iqrfLight_SetPower',\n\t\t\t\t'iqrfLight_IncrementPower',\n\t\t\t\t'iqrfLight_DecrementPower'\n\t\t\t],\n\t\t\tindex: 0,\n\t\t\tlights: null,\n\t\t\tnumLights: 0,\n\t\t\tpower: 0,\n\t\t\tprevPower: 0,\n\t\t\tresponseType: null,\n\t\t\ttimeout: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONSEND') {\n\t\t\t\tif (!this.allowedMTypes.includes(mutation.payload.mType)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.responseType = null;\n\t\t\t\tthis.timeout = timeout('iqrfnet.networkManager.messages.submit.timeout', 10000);\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONMESSAGE') {\n\t\t\t\tif (!this.allowedMTypes.includes(mutation.payload.mType)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\tswitch(mutation.payload.data.status) {\n\t\t\t\t\tcase -1:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.standard.light.messages.timeout').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tthis.$toast.success(this.$t('iqrfnet.standard.light.messages.success').toString());\n\t\t\t\t\t\tif (mutation.payload.mType === 'iqrfLight_Enumerate') {\n\t\t\t\t\t\t\tthis.numLights = mutation.payload.data.rsp.result.lights;\n\t\t\t\t\t\t\tthis.responseType = 'enum';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.prevPower = mutation.payload.data.rsp.result.prevVals[0];\n\t\t\t\t\t\t\tthis.responseType = 'power';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.standard.light.messages.pnum').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.standard.light.messages.failure').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\tsubmitEnumerate() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardLightService.enumerate(this.address);\n\t\t},\n\t\tsubmitGetPower() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardLightService.getPower(this.address, this.index);\n\t\t},\n\t\tsubmitSetPower() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardLightService.setPower(this.address, [{'index': this.index, 'power': this.power}]);\n\t\t},\n\t\tsubmitIncrementPower() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardLightService.incrementPower(this.address, [{'index': this.index, 'power': this.power}]);\n\t\t},\n\t\tsubmitDecrementPower() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardLightService.decrementPower(this.address, [{'index': this.index, 'power': this.power}]);\n\t\t},\n\t}\n};\n</script>\n","import { render, staticRenderFns } from \"./LightManager.vue?vue&type=template&id=34619946&\"\nimport script from \"./LightManager.vue?vue&type=script&lang=js&\"\nexport * from \"./LightManager.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('34619946')) {\n      api.createRecord('34619946', component.options)\n    } else {\n      api.reload('34619946', component.options)\n    }\n    module.hot.accept(\"./LightManager.vue?vue&type=template&id=34619946&\", function () {\n      api.rerender('34619946', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/LightManager.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\"CCardHeader\", [\n        _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.sensor.title\")))\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|between:1,239\",\n                            \"custom-messages\": {\n                              integer: \"forms.messages.integer\",\n                              required:\n                                \"iqrfnet.standard.form.messages.address\",\n                              between: \"iqrfnet.standard.form.messages.address\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"1\",\n                                        max: \"239\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.standard.form.address\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.address,\n                                        callback: function($$v) {\n                                          _vm.address = _vm._n($$v)\n                                        },\n                                        expression: \"address\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"primary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitEnumerate($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.enumerate\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabeld: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitReadAll($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\"iqrfnet.standard.sensor.readAll\")\n                                ) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _vm.responseType != null\n        ? _c(\"CCardFooter\", [\n            _c(\"table\", { staticClass: \"table\" }, [\n              _c(\"thead\", [\n                _vm._v(\n                  \"\\n\\t\\t\\t\\t\" +\n                    _vm._s(_vm.$t(\"iqrfnet.standard.sensor.sensors\")) +\n                    \"\\n\\t\\t\\t\"\n                )\n              ]),\n              _vm._v(\" \"),\n              _c(\"tbody\", [\n                _c(\n                  \"tr\",\n                  [\n                    _c(\"th\", [\n                      _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.sensor.type\")))\n                    ]),\n                    _vm._v(\" \"),\n                    _vm._l(_vm.sensors.length, function(i) {\n                      return _c(\"td\", { key: i }, [\n                        _vm._v(\n                          \"\\n\\t\\t\\t\\t\\t\\t\" +\n                            _vm._s(_vm.sensors[i - 1].type) +\n                            \"\\n\\t\\t\\t\\t\\t\"\n                        )\n                      ])\n                    })\n                  ],\n                  2\n                ),\n                _vm._v(\" \"),\n                _vm.responseType === \"enum\"\n                  ? _c(\n                      \"tr\",\n                      [\n                        _c(\"th\", [\n                          _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.sensor.unit\")))\n                        ]),\n                        _vm._v(\" \"),\n                        _vm._l(_vm.sensors.length, function(j) {\n                          return _c(\"td\", { key: j }, [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.sensors[j - 1].unit) +\n                                \"\\n\\t\\t\\t\\t\\t\"\n                            )\n                          ])\n                        })\n                      ],\n                      2\n                    )\n                  : _vm.responseType === \"read\"\n                  ? _c(\n                      \"tr\",\n                      [\n                        _c(\"th\", [\n                          _vm._v(\n                            _vm._s(_vm.$t(\"iqrfnet.standard.sensor.value\"))\n                          )\n                        ]),\n                        _vm._v(\" \"),\n                        _vm._l(_vm.sensors.length, function(k) {\n                          return _c(\"td\", { key: k }, [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.sensors[k - 1].value +\n                                    \" \" +\n                                    _vm.sensors[k - 1].unit\n                                ) +\n                                \"\\n\\t\\t\\t\\t\\t\"\n                            )\n                          ])\n                        })\n                      ],\n                      2\n                    )\n                  : _vm._e()\n              ])\n            ])\n          ])\n        : _vm._e()\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import store from '../../store';\n/**\n * IQRF Standard Sensor service\n */\nvar StandardSensorService = /** @class */ (function () {\n    function StandardSensorService() {\n    }\n    /**\n     * Performs Sensor enumeration on device specified by address.\n     * @param address Node address\n     */\n    StandardSensorService.prototype.enumerate = function (address) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfSensor_Enumerate',\n            'data': {\n                'req': {\n                    'nAdr': address,\n                    'param': {},\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Reads information from all sensors implemented by a device.\n     * @param address Node address\n     */\n    StandardSensorService.prototype.readAll = function (address) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfSensor_ReadSensorsWithTypes',\n            'data': {\n                'req': {\n                    'nAdr': address,\n                    'param': {\n                        'sensorIndexes': -1,\n                    },\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    return StandardSensorService;\n}());\nexport default new StandardSensorService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SensorManager.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SensorManager.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard>\n\t\t<CCardHeader>{{ $t('iqrfnet.standard.sensor.title') }}</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:1,239'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.standard.form.messages.address\",\n\t\t\t\t\t\t\tbetween: \"iqrfnet.standard.form.messages.address\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='address'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.standard.form.address\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CButton color='primary' :disabled='invalid' @click.prevent='submitEnumerate'>\n\t\t\t\t\t\t{{ $t('forms.enumerate') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton color='secondary' :disabeld='invalid' @click.prevent='submitReadAll'>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.sensor.readAll') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t\t<CCardFooter v-if='responseType != null'>\n\t\t\t<table class='table'>\n\t\t\t\t<thead>\n\t\t\t\t\t{{ $t('iqrfnet.standard.sensor.sensors') }}\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.sensor.type') }}</th>\n\t\t\t\t\t\t<td v-for='i of sensors.length' :key='i'>\n\t\t\t\t\t\t\t{{ sensors[i-1].type }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr v-if='responseType === \"enum\"'>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.sensor.unit') }}</th>\n\t\t\t\t\t\t<td v-for='j of sensors.length' :key='j'>\n\t\t\t\t\t\t\t{{ sensors[j-1].unit }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr v-else-if='responseType === \"read\"'>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.sensor.value') }}</th>\n\t\t\t\t\t\t<td v-for='k of sensors.length' :key='k'>\n\t\t\t\t\t\t\t{{ sensors[k-1].value + ' ' + sensors[k-1].unit }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</CCardFooter>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardFooter, CCardHeader, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {between, integer, required} from 'vee-validate/dist/rules';\nimport {timeout} from '../../helpers/timeout';\nimport StandardSensorService from '../../services/DaemonApi/StandardSensorService';\n\nexport default {\n\tname: 'SensorManager',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardFooter,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\taddress: 1,\n\t\t\tallowedMTypes: [\n\t\t\t\t'iqrfSensor_Enumerate',\n\t\t\t\t'iqrfSensor_ReadSensorsWithTypes'\n\t\t\t],\n\t\t\tresponseType: null,\n\t\t\tsensors: null,\n\t\t\ttimeout: null\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONSEND') {\n\t\t\t\tif (!this.allowedMTypes.includes(mutation.payload.mType)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.responseType = null;\n\t\t\t\tthis.timeout = timeout('iqrfnet.networkManager.messages.submit.timeout', 10000);\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONMESSAGE') {\n\t\t\t\tif (!this.allowedMTypes.includes(mutation.payload.mType)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\tswitch(mutation.payload.data.status) {\n\t\t\t\t\tcase -1:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.standard.sensor.messages.timeout').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tthis.$toast.success(this.$t('iqrfnet.standard.sensor.messages.success').toString());\n\t\t\t\t\t\tif (mutation.payload.mType === 'iqrfSensor_Enumerate') {\n\t\t\t\t\t\t\tthis.parseEnumerate(mutation.payload.data.rsp.result.sensors);\n\t\t\t\t\t\t\tthis.responseType = 'enum';\n\t\t\t\t\t\t} else if (mutation.payload.mType === 'iqrfSensor_ReadSensorsWithTypes') {\n\t\t\t\t\t\t\tthis.parseReadAll(mutation.payload.data.rsp.result.sensors);\n\t\t\t\t\t\t\tthis.responseType = 'read';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.standard.sensor.messages.pnum').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.standard.sensor.messages.failure').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\tparseEnumerate(sensors) {\n\t\t\tthis.sensors = [];\n\t\t\tsensors.forEach(item => {\n\t\t\t\tif (item.id === 'BINARYDATA7') {\n\t\t\t\t\titem = item.breakdown[0];\n\t\t\t\t}\n\t\t\t\tthis.sensors.push({'type': item.name, 'unit': item.unit});\n\t\t\t});\n\t\t},\n\t\tparseReadAll(sensors) {\n\t\t\tthis.sensors = [];\n\t\t\tsensors.forEach(item => {\n\t\t\t\tif (item.id === 'BINARYDATA7') {\n\t\t\t\t\titem = item.breakdown[0];\n\t\t\t\t}\n\t\t\t\tthis.sensors.push({'type': item.name, 'value': item.value, 'unit': item.unit});\n\t\t\t});\n\t\t},\n\t\tsubmitReadAll() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardSensorService.readAll(this.address);\n\t\t},\n\t\tsubmitEnumerate() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardSensorService.enumerate(this.address);\n\t\t},\n\t}\n};\n</script>\n\n<style scoped>\n.scroll-table {\n    display: block;\n    overflow-x: auto;\n    white-space: nowrap;\n}\n\ntd {\n\ttext-align: center;\n}\n</style>\n","import { render, staticRenderFns } from \"./SensorManager.vue?vue&type=template&id=571486a2&scoped=true&\"\nimport script from \"./SensorManager.vue?vue&type=script&lang=js&\"\nexport * from \"./SensorManager.vue?vue&type=script&lang=js&\"\nimport style0 from \"./SensorManager.vue?vue&type=style&index=0&id=571486a2&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"571486a2\",\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('571486a2')) {\n      api.createRecord('571486a2', component.options)\n    } else {\n      api.reload('571486a2', component.options)\n    }\n    module.hot.accept(\"./SensorManager.vue?vue&type=template&id=571486a2&scoped=true&\", function () {\n      api.rerender('571486a2', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/IqrfNet/SensorManager.vue\"\nexport default component.exports","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./StandardManager.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./StandardManager.vue?vue&type=script&lang=js&\"","<template>\n\t<CRow>\n\t\t<CCol md='6'>\n\t\t\t<BinaryOutputManager />\n\t\t\t<SensorManager />\n\t\t</CCol>\n\t\t<CCol md='6'>\n\t\t\t<LightManager />\n\t\t\t<DaliManager />\n\t\t</CCol>\n\t</CRow>\n</template>\n\n<script>\nimport BinaryOutputManager from '../../components/IqrfNet/BinaryOutputManager';\nimport DaliManager from '../../components/IqrfNet/DaliManager';\nimport LightManager from '../../components/IqrfNet/LightManager';\nimport SensorManager from './SensorManager';\n\nexport default {\n\tname: 'StandardManager',\n\tcomponents: {\n\t\tBinaryOutputManager,\n\t\tDaliManager,\n\t\tLightManager,\n\t\tSensorManager,\n\t},\n\tmetaInfo: {\n\t\ttitle: 'iqrfnet.standard.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./StandardManager.vue?vue&type=template&id=1f0c2c02&\"\nimport script from \"./StandardManager.vue?vue&type=script&lang=js&\"\nexport * from \"./StandardManager.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('1f0c2c02')) {\n      api.createRecord('1f0c2c02', component.options)\n    } else {\n      api.reload('1f0c2c02', component.options)\n    }\n    module.hot.accept(\"./StandardManager.vue?vue&type=template&id=1f0c2c02&\", function () {\n      api.rerender('1f0c2c02', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/IqrfNet/StandardManager.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\n            \"CForm\",\n            [\n              _c(\n                \"div\",\n                { staticClass: \"form-group\" },\n                [\n                  _c(\"CInputFile\", {\n                    ref: \"configZip\",\n                    attrs: {\n                      label: _vm.$t(\"config.migration.form.importButton\")\n                    },\n                    on: { click: _vm.isEmpty, input: _vm.isEmpty }\n                  }),\n                  _vm._v(\" \"),\n                  _vm.configEmpty && !_vm.firstConfig\n                    ? _c(\"p\", { staticClass: \"text-danger\" }, [\n                        _vm._v(\n                          \"\\n\\t\\t\\t\\t\\t\" +\n                            _vm._s(\n                              _vm.$t(\"config.migration.messages.importButton\")\n                            ) +\n                            \"\\n\\t\\t\\t\\t\"\n                        )\n                      ])\n                    : _vm._e()\n                ],\n                1\n              ),\n              _vm._v(\" \"),\n              _c(\n                \"CButton\",\n                {\n                  attrs: { color: \"primary\", disabled: _vm.configEmpty },\n                  on: {\n                    click: function($event) {\n                      $event.preventDefault()\n                      return _vm.importConfig($event)\n                    }\n                  }\n                },\n                [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"config.migration.form.import\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]\n              ),\n              _vm._v(\" \"),\n              _c(\n                \"CButton\",\n                {\n                  attrs: { color: \"secondary\" },\n                  on: {\n                    click: function($event) {\n                      $event.preventDefault()\n                      return _vm.exportConfig($event)\n                    }\n                  }\n                },\n                [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"config.migration.form.export\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]\n              )\n            ],\n            1\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\n/**\n * Service configuration service\n */\nvar ConfigService = /** @class */ (function () {\n    function ConfigService() {\n    }\n    /** */\n    ConfigService.prototype.createConfig = function (serviceName, config, timeout) {\n        return axios.post('config/' + serviceName, config, { headers: authorizationHeader(), timeout: timeout });\n    };\n    /**\n     * Retrieves service configuration\n     */\n    ConfigService.prototype.getConfig = function (serviceName, timeout) {\n        return axios.get('config/' + serviceName, { headers: authorizationHeader(), timeout: timeout });\n    };\n    /**\n     * Saves new service configuration\n     */\n    ConfigService.prototype.saveConfig = function (serviceName, config, timeout) {\n        return axios.put('config/' + serviceName, config, { headers: authorizationHeader(), timeout: timeout });\n    };\n    /**\n     * Exports daemon configuration\n     */\n    ConfigService.prototype.exportConfig = function (timeout) {\n        return axios.get('config/daemon/migration/export', { headers: authorizationHeader(), timeout: timeout, responseType: 'arraybuffer' });\n    };\n    /**\n     * Imports daemon configuration\n     */\n    ConfigService.prototype.importConfig = function (config, timeout) {\n        return axios.post('config/daemon/migration/import', config, { headers: authorizationHeader(), timeout: timeout });\n    };\n    return ConfigService;\n}());\nexport default new ConfigService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ConfigMigration.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ConfigMigration.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard>\n\t\t<CCardBody>\n\t\t\t<CForm>\n\t\t\t\t<div class='form-group'>\n\t\t\t\t\t<CInputFile\n\t\t\t\t\t\tref='configZip'\n\t\t\t\t\t\t:label='$t(\"config.migration.form.importButton\")'\n\t\t\t\t\t\t@click='isEmpty'\n\t\t\t\t\t\t@input='isEmpty'\n\t\t\t\t\t/>\n\t\t\t\t\t<p v-if='configEmpty && !firstConfig' class='text-danger'>\n\t\t\t\t\t\t{{ $t(\"config.migration.messages.importButton\") }}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<CButton\n\t\t\t\t\tcolor='primary'\n\t\t\t\t\t:disabled='configEmpty'\n\t\t\t\t\t@click.prevent='importConfig'\n\t\t\t\t>\n\t\t\t\t\t{{ $t('config.migration.form.import') }}\n\t\t\t\t</CButton>\n\t\t\t\t<CButton color='secondary' @click.prevent='exportConfig'>\n\t\t\t\t\t{{ $t('config.migration.form.export') }}\n\t\t\t\t</CButton>\n\t\t\t</CForm>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInputFile} from '@coreui/vue/src';\nimport ConfigService from '../../services/ConfigService';\nimport { fileDownloader } from '../../helpers/fileDownloader';\n\nexport default {\n\tname: 'ConfigMigration',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInputFile\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tconfigEmpty: true,\n\t\t\tfirstConfig: true,\n\t\t};\n\t},\n\tmethods: {\n\t\texportConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tConfigService.exportConfig(20000)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tconst fileName = 'iqrf-gateway-configuration_' + new Date().toISOString().replace(':', ' ');\n\t\t\t\t\tconst file = fileDownloader(response, 'application/zip', fileName);\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tfile.click();\n\t\t\t\t});\n\t\t},\n\t\timportConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tConfigService.importConfig(this.$refs.configZip.$el.children[1].files[0], 20000)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(this.$t('config.migration.messages.imported').toString());\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (error.response) {\n\t\t\t\t\t\tif (error.response.status === 400) {\n\t\t\t\t\t\t\tthis.$toast.error(this.$t('config.migration.messages.invalidConfig').toString());\n\t\t\t\t\t\t} else if (error.response.status === 415) {\n\t\t\t\t\t\t\tthis.$toast.error(this.$t('config.migration.messages.invalidFormat').toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n\t\tisEmpty() {\n\t\t\tif (this.firstConfig) {\n\t\t\t\tthis.firstConfig = false;\n\t\t\t}\n\t\t\tthis.configEmpty = this.$refs.configZip.$el.children[1].files.length === 0;\n\t\t}\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.migration.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./ConfigMigration.vue?vue&type=template&id=1dafdb1c&\"\nimport script from \"./ConfigMigration.vue?vue&type=script&lang=js&\"\nexport * from \"./ConfigMigration.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('1dafdb1c')) {\n      api.createRecord('1dafdb1c', component.options)\n    } else {\n      api.reload('1dafdb1c', component.options)\n    }\n    module.hot.accept(\"./ConfigMigration.vue?vue&type=template&id=1dafdb1c&\", function () {\n      api.rerender('1dafdb1c', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/ConfigMigration.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        { attrs: { \"body-wrapper\": \"\" } },\n        [\n          _vm.config !== null\n            ? _c(\"ValidationObserver\", {\n                scopedSlots: _vm._u(\n                  [\n                    {\n                      key: \"default\",\n                      fn: function(ref) {\n                        var invalid = ref.invalid\n                        return [\n                          _c(\n                            \"CForm\",\n                            {\n                              on: {\n                                submit: function($event) {\n                                  $event.preventDefault()\n                                  return _vm.processSubmit($event)\n                                }\n                              }\n                            },\n                            [\n                              _c(\n                                \"CRow\",\n                                [\n                                  _c(\n                                    \"CCol\",\n                                    { attrs: { md: \"6\" } },\n                                    [\n                                      _c(\"h3\", [\n                                        _vm._v(\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"translatorConfig.form.mqtt.title\"\n                                            )\n                                          )\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"required\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"translatorConfig.form.messages.missing.maddr\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      label: _vm.$t(\n                                                        \"translatorConfig.form.mqtt.addr\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.mqtt.addr,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.mqtt,\n                                                          \"addr\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.mqtt.addr\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules:\n                                            \"required|integer|between:1,49151\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"translatorConfig.form.messages.integer\",\n                                            required:\n                                              \"translatorConfig.form.messages.port\",\n                                            between:\n                                              \"translatorConfig.form.messages.port\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"1\",\n                                                      max: \"49151\",\n                                                      label: _vm.$t(\n                                                        \"translatorConfig.form.mqtt.port\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.mqtt.port,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.mqtt,\n                                                          \"port\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.mqtt.port\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"required|client_id\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"translatorConfig.form.messages.missing.mcid\",\n                                            client_id:\n                                              \"translatorConfig.form.messages.invalid.mcid\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      label: _vm.$t(\n                                                        \"translatorConfig.form.mqtt.cid\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.mqtt.cid,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.mqtt,\n                                                          \"cid\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.mqtt.cid\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"topic|required\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"translatorConfig.form.messages.missing.mtopic\",\n                                            topic:\n                                              \"translatorConfig.form.messages.invalid.mtopic\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      label: _vm.$t(\n                                                        \"translatorConfig.form.mqtt.topic\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.mqtt.topic,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.mqtt,\n                                                          \"topic\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.mqtt.topic\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"required\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"translatorConfig.form.messages.missing.muser\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      autocomplete: \"off\",\n                                                      label: _vm.$t(\n                                                        \"translatorConfig.form.mqtt.user\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.mqtt.user,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.mqtt,\n                                                          \"user\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.mqtt.user\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"required\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"translatorConfig.form.messages.missing.mpw\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      autocomplete: \"off\",\n                                                      label: _vm.$t(\n                                                        \"translatorConfig.form.mqtt.pw\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      ),\n                                                      type: _vm.visibility\n                                                    },\n                                                    scopedSlots: _vm._u(\n                                                      [\n                                                        {\n                                                          key: \"append-content\",\n                                                          fn: function() {\n                                                            return [\n                                                              _c(\n                                                                \"span\",\n                                                                {\n                                                                  on: {\n                                                                    click:\n                                                                      _vm.changeVisibility\n                                                                  }\n                                                                },\n                                                                [\n                                                                  _vm.visibility ===\n                                                                  \"password\"\n                                                                    ? _c(\n                                                                        \"CIcon\",\n                                                                        {\n                                                                          attrs: {\n                                                                            content:\n                                                                              _vm\n                                                                                .$options\n                                                                                .icons\n                                                                                .hidden\n                                                                          }\n                                                                        }\n                                                                      )\n                                                                    : _c(\n                                                                        \"CIcon\",\n                                                                        {\n                                                                          attrs: {\n                                                                            content:\n                                                                              _vm\n                                                                                .$options\n                                                                                .icons\n                                                                                .shown\n                                                                          }\n                                                                        }\n                                                                      )\n                                                                ],\n                                                                1\n                                                              )\n                                                            ]\n                                                          },\n                                                          proxy: true\n                                                        }\n                                                      ],\n                                                      null,\n                                                      true\n                                                    ),\n                                                    model: {\n                                                      value: _vm.config.mqtt.pw,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.mqtt,\n                                                          \"pw\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.mqtt.pw\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      })\n                                    ],\n                                    1\n                                  ),\n                                  _vm._v(\" \"),\n                                  _c(\n                                    \"CCol\",\n                                    { attrs: { md: \"6\" } },\n                                    [\n                                      _c(\"h3\", [\n                                        _vm._v(\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"translatorConfig.form.rest.title\"\n                                            )\n                                          )\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"required\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"translatorConfig.form.messages.missing.raddr\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      label: _vm.$t(\n                                                        \"translatorConfig.form.rest.addr\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.rest.addr,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.rest,\n                                                          \"addr\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.rest.addr\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules:\n                                            \"required|integer|between:1,49151\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"translatorConfig.form.messages.integer\",\n                                            required:\n                                              \"translatorConfig.form.messages.port\",\n                                            between:\n                                              \"translatorConfig.form.messages.port\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"1\",\n                                                      max: \"49151\",\n                                                      label: _vm.$t(\n                                                        \"translatorConfig.form.rest.port\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.rest.port,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.rest,\n                                                          \"port\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.rest.port\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"api_key_r|required\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"translatorConfig.form.messages.missing.rapi_key\",\n                                            api_key_r:\n                                              \"translatorConfig.form.messages.invalid.api_key\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      label: _vm.$t(\n                                                        \"translatorConfig.form.rest.api_key\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.rest.api_key,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.rest,\n                                                          \"api_key\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.rest.api_key\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      })\n                                    ],\n                                    1\n                                  )\n                                ],\n                                1\n                              ),\n                              _vm._v(\" \"),\n                              _c(\n                                \"CButton\",\n                                {\n                                  attrs: {\n                                    color: \"primary\",\n                                    type: \"submit\",\n                                    disabled: invalid\n                                  }\n                                },\n                                [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t\\t\\t\" +\n                                      _vm._s(_vm.$t(\"forms.save\")) +\n                                      \"\\n\\t\\t\\t\\t\"\n                                  )\n                                ]\n                              )\n                            ],\n                            1\n                          )\n                        ]\n                      }\n                    }\n                  ],\n                  null,\n                  false,\n                  603611300\n                )\n              })\n            : _vm._e()\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TranslatorConfig.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TranslatorConfig.vue?vue&type=script&lang=js&\"","<template>\n\t<div>\n\t\t<CCard body-wrapper>\n\t\t\t<ValidationObserver v-if='config !== null' v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='processSubmit'>\n\t\t\t\t\t<CRow>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<h3>{{ $t(\"translatorConfig.form.mqtt.title\") }}</h3>\n\t\t\t\t\t\t\t<ValidationProvider \n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }' \n\t\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t\t:custom-messages='{required: \"translatorConfig.form.messages.missing.maddr\"}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.mqtt.addr'\n\t\t\t\t\t\t\t\t\t:label='$t(\"translatorConfig.form.mqtt.addr\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider \n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }' \n\t\t\t\t\t\t\t\trules='required|integer|between:1,49151'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"translatorConfig.form.messages.integer\",\n\t\t\t\t\t\t\t\t\trequired: \"translatorConfig.form.messages.port\",\n\t\t\t\t\t\t\t\t\tbetween: \"translatorConfig.form.messages.port\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.mqtt.port'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\t\t\tmax='49151'\n\t\t\t\t\t\t\t\t\t:label='$t(\"translatorConfig.form.mqtt.port\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider \n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }' \n\t\t\t\t\t\t\t\trules='required|client_id'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\trequired: \"translatorConfig.form.messages.missing.mcid\",\n\t\t\t\t\t\t\t\t\tclient_id: \"translatorConfig.form.messages.invalid.mcid\",\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.mqtt.cid'\n\t\t\t\t\t\t\t\t\t:label='$t(\"translatorConfig.form.mqtt.cid\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider \n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }' \n\t\t\t\t\t\t\t\trules='topic|required'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\trequired: \"translatorConfig.form.messages.missing.mtopic\",\n\t\t\t\t\t\t\t\t\ttopic: \"translatorConfig.form.messages.invalid.mtopic\",\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.mqtt.topic'\n\t\t\t\t\t\t\t\t\t:label='$t(\"translatorConfig.form.mqtt.topic\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider \n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }' \n\t\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t\t:custom-messages='{required: \"translatorConfig.form.messages.missing.muser\"}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.mqtt.user'\n\t\t\t\t\t\t\t\t\tautocomplete='off'\n\t\t\t\t\t\t\t\t\t:label='$t(\"translatorConfig.form.mqtt.user\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider \n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }' \n\t\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t\t:custom-messages='{required: \"translatorConfig.form.messages.missing.mpw\"}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.mqtt.pw'\n\t\t\t\t\t\t\t\t\tautocomplete='off'\n\t\t\t\t\t\t\t\t\t:label='$t(\"translatorConfig.form.mqtt.pw\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t:type='visibility'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<template #append-content>\n\t\t\t\t\t\t\t\t\t\t<span @click='changeVisibility'>\n\t\t\t\t\t\t\t\t\t\t\t<CIcon v-if='visibility ===\"password\"' :content='$options.icons.hidden' />\n\t\t\t\t\t\t\t\t\t\t\t<CIcon v-else :content='$options.icons.shown' />\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t</CInput>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<h3>{{ $t(\"translatorConfig.form.rest.title\") }}</h3>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t\t:custom-messages='{required: \"translatorConfig.form.messages.missing.raddr\"}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.rest.addr' \n\t\t\t\t\t\t\t\t\t:label='$t(\"translatorConfig.form.rest.addr\")' \n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider \n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='required|integer|between:1,49151'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"translatorConfig.form.messages.integer\",\n\t\t\t\t\t\t\t\t\trequired: \"translatorConfig.form.messages.port\",\n\t\t\t\t\t\t\t\t\tbetween: \"translatorConfig.form.messages.port\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.rest.port'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\t\t\tmax='49151'\n\t\t\t\t\t\t\t\t\t:label='$t(\"translatorConfig.form.rest.port\")' \n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider \n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }' \n\t\t\t\t\t\t\t\trules='api_key_r|required'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\trequired: \"translatorConfig.form.messages.missing.rapi_key\",\n\t\t\t\t\t\t\t\t\tapi_key_r: \"translatorConfig.form.messages.invalid.api_key\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.rest.api_key' \n\t\t\t\t\t\t\t\t\t:label='$t(\"translatorConfig.form.rest.api_key\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t</CRow>\n\t\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCard>\n\t</div>\n</template>\n\n<script>\n\nimport {CButton, CCard, CForm, CIcon, CInput} from '@coreui/vue/src';\nimport {cilLockLocked, cilLockUnlocked} from '@coreui/icons';\nimport {between, integer, required} from 'vee-validate/dist/rules';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport ConfigService from '../../services/ConfigService';\n\nexport default {\n\tname: 'TranslatorConfig',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCForm,\n\t\tCIcon,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tname: 'translator',\n\t\t\tvisibility: 'password',\n\t\t\tconfig: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\textend('api_key_r', (key) => {\n\t\t\tconst regex = RegExp('^[./A-Za-z0-9]{22}\\\\.[A-Za-z0-9+/=]{44}$');\n\t\t\treturn regex.test(key);\n\t\t});\n\t\textend('client_id', (id) => {\n\t\t\tconst regex = RegExp('^[a-f0-9]{16}$');\n\t\t\treturn regex.test(id);\n\t\t});\n\t\textend('topic', (topic) => {\n\t\t\tconst regex = RegExp('^gateway\\\\/[a-f0-9]{16}\\\\/rest\\\\/requests\\\\/\\\\+\\\\/#$');\n\t\t\treturn regex.test(topic);\n\t\t});\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tConfigService.getConfig(this.name, 10000)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.config = response.data;\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t\tprocessSubmit() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tConfigService.saveConfig(this.name, this.config, 10000)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(this.$t('forms.messages.saveSuccess').toString());\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t\tchangeVisibility() {\n\t\t\tthis.visibility = this.visibility === 'password' ? 'text' : 'password';\n\t\t},\n\t},\n\ticons: {\n\t\thidden: cilLockLocked,\n\t\tshown: cilLockUnlocked\n\t},\n\tmetaInfo: {\n\t\ttitle: 'translatorConfig.description',\n\t},\n};\n\n</script>\n","import { render, staticRenderFns } from \"./TranslatorConfig.vue?vue&type=template&id=4858a5b4&\"\nimport script from \"./TranslatorConfig.vue?vue&type=script&lang=js&\"\nexport * from \"./TranslatorConfig.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('4858a5b4')) {\n      api.createRecord('4858a5b4', component.options)\n    } else {\n      api.reload('4858a5b4', component.options)\n    }\n    module.hot.accept(\"./TranslatorConfig.vue?vue&type=template&id=4858a5b4&\", function () {\n      api.rerender('4858a5b4', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/TranslatorConfig.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        { attrs: { \"body-wrapper\": \"\" } },\n        [\n          _vm.config !== null\n            ? _c(\"ValidationObserver\", {\n                scopedSlots: _vm._u(\n                  [\n                    {\n                      key: \"default\",\n                      fn: function(ref) {\n                        var invalid = ref.invalid\n                        return [\n                          _c(\n                            \"CForm\",\n                            {\n                              on: {\n                                submit: function($event) {\n                                  $event.preventDefault()\n                                  return _vm.processSubmit($event)\n                                }\n                              }\n                            },\n                            [\n                              _c(\n                                \"CRow\",\n                                [\n                                  _c(\n                                    \"CCol\",\n                                    { attrs: { md: \"6\" } },\n                                    [\n                                      _c(\"h3\", [\n                                        _vm._v(\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"controllerConfig.form.wsServers.title\"\n                                            )\n                                          )\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"required|ws_addr\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"controllerConfig.form.messages.missing.ws_api\",\n                                            ws_addr:\n                                              \"controllerConfig.form.messages.invalid.ws_format\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      label: _vm.$t(\n                                                        \"controllerConfig.form.wsServers.api\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.wsServers\n                                                          .api,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.wsServers,\n                                                          \"api\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.wsServers.api\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"required|ws_addr\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"controllerConfig.form.messages.missing.ws_monitor\",\n                                            ws_addr:\n                                              \"controllerConfig.form.messages.invalid.ws_format\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      label: _vm.$t(\n                                                        \"controllerConfig.form.wsServers.monitor\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.wsServers\n                                                          .monitor,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.wsServers,\n                                                          \"monitor\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.wsServers.monitor\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      })\n                                    ],\n                                    1\n                                  ),\n                                  _vm._v(\" \"),\n                                  _c(\n                                    \"CCol\",\n                                    { attrs: { md: \"6\" } },\n                                    [\n                                      _c(\"h3\", [\n                                        _vm._v(\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"controllerConfig.form.logger.title\"\n                                            )\n                                          )\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"required\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"controllerConfig.form.messages.missing.l_file\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      label: _vm.$t(\n                                                        \"controllerConfig.form.logger.filePath\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.logger\n                                                          .filePath,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.logger,\n                                                          \"filePath\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.logger.filePath\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"CSelect\", {\n                                        attrs: {\n                                          value: _vm.config.logger.severity,\n                                          options: [\n                                            { value: \"trace\", label: \"Trace\" },\n                                            { value: \"debug\", label: \"Debug\" },\n                                            { value: \"info\", label: \"Info\" },\n                                            {\n                                              value: \"warning\",\n                                              label: \"Warning\"\n                                            },\n                                            { value: \"error\", label: \"Error\" }\n                                          ],\n                                          label: _vm.$t(\n                                            \"controllerConfig.form.logger.severity\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:value\": function($event) {\n                                            return _vm.$set(\n                                              _vm.config.logger,\n                                              \"severity\",\n                                              $event\n                                            )\n                                          }\n                                        }\n                                      })\n                                    ],\n                                    1\n                                  )\n                                ],\n                                1\n                              ),\n                              _c(\"hr\"),\n                              _vm._v(\" \"),\n                              _c(\n                                \"CRow\",\n                                [\n                                  _c(\n                                    \"CCol\",\n                                    { attrs: { md: \"6\" } },\n                                    [\n                                      _c(\"h3\", [\n                                        _vm._v(\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"controllerConfig.form.resetButton.title\"\n                                            )\n                                          )\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked: _vm.apiCallSetCustom,\n                                          label: _vm.$t(\n                                            \"controllerConfig.form.resetButton.setCustom\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            _vm.apiCallSetCustom = $event\n                                          },\n                                          change: _vm.updateApiCall\n                                        }\n                                      }),\n                                      _vm._v(\" \"),\n                                      !_vm.apiCallSetCustom\n                                        ? _c(\"CSelect\", {\n                                            attrs: {\n                                              value: _vm.config.resetButton.api,\n                                              options: [\n                                                {\n                                                  value: \"autoNetwork\",\n                                                  label: \"AutoNetwork\"\n                                                },\n                                                {\n                                                  value: \"discovery\",\n                                                  label: \"Discovery\"\n                                                }\n                                              ],\n                                              label: _vm.$t(\n                                                \"controllerConfig.form.resetButton.api\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:value\": function($event) {\n                                                return _vm.$set(\n                                                  _vm.config.resetButton,\n                                                  \"api\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          })\n                                        : _c(\"ValidationProvider\", {\n                                            attrs: {\n                                              rules: \"required\",\n                                              \"custom-messages\": {\n                                                required:\n                                                  \"controllerConfig.form.messages.missing.rb_custom\"\n                                              }\n                                            },\n                                            scopedSlots: _vm._u(\n                                              [\n                                                {\n                                                  key: \"default\",\n                                                  fn: function(ref) {\n                                                    var errors = ref.errors\n                                                    var touched = ref.touched\n                                                    var valid = ref.valid\n                                                    return [\n                                                      _c(\"CInput\", {\n                                                        attrs: {\n                                                          label: _vm.$t(\n                                                            \"controllerConfig.form.resetButton.custom\"\n                                                          ),\n                                                          \"is-valid\": touched\n                                                            ? valid\n                                                            : null,\n                                                          \"invalid-feedback\": _vm.$t(\n                                                            errors[0]\n                                                          )\n                                                        },\n                                                        model: {\n                                                          value:\n                                                            _vm.config\n                                                              .resetButton.api,\n                                                          callback: function(\n                                                            $$v\n                                                          ) {\n                                                            _vm.$set(\n                                                              _vm.config\n                                                                .resetButton,\n                                                              \"api\",\n                                                              $$v\n                                                            )\n                                                          },\n                                                          expression:\n                                                            \"config.resetButton.api\"\n                                                        }\n                                                      })\n                                                    ]\n                                                  }\n                                                }\n                                              ],\n                                              null,\n                                              true\n                                            )\n                                          }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"integer|required\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"controllerConfig.form.messages.invalid.rb_pin\",\n                                            required:\n                                              \"controllerConfig.form.messages.missing.rb_pin\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"0\",\n                                                      label: _vm.$t(\n                                                        \"controllerConfig.form.resetButton.pin\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.resetButton\n                                                          .button,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config\n                                                            .resetButton,\n                                                          \"button\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.resetButton.button\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      })\n                                    ],\n                                    1\n                                  ),\n                                  _vm._v(\" \"),\n                                  _c(\n                                    \"CCol\",\n                                    { attrs: { md: \"6\" } },\n                                    [\n                                      _c(\"h3\", [\n                                        _vm._v(\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"controllerConfig.form.statusLed.title\"\n                                            )\n                                          )\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"integer|required\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"controllerConfig.form.messages.invalid.gpio\",\n                                            required:\n                                              \"controllerConfig.form.messages.missing.sl_green\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"0\",\n                                                      label: _vm.$t(\n                                                        \"controllerConfig.form.statusLed.green\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.statusLed\n                                                          .greenLed,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.statusLed,\n                                                          \"greenLed\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.statusLed.greenLed\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"integer|required\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"controllerConfig.form.messages.invalid.gpio\",\n                                            required:\n                                              \"controllerConfig.form.messages.missing.sl_red\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"0\",\n                                                      label: _vm.$t(\n                                                        \"controllerConfig.form.statusLed.red\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.statusLed\n                                                          .redLed,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.statusLed,\n                                                          \"redLed\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.statusLed.redLed\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      })\n                                    ],\n                                    1\n                                  )\n                                ],\n                                1\n                              ),\n                              _c(\"hr\"),\n                              _vm._v(\" \"),\n                              _c(\n                                \"CRow\",\n                                [\n                                  _c(\n                                    \"CCol\",\n                                    { attrs: { md: \"6\" } },\n                                    [\n                                      _c(\"h3\", [\n                                        _vm._v(\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"controllerConfig.form.daemonApi.autoNetwork.title\"\n                                            )\n                                          )\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"required|integer|between:0,3\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"iqrfnet.networkManager.messages.invalid.integer\",\n                                            required:\n                                              \"iqrfnet.networkManager.messages.autoNetwork.actionRetries\",\n                                            between:\n                                              \"iqrfnet.networkManager.messages.autoNetwork.actionRetries\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"0\",\n                                                      max: \"3\",\n                                                      label: _vm.$t(\n                                                        \"iqrfnet.networkManager.autoNetwork.form.actionRetries\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.daemonApi\n                                                          .autoNetwork\n                                                          .actionRetries,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.daemonApi\n                                                            .autoNetwork,\n                                                          \"actionRetries\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.daemonApi.autoNetwork.actionRetries\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked:\n                                            _vm.config.daemonApi.autoNetwork\n                                              .discoveryBeforeStart,\n                                          label: _vm.$t(\n                                            \"iqrfnet.networkManager.autoNetwork.form.discoveryBeforeStart\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            return _vm.$set(\n                                              _vm.config.daemonApi.autoNetwork,\n                                              \"discoveryBeforeStart\",\n                                              $event\n                                            )\n                                          }\n                                        }\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"integer|required|between:0,7\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"iqrfnet.networkManager.messages.invalid.integer\",\n                                            required:\n                                              \"iqrfnet.networkManager.messages.discovery.txPower\",\n                                            between:\n                                              \"iqrfnet.networkManager.messages.discovery.txPower\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"0\",\n                                                      max: \"7\",\n                                                      label: _vm.$t(\n                                                        \"iqrfnet.networkManager.autoNetwork.form.discoveryTxPower\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.daemonApi\n                                                          .autoNetwork\n                                                          .discoveryTxPower,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.daemonApi\n                                                            .autoNetwork,\n                                                          \"discoveryTxPower\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.daemonApi.autoNetwork.discoveryTxPower\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked:\n                                            _vm.config.daemonApi.autoNetwork\n                                              .skipDiscoveryEachWave,\n                                          label: _vm.$t(\n                                            \"iqrfnet.networkManager.autoNetwork.form.skipDiscoveryEachWave\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            return _vm.$set(\n                                              _vm.config.daemonApi.autoNetwork,\n                                              \"skipDiscoveryEachWave\",\n                                              $event\n                                            )\n                                          }\n                                        }\n                                      }),\n                                      _c(\"hr\"),\n                                      _vm._v(\" \"),\n                                      _c(\"h4\", [\n                                        _vm._v(\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"iqrfnet.networkManager.autoNetwork.form.stopConditions\"\n                                            )\n                                          )\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked:\n                                            _vm.config.daemonApi.autoNetwork\n                                              .stopConditions\n                                              .abortOnTooManyNodesFound,\n                                          label: _vm.$t(\n                                            \"iqrfnet.networkManager.autoNetwork.form.abortOnTooManyNodesFound\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            return _vm.$set(\n                                              _vm.config.daemonApi.autoNetwork\n                                                .stopConditions,\n                                              \"abortOnTooManyNodesFound\",\n                                              $event\n                                            )\n                                          }\n                                        }\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules:\n                                            \"integer|required|between:1,127\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"iqrfnet.networkManager.messages.invalid.integer\",\n                                            required:\n                                              \"iqrfnet.networkManager.messages.autoNetwork.emptyWaves\",\n                                            between:\n                                              \"iqrfnet.networkManager.messages.autoNetwork.emptyWaves\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"1\",\n                                                      max: \"127\",\n                                                      label: _vm.$t(\n                                                        \"iqrfnet.networkManager.autoNetwork.form.emptyWaves\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.daemonApi\n                                                          .autoNetwork\n                                                          .stopConditions\n                                                          .emptyWaves,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.daemonApi\n                                                            .autoNetwork\n                                                            .stopConditions,\n                                                          \"emptyWaves\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.daemonApi.autoNetwork.stopConditions.emptyWaves\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules:\n                                            \"integer|required|between:1,127\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"iqrfnet.networkManager.messages.invalid.integer\",\n                                            required:\n                                              \"iqrfnet.networkManager.messages.autoNetwork.waves\",\n                                            between:\n                                              \"iqrfnet.networkManager.messages.autoNetwork.waves\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"1\",\n                                                      max: \"127\",\n                                                      label: _vm.$t(\n                                                        \"iqrfnet.networkManager.autoNetwork.form.waves\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.daemonApi\n                                                          .autoNetwork\n                                                          .stopConditions.waves,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.daemonApi\n                                                            .autoNetwork\n                                                            .stopConditions,\n                                                          \"waves\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.daemonApi.autoNetwork.stopConditions.waves\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _c(\"hr\"),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked:\n                                            _vm.config.daemonApi.autoNetwork\n                                              .returnVerbose,\n                                          label: _vm.$t(\n                                            \"controllerConfig.form.daemonApi.autoNetwork.verbose\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            return _vm.$set(\n                                              _vm.config.daemonApi.autoNetwork,\n                                              \"returnVerbose\",\n                                              $event\n                                            )\n                                          }\n                                        }\n                                      })\n                                    ],\n                                    1\n                                  ),\n                                  _vm._v(\" \"),\n                                  _c(\n                                    \"CCol\",\n                                    { attrs: { md: \"6\" } },\n                                    [\n                                      _c(\"h3\", [\n                                        _vm._v(\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"controllerConfig.form.daemonApi.discovery.title\"\n                                            )\n                                          )\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules:\n                                            \"integer|required|between:0,239\",\n                                          \"custom-messages\": {\n                                            between:\n                                              \"iqrfnet.networkManager.messages.discovery.maxAddr\",\n                                            integer:\n                                              \"iqrfnet.networkManager.messages.invalid.integer\",\n                                            required:\n                                              \"iqrfnet.networkManager.messages.discovery.maxAddr\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"0\",\n                                                      max: \"239\",\n                                                      label: _vm.$t(\n                                                        \"iqrfnet.networkManager.discovery.form.maxAddr\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.daemonApi\n                                                          .discovery.maxAddr,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.daemonApi\n                                                            .discovery,\n                                                          \"maxAddr\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.daemonApi.discovery.maxAddr\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"integer|required|between:0,7\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"iqrfnet.networkManager.messages.invalid.integer\",\n                                            required:\n                                              \"iqrfnet.networkManager.messages.discovery.txPower\",\n                                            between:\n                                              \"iqrfnet.networkManager.messages.discovery.txPower\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"0\",\n                                                      max: \"7\",\n                                                      label: _vm.$t(\n                                                        \"iqrfnet.networkManager.discovery.form.txPower\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.daemonApi\n                                                          .discovery.txPower,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.daemonApi\n                                                            .discovery,\n                                                          \"txPower\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.daemonApi.discovery.txPower\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked:\n                                            _vm.config.daemonApi.discovery\n                                              .returnVerbose,\n                                          label: _vm.$t(\n                                            \"controllerConfig.form.daemonApi.discovery.verbose\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            return _vm.$set(\n                                              _vm.config.daemonApi.discovery,\n                                              \"returnVerbose\",\n                                              $event\n                                            )\n                                          }\n                                        }\n                                      })\n                                    ],\n                                    1\n                                  )\n                                ],\n                                1\n                              ),\n                              _c(\"hr\"),\n                              _vm._v(\" \"),\n                              _c(\n                                \"CRow\",\n                                [\n                                  _c(\n                                    \"CCol\",\n                                    { attrs: { md: \"6\" } },\n                                    [\n                                      _c(\"h3\", [\n                                        _vm._v(\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"controllerConfig.form.factoryReset.title\"\n                                            )\n                                          )\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked:\n                                            _vm.config.factoryReset.coordinator,\n                                          label: _vm.$t(\n                                            \"controllerConfig.form.factoryReset.coordinator\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            return _vm.$set(\n                                              _vm.config.factoryReset,\n                                              \"coordinator\",\n                                              $event\n                                            )\n                                          }\n                                        }\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked:\n                                            _vm.config.factoryReset.daemon,\n                                          label: _vm.$t(\n                                            \"controllerConfig.form.factoryReset.daemon\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            return _vm.$set(\n                                              _vm.config.factoryReset,\n                                              \"daemon\",\n                                              $event\n                                            )\n                                          }\n                                        }\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked:\n                                            _vm.config.factoryReset.network,\n                                          label: _vm.$t(\n                                            \"controllerConfig.form.factoryReset.network\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            return _vm.$set(\n                                              _vm.config.factoryReset,\n                                              \"network\",\n                                              $event\n                                            )\n                                          }\n                                        }\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked:\n                                            _vm.config.factoryReset.webapp,\n                                          label: _vm.$t(\n                                            \"controllerConfig.form.factoryReset.webapp\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            return _vm.$set(\n                                              _vm.config.factoryReset,\n                                              \"webapp\",\n                                              $event\n                                            )\n                                          }\n                                        }\n                                      })\n                                    ],\n                                    1\n                                  )\n                                ],\n                                1\n                              ),\n                              _vm._v(\" \"),\n                              _c(\n                                \"CButton\",\n                                {\n                                  attrs: {\n                                    color: \"primary\",\n                                    type: \"submit\",\n                                    disabled: invalid\n                                  }\n                                },\n                                [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t\\t\\t\" +\n                                      _vm._s(_vm.$t(\"forms.save\")) +\n                                      \"\\n\\t\\t\\t\\t\"\n                                  )\n                                ]\n                              )\n                            ],\n                            1\n                          )\n                        ]\n                      }\n                    }\n                  ],\n                  null,\n                  false,\n                  1540082170\n                )\n              })\n            : _vm._e()\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<div>\n\t\t<CCard body-wrapper>\n\t\t\t<ValidationObserver v-if='config !== null' v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='processSubmit'>\n\t\t\t\t\t<CRow>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<h3>{{ $t(\"controllerConfig.form.wsServers.title\") }}</h3>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='required|ws_addr'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\trequired: \"controllerConfig.form.messages.missing.ws_api\",\n\t\t\t\t\t\t\t\t\tws_addr: \"controllerConfig.form.messages.invalid.ws_format\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.wsServers.api'\n\t\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.wsServers.api\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='required|ws_addr'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\trequired: \"controllerConfig.form.messages.missing.ws_monitor\",\n\t\t\t\t\t\t\t\t\tws_addr: \"controllerConfig.form.messages.invalid.ws_format\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.wsServers.monitor'\n\t\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.wsServers.monitor\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<h3>{{ $t(\"controllerConfig.form.logger.title\") }}</h3>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t\t:custom-messages='{required: \"controllerConfig.form.messages.missing.l_file\"}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.logger.filePath'\n\t\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.logger.filePath\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<CSelect \n\t\t\t\t\t\t\t\t:value.sync='config.logger.severity'\n\t\t\t\t\t\t\t\t:options='[\n\t\t\t\t\t\t\t\t\t{value: \"trace\", label: \"Trace\"},\n\t\t\t\t\t\t\t\t\t{value: \"debug\", label: \"Debug\"},\n\t\t\t\t\t\t\t\t\t{value: \"info\", label: \"Info\"},\n\t\t\t\t\t\t\t\t\t{value: \"warning\", label: \"Warning\"},\n\t\t\t\t\t\t\t\t\t{value: \"error\", label: \"Error\"}\n\t\t\t\t\t\t\t\t]'\n\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.logger.severity\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t</CRow><hr>\n\t\t\t\t\t<CRow>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<h3>{{ $t(\"controllerConfig.form.resetButton.title\") }}</h3>\n\t\t\t\t\t\t\t<CInputCheckbox \n\t\t\t\t\t\t\t\t:checked.sync='apiCallSetCustom'\n\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.resetButton.setCustom\")'\n\t\t\t\t\t\t\t\t@change='updateApiCall'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<CSelect \n\t\t\t\t\t\t\t\tv-if='!apiCallSetCustom'\n\t\t\t\t\t\t\t\t:value.sync='config.resetButton.api'\n\t\t\t\t\t\t\t\t:options='[\n\t\t\t\t\t\t\t\t\t{value: \"autoNetwork\", label: \"AutoNetwork\"},\n\t\t\t\t\t\t\t\t\t{value: \"discovery\", label: \"Discovery\"},\n\t\t\t\t\t\t\t\t]'\n\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.resetButton.api\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<ValidationProvider \n\t\t\t\t\t\t\t\tv-else\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t\t:custom-messages='{required: \"controllerConfig.form.messages.missing.rb_custom\"}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput \n\t\t\t\t\t\t\t\t\tv-model='config.resetButton.api'\n\t\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.resetButton.custom\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='integer|required'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"controllerConfig.form.messages.invalid.rb_pin\",\n\t\t\t\t\t\t\t\t\trequired: \"controllerConfig.form.messages.missing.rb_pin\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.resetButton.button'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.resetButton.pin\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<h3>{{ $t(\"controllerConfig.form.statusLed.title\") }}</h3>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='integer|required'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"controllerConfig.form.messages.invalid.gpio\",\n\t\t\t\t\t\t\t\t\trequired: \"controllerConfig.form.messages.missing.sl_green\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.statusLed.greenLed'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.statusLed.green\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='integer|required'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"controllerConfig.form.messages.invalid.gpio\",\n\t\t\t\t\t\t\t\t\trequired: \"controllerConfig.form.messages.missing.sl_red\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.statusLed.redLed'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.statusLed.red\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t</CRow><hr>\n\t\t\t\t\t<CRow>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<h3>{{ $t(\"controllerConfig.form.daemonApi.autoNetwork.title\") }}</h3>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='required|integer|between:0,3'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.actionRetries\",\n\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.actionRetries\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.daemonApi.autoNetwork.actionRetries'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\tmax='3'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.actionRetries\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='config.daemonApi.autoNetwork.discoveryBeforeStart'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.discoveryBeforeStart\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='integer|required|between:0,7'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.discovery.txPower\",\n\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.discovery.txPower\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.daemonApi.autoNetwork.discoveryTxPower'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\tmax='7'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.discoveryTxPower\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='config.daemonApi.autoNetwork.skipDiscoveryEachWave'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.skipDiscoveryEachWave\")'\n\t\t\t\t\t\t\t/><hr>\n\t\t\t\t\t\t\t<h4>{{ $t(\"iqrfnet.networkManager.autoNetwork.form.stopConditions\") }}</h4>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='config.daemonApi.autoNetwork.stopConditions.abortOnTooManyNodesFound'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.abortOnTooManyNodesFound\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='integer|required|between:1,127'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.emptyWaves\",\n\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.emptyWaves\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.daemonApi.autoNetwork.stopConditions.emptyWaves'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\t\t\tmax='127'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.emptyWaves\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='integer|required|between:1,127'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.waves\",\n\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.waves\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.daemonApi.autoNetwork.stopConditions.waves'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\t\t\tmax='127'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.waves\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider><hr>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='config.daemonApi.autoNetwork.returnVerbose'\n\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.daemonApi.autoNetwork.verbose\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<h3>{{ $t(\"controllerConfig.form.daemonApi.discovery.title\") }}</h3>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='integer|required|between:0,239'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.discovery.maxAddr\",\n\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.discovery.maxAddr\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.daemonApi.discovery.maxAddr'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.discovery.form.maxAddr\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='integer|required|between:0,7'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.discovery.txPower\",\n\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.discovery.txPower\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.daemonApi.discovery.txPower'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\tmax='7'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.discovery.form.txPower\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='config.daemonApi.discovery.returnVerbose'\n\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.daemonApi.discovery.verbose\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t</CRow><hr>\n\t\t\t\t\t<CRow>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<h3>{{ $t(\"controllerConfig.form.factoryReset.title\") }}</h3>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='config.factoryReset.coordinator'\n\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.factoryReset.coordinator\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='config.factoryReset.daemon'\n\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.factoryReset.daemon\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='config.factoryReset.network'\n\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.factoryReset.network\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='config.factoryReset.webapp'\n\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.factoryReset.webapp\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t</CRow>\n\t\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCard>\n\t</div>\n</template>\n\n<script>\nimport {CButton, CCard , CForm, CInput, CInputCheckbox, CSelect} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {between, integer, required} from 'vee-validate/dist/rules';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport ConfigService from '../../services/ConfigService';\n\nexport default {\n\tname: 'ControllerConfig',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tCSelect,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tname: 'controller',\n\t\t\tapiCallCustom: null,\n\t\t\tapiCallSetCustom: false,\n\t\t\tconfig: null,\n\t\t\tpreviousApiCall: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\textend('ws_addr', (addr) => {\n\t\t\tconst regex = RegExp('^ws:\\\\/\\\\/.+:([1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-9][0-9]{3}|[1-4][0-9][0-1][0-5][0-1])$');\n\t\t\treturn regex.test(addr);\n\t\t});\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tConfigService.getConfig(this.name, 10000)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.config = response.data;\n\t\t\t\t\tif (this.config.resetButton.api !== ('autoNetwork' || 'discovery')) {\n\t\t\t\t\t\tthis.apiCallCustom = this.config.resetButton.api;\n\t\t\t\t\t\tthis.apiCallSetCustom = true;\n\t\t\t\t\t\tthis.previousApiCall = 'autoNetwork';\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t\tprocessSubmit() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tConfigService.saveConfig(this.name, this.config, 10000)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(this.$t('forms.messages.saveSuccess').toString());\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t\tupdateApiCall() {\n\t\t\tif (this.apiCallSetCustom) {\n\t\t\t\tthis.previousApiCall = this.config.resetButton.api;\n\t\t\t\tthis.config.resetButton.api = this.apiCallCustom;\n\t\t\t} else {\n\t\t\t\tthis.config.resetButton.api = this.previousApiCall;\n\t\t\t}\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'controllerConfig.description',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ControllerConfig.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ControllerConfig.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ControllerConfig.vue?vue&type=template&id=0ff85c28&\"\nimport script from \"./ControllerConfig.vue?vue&type=script&lang=js&\"\nexport * from \"./ControllerConfig.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('0ff85c28')) {\n      api.createRecord('0ff85c28', component.options)\n    } else {\n      api.reload('0ff85c28', component.options)\n    }\n    module.hot.accept(\"./ControllerConfig.vue?vue&type=template&id=0ff85c28&\", function () {\n      api.rerender('0ff85c28', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/ControllerConfig.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _vm.config !== null\n        ? _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u(\n              [\n                {\n                  key: \"default\",\n                  fn: function(ref) {\n                    var invalid = ref.invalid\n                    return [\n                      _c(\n                        \"CForm\",\n                        {\n                          on: {\n                            submit: function($event) {\n                              $event.preventDefault()\n                              return _vm.processSubmit($event)\n                            }\n                          }\n                        },\n                        [\n                          _c(\"ValidationProvider\", {\n                            attrs: {\n                              rules: \"addr|required\",\n                              \"custom-messages\": {\n                                addr:\n                                  \"config.mender.form.messages.invalid.server\",\n                                required:\n                                  \"config.mender.form.messages.missing.server\"\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"default\",\n                                  fn: function(ref) {\n                                    var errors = ref.errors\n                                    var touched = ref.touched\n                                    var valid = ref.valid\n                                    return [\n                                      _c(\"CInput\", {\n                                        attrs: {\n                                          label: _vm.$t(\n                                            \"config.mender.form.server\"\n                                          ),\n                                          \"is-valid\": touched ? valid : null,\n                                          \"invalid-feedback\": _vm.$t(errors[0])\n                                        },\n                                        model: {\n                                          value: _vm.config.ServerURL,\n                                          callback: function($$v) {\n                                            _vm.$set(\n                                              _vm.config,\n                                              \"ServerURL\",\n                                              $$v\n                                            )\n                                          },\n                                          expression: \"config.ServerURL\"\n                                        }\n                                      })\n                                    ]\n                                  }\n                                }\n                              ],\n                              null,\n                              true\n                            )\n                          }),\n                          _vm._v(\" \"),\n                          _c(\"ValidationProvider\", {\n                            attrs: {\n                              rules: \"required\",\n                              \"custom-messages\": {\n                                required:\n                                  \"config.mender.form.messages.missing.tenantToken\"\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"default\",\n                                  fn: function(ref) {\n                                    var errors = ref.errors\n                                    var touched = ref.touched\n                                    var valid = ref.valid\n                                    return [\n                                      _c(\"CInput\", {\n                                        attrs: {\n                                          label: _vm.$t(\n                                            \"config.mender.form.tenantToken\"\n                                          ),\n                                          \"is-valid\": touched ? valid : null,\n                                          \"invalid-feedback\": _vm.$t(errors[0])\n                                        },\n                                        model: {\n                                          value: _vm.config.TenantToken,\n                                          callback: function($$v) {\n                                            _vm.$set(\n                                              _vm.config,\n                                              \"TenantToken\",\n                                              $$v\n                                            )\n                                          },\n                                          expression: \"config.TenantToken\"\n                                        }\n                                      })\n                                    ]\n                                  }\n                                }\n                              ],\n                              null,\n                              true\n                            )\n                          }),\n                          _vm._v(\" \"),\n                          _c(\"ValidationProvider\", {\n                            attrs: {\n                              rules: \"min:0|required|integer\",\n                              \"custom-messages\": {\n                                integer: \"forms.messages.integer\",\n                                min:\n                                  \"config.mender.form.messages.inventoryPollInterval\",\n                                required:\n                                  \"config.mender.form.messages.inventoryPollInterval\"\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"default\",\n                                  fn: function(ref) {\n                                    var errors = ref.errors\n                                    var touched = ref.touched\n                                    var valid = ref.valid\n                                    return [\n                                      _c(\"CInput\", {\n                                        attrs: {\n                                          type: \"number\",\n                                          min: \"0\",\n                                          label: _vm.$t(\n                                            \"config.mender.form.inventoryPollInterval\"\n                                          ),\n                                          \"is-valid\": touched ? valid : null,\n                                          \"invalid-feedback\": _vm.$t(errors[0])\n                                        },\n                                        model: {\n                                          value:\n                                            _vm.config\n                                              .InventoryPollIntervalSeconds,\n                                          callback: function($$v) {\n                                            _vm.$set(\n                                              _vm.config,\n                                              \"InventoryPollIntervalSeconds\",\n                                              _vm._n($$v)\n                                            )\n                                          },\n                                          expression:\n                                            \"config.InventoryPollIntervalSeconds\"\n                                        }\n                                      })\n                                    ]\n                                  }\n                                }\n                              ],\n                              null,\n                              true\n                            )\n                          }),\n                          _vm._v(\" \"),\n                          _c(\"ValidationProvider\", {\n                            attrs: {\n                              rules: \"min:0|required|integer\",\n                              \"custom-messages\": {\n                                integer: \"forms.messages.integer\",\n                                min:\n                                  \"config.mender.form.messages.retryPollInterval\",\n                                required:\n                                  \"config.mender.form.messages.retryPollInterval\"\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"default\",\n                                  fn: function(ref) {\n                                    var errors = ref.errors\n                                    var touched = ref.touched\n                                    var valid = ref.valid\n                                    return [\n                                      _c(\"CInput\", {\n                                        attrs: {\n                                          type: \"number\",\n                                          min: \"0\",\n                                          label: _vm.$t(\n                                            \"config.mender.form.retryPollInterval\"\n                                          ),\n                                          \"is-valid\": touched ? valid : null,\n                                          \"invalid-feedback\": _vm.$t(errors[0])\n                                        },\n                                        model: {\n                                          value:\n                                            _vm.config.RetryPollIntervalSeconds,\n                                          callback: function($$v) {\n                                            _vm.$set(\n                                              _vm.config,\n                                              \"RetryPollIntervalSeconds\",\n                                              _vm._n($$v)\n                                            )\n                                          },\n                                          expression:\n                                            \"config.RetryPollIntervalSeconds\"\n                                        }\n                                      })\n                                    ]\n                                  }\n                                }\n                              ],\n                              null,\n                              true\n                            )\n                          }),\n                          _vm._v(\" \"),\n                          _c(\"ValidationProvider\", {\n                            attrs: {\n                              rules: \"min:0|required|integer\",\n                              \"custom-messages\": {\n                                integer: \"forms.messages.integer\",\n                                min:\n                                  \"config.mender.form.messages.updatePollInterval\",\n                                required:\n                                  \"config.mender.form.messages.updatePollInterval\"\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"default\",\n                                  fn: function(ref) {\n                                    var errors = ref.errors\n                                    var touched = ref.touched\n                                    var valid = ref.valid\n                                    return [\n                                      _c(\"CInput\", {\n                                        attrs: {\n                                          type: \"number\",\n                                          min: \"0\",\n                                          label: _vm.$t(\n                                            \"config.mender.form.updatePollInterval\"\n                                          ),\n                                          \"is-valid\": touched ? valid : null,\n                                          \"invalid-feedback\": _vm.$t(errors[0])\n                                        },\n                                        model: {\n                                          value:\n                                            _vm.config\n                                              .UpdatePollIntervalSeconds,\n                                          callback: function($$v) {\n                                            _vm.$set(\n                                              _vm.config,\n                                              \"UpdatePollIntervalSeconds\",\n                                              _vm._n($$v)\n                                            )\n                                          },\n                                          expression:\n                                            \"config.UpdatePollIntervalSeconds\"\n                                        }\n                                      })\n                                    ]\n                                  }\n                                }\n                              ],\n                              null,\n                              true\n                            )\n                          }),\n                          _vm._v(\" \"),\n                          _c(\n                            \"CButton\",\n                            {\n                              attrs: {\n                                color: \"primary\",\n                                type: \"submit\",\n                                disabled: invalid\n                              }\n                            },\n                            [\n                              _vm._v(\n                                \"\\n\\t\\t\\t\\t\" +\n                                  _vm._s(_vm.$t(\"forms.save\")) +\n                                  \"\\n\\t\\t\\t\"\n                              )\n                            ]\n                          )\n                        ],\n                        1\n                      )\n                    ]\n                  }\n                }\n              ],\n              null,\n              false,\n              366184783\n            )\n          })\n        : _vm._e()\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<ValidationObserver v-if='config !== null' v-slot='{ invalid }'>\n\t\t\t<CForm @submit.prevent='processSubmit'>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='addr|required'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\taddr: \"config.mender.form.messages.invalid.server\",\n\t\t\t\t\t\trequired: \"config.mender.form.messages.missing.server\"\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='config.ServerURL'\n\t\t\t\t\t\t:label='$t(\"config.mender.form.server\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\trequired: \"config.mender.form.messages.missing.tenantToken\"\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='config.TenantToken'\n\t\t\t\t\t\t:label='$t(\"config.mender.form.tenantToken\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='min:0|required|integer'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\tmin: \"config.mender.form.messages.inventoryPollInterval\",\n\t\t\t\t\t\trequired: \"config.mender.form.messages.inventoryPollInterval\"\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model.number='config.InventoryPollIntervalSeconds'\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t:label='$t(\"config.mender.form.inventoryPollInterval\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='min:0|required|integer'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\tmin: \"config.mender.form.messages.retryPollInterval\",\n\t\t\t\t\t\trequired: \"config.mender.form.messages.retryPollInterval\"\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model.number='config.RetryPollIntervalSeconds'\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t:label='$t(\"config.mender.form.retryPollInterval\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid}'\n\t\t\t\t\trules='min:0|required|integer'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\tmin: \"config.mender.form.messages.updatePollInterval\",\n\t\t\t\t\t\trequired: \"config.mender.form.messages.updatePollInterval\"\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model.number='config.UpdatePollIntervalSeconds'\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t:label='$t(\"config.mender.form.updatePollInterval\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t</CButton>\n\t\t\t</CForm>\n\t\t</ValidationObserver>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CForm, CInput} from '@coreui/vue/src';\nimport {integer, min_value, required} from 'vee-validate/dist/rules';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport ConfigService from '../../services/ConfigService';\n\nexport default {\n\tname: 'MenderConfig',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tname: 'mender',\n\t\t\tconfig: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\textend('min', min_value);\n\t\textend('addr', (addr) => {\n\t\t\tconst regex = RegExp('(http|https):\\\\/\\\\/.*');\n\t\t\treturn regex.test(addr);\n\t\t});\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tConfigService.getConfig(this.name, 10000)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.config = response.data;\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t\tprocessSubmit() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tConfigService.saveConfig(this.name, this.config, 10000)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(this.$t('forms.messages.saveSuccess').toString());\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.mender.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MenderConfig.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MenderConfig.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./MenderConfig.vue?vue&type=template&id=d23b6572&\"\nimport script from \"./MenderConfig.vue?vue&type=script&lang=js&\"\nexport * from \"./MenderConfig.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('d23b6572')) {\n      api.createRecord('d23b6572', component.options)\n    } else {\n      api.reload('d23b6572', component.options)\n    }\n    module.hot.accept(\"./MenderConfig.vue?vue&type=template&id=d23b6572&\", function () {\n      api.rerender('d23b6572', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/MenderConfig.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      {\n                        on: {\n                          submit: function($event) {\n                            $event.preventDefault()\n                            return _vm.saveConfig($event)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"config.iqrfInfo.messages.instance\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"config.iqrfInfo.form.instance\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.info.instance,\n                                        callback: function($$v) {\n                                          _vm.$set(_vm.info, \"instance\", $$v)\n                                        },\n                                        expression: \"info.instance\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.info.enumAtStartUp,\n                            label: _vm.$t(\"config.iqrfInfo.form.enumAtStartUp\")\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              return _vm.$set(_vm.info, \"enumAtStartUp\", $event)\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: _vm.info.enumAtStartUp\n                              ? \"integer|min:0|required\"\n                              : \"\",\n                            \"custom-messages\": {\n                              required: \"config.iqrfInfo.messages.enumPeriod\",\n                              min: \"config.iqrfInfo.messages.enumPeriod\",\n                              integer:\n                                \"iqrfnet.networkManager.messages.invalid.integer\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        label: _vm.$t(\n                                          \"config.iqrfInfo.form.enumPeriod\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.info.enumPeriod,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.info,\n                                            \"enumPeriod\",\n                                            _vm._n($$v)\n                                          )\n                                        },\n                                        expression: \"info.enumPeriod\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.info.enumUniformDpaVer,\n                            label: _vm.$t(\n                              \"config.iqrfInfo.form.enumUniformDpaVer\"\n                            )\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              return _vm.$set(\n                                _vm.info,\n                                \"enumUniformDpaVer\",\n                                $event\n                              )\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              type: \"submit\",\n                              color: \"primary\",\n                              disabled: invalid\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='saveConfig'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"config.iqrfInfo.messages.instance\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='info.instance'\n\t\t\t\t\t\t\t:label='$t(\"config.iqrfInfo.form.instance\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='info.enumAtStartUp'\n\t\t\t\t\t\t:label='$t(\"config.iqrfInfo.form.enumAtStartUp\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t:rules='info.enumAtStartUp ? \"integer|min:0|required\": \"\"'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"config.iqrfInfo.messages.enumPeriod\",\n\t\t\t\t\t\t\tmin: \"config.iqrfInfo.messages.enumPeriod\",\n\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='info.enumPeriod'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t:label='$t(\"config.iqrfInfo.form.enumPeriod\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='info.enumUniformDpaVer'\n\t\t\t\t\t\t:label='$t(\"config.iqrfInfo.form.enumUniformDpaVer\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInput, CInputCheckbox} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate/';\nimport {integer, min_value, required} from 'vee-validate/dist/rules';\nimport ConfigService from '../../services/ConfigService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\n\nexport default {\n\tname: 'IqrfInfo',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tserviceName: 'daemon/iqrf::IqrfInfo',\n\t\t\tinfo: {\n\t\t\t\tinstance: '',\n\t\t\t\tenumAtStartUp: false,\n\t\t\t\tenumPeriod: 0,\n\t\t\t\tenumUniformDpaVer: false,\n\t\t\t},\n\t\t\thasInstance: false,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('integer', integer);\n\t\textend('min', min_value);\n\t\textend('required', required);\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tConfigService.getConfig(this.serviceName, 10000)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (response.data.instances) {\n\t\t\t\t\t\tthis.hasInstance = true;\n\t\t\t\t\t\tthis.info.instance = response.data.instances[0].instance;\n\t\t\t\t\t\tthis.info.enumAtStartUp = response.data.instances[0].enumAtStartUp;\n\t\t\t\t\t\tthis.info.enumPeriod = response.data.instances[0].enumPeriod;\n\t\t\t\t\t\tthis.info.enumUniformDpaVer = response.data.instances[0].enumUniformDpaVer;\t\n\t\t\t\t\t}\t\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t\tsaveConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.hasInstance) {\n\t\t\t\tConfigService.saveConfig(this.serviceName + '/' + this.info.instance, this.info, 10000)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\tthis.$toast.success(this.$t('config.success').toString());\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tConfigService.createConfig(this.serviceName, this.info, 10000)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\tthis.$toast.success(this.$t('config.success').toString());\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqrfInfo.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqrfInfo.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./IqrfInfo.vue?vue&type=template&id=b124b358&\"\nimport script from \"./IqrfInfo.vue?vue&type=script&lang=js&\"\nexport * from \"./IqrfInfo.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('b124b358')) {\n      api.createRecord('b124b358', component.options)\n    } else {\n      api.reload('b124b358', component.options)\n    }\n    module.hot.accept(\"./IqrfInfo.vue?vue&type=template&id=b124b358&\", function () {\n      api.rerender('b124b358', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/IqrfInfo.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _vm.loaded\n        ? _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u(\n              [\n                {\n                  key: \"default\",\n                  fn: function(ref) {\n                    var invalid = ref.invalid\n                    return [\n                      _c(\n                        \"CForm\",\n                        {\n                          on: {\n                            submit: function($event) {\n                              $event.preventDefault()\n                              return _vm.handleSubmit($event)\n                            }\n                          }\n                        },\n                        [\n                          _c(\"ValidationProvider\", {\n                            attrs: {\n                              rules: \"required\",\n                              \"custom-messages\": {\n                                required: \"core.user.messages.missing.username\"\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"default\",\n                                  fn: function(ref) {\n                                    var valid = ref.valid\n                                    var touched = ref.touched\n                                    var errors = ref.errors\n                                    return [\n                                      _c(\"CInput\", {\n                                        attrs: {\n                                          label: _vm.$t(\"core.user.username\"),\n                                          \"is-valid\": touched ? valid : null,\n                                          \"invalid-feedback\": _vm.$t(errors[0])\n                                        },\n                                        model: {\n                                          value: _vm.username,\n                                          callback: function($$v) {\n                                            _vm.username = $$v\n                                          },\n                                          expression: \"username\"\n                                        }\n                                      })\n                                    ]\n                                  }\n                                }\n                              ],\n                              null,\n                              true\n                            )\n                          }),\n                          _vm._v(\" \"),\n                          _vm.$store.getters[\"user/getRole\"] === \"power\"\n                            ? _c(\"CSelect\", {\n                                attrs: {\n                                  value: _vm.role,\n                                  label: _vm.$t(\"core.user.role\"),\n                                  options: [\n                                    {\n                                      value: \"normal\",\n                                      label: _vm.$t(\"core.user.roles.normal\")\n                                    },\n                                    {\n                                      value: \"power\",\n                                      label: _vm.$t(\"core.user.roles.power\")\n                                    }\n                                  ]\n                                },\n                                on: {\n                                  \"update:value\": function($event) {\n                                    _vm.role = $event\n                                  }\n                                }\n                              })\n                            : _vm._e(),\n                          _vm._v(\" \"),\n                          _vm.$store.getters[\"user/getRole\"] === \"power\"\n                            ? _c(\"CSelect\", {\n                                attrs: {\n                                  value: _vm.language,\n                                  label: _vm.$t(\"core.user.language\"),\n                                  options: [\n                                    {\n                                      value: \"en\",\n                                      label: _vm.$t(\"core.user.languages.en\")\n                                    }\n                                  ]\n                                },\n                                on: {\n                                  \"update:value\": function($event) {\n                                    _vm.language = $event\n                                  }\n                                }\n                              })\n                            : _vm._e(),\n                          _vm._v(\" \"),\n                          _vm.$store.getters[\"user/getId\"] === _vm.userId\n                            ? _c(\n                                \"div\",\n                                [\n                                  _c(\"ValidationProvider\", {\n                                    attrs: {\n                                      rules:\n                                        _vm.newPassword !== null\n                                          ? \"required\"\n                                          : \"\",\n                                      \"custom-messages\": {\n                                        required:\n                                          \"core.user.messages.missing.oldPassword\"\n                                      }\n                                    },\n                                    scopedSlots: _vm._u(\n                                      [\n                                        {\n                                          key: \"default\",\n                                          fn: function(ref) {\n                                            var valid = ref.valid\n                                            var touched = ref.touched\n                                            var errors = ref.errors\n                                            return [\n                                              _c(\"CInput\", {\n                                                attrs: {\n                                                  label: _vm.$t(\n                                                    \"core.user.oldPassword\"\n                                                  ),\n                                                  \"is-valid\": touched\n                                                    ? valid\n                                                    : null,\n                                                  \"invalid-feedback\": _vm.$t(\n                                                    errors[0]\n                                                  ),\n                                                  type: \"password\",\n                                                  autocomplete:\n                                                    \"current-password\"\n                                                },\n                                                model: {\n                                                  value: _vm.oldPassword,\n                                                  callback: function($$v) {\n                                                    _vm.oldPassword = $$v\n                                                  },\n                                                  expression: \"oldPassword\"\n                                                }\n                                              })\n                                            ]\n                                          }\n                                        }\n                                      ],\n                                      null,\n                                      true\n                                    )\n                                  }),\n                                  _vm._v(\" \"),\n                                  _c(\"ValidationProvider\", {\n                                    attrs: {\n                                      rules:\n                                        _vm.oldPassword !== null\n                                          ? \"required\"\n                                          : \"\",\n                                      \"custom-messages\": {\n                                        required:\n                                          \"core.user.messages.missing.newPassword\"\n                                      }\n                                    },\n                                    scopedSlots: _vm._u(\n                                      [\n                                        {\n                                          key: \"default\",\n                                          fn: function(ref) {\n                                            var valid = ref.valid\n                                            var touched = ref.touched\n                                            var errors = ref.errors\n                                            return [\n                                              _c(\"CInput\", {\n                                                attrs: {\n                                                  label: _vm.$t(\n                                                    \"core.user.newPassword\"\n                                                  ),\n                                                  \"is-valid\": touched\n                                                    ? valid\n                                                    : null,\n                                                  \"invalid-feedback\": _vm.$t(\n                                                    errors[0]\n                                                  ),\n                                                  type: \"password\",\n                                                  autocomplete: \"new-password\"\n                                                },\n                                                model: {\n                                                  value: _vm.newPassword,\n                                                  callback: function($$v) {\n                                                    _vm.newPassword = $$v\n                                                  },\n                                                  expression: \"newPassword\"\n                                                }\n                                              })\n                                            ]\n                                          }\n                                        }\n                                      ],\n                                      null,\n                                      true\n                                    )\n                                  })\n                                ],\n                                1\n                              )\n                            : _vm._e(),\n                          _vm._v(\" \"),\n                          _c(\n                            \"CButton\",\n                            {\n                              attrs: {\n                                color: \"primary\",\n                                type: \"submit\",\n                                disabled: invalid\n                              }\n                            },\n                            [\n                              _vm._v(\n                                \"\\n\\t\\t\\t\\t\" +\n                                  _vm._s(_vm.$t(\"forms.save\")) +\n                                  \"\\n\\t\\t\\t\"\n                              )\n                            ]\n                          )\n                        ],\n                        1\n                      )\n                    ]\n                  }\n                }\n              ],\n              null,\n              false,\n              820891263\n            )\n          })\n        : _vm._e()\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\n/**\n * User service\n */\nvar UserService = /** @class */ (function () {\n    function UserService() {\n    }\n    /**\n     * Changes password\n     * @param oldPassword Old password\n     * @param newPassword New password\n     */\n    UserService.prototype.changePassword = function (oldPassword, newPassword) {\n        var body = {\n            old: oldPassword,\n            new: newPassword\n        };\n        return axios.put('user/password', body, { headers: authorizationHeader() });\n    };\n    /**\n     * Deletes the user\n     * @param id User ID\n     */\n    UserService.prototype.delete = function (id) {\n        return axios.delete('users/' + id, { headers: authorizationHeader() });\n    };\n    /**\n     * Edits the user\n     * @param id User ID\n     * @param user User settings\n     */\n    UserService.prototype.edit = function (id, user) {\n        return axios.put('users/' + id, user, { headers: authorizationHeader() });\n    };\n    /**\n     * Returns the user\n     * @param id User ID\n     */\n    UserService.prototype.get = function (id) {\n        return axios.get('users/' + id, { headers: authorizationHeader() });\n    };\n    /**\n     * Returns information about the logged in user\n     */\n    UserService.prototype.getLoggedIn = function () {\n        return axios.get('user', { headers: authorizationHeader() });\n    };\n    /**\n     * Lists all users\n     */\n    UserService.prototype.list = function () {\n        return axios.get('users', { headers: authorizationHeader() });\n    };\n    return UserService;\n}());\nexport default new UserService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./UserEdit.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./UserEdit.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard body-wrapper>\n\t\t<ValidationObserver v-if='loaded' v-slot='{ invalid }'>\n\t\t\t<CForm @submit.prevent='handleSubmit'>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\trequired: \"core.user.messages.missing.username\",\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='username'\n\t\t\t\t\t\t:label='$t(\"core.user.username\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<CSelect\n\t\t\t\t\tv-if='$store.getters[\"user/getRole\"] === \"power\"'\n\t\t\t\t\t:value.sync='role'\n\t\t\t\t\t:label='$t(\"core.user.role\")'\n\t\t\t\t\t:options='[\n\t\t\t\t\t\t{value: \"normal\", label: $t(\"core.user.roles.normal\")},\n\t\t\t\t\t\t{value: \"power\", label: $t(\"core.user.roles.power\")},\n\t\t\t\t\t]'\n\t\t\t\t/>\n\t\t\t\t<CSelect\n\t\t\t\t\tv-if='$store.getters[\"user/getRole\"] === \"power\"'\n\t\t\t\t\t:value.sync='language'\n\t\t\t\t\t:label='$t(\"core.user.language\")'\n\t\t\t\t\t:options='[\n\t\t\t\t\t\t{value: \"en\", label: $t(\"core.user.languages.en\")},\n\t\t\t\t\t]'\n\t\t\t\t/>\n\t\t\t\t<div v-if='$store.getters[\"user/getId\"] === userId'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t:rules='newPassword !== null ? \"required\" : \"\"'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"core.user.messages.missing.oldPassword\",\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='oldPassword'\n\t\t\t\t\t\t\t:label='$t(\"core.user.oldPassword\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\tautocomplete='current-password'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t:rules='oldPassword !== null ? \"required\" : \"\"'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"core.user.messages.missing.newPassword\",\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='newPassword'\n\t\t\t\t\t\t\t:label='$t(\"core.user.newPassword\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\tautocomplete='new-password'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t</div>\n\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t</CButton>\n\t\t\t</CForm>\n\t\t</ValidationObserver>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CForm, CInput, CSelect} from '@coreui/vue/src';\nimport {required,} from 'vee-validate/dist/rules';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport UserService from '../../services/UserService';\n\nexport default {\n\tname: 'UserEdit',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCForm,\n\t\tCInput,\n\t\tCSelect,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tprops: {\n\t\tuserId: {\n\t\t\ttype: Number,\n\t\t\trequired: true,\n\t\t}\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tloaded: false,\n\t\t\tusername: null,\n\t\t\tlanguage: null,\n\t\t\trole: null,\n\t\t\toldPassword: null,\n\t\t\tnewPassword: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t\tthis.$store.commit('spinner/SHOW');\n\t\tUserService.get(this.userId)\n\t\t\t.then((response) => {\n\t\t\t\tthis.loaded = true;\n\t\t\t\tthis.username = response.data.username;\n\t\t\t\tthis.language = response.data.language;\n\t\t\t\tthis.role = response.data.role;\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tthis.loaded = false;\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\tif (error.response.status === 404) {\n\t\t\t\t\tthis.$router.push('/user/');\n\t\t\t\t\tthis.$toast.error(this.$t('core.user.messages.notFound').toString());\n\t\t\t\t}\n\t\t\t});\n\t},\n\tmethods: {\n\t\thandleSubmit() {\n\t\t\tif (this.$store.getters['user/getId'] === this.userId &&\n\t\t\t\t\tthis.oldPassword !== null && this.newPassword !== null) {\n\t\t\t\tUserService.changePassword(this.oldPassword, this.newPassword)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tthis.performEdit();\n\t\t\t\t\t\tthis.signOut();\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\tthis.$toast.error(this.$t('core.user.messages.invalid.oldPassword').toString());\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.performEdit();\n\t\t\t\tif (this.$store.getters['user/getId'] === this.userId) {\n\t\t\t\t\tthis.signOut();\n\t\t\t\t}\n\t\t\t}\n\n\t\t},\n\t\tperformEdit() {\n\t\t\treturn UserService.edit(this.userId, {\n\t\t\t\tusername: this.username,\n\t\t\t\tlanguage: this.language,\n\t\t\t\trole: this.role,\n\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$router.push('/user/');\n\t\t\t\t\tthis.$toast.success(this.$t('core.user.messages.edit.success', {username: this.username}).toString());\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tif (error.response.status === 409) {\n\t\t\t\t\t\tthis.$toast.error(this.$t('core.user.messages.conflict.username').toString());\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n\t\tsignOut() {\n\t\t\tthis.$store.dispatch('user/signOut')\n\t\t\t\t.then(() => {\n\t\t\t\t\tlocation.replace('/sign/in');\n\t\t\t\t});\n\t\t}\n\t},\n\tmetaInfo: {\n\t\ttitle: 'core.user.edit.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./UserEdit.vue?vue&type=template&id=70c685bc&\"\nimport script from \"./UserEdit.vue?vue&type=script&lang=js&\"\nexport * from \"./UserEdit.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('70c685bc')) {\n      api.createRecord('70c685bc', component.options)\n    } else {\n      api.reload('70c685bc', component.options)\n    }\n    module.hot.accept(\"./UserEdit.vue?vue&type=template&id=70c685bc&\", function () {\n      api.rerender('70c685bc', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Core/UserEdit.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        [\n          _c(\n            \"CCardHeader\",\n            [\n              _c(\n                \"CButton\",\n                {\n                  staticClass: \"float-right\",\n                  attrs: { color: \"success\", to: \"/user/add/\", size: \"sm\" }\n                },\n                [\n                  _c(\"CIcon\", { attrs: { content: _vm.$options.icons.add } }),\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"table.actions.add\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ],\n                1\n              )\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\"CDataTable\", {\n                attrs: {\n                  items: _vm.users,\n                  fields: _vm.fields,\n                  \"items-per-page\": 20,\n                  paginator: \"\"\n                },\n                scopedSlots: _vm._u([\n                  {\n                    key: \"role\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          [\n                            _c(\n                              \"CDropdown\",\n                              {\n                                attrs: {\n                                  color: \"success\",\n                                  \"toggler-text\": _vm.$t(\n                                    \"core.user.roles.\" + item.role\n                                  ),\n                                  size: \"sm\"\n                                }\n                              },\n                              [\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeRole(item, \"normal\")\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(\n                                          _vm.$t(\"core.user.roles.normal\")\n                                        ) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                ),\n                                _vm._v(\" \"),\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeRole(item, \"power\")\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(\n                                          _vm.$t(\"core.user.roles.power\")\n                                        ) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  },\n                  {\n                    key: \"language\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          [\n                            _c(\n                              \"CDropdown\",\n                              {\n                                attrs: {\n                                  color: \"success\",\n                                  \"toggler-text\": _vm.$t(\n                                    \"core.user.languages.\" + item.language\n                                  ),\n                                  size: \"sm\"\n                                }\n                              },\n                              [\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeLanguage(item, \"en\")\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(\n                                          _vm.$t(\"core.user.languages.en\")\n                                        ) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  },\n                  {\n                    key: \"actions\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          { staticClass: \"col-actions\" },\n                          [\n                            _vm.$store.getters[\"user/getRole\"] === \"power\" ||\n                            _vm.$store.getters[\"user/getName\"] === item.username\n                              ? _c(\n                                  \"CButton\",\n                                  {\n                                    attrs: {\n                                      color: \"primary\",\n                                      to: \"/user/edit/\" + item.id,\n                                      size: \"sm\"\n                                    }\n                                  },\n                                  [\n                                    _c(\"CIcon\", {\n                                      attrs: {\n                                        content: _vm.$options.icons.edit\n                                      }\n                                    }),\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(_vm.$t(\"table.actions.edit\")) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ],\n                                  1\n                                )\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: { color: \"danger\", size: \"sm\" },\n                                on: {\n                                  click: function($event) {\n                                    return _vm.confirmDelete(item)\n                                  }\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.delete }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.delete\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  }\n                ])\n              })\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CModal\",\n        {\n          attrs: { color: \"danger\", show: _vm.modals.delete.user !== null },\n          on: {\n            \"update:show\": function($event) {\n              return _vm.$set(_vm.modals.delete, \"user !== null\", $event)\n            }\n          },\n          scopedSlots: _vm._u([\n            {\n              key: \"header\",\n              fn: function() {\n                return [\n                  _c(\"h5\", { staticClass: \"modal-title\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\"core.user.messages.delete.confirmTitle\")\n                        ) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"CButtonClose\", {\n                    staticClass: \"text-white\",\n                    on: {\n                      click: function($event) {\n                        _vm.modals.delete.user = null\n                      }\n                    }\n                  })\n                ]\n              },\n              proxy: true\n            },\n            {\n              key: \"footer\",\n              fn: function() {\n                return [\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"danger\" },\n                      on: {\n                        click: function($event) {\n                          _vm.modals.delete.user = null\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.no\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"success\" },\n                      on: { click: _vm.performDelete }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.yes\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  )\n                ]\n              },\n              proxy: true\n            }\n          ])\n        },\n        [\n          _vm._v(\" \"),\n          _vm.modals.delete.user !== null\n            ? _c(\"span\", [\n                _vm._v(\n                  \"\\n\\t\\t\\t\" +\n                    _vm._s(\n                      _vm.$t(\"core.user.messages.delete.confirm\", {\n                        username: _vm.modals.delete.user.username\n                      })\n                    ) +\n                    \"\\n\\t\\t\"\n                )\n              ])\n            : _vm._e()\n        ]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<div>\n\t\t<CCard>\n\t\t\t<CCardHeader>\n\t\t\t\t<CButton\n\t\t\t\t\tcolor='success'\n\t\t\t\t\tto='/user/add/'\n\t\t\t\t\tsize='sm'\n\t\t\t\t\tclass='float-right'\n\t\t\t\t>\n\t\t\t\t\t<CIcon :content='$options.icons.add' />\n\t\t\t\t\t{{ $t('table.actions.add') }}\n\t\t\t\t</CButton>\n\t\t\t</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<CDataTable\n\t\t\t\t\t:items='users'\n\t\t\t\t\t:fields='fields'\n\t\t\t\t\t:items-per-page='20'\n\t\t\t\t\tpaginator\n\t\t\t\t>\n\t\t\t\t\t<template #role='{item}'>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CDropdown\n\t\t\t\t\t\t\t\tcolor='success'\n\t\t\t\t\t\t\t\t:toggler-text='$t(\"core.user.roles.\" + item.role)'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeRole(item, \"normal\")'>\n\t\t\t\t\t\t\t\t\t{{ $t('core.user.roles.normal') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeRole(item, \"power\")'>\n\t\t\t\t\t\t\t\t\t{{ $t('core.user.roles.power') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t</CDropdown>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template #language='{item}'>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CDropdown\n\t\t\t\t\t\t\t\tcolor='success'\n\t\t\t\t\t\t\t\t:toggler-text='$t(\"core.user.languages.\" + item.language)'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeLanguage(item, \"en\")'>\n\t\t\t\t\t\t\t\t\t{{ $t('core.user.languages.en') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t</CDropdown>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template #actions='{item}'>\n\t\t\t\t\t\t<td class='col-actions'>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tv-if='$store.getters[\"user/getRole\"] === \"power\" || $store.getters[\"user/getName\"] === item.username'\n\t\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\t\t:to='\"/user/edit/\" + item.id'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.edit' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.edit') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton color='danger' size='sm' @click='confirmDelete(item)'>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.delete' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.delete') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t</CDataTable>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t\t<CModal\n\t\t\tcolor='danger'\n\t\t\t:show.sync='modals.delete.user !== null'\n\t\t>\n\t\t\t<template #header>\n\t\t\t\t<h5 class='modal-title'>\n\t\t\t\t\t{{ $t('core.user.messages.delete.confirmTitle') }}\n\t\t\t\t</h5>\n\t\t\t\t<CButtonClose class='text-white' @click='modals.delete.user = null' />\n\t\t\t</template>\n\t\t\t<span v-if='modals.delete.user !== null'>\n\t\t\t\t{{ $t('core.user.messages.delete.confirm', {username: modals.delete.user.username}) }}\n\t\t\t</span>\n\t\t\t<template #footer>\n\t\t\t\t<CButton color='danger' @click='modals.delete.user = null'>\n\t\t\t\t\t{{ $t('forms.no') }}\n\t\t\t\t</CButton>\n\t\t\t\t<CButton color='success' @click='performDelete'>\n\t\t\t\t\t{{ $t('forms.yes') }}\n\t\t\t\t</CButton>\n\t\t\t</template>\n\t\t</CModal>\n\t</div>\n</template>\n\n<script>\nimport {\n\tCButton,\n\tCButtonClose,\n\tCCard,\n\tCCardBody,\n\tCCardHeader,\n\tCDataTable,\n\tCDropdown,\n\tCDropdownItem,\n\tCIcon,\n\tCModal\n} from '@coreui/vue/src';\nimport {cilPencil, cilPlus, cilTrash} from '@coreui/icons';\nimport UserService from '../../services/UserService';\n\nexport default {\n\tname: 'UserList',\n\tcomponents: {\n\t\tCButton,\n\t\tCButtonClose,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCDataTable,\n\t\tCDropdown,\n\t\tCDropdownItem,\n\t\tCIcon,\n\t\tCModal,\n\t},\n\tdata() {\n\t\tlet fields = [];\n\t\tif (this.$store.getters['user/getRole'] === 'normal') {\n\t\t\tfields = [\n\t\t\t\t{\n\t\t\t\t\tkey: 'username',\n\t\t\t\t\tlabel: this.$t('core.user.username'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'actions',\n\t\t\t\t\tlabel: this.$t('table.actions.title'),\n\t\t\t\t\tsorter: false,\n\t\t\t\t\tfilter: false,\n\t\t\t\t},\n\t\t\t];\n\t\t} else {\n\t\t\tfields = [\n\t\t\t\t{\n\t\t\t\t\tkey: 'id',\n\t\t\t\t\tlabel: this.$t('core.user.id'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'username',\n\t\t\t\t\tlabel: this.$t('core.user.username'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'role',\n\t\t\t\t\tlabel: this.$t('core.user.role'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'language',\n\t\t\t\t\tlabel: this.$t('core.user.language'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'actions',\n\t\t\t\t\tlabel: this.$t('table.actions.title'),\n\t\t\t\t\tsorter: false,\n\t\t\t\t\tfilter: false,\n\t\t\t\t},\n\t\t\t];\n\t\t}\n\t\treturn {\n\t\t\tfields,\n\t\t\tmodals: {\n\t\t\t\tdelete: {\n\t\t\t\t\tuser: null,\n\t\t\t\t}\n\t\t\t},\n\t\t\tusers: [],\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.$store.commit('spinner/SHOW');\n\t\tthis.getUsers();\n\t},\n\tmethods: {\n\t\tgetUsers() {\n\t\t\treturn UserService.list()\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.users = response.data;\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t});\n\t\t},\n\t\tchangeRole(user, newRole) {\n\t\t\tthis.edit(user, {role: newRole});\n\t\t},\n\t\tchangeLanguage(user, newLanguage) {\n\t\t\tthis.edit(user, {language: newLanguage});\n\t\t},\n\t\tedit(user, newSettings) {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tlet settings = {\n\t\t\t\t...user,\n\t\t\t\t...newSettings,\n\t\t\t};\n\t\t\tdelete settings.id;\n\t\t\treturn UserService.edit(user.id, settings)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getUsers().then(() => {\n\t\t\t\t\t\tthis.$toast.success(this.$t('core.user.messages.edit.success', {username: user.username}).toString());\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t});\n\t\t},\n\t\tconfirmDelete(user) {\n\t\t\tthis.modals.delete.user = user;\n\t\t},\n\t\tperformDelete() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tconst user = this.modals.delete.user;\n\t\t\tthis.modals.delete.user = null;\n\t\t\tUserService.delete(user.id)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getUsers().then(() => {\n\t\t\t\t\t\tthis.$toast.success(this.$t('core.user.messages.delete.success', {username: user.username}).toString());\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t});\n\t\t},\n\t},\n\ticons: {\n\t\tadd: cilPlus,\n\t\tdelete: cilTrash,\n\t\tedit: cilPencil,\n\t},\n\tmetaInfo: {\n\t\ttitle: 'core.user.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./UserList.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./UserList.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./UserList.vue?vue&type=template&id=8f56d494&\"\nimport script from \"./UserList.vue?vue&type=script&lang=js&\"\nexport * from \"./UserList.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('8f56d494')) {\n      api.createRecord('8f56d494', component.options)\n    } else {\n      api.reload('8f56d494', component.options)\n    }\n    module.hot.accept(\"./UserList.vue?vue&type=template&id=8f56d494&\", function () {\n      api.rerender('8f56d494', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Core/UserList.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\n        \"CListGroup\",\n        [\n          _c(\"CListGroupItem\", { attrs: { to: \"/network/ethernet/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"network.ethernet.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"network.ethernet.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ])\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<CListGroup>\n\t\t\t<CListGroupItem to='/network/ethernet/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('network.ethernet.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('network.ethernet.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t</CListGroup>\n\t</CCard>\n</template>\n\n<script>\nimport {CCard, CListGroup, CListGroupItem} from '@coreui/vue/src';\n\nexport default {\n\tname: 'NetworkDisambiguation',\n\tcomponents: {\n\t\tCCard,\n\t\tCListGroup,\n\t\tCListGroupItem\n\t},\n\tmetaInfo: {\n\t\ttitle: 'network.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetworkDisambiguation.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetworkDisambiguation.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./NetworkDisambiguation.vue?vue&type=template&id=2a916c50&\"\nimport script from \"./NetworkDisambiguation.vue?vue&type=script&lang=js&\"\nexport * from \"./NetworkDisambiguation.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('2a916c50')) {\n      api.createRecord('2a916c50', component.options)\n    } else {\n      api.reload('2a916c50', component.options)\n    }\n    module.hot.accept(\"./NetworkDisambiguation.vue?vue&type=template&id=2a916c50&\", function () {\n      api.rerender('2a916c50', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Network/NetworkDisambiguation.vue\"\nexport default component.exports","import Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport CloudDisambiguation from '../pages/Cloud/CloudDisambiguation.vue';\nimport AzureCreator from '../pages/Cloud/AzureCreator.vue';\nimport HexioCreator from '../pages/Cloud/HexioCreator.vue';\nimport IbmCreator from '../pages/Cloud/IbmCreator.vue';\nimport InteliGlueCreator from '../pages/Cloud/InteliGlueCreator.vue';\nimport PixlaControl from '../pages/Cloud/PixlaControl.vue';\nimport GatewayDisambiguation from '../pages/Gateway/GatewayDisambiguation.vue';\nimport GatewayInfo from '../pages/Gateway/GatewayInfo.vue';\nimport DaemonLogViewer from '../pages/Gateway/DaemonLogViewer.vue';\nimport DaemonMode from '../pages/Gateway/DaemonMode.vue';\nimport PowerControl from '../pages/Gateway/PowerControl.vue';\nimport ServiceControl from '../pages/Gateway/ServiceControl.vue';\nimport SignIn from '../components/SignIn.vue';\nimport IqrfNetDisambiguation from '../pages/IqrfNet/IqrfNetDisambiguation.vue';\nimport NetworkManager from '../pages/IqrfNet/NetworkManager.vue';\nimport SendJsonRequest from '../pages/IqrfNet/SendJsonRequest.vue';\nimport SendDpaPacket from '../pages/IqrfNet/SendDpaPacket.vue';\nimport StandardManager from '../pages/IqrfNet/StandardManager.vue';\nimport ConfigMigration from '../pages/Config/ConfigMigration.vue';\nimport TranslatorConfig from '../pages/Config/TranslatorConfig.vue';\nimport ControllerConfig from '../pages/Config/ControllerConfig.vue';\nimport MenderConfig from '../pages/Config/MenderConfig.vue';\nimport IqrfInfo from '../pages/Config/IqrfInfo.vue';\nimport UserEdit from '../pages/Core/UserEdit.vue';\nimport UserList from '../pages/Core/UserList.vue';\nimport NetworkDisambiguation from '../pages/Network/NetworkDisambiguation.vue';\nimport i18n from '../i18n';\nimport store from '../store';\nVue.use(VueRouter);\nvar routes = [\n    {\n        component: SignIn,\n        name: 'signIn',\n        path: '/sign/in',\n    },\n    {\n        path: '/',\n        component: {\n            render: function (c) {\n                return c('router-view');\n            }\n        },\n        children: [\n            {\n                path: '/cloud',\n                component: {\n                    render: function (c) {\n                        return c('router-view');\n                    }\n                },\n                children: [\n                    {\n                        component: CloudDisambiguation,\n                        path: '',\n                        meta: { title: 'cloud.title' }\n                    },\n                    {\n                        component: AzureCreator,\n                        path: 'azure',\n                        meta: { title: 'cloud.msAzure.form.title' }\n                    },\n                    {\n                        component: HexioCreator,\n                        path: 'hexio',\n                        meta: { title: 'cloud.hexio.form.title' }\n                    },\n                    {\n                        component: IbmCreator,\n                        path: 'ibm-cloud',\n                        meta: { title: 'cloud.ibmCloud.form.title' }\n                    },\n                    {\n                        component: InteliGlueCreator,\n                        path: 'inteli-glue',\n                        meta: { title: 'cloud.intelimentsInteliGlue.form.title' },\n                    },\n                    {\n                        component: PixlaControl,\n                        path: 'pixla',\n                        meta: { title: 'cloud.pixla.title' },\n                    },\n                ]\n            },\n            {\n                path: '/gateway',\n                component: {\n                    render: function (c) {\n                        return c('router-view');\n                    }\n                },\n                children: [\n                    {\n                        component: GatewayDisambiguation,\n                        path: '',\n                        meta: { title: 'gateway.title' }\n                    },\n                    {\n                        component: GatewayInfo,\n                        path: 'info',\n                        meta: { title: 'gateway.info.title' },\n                    },\n                    {\n                        component: DaemonLogViewer,\n                        path: 'log',\n                        meta: { title: 'gateway.log.title' },\n                    },\n                    {\n                        component: DaemonMode,\n                        path: 'change-mode',\n                        meta: { title: 'gateway.mode.title' },\n                    },\n                    {\n                        component: PowerControl,\n                        path: 'power',\n                        meta: { title: 'gateway.power.title' },\n                    },\n                ]\n            },\n            {\n                component: ServiceControl,\n                name: 'serviceControl',\n                path: '/service/:serviceName',\n                props: true,\n                meta: { title: 'service.%serviceName%.title' },\n            },\n            {\n                path: '/iqrfnet',\n                component: {\n                    render: function (c) {\n                        return c('router-view');\n                    }\n                },\n                children: [\n                    {\n                        component: IqrfNetDisambiguation,\n                        path: '',\n                        meta: { title: 'iqrfnet.title' }\n                    },\n                    {\n                        component: NetworkManager,\n                        path: 'network',\n                        meta: { title: 'iqrfnet.networkManager.title' }\n                    },\n                    {\n                        component: StandardManager,\n                        path: 'standard',\n                        meta: { title: 'iqrfnet.standard.title' }\n                    },\n                    {\n                        component: SendDpaPacket,\n                        path: 'send-raw',\n                        meta: { title: 'iqrfnet.sendPacket.title' },\n                    },\n                    {\n                        component: SendJsonRequest,\n                        path: 'send-json',\n                        meta: { title: 'iqrfnet.sendJson.title' }\n                    },\n                ]\n            },\n            {\n                component: IqrfInfo,\n                path: '/config/iqrf-info',\n                meta: { title: 'config.iqrfInfo.title' }\n            },\n            {\n                component: ConfigMigration,\n                path: '/config/migration',\n                meta: { title: 'config.migration.title' }\n            },\n            {\n                component: MenderConfig,\n                path: '/config/mender',\n                meta: { title: 'config.mender.description' }\n            },\n            {\n                component: TranslatorConfig,\n                path: '/config/translator',\n                meta: { title: 'translatorConfig.description' }\n            },\n            {\n                component: ControllerConfig,\n                path: '/config/controller',\n                meta: { title: 'controllerConfig.description' }\n            },\n            {\n                path: '/network',\n                component: {\n                    render: function (c) {\n                        return c('router-view');\n                    }\n                },\n                children: [\n                    {\n                        component: NetworkDisambiguation,\n                        path: '',\n                        meta: { title: 'network.title' }\n                    }\n                ]\n            },\n            {\n                path: '/user',\n                component: {\n                    render: function (c) {\n                        return c('router-view');\n                    }\n                },\n                meta: { title: 'core.user.title' },\n                children: [\n                    {\n                        component: UserList,\n                        path: '',\n                        meta: { title: 'core.user.title' },\n                    },\n                    {\n                        component: UserEdit,\n                        path: 'edit/:userId',\n                        props: function (route) {\n                            var userId = Number.parseInt(route.params.userId, 10);\n                            if (Number.isNaN(userId)) {\n                                return 0;\n                            }\n                            return { userId: userId };\n                        },\n                        meta: { title: 'core.user.edit.title' },\n                    },\n                ]\n            },\n            {\n                path: '*',\n                name: 'legacyComponent',\n                component: {\n                    // @ts-ignore\n                    metaInfo: { titleTemplate: null },\n                },\n            },\n        ],\n    },\n];\nvar router = new VueRouter({\n    mode: 'history',\n    routes: routes\n});\nfunction metaTranslate(route, type) {\n    var text = '';\n    if (route.meta[type]) {\n        var parts = route.meta[type].split('%');\n        if (parts.length === 1) {\n            text = i18n.t(route.meta[type]).toString();\n        }\n        else {\n            text = i18n.t(parts[0] + route.params[parts[1]] + parts[2]).toString();\n        }\n    }\n    return text;\n}\nrouter.beforeEach(function (to, from, next) {\n    if (!to.path.startsWith('/install/') && to.name !== 'signIn' &&\n        !store.getters['user/isLoggedIn']) {\n        store.dispatch('user/signOut').then(function () {\n            next('/sign/in');\n        });\n        return;\n    }\n    if (to.name === 'legacyComponent') {\n        if (from.name !== null) {\n            location.replace(to.fullPath);\n        }\n        else {\n            next();\n        }\n        return;\n    }\n    var titleEl = document.getElementById('title');\n    if (titleEl !== null && to.meta.title !== undefined) {\n        titleEl.innerText = metaTranslate(to, 'title');\n    }\n    var content = document.getElementById('content');\n    if (content !== null) {\n        content.remove();\n    }\n    var flashes = document.getElementById('snippet--flashes');\n    if (flashes !== null && from.name !== null) {\n        flashes.remove();\n    }\n    next();\n});\nexport default router;\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\")\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t\n</template>\n\n<script>\nexport default {\n\tname: 'App'\n};\n</script>\n\n<style scoped>\n\n</style>\n","import mod from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=6a6fa670&scoped=true&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"6a6fa670\",\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6a6fa670')) {\n      api.createRecord('6a6fa670', component.options)\n    } else {\n      api.reload('6a6fa670', component.options)\n    }\n    module.hot.accept(\"./App.vue?vue&type=template&id=6a6fa670&scoped=true&\", function () {\n      api.rerender('6a6fa670', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/App.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.enabled\n    ? _c(\"div\", { staticClass: \"loading\" }, [\n        _c(\"div\", { staticClass: \"loading-group\" }, [\n          _c(\"div\", { staticClass: \"spinner\" }),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"loading-text\" }, [\n            _vm._v(\"\\n\\t\\t\\t\" + _vm._s(_vm.text) + \"\\n\\t\\t\")\n          ])\n        ])\n      ])\n    : _vm._e()\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<div v-if='enabled' class='loading'>\n\t\t<div class='loading-group'>\n\t\t\t<div class='spinner' />\n\t\t\t<div class='loading-text'>\n\t\t\t\t{{ text }}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\n\nexport default {\n\tname: 'LoadingSpinner',\n\tcomputed: {\n\t\t...mapGetters({\n\t\t\tenabled: 'spinner/isEnabled',\n\t\t\ttext: 'spinner/text',\n\t\t}),\n\t},\n};\n</script>\n\n<style scoped lang='scss'>\n.loading {\n\tposition: fixed;\n\twidth: 100%;\n\theight: 100%;\n\tbackground-color: rgba(0, 0, 0, 0.75);\n\tz-index: 9999;\n\tcursor: wait;\n\toverflow: auto;\n\ttext-align: center;\n\t&:before {\n\t\tcontent: '';\n\t\tdisplay: inline flow-root;\n\t\theight: 100%;\n\t\tvertical-align: middle;\n\t}\n}\n\n.loading-group {\n\tdisplay: inline flow-root;\n\tvertical-align: middle;\n}\n\n.loading-text {\n\tmargin-top: 20pt;\n\tfont-size: 20pt;\n\tposition: relative;\n\tz-index: 10000;\n\tcolor: white;\n\ttext-align: center;\n}\n\n.spinner {\n\tdisplay: block;\n\tposition: relative;\n\tz-index: 10000;\n\twidth: 150px;\n\theight: 150px;\n\tmargin: auto;\n\tborder: 16px solid #f3f3f3;\n\tborder-radius: 50%;\n\tborder-top: 16px solid #3498db;\n\tanimation: spin 2s linear infinite;\n}\n\n@keyframes spin {\n\t0% {\n\t\ttransform: rotate(0deg);\n\t}\n\t100% {\n\t\ttransform: rotate(360deg);\n\t}\n}\n</style>\n","import mod from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LoadingSpinner.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LoadingSpinner.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./LoadingSpinner.vue?vue&type=template&id=e0752284&scoped=true&\"\nimport script from \"./LoadingSpinner.vue?vue&type=script&lang=js&\"\nexport * from \"./LoadingSpinner.vue?vue&type=script&lang=js&\"\nimport style0 from \"./LoadingSpinner.vue?vue&type=style&index=0&id=e0752284&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"e0752284\",\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('e0752284')) {\n      api.createRecord('e0752284', component.options)\n    } else {\n      api.reload('e0752284', component.options)\n    }\n    module.hot.accept(\"./LoadingSpinner.vue?vue&type=template&id=e0752284&scoped=true&\", function () {\n      api.rerender('e0752284', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/LoadingSpinner.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CHeader\",\n    { attrs: { fixed: false, \"color-scheme\": \"dark\" } },\n    [\n      _c(\"CToggler\", {\n        staticClass: \"ml-3 d-lg-none\",\n        attrs: { \"in-header\": \"\" },\n        on: {\n          click: function($event) {\n            return _vm.$store.commit(\"sidebar/toggleSidebarMobile\")\n          }\n        }\n      }),\n      _vm._v(\" \"),\n      _c(\"CToggler\", {\n        staticClass: \"ml-3 d-md-down-none\",\n        attrs: { \"in-header\": \"\" },\n        on: {\n          click: function($event) {\n            return _vm.$store.commit(\"sidebar/toggleSidebarDesktop\")\n          }\n        }\n      }),\n      _vm._v(\" \"),\n      _c(\n        \"CHeaderBrand\",\n        { staticClass: \"mx-auto d-lg-none\", attrs: { to: \"/\" } },\n        [\n          _c(\"img\", {\n            attrs: { src: \"/img/logo-big.svg\", alt: _vm.$t(\"core.title\") }\n          })\n        ]\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CHeaderNav\",\n        { staticClass: \"ml-auto mr-3\" },\n        [\n          _vm.$store.getters[\"user/isLoggedIn\"]\n            ? _c(\n                \"CDropdown\",\n                {\n                  staticClass: \"c-header-nav-items\",\n                  attrs: {\n                    \"in-nav\": true,\n                    placement: \"bottom-end\",\n                    \"add-menu-classes\": \"pt-0\"\n                  },\n                  scopedSlots: _vm._u(\n                    [\n                      {\n                        key: \"toggler\",\n                        fn: function() {\n                          return [\n                            _c(\n                              \"CHeaderNavLink\",\n                              { staticClass: \"dropdown-toggle\" },\n                              [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$store.getters[\"user/getName\"]) +\n                                    \"\\n\\t\\t\\t\\t\"\n                                )\n                              ]\n                            )\n                          ]\n                        },\n                        proxy: true\n                      }\n                    ],\n                    null,\n                    false,\n                    2615873522\n                  )\n                },\n                [\n                  _vm._v(\" \"),\n                  _c(\n                    \"CDropdownItem\",\n                    { on: { click: _vm.signOut } },\n                    [\n                      _c(\"CIcon\", {\n                        attrs: { content: _vm.$options.icons.cilLockLocked }\n                      }),\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" +\n                          _vm._s(_vm.$t(\"core.sign.out.title\")) +\n                          \"\\n\\t\\t\\t\"\n                      )\n                    ],\n                    1\n                  )\n                ],\n                1\n              )\n            : _vm._e()\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TheHeader.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TheHeader.vue?vue&type=script&lang=js&\"","<template>\n\t<CHeader :fixed='false' color-scheme='dark'>\n\t\t<CToggler\n\t\t\tin-header\n\t\t\tclass='ml-3 d-lg-none'\n\t\t\t@click='$store.commit(\"sidebar/toggleSidebarMobile\")'\n\t\t/>\n\t\t<CToggler\n\t\t\tin-header\n\t\t\tclass='ml-3 d-md-down-none'\n\t\t\t@click='$store.commit(\"sidebar/toggleSidebarDesktop\")'\n\t\t/>\n\t\t<CHeaderBrand class='mx-auto d-lg-none' to='/'>\n\t\t\t<img\n\t\t\t\tsrc='/img/logo-big.svg'\n\t\t\t\t:alt='$t(\"core.title\")'\n\t\t\t>\n\t\t</CHeaderBrand>\n\t\t<CHeaderNav class='ml-auto mr-3'>\n\t\t\t<CDropdown\n\t\t\t\tv-if='$store.getters[\"user/isLoggedIn\"]'\n\t\t\t\t:in-nav='true'\n\t\t\t\tclass='c-header-nav-items'\n\t\t\t\tplacement='bottom-end'\n\t\t\t\tadd-menu-classes='pt-0'\n\t\t\t>\n\t\t\t\t<template #toggler>\n\t\t\t\t\t<CHeaderNavLink class='dropdown-toggle'>\n\t\t\t\t\t\t{{ $store.getters['user/getName'] }}\n\t\t\t\t\t</CHeaderNavLink>\n\t\t\t\t</template>\n\t\t\t\t<CDropdownItem @click='signOut'>\n\t\t\t\t\t<CIcon :content='$options.icons.cilLockLocked' />\n\t\t\t\t\t{{ $t('core.sign.out.title') }}\n\t\t\t\t</CDropdownItem>\n\t\t\t</CDropdown>\n\t\t</CHeaderNav>\n\t</CHeader>\n</template>\n\n<script>\nimport {\n\tCDropdown,\n\tCHeader,\n\tCHeaderBrand,\n\tCHeaderNav,\n\tCHeaderNavLink,\n\tCIcon,\n\tCToggler\n} from '@coreui/vue/src';\n\nimport {cilLockLocked} from '@coreui/icons';\n\nexport default {\n\tname: 'TheHeader',\n\tcomponents: {\n\t\tCDropdown,\n\t\tCHeader,\n\t\tCHeaderBrand,\n\t\tCHeaderNav,\n\t\tCHeaderNavLink,\n\t\tCIcon,\n\t\tCToggler,\n\t},\n\ticons: {\n\t\tcilLockLocked,\n\t},\n\tmethods: {\n\t\tsignOut() {\n\t\t\tthis.$store.dispatch('user/signOut')\n\t\t\t\t.then(() => {\n\t\t\t\t\tlocation.replace('/sign/in');\n\t\t\t\t\tthis.$toast.success(this.$t('core.sign.out.message').toString());\n\t\t\t\t});\n\t\t}\n\t}\n};\n</script>\n","import { render, staticRenderFns } from \"./TheHeader.vue?vue&type=template&id=71d0b6ed&\"\nimport script from \"./TheHeader.vue?vue&type=script&lang=js&\"\nexport * from \"./TheHeader.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('71d0b6ed')) {\n      api.createRecord('71d0b6ed', component.options)\n    } else {\n      api.reload('71d0b6ed', component.options)\n    }\n    module.hot.accept(\"./TheHeader.vue?vue&type=template&id=71d0b6ed&\", function () {\n      api.rerender('71d0b6ed', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/TheHeader.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CSidebar\",\n    {\n      attrs: { fixed: \"\", minimize: _vm.minimize, show: _vm.show },\n      on: {\n        \"update:show\": function(value) {\n          return _vm.$store.commit(\"sidebar/set\", [\"show\", value])\n        }\n      }\n    },\n    [\n      _c(\n        \"CSidebarBrand\",\n        { staticClass: \"d-md-down-none\", attrs: { to: \"/\" } },\n        [\n          _c(\"img\", {\n            staticClass: \"c-sidebar-brand-full\",\n            attrs: { src: \"/img/logo-big.svg\", alt: _vm.$t(\"core.title\") }\n          }),\n          _vm._v(\" \"),\n          _c(\"img\", {\n            staticClass: \"c-sidebar-brand-minimized\",\n            attrs: { src: \"/img/logo-small.svg\", alt: _vm.$t(\"core.title\") }\n          })\n        ]\n      ),\n      _vm._v(\" \"),\n      _c(\"CRenderFunction\", {\n        attrs: { flat: \"\", \"content-to-render\": _vm.getNav }\n      }),\n      _vm._v(\" \"),\n      _c(\"CSidebarMinimizer\", {\n        staticClass: \"d-md-down-none\",\n        nativeOn: {\n          click: function($event) {\n            return _vm.$store.commit(\"sidebar/set\", [\"minimize\", !_vm.minimize])\n          }\n        }\n      })\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TheSidebar.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TheSidebar.vue?vue&type=script&lang=js&\"","<template>\n\t<CSidebar\n\t\tfixed\n\t\t:minimize='minimize'\n\t\t:show='show'\n\t\t@update:show='(value) => $store.commit(\"sidebar/set\", [\"show\", value])'\n\t>\n\t\t<CSidebarBrand class='d-md-down-none' to='/'>\n\t\t\t<img class='c-sidebar-brand-full' src='/img/logo-big.svg' :alt='$t(\"core.title\")'>\n\t\t\t<img class='c-sidebar-brand-minimized' src='/img/logo-small.svg' :alt='$t(\"core.title\")'>\n\t\t</CSidebarBrand>\n\t\t<CRenderFunction flat :content-to-render='getNav' />\n\t\t<CSidebarMinimizer\n\t\t\tclass='d-md-down-none'\n\t\t\t@click.native='$store.commit(\"sidebar/set\", [\"minimize\", !minimize])'\n\t\t/>\n\t</CSidebar>\n</template>\n\n<script>\nimport {\n\tCRenderFunction,\n\tCSidebar,\n\tCSidebarBrand,\n\tCSidebarMinimizer,\n} from '@coreui/vue/src';\nimport {\n\tcibGrafana,\n\tcibNodeRed,\n\tcilBook,\n\tcilCloud,\n\tcilLan,\n\tcilStorage,\n\tcilSettings,\n\tcilToggleOff,\n\tcilUser,\n\tcilWifiSignal4,\n} from '@coreui/icons';\n\nexport default {\n\tname: 'TheSidebar',\n\tcomponents: {\n\t\tCRenderFunction,\n\t\tCSidebar,\n\t\tCSidebarBrand,\n\t\tCSidebarMinimizer,\n\t},\n\tcomputed: {\n\t\tshow() {\n\t\t\treturn this.$store.state.sidebar.show;\n\t\t},\n\t\tminimize() {\n\t\t\treturn this.$store.state.sidebar.minimize;\n\t\t},\n\t\tgetNav() {\n\t\t\tconst data = [\n\t\t\t\t{\n\t\t\t\t\t_name: 'CSidebarNav',\n\t\t\t\t\t_children: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavDropdown',\n\t\t\t\t\t\t\tname: this.$t('gateway.title'),\n\t\t\t\t\t\t\tto: '/gateway/',\n\t\t\t\t\t\t\troute: '/gateway/',\n\t\t\t\t\t\t\ticon: {content: cilStorage},\n\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('gateway.info.title'),\n\t\t\t\t\t\t\t\t\tto: '/gateway/info/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('gateway.log.title'),\n\t\t\t\t\t\t\t\t\tto: '/gateway/log/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('gateway.mode.title'),\n\t\t\t\t\t\t\t\t\tto: '/gateway/change-mode/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('service.iqrf-gateway-daemon.title'),\n\t\t\t\t\t\t\t\t\tto: '/service/iqrf-gateway-daemon/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('service.ssh.title'),\n\t\t\t\t\t\t\t\t\tto: '/service/ssh/',\n\t\t\t\t\t\t\t\t\tfeature: 'ssh',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('service.unattended-upgrades.title'),\n\t\t\t\t\t\t\t\t\tto: '/service/unattended-upgrades/',\n\t\t\t\t\t\t\t\t\tfeature: 'unattendedUpgrades',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('gateway.updater.title'),\n\t\t\t\t\t\t\t\t\tto: '/gateway/updater/',\n\t\t\t\t\t\t\t\t\tfeature: 'updater',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('gateway.power.title'),\n\t\t\t\t\t\t\t\t\tto: '/gateway/power/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavDropdown',\n\t\t\t\t\t\t\tname: this.$t('config.title'),\n\t\t\t\t\t\t\tto: '/config/',\n\t\t\t\t\t\t\troute: '/config/',\n\t\t\t\t\t\t\ticon: {content: cilSettings},\n\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.main.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/main/',\n\t\t\t\t\t\t\t\t\troles: ['power'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.components.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/component/',\n\t\t\t\t\t\t\t\t\troles: ['power'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.selectedComponents.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/component/',\n\t\t\t\t\t\t\t\t\troles: ['normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.iqrfSpi.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/iqrf-spi/',\n\t\t\t\t\t\t\t\t\tcomponent: 'iqrf::IqrfSpi',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.iqrfCdc.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/iqrf-cdc/',\n\t\t\t\t\t\t\t\t\tcomponent: 'iqrf::IqrfCdc',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.iqrfUart.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/iqrf-uart/',\n\t\t\t\t\t\t\t\t\tcomponent: 'iqrf::IqrfUart',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.iqrfDpa.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/iqrf-dpa/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.iqrfRepository.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/iqrf-repository/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.iqrfInfo.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/iqrf-info/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.iqmesh.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/iqmesh/',\n\t\t\t\t\t\t\t\t\troles: ['power'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.mqtt.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/mqtt/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.websocket.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/websocket/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.mq.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/mq/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.udp.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/udp/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.jsonRawApi.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/json-raw-api/',\n\t\t\t\t\t\t\t\t\troles: ['power'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.jsonMngMetaDataApi.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/json-mng-meta-data-api/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.jsonSplitter.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/json-splitter/',\n\t\t\t\t\t\t\t\t\troles: ['power'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.scheduler.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/scheduler/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.tracer.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/tracer/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.monitor.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/monitor/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.migration.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/migration/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('translatorConfig.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/translator/',\n\t\t\t\t\t\t\t\t\tfeature: 'iqrfGatewayTranslator',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('controllerConfig.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/controller/',\n\t\t\t\t\t\t\t\t\tfeature: 'iqrfGatewayController',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.mender.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/mender/',\n\t\t\t\t\t\t\t\t\tfeature: 'mender',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal']\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavDropdown',\n\t\t\t\t\t\t\tname: this.$t('iqrfnet.title'),\n\t\t\t\t\t\t\tto: '/iqrfnet/',\n\t\t\t\t\t\t\troute: '/iqrfnet/',\n\t\t\t\t\t\t\ticon: {content: cilWifiSignal4},\n\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('iqrfnet.sendPacket.title'),\n\t\t\t\t\t\t\t\t\tto: '/iqrfnet/send-raw/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('iqrfnet.sendJson.title'),\n\t\t\t\t\t\t\t\t\tto: '/iqrfnet/send-json/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('iqrfnet.trUpload.title'),\n\t\t\t\t\t\t\t\t\tto: '/iqrfnet/tr-upload/',\n\t\t\t\t\t\t\t\t\tfeature: 'trUpload',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('iqrfnet.trConfiguration.title'),\n\t\t\t\t\t\t\t\t\tto: '/iqrfnet/tr-config/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('iqrfnet.networkManager.title'),\n\t\t\t\t\t\t\t\t\tto: '/iqrfnet/network/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('iqrfnet.standard.title'),\n\t\t\t\t\t\t\t\t\tto: '/iqrfnet/standard/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavDropdown',\n\t\t\t\t\t\t\tname: this.$t('network.title'),\n\t\t\t\t\t\t\tto: '/network/',\n\t\t\t\t\t\t\troute: '/network/',\n\t\t\t\t\t\t\tfeature: 'networkManager',\n\t\t\t\t\t\t\ticon: {content: cilLan},\n\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('network.ethernet.title'),\n\t\t\t\t\t\t\t\t\tto: '/network/ethernet/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavDropdown',\n\t\t\t\t\t\t\tname: this.$t('cloud.title'),\n\t\t\t\t\t\t\tto: '/cloud/',\n\t\t\t\t\t\t\troute: '/cloud/',\n\t\t\t\t\t\t\ticon: {content: cilCloud},\n\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('cloud.ibmCloud.title'),\n\t\t\t\t\t\t\t\t\tto: '/cloud/ibm-cloud/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('cloud.msAzure.title'),\n\t\t\t\t\t\t\t\t\tto: '/cloud/azure/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('cloud.amazonAws.title'),\n\t\t\t\t\t\t\t\t\tto: '/cloud/aws/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('cloud.hexio.title'),\n\t\t\t\t\t\t\t\t\tto: '/cloud/hexio/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('cloud.intelimentsInteliGlue.title'),\n\t\t\t\t\t\t\t\t\tto: '/cloud/inteli-glue/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('cloud.pixla.title'),\n\t\t\t\t\t\t\t\t\tto: '/cloud/pixla/',\n\t\t\t\t\t\t\t\t\tfeature: 'pixla',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavItem',\n\t\t\t\t\t\t\tname: this.$t('core.grafana.title'),\n\t\t\t\t\t\t\thref: this.$store.getters['features/configuration']('grafana').url,\n\t\t\t\t\t\t\ttarget: '_blank',\n\t\t\t\t\t\t\tfeature: 'grafana',\n\t\t\t\t\t\t\ticon: {content: cibGrafana},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavDropdown',\n\t\t\t\t\t\t\tname: this.$t('core.nodeRed.title'),\n\t\t\t\t\t\t\tfeature: 'nodeRed',\n\t\t\t\t\t\t\ticon: {content: cibNodeRed},\n\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('core.nodeRed.workflow.title'),\n\t\t\t\t\t\t\t\t\thref: this.$store.getters['features/configuration']('nodeRed').url,\n\t\t\t\t\t\t\t\t\ttarget: '_blank',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('core.nodeRed.dashboard.title'),\n\t\t\t\t\t\t\t\t\thref: this.$store.getters['features/configuration']('nodeRed').url + 'ui/',\n\t\t\t\t\t\t\t\t\ttarget: '_blank',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavItem',\n\t\t\t\t\t\t\tname: this.$t('core.supervisor.title'),\n\t\t\t\t\t\t\thref: this.$store.getters['features/configuration']('supervisord').url,\n\t\t\t\t\t\t\ttarget: '_blank',\n\t\t\t\t\t\t\tfeature: 'supervisord',\n\t\t\t\t\t\t\ticon: {content: cilToggleOff},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavItem',\n\t\t\t\t\t\t\tname: this.$t('core.user.title'),\n\t\t\t\t\t\t\tto: '/user/',\n\t\t\t\t\t\t\ticon: {content: cilUser},\n\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavItem',\n\t\t\t\t\t\t\tname: this.$t('core.documentation.title'),\n\t\t\t\t\t\t\thref: this.$store.getters['features/configuration']('docs').url,\n\t\t\t\t\t\t\ttarget: '_blank',\n\t\t\t\t\t\t\tfeature: 'docs',\n\t\t\t\t\t\t\ticon: {content: cilBook},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t];\n\t\t\treturn data.filter((element) => {\n\t\t\t\telement._children = element._children.filter((element) => {\n\t\t\t\t\tif (element.roles !== undefined &&\n\t\t\t\t\t\t\t!element.roles.includes(this.$store.getters['user/getRole'])) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tif (element.feature !== undefined &&\n\t\t\t\t\t\t\t!this.$store.getters['features/isEnabled'](element.feature)) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tif (element.items) {\n\t\t\t\t\t\telement.items = element.items.filter((element) => {\n\t\t\t\t\t\t\tif (element.roles !== undefined &&\n\t\t\t\t\t\t\t\t\t!element.roles.includes(this.$store.getters['user/getRole'])) {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (element.feature !== undefined &&\n\t\t\t\t\t\t\t\t\t!this.$store.getters['features/isEnabled'](element.feature)) {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn element;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn element;\n\t\t\t\t});\n\t\t\t\treturn element;\n\t\t\t});\n\t\t}\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./TheSidebar.vue?vue&type=template&id=6bd688ac&\"\nimport script from \"./TheSidebar.vue?vue&type=script&lang=js&\"\nexport * from \"./TheSidebar.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6bd688ac')) {\n      api.createRecord('6bd688ac', component.options)\n    } else {\n      api.reload('6bd688ac', component.options)\n    }\n    module.hot.accept(\"./TheSidebar.vue?vue&type=template&id=6bd688ac&\", function () {\n      api.rerender('6bd688ac', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/TheSidebar.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\"AddressChanger\", { attrs: { \"current-address\": _vm.address } }),\n      _vm._v(\" \"),\n      _vm.config !== null\n        ? _c(\n            \"CCard\",\n            [\n              _c(\"CCardHeader\", [\n                _vm._v(_vm._s(_vm.$t(\"iqrfnet.trConfiguration.title\")))\n              ]),\n              _vm._v(\" \"),\n              _c(\n                \"CCardBody\",\n                [\n                  _c(\"ValidationObserver\", {\n                    scopedSlots: _vm._u(\n                      [\n                        {\n                          key: \"default\",\n                          fn: function(ref) {\n                            var invalid = ref.invalid\n                            return [\n                              _c(\n                                \"CForm\",\n                                {\n                                  on: {\n                                    submit: function($event) {\n                                      $event.preventDefault()\n                                      return _vm.handleSubmit($event)\n                                    }\n                                  }\n                                },\n                                [\n                                  _c(\n                                    \"CRow\",\n                                    [\n                                      _c(\n                                        \"CCol\",\n                                        { attrs: { md: \"6\" } },\n                                        [\n                                          _c(\"h2\", [\n                                            _vm._v(\n                                              _vm._s(\n                                                _vm.$t(\n                                                  \"iqrfnet.trConfiguration.form.rf\"\n                                                )\n                                              )\n                                            )\n                                          ]),\n                                          _vm._v(\" \"),\n                                          _c(\"CSelect\", {\n                                            attrs: {\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.rfBand\"\n                                              ),\n                                              options: [\n                                                {\n                                                  value: \"443\",\n                                                  label: _vm.$t(\n                                                    \"iqrfnet.trConfiguration.form.rfBands.443\"\n                                                  )\n                                                },\n                                                {\n                                                  value: \"868\",\n                                                  label: _vm.$t(\n                                                    \"iqrfnet.trConfiguration.form.rfBands.868\"\n                                                  )\n                                                },\n                                                {\n                                                  value: \"916\",\n                                                  label: _vm.$t(\n                                                    \"iqrfnet.trConfiguration.form.rfBands.916\"\n                                                  )\n                                                }\n                                              ],\n                                              disabled: \"true\"\n                                            },\n                                            model: {\n                                              value: _vm.config.rfBand,\n                                              callback: function($$v) {\n                                                _vm.$set(\n                                                  _vm.config,\n                                                  \"rfBand\",\n                                                  $$v\n                                                )\n                                              },\n                                              expression: \"config.rfBand\"\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"ValidationProvider\", {\n                                            attrs: {\n                                              rules: _vm.rfChannelRules.rule,\n                                              \"custom-messages\":\n                                                _vm.rfChannelValidatorMessages\n                                            },\n                                            scopedSlots: _vm._u(\n                                              [\n                                                {\n                                                  key: \"default\",\n                                                  fn: function(ref) {\n                                                    var valid = ref.valid\n                                                    var touched = ref.touched\n                                                    var errors = ref.errors\n                                                    return [\n                                                      _c(\"CInput\", {\n                                                        attrs: {\n                                                          label: _vm.$t(\n                                                            \"iqrfnet.trConfiguration.form.rfChannelA\"\n                                                          ),\n                                                          \"is-valid\": touched\n                                                            ? valid\n                                                            : null,\n                                                          \"invalid-feedback\": _vm.$t(\n                                                            errors[0]\n                                                          ),\n                                                          type: \"number\",\n                                                          max:\n                                                            _vm.rfChannelRules\n                                                              .max,\n                                                          min:\n                                                            _vm.rfChannelRules\n                                                              .min\n                                                        },\n                                                        model: {\n                                                          value:\n                                                            _vm.config\n                                                              .rfChannelA,\n                                                          callback: function(\n                                                            $$v\n                                                          ) {\n                                                            _vm.$set(\n                                                              _vm.config,\n                                                              \"rfChannelA\",\n                                                              _vm._n($$v)\n                                                            )\n                                                          },\n                                                          expression:\n                                                            \"config.rfChannelA\"\n                                                        }\n                                                      })\n                                                    ]\n                                                  }\n                                                }\n                                              ],\n                                              null,\n                                              true\n                                            )\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"ValidationProvider\", {\n                                            attrs: {\n                                              rules: _vm.rfChannelRules.rule,\n                                              \"custom-messages\":\n                                                _vm.rfChannelValidatorMessages\n                                            },\n                                            scopedSlots: _vm._u(\n                                              [\n                                                {\n                                                  key: \"default\",\n                                                  fn: function(ref) {\n                                                    var valid = ref.valid\n                                                    var touched = ref.touched\n                                                    var errors = ref.errors\n                                                    return [\n                                                      _c(\"CInput\", {\n                                                        attrs: {\n                                                          label: _vm.$t(\n                                                            \"iqrfnet.trConfiguration.form.rfChannelB\"\n                                                          ),\n                                                          \"is-valid\": touched\n                                                            ? valid\n                                                            : null,\n                                                          \"invalid-feedback\": _vm.$t(\n                                                            errors[0]\n                                                          ),\n                                                          type: \"number\",\n                                                          max:\n                                                            _vm.rfChannelRules\n                                                              .max,\n                                                          min:\n                                                            _vm.rfChannelRules\n                                                              .min\n                                                        },\n                                                        model: {\n                                                          value:\n                                                            _vm.config\n                                                              .rfChannelB,\n                                                          callback: function(\n                                                            $$v\n                                                          ) {\n                                                            _vm.$set(\n                                                              _vm.config,\n                                                              \"rfChannelB\",\n                                                              _vm._n($$v)\n                                                            )\n                                                          },\n                                                          expression:\n                                                            \"config.rfChannelB\"\n                                                        }\n                                                      })\n                                                    ]\n                                                  }\n                                                }\n                                              ],\n                                              null,\n                                              true\n                                            )\n                                          }),\n                                          _vm._v(\" \"),\n                                          _vm.config.rfSubChannelA !== undefined\n                                            ? _c(\"ValidationProvider\", {\n                                                attrs: {\n                                                  rules:\n                                                    _vm.rfChannelRules.rule,\n                                                  \"custom-messages\":\n                                                    _vm.rfChannelValidatorMessages\n                                                },\n                                                scopedSlots: _vm._u(\n                                                  [\n                                                    {\n                                                      key: \"default\",\n                                                      fn: function(ref) {\n                                                        var valid = ref.valid\n                                                        var touched =\n                                                          ref.touched\n                                                        var errors = ref.errors\n                                                        return [\n                                                          _c(\"CInput\", {\n                                                            attrs: {\n                                                              label: _vm.$t(\n                                                                \"iqrfnet.trConfiguration.form.rfSubChannelA\"\n                                                              ),\n                                                              \"is-valid\": touched\n                                                                ? valid\n                                                                : null,\n                                                              \"invalid-feedback\": _vm.$t(\n                                                                errors[0]\n                                                              ),\n                                                              type: \"number\",\n                                                              max:\n                                                                _vm\n                                                                  .rfChannelRules\n                                                                  .max,\n                                                              min:\n                                                                _vm\n                                                                  .rfChannelRules\n                                                                  .min\n                                                            },\n                                                            model: {\n                                                              value:\n                                                                _vm.config\n                                                                  .rfSubChannelA,\n                                                              callback: function(\n                                                                $$v\n                                                              ) {\n                                                                _vm.$set(\n                                                                  _vm.config,\n                                                                  \"rfSubChannelA\",\n                                                                  _vm._n($$v)\n                                                                )\n                                                              },\n                                                              expression:\n                                                                \"config.rfSubChannelA\"\n                                                            }\n                                                          })\n                                                        ]\n                                                      }\n                                                    }\n                                                  ],\n                                                  null,\n                                                  true\n                                                )\n                                              })\n                                            : _vm._e(),\n                                          _vm._v(\" \"),\n                                          _vm.config.rfSubChannelB !== undefined\n                                            ? _c(\"ValidationProvider\", {\n                                                attrs: {\n                                                  rules:\n                                                    _vm.rfChannelRules.rule,\n                                                  \"custom-messages\":\n                                                    _vm.rfChannelValidatorMessages\n                                                },\n                                                scopedSlots: _vm._u(\n                                                  [\n                                                    {\n                                                      key: \"default\",\n                                                      fn: function(ref) {\n                                                        var valid = ref.valid\n                                                        var touched =\n                                                          ref.touched\n                                                        var errors = ref.errors\n                                                        return [\n                                                          _c(\"CInput\", {\n                                                            attrs: {\n                                                              label: _vm.$t(\n                                                                \"iqrfnet.trConfiguration.form.rfSubChannelB\"\n                                                              ),\n                                                              \"is-valid\": touched\n                                                                ? valid\n                                                                : null,\n                                                              \"invalid-feedback\": _vm.$t(\n                                                                errors[0]\n                                                              ),\n                                                              type: \"number\",\n                                                              max:\n                                                                _vm\n                                                                  .rfChannelRules\n                                                                  .max,\n                                                              min:\n                                                                _vm\n                                                                  .rfChannelRules\n                                                                  .min\n                                                            },\n                                                            model: {\n                                                              value:\n                                                                _vm.config\n                                                                  .rfSubChannelB,\n                                                              callback: function(\n                                                                $$v\n                                                              ) {\n                                                                _vm.$set(\n                                                                  _vm.config,\n                                                                  \"rfSubChannelB\",\n                                                                  _vm._n($$v)\n                                                                )\n                                                              },\n                                                              expression:\n                                                                \"config.rfSubChannelB\"\n                                                            }\n                                                          })\n                                                        ]\n                                                      }\n                                                    }\n                                                  ],\n                                                  null,\n                                                  true\n                                                )\n                                              })\n                                            : _vm._e(),\n                                          _vm._v(\" \"),\n                                          _vm.config.rfAltDsmChannel !==\n                                          undefined\n                                            ? _c(\"ValidationProvider\", {\n                                                attrs: {\n                                                  rules:\n                                                    _vm.rfChannelRules.rule,\n                                                  \"custom-messages\":\n                                                    _vm.rfChannelValidatorMessages\n                                                },\n                                                scopedSlots: _vm._u(\n                                                  [\n                                                    {\n                                                      key: \"default\",\n                                                      fn: function(ref) {\n                                                        var valid = ref.valid\n                                                        var touched =\n                                                          ref.touched\n                                                        var errors = ref.errors\n                                                        return [\n                                                          _c(\"CInput\", {\n                                                            attrs: {\n                                                              label: _vm.$t(\n                                                                \"iqrfnet.trConfiguration.form.rfAltDsmChannel\"\n                                                              ),\n                                                              \"is-valid\": touched\n                                                                ? valid\n                                                                : null,\n                                                              \"invalid-feedback\": _vm.$t(\n                                                                errors[0]\n                                                              ),\n                                                              type: \"number\",\n                                                              max:\n                                                                _vm\n                                                                  .rfChannelRules\n                                                                  .max,\n                                                              min:\n                                                                _vm\n                                                                  .rfChannelRules\n                                                                  .min\n                                                            },\n                                                            model: {\n                                                              value:\n                                                                _vm.config\n                                                                  .rfAltDsmChannel,\n                                                              callback: function(\n                                                                $$v\n                                                              ) {\n                                                                _vm.$set(\n                                                                  _vm.config,\n                                                                  \"rfAltDsmChannel\",\n                                                                  _vm._n($$v)\n                                                                )\n                                                              },\n                                                              expression:\n                                                                \"config.rfAltDsmChannel\"\n                                                            }\n                                                          })\n                                                        ]\n                                                      }\n                                                    }\n                                                  ],\n                                                  null,\n                                                  true\n                                                )\n                                              })\n                                            : _vm._e(),\n                                          _vm._v(\" \"),\n                                          _vm.config.stdAndLpNetwork === false\n                                            ? _c(\n                                                \"CAlert\",\n                                                { attrs: { color: \"warning\" } },\n                                                [\n                                                  _vm._v(\n                                                    \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                                      _vm._s(\n                                                        _vm.$t(\n                                                          \"iqrfnet.trConfiguration.form.messages.breakInteroperability\"\n                                                        )\n                                                      ) +\n                                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                                  )\n                                                ]\n                                              )\n                                            : _vm._e(),\n                                          _vm._v(\" \"),\n                                          _vm.config.stdAndLpNetwork !==\n                                          undefined\n                                            ? _c(\"CInputCheckbox\", {\n                                                attrs: {\n                                                  checked:\n                                                    _vm.config.stdAndLpNetwork,\n                                                  label: _vm.$t(\n                                                    \"iqrfnet.trConfiguration.form.stdAndLpNetwork\"\n                                                  )\n                                                },\n                                                on: {\n                                                  \"update:checked\": function(\n                                                    $event\n                                                  ) {\n                                                    return _vm.$set(\n                                                      _vm.config,\n                                                      \"stdAndLpNetwork\",\n                                                      $event\n                                                    )\n                                                  }\n                                                }\n                                              })\n                                            : _vm._e(),\n                                          _vm._v(\" \"),\n                                          _c(\"ValidationProvider\", {\n                                            attrs: {\n                                              rules:\n                                                \"integer|between:0,7|required\",\n                                              \"custom-messages\": {\n                                                between:\n                                                  \"iqrfnet.trConfiguration.form.messages.txPower\",\n                                                integer:\n                                                  \"iqrfnet.trConfiguration.form.messages.txPower\",\n                                                required:\n                                                  \"iqrfnet.trConfiguration.form.messages.txPower\"\n                                              }\n                                            },\n                                            scopedSlots: _vm._u(\n                                              [\n                                                {\n                                                  key: \"default\",\n                                                  fn: function(ref) {\n                                                    var valid = ref.valid\n                                                    var touched = ref.touched\n                                                    var errors = ref.errors\n                                                    return [\n                                                      _c(\"CInput\", {\n                                                        attrs: {\n                                                          label: _vm.$t(\n                                                            \"iqrfnet.trConfiguration.form.txPower\"\n                                                          ),\n                                                          \"is-valid\": touched\n                                                            ? valid\n                                                            : null,\n                                                          \"invalid-feedback\": _vm.$t(\n                                                            errors[0]\n                                                          ),\n                                                          type: \"number\",\n                                                          max: \"7\",\n                                                          min: \"0\"\n                                                        },\n                                                        model: {\n                                                          value:\n                                                            _vm.config.txPower,\n                                                          callback: function(\n                                                            $$v\n                                                          ) {\n                                                            _vm.$set(\n                                                              _vm.config,\n                                                              \"txPower\",\n                                                              _vm._n($$v)\n                                                            )\n                                                          },\n                                                          expression:\n                                                            \"config.txPower\"\n                                                        }\n                                                      })\n                                                    ]\n                                                  }\n                                                }\n                                              ],\n                                              null,\n                                              true\n                                            )\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"ValidationProvider\", {\n                                            attrs: {\n                                              rules:\n                                                \"integer|between:0,64|required\",\n                                              \"custom-messages\": {\n                                                between:\n                                                  \"iqrfnet.trConfiguration.form.messages.rxFilter\",\n                                                integer:\n                                                  \"iqrfnet.trConfiguration.form.messages.rxFilter\",\n                                                required:\n                                                  \"iqrfnet.trConfiguration.form.messages.rxFilter\"\n                                              }\n                                            },\n                                            scopedSlots: _vm._u(\n                                              [\n                                                {\n                                                  key: \"default\",\n                                                  fn: function(ref) {\n                                                    var valid = ref.valid\n                                                    var touched = ref.touched\n                                                    var errors = ref.errors\n                                                    return [\n                                                      _c(\"CInput\", {\n                                                        attrs: {\n                                                          label: _vm.$t(\n                                                            \"iqrfnet.trConfiguration.form.rxFilter\"\n                                                          ),\n                                                          \"is-valid\": touched\n                                                            ? valid\n                                                            : null,\n                                                          \"invalid-feedback\": _vm.$t(\n                                                            errors[0]\n                                                          ),\n                                                          type: \"number\",\n                                                          max: \"64\",\n                                                          min: \"0\"\n                                                        },\n                                                        model: {\n                                                          value:\n                                                            _vm.config.rxFilter,\n                                                          callback: function(\n                                                            $$v\n                                                          ) {\n                                                            _vm.$set(\n                                                              _vm.config,\n                                                              \"rxFilter\",\n                                                              _vm._n($$v)\n                                                            )\n                                                          },\n                                                          expression:\n                                                            \"config.rxFilter\"\n                                                        }\n                                                      })\n                                                    ]\n                                                  }\n                                                }\n                                              ],\n                                              null,\n                                              true\n                                            )\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"ValidationProvider\", {\n                                            attrs: {\n                                              rules:\n                                                \"integer|between:1,255|required\",\n                                              \"custom-messages\": {\n                                                between:\n                                                  \"iqrfnet.trConfiguration.form.messages.lpRxTimeout\",\n                                                integer:\n                                                  \"iqrfnet.trConfiguration.form.messages.lpRxTimeout\",\n                                                required:\n                                                  \"iqrfnet.trConfiguration.form.messages.lpRxTimeout\"\n                                              }\n                                            },\n                                            scopedSlots: _vm._u(\n                                              [\n                                                {\n                                                  key: \"default\",\n                                                  fn: function(ref) {\n                                                    var valid = ref.valid\n                                                    var touched = ref.touched\n                                                    var errors = ref.errors\n                                                    return [\n                                                      _c(\"CInput\", {\n                                                        attrs: {\n                                                          label: _vm.$t(\n                                                            \"iqrfnet.trConfiguration.form.lpRxTimeout\"\n                                                          ),\n                                                          \"is-valid\": touched\n                                                            ? valid\n                                                            : null,\n                                                          \"invalid-feedback\": _vm.$t(\n                                                            errors[0]\n                                                          ),\n                                                          type: \"number\"\n                                                        },\n                                                        model: {\n                                                          value:\n                                                            _vm.config\n                                                              .lpRxTimeout,\n                                                          callback: function(\n                                                            $$v\n                                                          ) {\n                                                            _vm.$set(\n                                                              _vm.config,\n                                                              \"lpRxTimeout\",\n                                                              _vm._n($$v)\n                                                            )\n                                                          },\n                                                          expression:\n                                                            \"config.lpRxTimeout\"\n                                                        }\n                                                      })\n                                                    ]\n                                                  }\n                                                }\n                                              ],\n                                              null,\n                                              true\n                                            )\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"h2\", [\n                                            _vm._v(\n                                              _vm._s(\n                                                _vm.$t(\n                                                  \"iqrfnet.trConfiguration.form.rfPgm\"\n                                                )\n                                              )\n                                            )\n                                          ]),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked:\n                                                _vm.config\n                                                  .rfPgmEnableAfterReset,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.rfPgmEnableAfterReset\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"rfPgmEnableAfterReset\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked:\n                                                _vm.config\n                                                  .rfPgmTerminateAfter1Min,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.rfPgmTerminateAfter1Min\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"rfPgmTerminateAfter1Min\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked:\n                                                _vm.config.rfPgmTerminateMcuPin,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.rfPgmTerminateMcuPin\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"rfPgmTerminateMcuPin\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked:\n                                                _vm.config.rfPgmDualChannel,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.rfPgmDualChannel\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"rfPgmDualChannel\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked: _vm.config.rfPgmLpMode,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.rfPgmLpMode\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"rfPgmLpMode\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked:\n                                                _vm.config.rfPgmIncorrectUpload,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.rfPgmIncorrectUpload\"\n                                              ),\n                                              disabled: \"true\"\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"rfPgmIncorrectUpload\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          })\n                                        ],\n                                        1\n                                      ),\n                                      _vm._v(\" \"),\n                                      _c(\n                                        \"CCol\",\n                                        { attrs: { md: \"6\" } },\n                                        [\n                                          _c(\"h2\", [\n                                            _vm._v(\n                                              _vm._s(\n                                                _vm.$t(\n                                                  \"iqrfnet.trConfiguration.form.dpa.embeddedPeripherals\"\n                                                )\n                                              )\n                                            )\n                                          ]),\n                                          _vm._v(\" \"),\n                                          _vm._l(_vm.peripherals, function(\n                                            peripheral\n                                          ) {\n                                            return _c(\"CInputCheckbox\", {\n                                              key: peripheral.name,\n                                              attrs: {\n                                                checked: peripheral.enabled,\n                                                disabled: _vm.unchangeablePeripherals.includes(\n                                                  peripheral.name\n                                                ),\n                                                label: _vm.$t(\n                                                  \"iqrfnet.trConfiguration.form.embPers.\" +\n                                                    peripheral.name\n                                                )\n                                              },\n                                              on: {\n                                                \"update:checked\": function(\n                                                  $event\n                                                ) {\n                                                  return _vm.$set(\n                                                    peripheral,\n                                                    \"enabled\",\n                                                    $event\n                                                  )\n                                                }\n                                              }\n                                            })\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"h2\", [\n                                            _vm._v(\n                                              _vm._s(\n                                                _vm.$t(\n                                                  \"iqrfnet.trConfiguration.form.dpa.other\"\n                                                )\n                                              )\n                                            )\n                                          ]),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked:\n                                                _vm.config.customDpaHandler,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.customDpaHandler\"\n                                              ),\n                                              disabled: !_vm.dpaHandlerDetected\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"customDpaHandler\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked: _vm.config.ioSetup,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.ioSetup\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"ioSetup\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked: _vm.config.dpaAutoexec,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.dpaAutoexec\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"dpaAutoexec\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked: _vm.config.routingOff,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.routingOff\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"routingOff\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked: _vm.config.peerToPeer,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.peerToPeer\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"peerToPeer\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _vm.config.dpaPeerToPeer !== undefined\n                                            ? _c(\"CInputCheckbox\", {\n                                                attrs: {\n                                                  checked:\n                                                    _vm.config.dpaPeerToPeer,\n                                                  label: _vm.$t(\n                                                    \"iqrfnet.trConfiguration.form.dpaPeerToPeer\"\n                                                  )\n                                                },\n                                                on: {\n                                                  \"update:checked\": function(\n                                                    $event\n                                                  ) {\n                                                    return _vm.$set(\n                                                      _vm.config,\n                                                      \"dpaPeerToPeer\",\n                                                      $event\n                                                    )\n                                                  }\n                                                }\n                                              })\n                                            : _vm._e(),\n                                          _vm._v(\" \"),\n                                          _vm.config.neverSleep !== undefined\n                                            ? _c(\"CInputCheckbox\", {\n                                                attrs: {\n                                                  checked:\n                                                    _vm.config.neverSleep,\n                                                  label: _vm.$t(\n                                                    \"iqrfnet.trConfiguration.form.neverSleep\"\n                                                  )\n                                                },\n                                                on: {\n                                                  \"update:checked\": function(\n                                                    $event\n                                                  ) {\n                                                    return _vm.$set(\n                                                      _vm.config,\n                                                      \"neverSleep\",\n                                                      $event\n                                                    )\n                                                  }\n                                                }\n                                              })\n                                            : _vm._e(),\n                                          _vm._v(\" \"),\n                                          _c(\"CSelect\", {\n                                            attrs: {\n                                              value: _vm.config.uartBaudrate,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.uartBaudrate\"\n                                              ),\n                                              options: _vm.uartBaudRates\n                                            },\n                                            on: {\n                                              \"update:value\": function($event) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"uartBaudrate\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _vm.config.nodeDpaInterface !==\n                                          undefined\n                                            ? _c(\"CInputCheckbox\", {\n                                                attrs: {\n                                                  checked:\n                                                    _vm.config.nodeDpaInterface,\n                                                  label: _vm.$t(\n                                                    \"iqrfnet.trConfiguration.form.nodeDpaInterface\"\n                                                  )\n                                                },\n                                                on: {\n                                                  \"update:checked\": function(\n                                                    $event\n                                                  ) {\n                                                    return _vm.$set(\n                                                      _vm.config,\n                                                      \"nodeDpaInterface\",\n                                                      $event\n                                                    )\n                                                  }\n                                                }\n                                              })\n                                            : _vm._e()\n                                        ],\n                                        2\n                                      )\n                                    ],\n                                    1\n                                  ),\n                                  _vm._v(\" \"),\n                                  _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: {\n                                        color: \"primary\",\n                                        type: \"submit\",\n                                        disabled: invalid\n                                      }\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(_vm.$t(\"forms.write\")) +\n                                          \"\\n\\t\\t\\t\\t\\t\"\n                                      )\n                                    ]\n                                  )\n                                ],\n                                1\n                              )\n                            ]\n                          }\n                        }\n                      ],\n                      null,\n                      false,\n                      2602463322\n                    )\n                  })\n                ],\n                1\n              )\n            ],\n            1\n          )\n        : _vm._e()\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\"CCardHeader\", [\n        _vm._v(\n          \"\\n\\t\\t\" + _vm._s(_vm.$t(\"iqrfnet.addressChange.title\")) + \"\\n\\t\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      {\n                        on: {\n                          submit: function($event) {\n                            $event.preventDefault()\n                            return _vm.changeAddress($event)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|between:0,239\",\n                            \"custom-messages\": {\n                              between: \"iqrfnet.addressChange.messages.address\",\n                              integer: \"iqrfnet.addressChange.messages.address\",\n                              required: \"iqrfnet.addressChange.messages.address\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        max: \"239\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.addressChange.address\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.address,\n                                        callback: function($$v) {\n                                          _vm.address = _vm._n($$v)\n                                        },\n                                        expression: \"address\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              color: \"primary\",\n                              type: \"submit\",\n                              disabled: invalid\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.read\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardHeader>\n\t\t\t{{ $t('iqrfnet.addressChange.title') }}\n\t\t</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='changeAddress'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:0,239'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tbetween: \"iqrfnet.addressChange.messages.address\",\n\t\t\t\t\t\t\tinteger: \"iqrfnet.addressChange.messages.address\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.addressChange.messages.address\",\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='address'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.addressChange.address\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.read') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {between, integer, required} from 'vee-validate/dist/rules';\n\nexport default {\n\tname: 'AddressChanger',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tprops: {\n\t\tcurrentAddress: {\n\t\t\ttype: Number,\n\t\t\trequired: true\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\taddress: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\tthis.address = this.currentAddress;\n\t},\n\tmethods: {\n\t\tchangeAddress() {\n\t\t\tthis.$router.push('/iqrfnet/tr-config/' + this.address);\n\t\t},\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AddressChanger.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AddressChanger.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./AddressChanger.vue?vue&type=template&id=211e5a7d&\"\nimport script from \"./AddressChanger.vue?vue&type=script&lang=js&\"\nexport * from \"./AddressChanger.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('211e5a7d')) {\n      api.createRecord('211e5a7d', component.options)\n    } else {\n      api.reload('211e5a7d', component.options)\n    }\n    module.hot.accept(\"./AddressChanger.vue?vue&type=template&id=211e5a7d&\", function () {\n      api.rerender('211e5a7d', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/AddressChanger.vue\"\nexport default component.exports","<template>\n\t<div>\n\t\t<AddressChanger :current-address='address' />\n\t\t<CCard v-if='config !== null'>\n\t\t\t<CCardHeader>{{ $t('iqrfnet.trConfiguration.title') }}</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t\t<CForm @submit.prevent='handleSubmit'>\n\t\t\t\t\t\t<CRow>\n\t\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t\t<h2>{{ $t('iqrfnet.trConfiguration.form.rf') }}</h2>\n\t\t\t\t\t\t\t\t<CSelect\n\t\t\t\t\t\t\t\t\tv-model='config.rfBand'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfBand\")'\n\t\t\t\t\t\t\t\t\t:options='[\n\t\t\t\t\t\t\t\t\t\t{value: \"443\", label: $t(\"iqrfnet.trConfiguration.form.rfBands.443\")},\n\t\t\t\t\t\t\t\t\t\t{value: \"868\", label: $t(\"iqrfnet.trConfiguration.form.rfBands.868\")},\n\t\t\t\t\t\t\t\t\t\t{value: \"916\", label: $t(\"iqrfnet.trConfiguration.form.rfBands.916\")},\n\t\t\t\t\t\t\t\t\t]'\n\t\t\t\t\t\t\t\t\tdisabled='true'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\t:rules='rfChannelRules.rule'\n\t\t\t\t\t\t\t\t\t:custom-messages='rfChannelValidatorMessages'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\tv-model.number='config.rfChannelA'\n\t\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfChannelA\")'\n\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\t\t:max='rfChannelRules.max'\n\t\t\t\t\t\t\t\t\t\t:min='rfChannelRules.min'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\t:rules='rfChannelRules.rule'\n\t\t\t\t\t\t\t\t\t:custom-messages='rfChannelValidatorMessages'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\tv-model.number='config.rfChannelB'\n\t\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfChannelB\")'\n\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\t\t:max='rfChannelRules.max'\n\t\t\t\t\t\t\t\t\t\t:min='rfChannelRules.min'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\tv-if='config.rfSubChannelA !== undefined'\n\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\t:rules='rfChannelRules.rule'\n\t\t\t\t\t\t\t\t\t:custom-messages='rfChannelValidatorMessages'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\tv-model.number='config.rfSubChannelA'\n\t\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfSubChannelA\")'\n\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\t\t:max='rfChannelRules.max'\n\t\t\t\t\t\t\t\t\t\t:min='rfChannelRules.min'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\tv-if='config.rfSubChannelB !== undefined'\n\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\t:rules='rfChannelRules.rule'\n\t\t\t\t\t\t\t\t\t:custom-messages='rfChannelValidatorMessages'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\tv-model.number='config.rfSubChannelB'\n\t\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfSubChannelB\")'\n\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\t\t:max='rfChannelRules.max'\n\t\t\t\t\t\t\t\t\t\t:min='rfChannelRules.min'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\tv-if='config.rfAltDsmChannel !== undefined'\n\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\t:rules='rfChannelRules.rule'\n\t\t\t\t\t\t\t\t\t:custom-messages='rfChannelValidatorMessages'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\tv-model.number='config.rfAltDsmChannel'\n\t\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfAltDsmChannel\")'\n\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\t\t:max='rfChannelRules.max'\n\t\t\t\t\t\t\t\t\t\t:min='rfChannelRules.min'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t<CAlert v-if='config.stdAndLpNetwork === false' color='warning'>\n\t\t\t\t\t\t\t\t\t{{ $t('iqrfnet.trConfiguration.form.messages.breakInteroperability') }}\n\t\t\t\t\t\t\t\t</CAlert>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\tv-if='config.stdAndLpNetwork !== undefined'\n\t\t\t\t\t\t\t\t\t:checked.sync='config.stdAndLpNetwork'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.stdAndLpNetwork\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\trules='integer|between:0,7|required'\n\t\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.trConfiguration.form.messages.txPower\",\n\t\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.trConfiguration.form.messages.txPower\",\n\t\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.trConfiguration.form.messages.txPower\",\n\t\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\tv-model.number='config.txPower'\n\t\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.txPower\")'\n\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\t\tmax='7'\n\t\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\trules='integer|between:0,64|required'\n\t\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.trConfiguration.form.messages.rxFilter\",\n\t\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.trConfiguration.form.messages.rxFilter\",\n\t\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.trConfiguration.form.messages.rxFilter\",\n\t\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\tv-model.number='config.rxFilter'\n\t\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rxFilter\")'\n\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\t\tmax='64'\n\t\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\trules='integer|between:1,255|required'\n\t\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.trConfiguration.form.messages.lpRxTimeout\",\n\t\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.trConfiguration.form.messages.lpRxTimeout\",\n\t\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.trConfiguration.form.messages.lpRxTimeout\",\n\t\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\tv-model.number='config.lpRxTimeout'\n\t\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.lpRxTimeout\")'\n\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t<h2>{{ $t('iqrfnet.trConfiguration.form.rfPgm') }}</h2>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.rfPgmEnableAfterReset'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfPgmEnableAfterReset\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.rfPgmTerminateAfter1Min'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfPgmTerminateAfter1Min\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.rfPgmTerminateMcuPin'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfPgmTerminateMcuPin\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.rfPgmDualChannel'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfPgmDualChannel\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.rfPgmLpMode'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfPgmLpMode\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.rfPgmIncorrectUpload'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfPgmIncorrectUpload\")'\n\t\t\t\t\t\t\t\t\tdisabled='true'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</CCol>\n\t\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t\t<h2>{{ $t('iqrfnet.trConfiguration.form.dpa.embeddedPeripherals') }}</h2>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\tv-for='peripheral of peripherals'\n\t\t\t\t\t\t\t\t\t:key='peripheral.name'\n\t\t\t\t\t\t\t\t\t:checked.sync='peripheral.enabled'\n\t\t\t\t\t\t\t\t\t:disabled='unchangeablePeripherals.includes(peripheral.name)'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.embPers.\" + peripheral.name)'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<h2>{{ $t('iqrfnet.trConfiguration.form.dpa.other') }}</h2>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.customDpaHandler'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.customDpaHandler\")'\n\t\t\t\t\t\t\t\t\t:disabled='!dpaHandlerDetected'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.ioSetup'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.ioSetup\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.dpaAutoexec'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.dpaAutoexec\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.routingOff'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.routingOff\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.peerToPeer'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.peerToPeer\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\tv-if='config.dpaPeerToPeer !== undefined'\n\t\t\t\t\t\t\t\t\t:checked.sync='config.dpaPeerToPeer'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.dpaPeerToPeer\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\tv-if='config.neverSleep !== undefined'\n\t\t\t\t\t\t\t\t\t:checked.sync='config.neverSleep'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.neverSleep\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CSelect\n\t\t\t\t\t\t\t\t\t:value.sync='config.uartBaudrate'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.uartBaudrate\")'\n\t\t\t\t\t\t\t\t\t:options='uartBaudRates'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\tv-if='config.nodeDpaInterface !== undefined'\n\t\t\t\t\t\t\t\t\t:checked.sync='config.nodeDpaInterface'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.nodeDpaInterface\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</CCol>\n\t\t\t\t\t\t</CRow>\n\t\t\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t\t\t{{ $t('forms.write') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</CForm>\n\t\t\t\t</ValidationObserver>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t</div>\n</template>\n\n<script>\nimport {CCard, CCardBody, CCardHeader, CForm, CInput} from '@coreui/vue/src';\nimport {\n\tbetween,\n\tinteger,\n\tmin_value,\n\tmax_value,\n\trequired,\n} from 'vee-validate/dist/rules';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport AddressChanger from './AddressChanger';\nimport IqrfNetService from '../../services/IqrfNetService';\n\nexport default {\n\tname: 'TrConfiguration',\n\tcomponents: {\n\t\tAddressChanger,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tprops: {\n\t\taddress: {\n\t\t\ttype: Number,\n\t\t\trequired: true\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tconfig: null,\n\t\t\tperipherals: [],\n\t\t\tdpaHandlerDetected: null,\n\t\t\tdpaVersion: null,\n\t\t\tunchangeablePeripherals: ['coordinator', 'node', 'os'],\n\t\t};\n\t},\n\tcomputed: {\n\t\trfChannelRules() {\n\t\t\tswitch (this.config.rfBand) {\n\t\t\t\tcase '433':\n\t\t\t\t\treturn {rule:'integer|between:0,16|required', min: 0, max: 16};\n\t\t\t\tcase '868':\n\t\t\t\t\treturn {rule: 'integer|between:0,67|required', min: 0, max: 67};\n\t\t\t\tcase '916':\n\t\t\t\t\treturn {rule: 'integer|between:0,255|required', min: 0, max: 255};\n\t\t\t}\n\t\t\treturn undefined;\n\t\t},\n\t\trfChannelValidatorMessages() {\n\t\t\tlet message = '';\n\t\t\tswitch (this.config.rfBand) {\n\t\t\t\tcase '433':\n\t\t\t\t\tmessage = 'iqrfnet.trConfiguration.form.messages.rfChannel.433';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '868':\n\t\t\t\t\tmessage = 'iqrfnet.trConfiguration.form.messages.rfChannel.868';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '916':\n\t\t\t\t\tmessage = 'iqrfnet.trConfiguration.form.messages.rfChannel.916';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tbetween: message,\n\t\t\t\tinteger: message,\n\t\t\t\trequired: message\n\t\t\t};\n\t\t},\n\t\tuartBaudRates() {\n\t\t\tconst uartBaudRates = [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200, 230400];\n\t\t\treturn uartBaudRates.map((uartBaudRate) => {\n\t\t\t\treturn {\n\t\t\t\t\tvalue: uartBaudRate,\n\t\t\t\t\tlabel: this.$t('iqrfnet.trConfiguration.form.uartBaudrates.' + uartBaudRate).toString(),\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\t},\n\twatch: {\n\t\taddress: function (newVal) {\n\t\t\tthis.config = null;\n\t\t\tthis.peripherals = [];\n\t\t\tthis.address = newVal;\n\t\t\tif (this.$store.getters.isSocketConnected) {\n\t\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\t\tIqrfNetService.enumerateDevice(this.address);\n\t\t\t}\n\t\t},\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('min', min_value);\n\t\textend('max', max_value);\n\t\textend('required', required);\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONOPEN') {\n\t\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\t\tIqrfNetService.enumerateDevice(this.address);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (mutation.type !== 'SOCKET_ONMESSAGE') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (mutation.payload.mType === 'iqmeshNetwork_WriteTrConf') {\n\t\t\t\tthis.handleWriteResponse(mutation.payload);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (mutation.payload.mType === 'iqmeshNetwork_EnumerateDevice') {\n\t\t\t\tthis.handleEnumerationResponse(mutation.payload);\n\t\t\t}\n\t\t});\n\t\tif (this.$store.getters.isSocketConnected) {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tIqrfNetService.enumerateDevice(this.address);\n\t\t}\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\thandleEnumerationResponse(response) {\n\t\t\tif (response.data.status !== 0) {\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\tthis.$toast.error(this.$t('iqrfnet.trConfiguration.messages.read.failure').toString());\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet rsp = response.data.rsp;\n\t\t\tthis.config = rsp.trConfiguration;\n\t\t\tthis.dpaHandlerDetected = rsp.osRead.flags.dpaHandlerDetected;\n\t\t\tthis.dpaVersion = rsp.peripheralEnumeration.dpaVer;\n\t\t\tthis.setEmbeddedPeripherals();\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tif (this.$store.getters['user/getRole'] === 'normal') {\n\t\t\t\tthis.$toast.success(this.$t('iqrfnet.trConfiguration.messages.read.success').toString());\n\t\t\t}\n\t\t},\n\t\thandleSubmit() {\n\t\t\tlet config = JSON.parse(JSON.stringify(this.config));\n\t\t\tconfig.embPers = this.getEmbeddedPeripherals();\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tIqrfNetService.writeTrConfiguration(this.address, config);\n\t\t},\n\t\thandleWriteResponse(response) {\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tif (response.data.status === 0) {\n\t\t\t\tthis.$toast.success(this.$t('iqrfnet.trConfiguration.messages.write.success').toString());\n\t\t\t} else {\n\t\t\t\tthis.$toast.error(this.$t('iqrfnet.trConfiguration.messages.write.failure').toString());\n\t\t\t}\n\t\t},\n\t\tsetEmbeddedPeripherals() {\n\t\t\tlet peripherals = JSON.parse(JSON.stringify(this.config.embPers));\n\t\t\tthis.peripherals = [];\n\t\t\tfor (let peripheral in peripherals) {\n\t\t\t\tif (!peripherals.hasOwnProperty(peripheral)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (typeof this.config.embPers[peripheral] !== 'boolean') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (this.unchangeablePeripherals.includes(peripheral) &&\n\t\t\t\t\t\tthis.$store.getters['user/getRole'] === 'normal') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.peripherals.push({\n\t\t\t\t\tname: peripheral,\n\t\t\t\t\tenabled: this.config.embPers[peripheral],\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tgetEmbeddedPeripherals() {\n\t\t\tlet peripherals = {};\n\t\t\tfor (let peripheral of this.peripherals) {\n\t\t\t\tperipherals[peripheral.name] = peripheral.enabled;\n\t\t\t}\n\t\t\treturn peripherals;\n\t\t}\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TrConfiguration.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TrConfiguration.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TrConfiguration.vue?vue&type=template&id=6d56b44e&\"\nimport script from \"./TrConfiguration.vue?vue&type=script&lang=js&\"\nexport * from \"./TrConfiguration.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6d56b44e')) {\n      api.createRecord('6d56b44e', component.options)\n    } else {\n      api.reload('6d56b44e', component.options)\n    }\n    module.hot.accept(\"./TrConfiguration.vue?vue&type=template&id=6d56b44e&\", function () {\n      api.rerender('6d56b44e', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/TrConfiguration.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardHeader\",\n        [\n          _c(\n            \"CButton\",\n            {\n              attrs: {\n                color: \"primary\",\n                size: \"sm\",\n                href:\n                  \"https://github.com/iqrfsdk/iot-starter-kit/blob/master/install/pdf/iqrf-part3a.pdf\"\n              }\n            },\n            [_vm._v(\"\\n\\t\\t\\t\" + _vm._s(_vm.$t(\"cloud.guides.pdf\")) + \"\\n\\t\\t\")]\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CButton\",\n            {\n              attrs: {\n                color: \"danger\",\n                size: \"sm\",\n                href: \"https://youtu.be/Z9R2vdaw3KA\"\n              }\n            },\n            [\n              _vm._v(\n                \"\\n\\t\\t\\t\" + _vm._s(_vm.$t(\"cloud.guides.video\")) + \"\\n\\t\\t\"\n              )\n            ]\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"cloud.amazonAws.form.messages.endpoint\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.amazonAws.form.endpoint\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.endpoint,\n                                        callback: function($$v) {\n                                          _vm.endpoint = $$v\n                                        },\n                                        expression: \"endpoint\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _c(\"CInputFile\", {\n                              ref: \"awsFormCert\",\n                              attrs: {\n                                label: _vm.$t(\n                                  \"cloud.amazonAws.form.certificate\"\n                                )\n                              },\n                              on: {\n                                input: function($event) {\n                                  return _vm.isEmpty(\"cert\")\n                                },\n                                click: function($event) {\n                                  return _vm.isEmpty(\"cert\")\n                                }\n                              }\n                            }),\n                            _vm._v(\" \"),\n                            _vm.certEmpty && !_vm.firstCert\n                              ? _c(\"p\", { staticStyle: { color: \"red\" } }, [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                      _vm._s(\n                                        _vm.$t(\n                                          \"cloud.amazonAws.form.messages.certificate\"\n                                        )\n                                      ) +\n                                      \"\\n\\t\\t\\t\\t\\t\"\n                                  )\n                                ])\n                              : _vm._e()\n                          ],\n                          1\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _c(\"CInputFile\", {\n                              ref: \"awsFormKey\",\n                              attrs: {\n                                label: _vm.$t(\"cloud.amazonAws.form.key\")\n                              },\n                              on: {\n                                input: function($event) {\n                                  return _vm.isEmpty(\"key\")\n                                },\n                                click: function($event) {\n                                  return _vm.isEmpty(\"key\")\n                                }\n                              }\n                            }),\n                            _vm._v(\" \"),\n                            _vm.keyEmpty && !_vm.firstKey\n                              ? _c(\"p\", { staticStyle: { color: \"red\" } }, [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                      _vm._s(\n                                        _vm.$t(\n                                          \"cloud.amazonAws.form.messages.key\"\n                                        )\n                                      ) +\n                                      \"\\n\\t\\t\\t\\t\\t\"\n                                  )\n                                ])\n                              : _vm._e()\n                          ],\n                          1\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              color: \"primary\",\n                              disabled: invalid || _vm.certEmpty || _vm.keyEmpty\n                            },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.save($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              color: \"secondary\",\n                              disabled: invalid || _vm.certEmpty || _vm.keyEmpty\n                            },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.saveAndRestart($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.saveRestart\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardHeader>\n\t\t\t<CButton color='primary' size='sm' href='https://github.com/iqrfsdk/iot-starter-kit/blob/master/install/pdf/iqrf-part3a.pdf'>\n\t\t\t\t{{ $t('cloud.guides.pdf') }}\n\t\t\t</CButton>\n\t\t\t<CButton color='danger' size='sm' href='https://youtu.be/Z9R2vdaw3KA'>\n\t\t\t\t{{ $t('cloud.guides.video') }}\n\t\t\t</CButton>\n\t\t</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.amazonAws.form.messages.endpoint\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='endpoint'\n\t\t\t\t\t\t\t:label='$t(\"cloud.amazonAws.form.endpoint\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<div class='form-group'>\n\t\t\t\t\t\t<CInputFile\n\t\t\t\t\t\t\tref='awsFormCert'\n\t\t\t\t\t\t\t:label='$t(\"cloud.amazonAws.form.certificate\")'\n\t\t\t\t\t\t\t@input='isEmpty(\"cert\")'\n\t\t\t\t\t\t\t@click='isEmpty(\"cert\")'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<p v-if='certEmpty && !firstCert' style='color:red'>\n\t\t\t\t\t\t\t{{ $t('cloud.amazonAws.form.messages.certificate') }}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='form-group'>\n\t\t\t\t\t\t<CInputFile\n\t\t\t\t\t\t\tref='awsFormKey'\n\t\t\t\t\t\t\t:label='$t(\"cloud.amazonAws.form.key\")'\n\t\t\t\t\t\t\t@input='isEmpty(\"key\")'\n\t\t\t\t\t\t\t@click='isEmpty(\"key\")'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<p v-if='keyEmpty && !firstKey' style='color:red'>\n\t\t\t\t\t\t\t{{ $t('cloud.amazonAws.form.messages.key') }}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<CButton color='primary' :disabled='invalid || certEmpty || keyEmpty' @click.prevent='save'>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton color='secondary' :disabled='invalid || certEmpty || keyEmpty' @click.prevent='saveAndRestart'>\n\t\t\t\t\t\t{{ $t('forms.saveRestart') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CForm, CInput, CInputFile} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {required} from 'vee-validate/dist/rules';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport CloudService from '../../services/CloudService';\nimport ServiceService from '../../services/ServiceService';\n\nexport default {\n\tname: 'AWSCreator',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputFile,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tendpoint: null,\n\t\t\tserviceName: 'aws',\n\t\t\tcertEmpty: true,\n\t\t\tkeyEmpty: true,\n\t\t\tfirstCert: true,\n\t\t\tfirstKey: true,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t},\n\tmethods: {\n\t\tbuildRequest() {\n\t\t\tlet\tformData = new FormData();\n\t\t\tformData.append('endpoint', this.endpoint);\n\t\t\tformData.append('certificate', this.$refs.awsFormCert.$el.children[1].files[0]);\n\t\t\tformData.append('privateKey', this.$refs.awsFormKey.$el.children[1].files[0]);\n\t\t\treturn formData;\n\t\t},\n\t\tsave() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tCloudService.create(this.serviceName, this.buildRequest(), 10000)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(this.$t('cloud.messages.success'));\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.cloudError(error);\n\t\t\t\t\treturn Promise.reject(error);\n\t\t\t\t});\n\t\t},\n\t\tsaveAndRestart() {\n\t\t\tthis.save()\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\t\t\tServiceService.restart('iqrf-gateway-daemon')\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\t\tthis.$toast.success(this.$t('service.iqrf-gateway-daemon.messages.restart'));\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tFormErrorHandler.serviceError(error);\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => {});\n\t\t},\n\t\tisEmpty(button) {\n\t\t\tif (button === 'cert') {\n\t\t\t\tif (this.firstCert) {\n\t\t\t\t\tthis.firstCert = false;\n\t\t\t\t}\n\t\t\t\tthis.certEmpty = this.$refs.awsFormCert.$el.children[1].files.length === 0;\n\t\t\t} else {\n\t\t\t\tif (this.firstKey) {\n\t\t\t\t\tthis.firstKey = false;\n\t\t\t\t}\n\t\t\t\tthis.keyEmpty = this.$refs.awsFormKey.$el.children[1].files.length === 0;\n\t\t\t}\n\t\t}\n\t}\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AWSCreator.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AWSCreator.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./AWSCreator.vue?vue&type=template&id=489c969c&\"\nimport script from \"./AWSCreator.vue?vue&type=script&lang=js&\"\nexport * from \"./AWSCreator.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('489c969c')) {\n      api.createRecord('489c969c', component.options)\n    } else {\n      api.reload('489c969c', component.options)\n    }\n    module.hot.accept(\"./AWSCreator.vue?vue&type=template&id=489c969c&\", function () {\n      api.rerender('489c969c', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Cloud/AWSCreator.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\n        \"CListGroup\",\n        [\n          _c(\"CListGroupItem\", { attrs: { to: \"/gateway/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"gateway.title\")) + \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"gateway.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/config/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"config.title\")) + \"\\n\\t\\t\\t\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"config.description\")) + \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/iqrfnet/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"iqrfnet.title\")) + \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"networkManager\")\n            ? _c(\"CListGroupItem\", { attrs: { to: \"/network/\" } }, [\n                _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"network.title\")) + \"\\n\\t\\t\\t\"\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"network.description\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ])\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/cloud/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"cloud.title\")) + \"\\n\\t\\t\\t\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"cloud.description\")) + \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"grafana\")\n            ? _c(\n                \"CListGroupItem\",\n                {\n                  attrs: {\n                    href: _vm.$store.getters[\"features/configuration\"](\n                      \"grafana\"\n                    ).url,\n                    target: \"_blank\"\n                  }\n                },\n                [\n                  _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.grafana.title\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.grafana.description\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"nodeRed\")\n            ? _c(\n                \"CListGroupItem\",\n                {\n                  attrs: {\n                    href: _vm.$store.getters[\"features/configuration\"](\n                      \"nodeRed\"\n                    ).url,\n                    target: \"_blank\"\n                  }\n                },\n                [\n                  _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.nodeRed.workflow.title\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.nodeRed.workflow.description\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"nodeRed\")\n            ? _c(\n                \"CListGroupItem\",\n                {\n                  attrs: {\n                    href:\n                      _vm.$store.getters[\"features/configuration\"](\"nodeRed\")\n                        .url + \"ui/\",\n                    target: \"_blank\"\n                  }\n                },\n                [\n                  _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.nodeRed.dashboard.title\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.nodeRed.dashboard.description\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"supervisord\")\n            ? _c(\n                \"CListGroupItem\",\n                {\n                  attrs: {\n                    href: _vm.$store.getters[\"features/configuration\"](\n                      \"supervisord\"\n                    ).url,\n                    target: \"_blank\"\n                  }\n                },\n                [\n                  _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.supervisor.title\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.supervisor.description\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/user/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"core.user.title\")) + \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"core.user.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"docs\")\n            ? _c(\n                \"CListGroupItem\",\n                {\n                  attrs: {\n                    href: _vm.$store.getters[\"features/configuration\"](\"docs\")\n                      .url,\n                    target: \"_blank\"\n                  }\n                },\n                [\n                  _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.documentation.title\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.documentation.description\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              )\n            : _vm._e()\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<CListGroup>\n\t\t\t<CListGroupItem to='/gateway/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('gateway.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('gateway.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/config/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/iqrfnet/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('iqrfnet.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('iqrfnet.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem v-if='$store.getters[\"features/isEnabled\"](\"networkManager\")' to='/network/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('network.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('network.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/cloud/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('cloud.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('cloud.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"grafana\")'\n\t\t\t\t:href='$store.getters[\"features/configuration\"](\"grafana\").url'\n\t\t\t\ttarget='_blank'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('core.grafana.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('core.grafana.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"nodeRed\")'\n\t\t\t\t:href='$store.getters[\"features/configuration\"](\"nodeRed\").url'\n\t\t\t\ttarget='_blank'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('core.nodeRed.workflow.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('core.nodeRed.workflow.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"nodeRed\")'\n\t\t\t\t:href='$store.getters[\"features/configuration\"](\"nodeRed\").url + \"ui/\"'\n\t\t\t\ttarget='_blank'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('core.nodeRed.dashboard.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('core.nodeRed.dashboard.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"supervisord\")'\n\t\t\t\t:href='$store.getters[\"features/configuration\"](\"supervisord\").url'\n\t\t\t\ttarget='_blank'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('core.supervisor.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('core.supervisor.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/user/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('core.user.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('core.user.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"docs\")'\n\t\t\t\t:href='$store.getters[\"features/configuration\"](\"docs\").url'\n\t\t\t\ttarget='_blank'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('core.documentation.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('core.documentation.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t</CListGroup>\n\t</CCard>\n</template>\n\n<script>\nimport {CCard, CListGroup, CListGroupItem} from '@coreui/vue/src';\n\nexport default {\n\tname: 'MainDisambiguation',\n\tcomponents: {\n\t\tCCard,\n\t\tCListGroup,\n\t\tCListGroupItem\n\t},\n\t//metaInfo: {\n\t//\ttitle: 'core.dashboard',\n\t//},\n};\n</script>\n","import mod from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MainDisambiguation.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MainDisambiguation.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./MainDisambiguation.vue?vue&type=template&id=df00ba80&\"\nimport script from \"./MainDisambiguation.vue?vue&type=script&lang=js&\"\nexport * from \"./MainDisambiguation.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('df00ba80')) {\n      api.createRecord('df00ba80', component.options)\n    } else {\n      api.reload('df00ba80', component.options)\n    }\n    module.hot.accept(\"./MainDisambiguation.vue?vue&type=template&id=df00ba80&\", function () {\n      api.rerender('df00ba80', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/MainDisambiguation.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.ports !== []\n    ? _c(\n        \"div\",\n        [\n          _c(\"h4\", [\n            _vm._v(_vm._s(_vm.$t(\"config.interfaceMapping.interfaces\")))\n          ]),\n          _vm._v(\" \"),\n          _c(\n            \"CButtonGroup\",\n            _vm._l(_vm.ports, function(port) {\n              return _c(\n                \"CButton\",\n                {\n                  key: port,\n                  attrs: { color: \"primary\" },\n                  on: {\n                    click: function($event) {\n                      return _vm.setPort(port)\n                    }\n                  }\n                },\n                [_vm._v(\"\\n\\t\\t\\t\" + _vm._s(port) + \"\\n\\t\\t\")]\n              )\n            }),\n            1\n          )\n        ],\n        1\n      )\n    : _vm._e()\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<div v-if='ports !== []'>\n\t\t<h4>{{ $t('config.interfaceMapping.interfaces') }}</h4>\n\t\t<CButtonGroup>\n\t\t\t<CButton\n\t\t\t\tv-for='port of ports'\n\t\t\t\t:key='port'\n\t\t\t\tcolor='primary'\n\t\t\t\t@click='setPort(port)'\n\t\t\t>\n\t\t\t\t{{ port }}\n\t\t\t</CButton>\n\t\t</CButtonGroup>\n\t</div>\n</template>\n\n<script>\nimport {CButton, CButtonGroup} from '@coreui/vue/src';\nimport IqrfService from '../../services/IqrfService';\n\nexport default {\n\tname: 'InterfacePorts',\n\tcomponents: {\n\t\tCButton,\n\t\tCButtonGroup,\n\t},\n\tprops: {\n\t\tinterfaceType: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tports: [],\n\t\t};\n\t},\n\tcreated() {\n\t\tIqrfService.getInterfacePorts(this.interfaceType)\n\t\t\t.then((ports) => (this.ports = ports))\n\t\t\t.catch(() => (this.ports = []));\n\t},\n\tmethods: {\n\t\tsetPort(port) {\n\t\t\tthis.$emit('updatePort', port);\n\t\t\tswitch (this.interfaceType) {\n\t\t\t\tcase 'cdc':\n\t\t\t\t\tdocument.getElementById('frm-configIqrfCdcForm-IqrfInterface').value = port;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'spi':\n\t\t\t\t\tdocument.getElementById('frm-configIqrfSpiForm-IqrfInterface').value = port;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'uart':\n\t\t\t\t\tdocument.getElementById('frm-configIqrfUartForm-IqrfInterface').value = port;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./InterfacePorts.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./InterfacePorts.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./InterfacePorts.vue?vue&type=template&id=e1b25216&\"\nimport script from \"./InterfacePorts.vue?vue&type=script&lang=js&\"\nexport * from \"./InterfacePorts.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('e1b25216')) {\n      api.createRecord('e1b25216', component.options)\n    } else {\n      api.reload('e1b25216', component.options)\n    }\n    module.hot.accept(\"./InterfacePorts.vue?vue&type=template&id=e1b25216&\", function () {\n      api.rerender('e1b25216', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/Config/InterfacePorts.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\"h4\", [_vm._v(_vm._s(_vm.$t(\"config.interfaceMapping.boards\")))]),\n      _vm._v(\" \"),\n      _c(\n        \"CButtonGroup\",\n        _vm._l(Object.keys(_vm.mappings[_vm.interfaceType]), function(board) {\n          return _c(\n            \"CButton\",\n            {\n              key: board,\n              attrs: { color: \"primary\" },\n              on: {\n                click: function($event) {\n                  return _vm.setMapping(board)\n                }\n              }\n            },\n            [_vm._v(\"\\n\\t\\t\\t\" + _vm._s(board) + \"\\n\\t\\t\")]\n          )\n        }),\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./InterfaceMappings.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./InterfaceMappings.vue?vue&type=script&lang=js&\"","<template>\n\t<div>\n\t\t<h4>{{ $t('config.interfaceMapping.boards') }}</h4>\n\t\t<CButtonGroup>\n\t\t\t<CButton\n\t\t\t\tv-for='board in Object.keys(mappings[interfaceType])'\n\t\t\t\t:key='board'\n\t\t\t\tcolor='primary'\n\t\t\t\t@click='setMapping(board)'\n\t\t\t>\n\t\t\t\t{{ board }}\n\t\t\t</CButton>\n\t\t</CButtonGroup>\n\t</div>\n</template>\n\n<script>\nimport {CButton, CButtonGroup} from '@coreui/vue';\n\nexport default {\n\tname: 'InterfaceMappings',\n\tcomponents: {\n\t\tCButton,\n\t\tCButtonGroup,\n\t},\n\tprops: {\n\t\tinterfaceType: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tmappings: {\n\t\t\t\t'spi': require('../../../app/ConfigModule/json/SpiPins.json'),\n\t\t\t\t'uart': require('../../../app/ConfigModule/json/UartPins.json'),\n\t\t\t},\n\t\t};\n\t},\n\tmethods: {\n\t\tsetMapping(board) {\n\t\t\tconst mapping = this.mappings[this.interfaceType][board];\n\t\t\tthis.$emit('updateMapping', mapping);\n\t\t\tswitch (this.interfaceType) {\n\t\t\t\tcase 'spi':\n\t\t\t\t\tdocument.getElementById('frm-configIqrfSpiForm-IqrfInterface').value = mapping.IqrfInterface;\n\t\t\t\t\tdocument.getElementById('frm-configIqrfSpiForm-powerEnableGpioPin').value = mapping.powerEnableGpioPin;\n\t\t\t\t\tdocument.getElementById('frm-configIqrfSpiForm-busEnableGpioPin').value = mapping.busEnableGpioPin;\n\t\t\t\t\tdocument.getElementById('frm-configIqrfSpiForm-pgmSwitchGpioPin').value = mapping.pgmSwitchGpioPin;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'uart':\n\t\t\t\t\tdocument.getElementById('frm-configIqrfUartForm-IqrfInterface').value = mapping.IqrfInterface;\n\t\t\t\t\tdocument.getElementById('frm-configIqrfUartForm-baudRate').value = mapping.baudRate;\n\t\t\t\t\tdocument.getElementById('frm-configIqrfUartForm-powerEnableGpioPin').value = mapping.powerEnableGpioPin;\n\t\t\t\t\tdocument.getElementById('frm-configIqrfUartForm-busEnableGpioPin').value = mapping.busEnableGpioPin;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./InterfaceMappings.vue?vue&type=template&id=548c6c52&\"\nimport script from \"./InterfaceMappings.vue?vue&type=script&lang=js&\"\nexport * from \"./InterfaceMappings.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('548c6c52')) {\n      api.createRecord('548c6c52', component.options)\n    } else {\n      api.reload('548c6c52', component.options)\n    }\n    module.hot.accept(\"./InterfaceMappings.vue?vue&type=template&id=548c6c52&\", function () {\n      api.rerender('548c6c52', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/Config/InterfaceMappings.vue\"\nexport default component.exports","/**\n * Copyright 2017 MICRORISC s.r.o.\n * Copyright 2017-2019 IQRF Tech s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport axios from 'axios';\nimport CoreuiVue from '@coreui/vue/src';\nimport * as Sentry from '@sentry/browser';\nimport { Vue as VueIntegration } from '@sentry/integrations/dist/vue';\nimport Vue from 'vue';\nimport VueMeta from 'vue-meta';\n// @ts-ignore\nimport VueNativeSock from 'vue-native-websocket';\nimport VueToast from 'vue-toast-notification';\nimport store from './store';\nimport router from './router';\nimport i18n from './i18n';\nimport '../css/app.scss';\nimport 'vue-toast-notification/dist/theme-sugar.css';\nimport App from './components/App.vue';\nimport LoadingSpinner from './components/LoadingSpinner.vue';\nimport TheHeader from './components/TheHeader.vue';\nimport TheSidebar from './components/TheSidebar.vue';\nimport TrConfiguration from './components/IqrfNet/TrConfiguration.vue';\nimport AWSCreator from './pages/Cloud/AWSCreator.vue';\nimport MainDisambiguation from './components/MainDisambiguation.vue';\nimport InterfacePorts from './components/Config/InterfacePorts.vue';\nimport InterfaceMappings from './components/Config/InterfaceMappings.vue';\nSentry.init({\n    dsn: 'https://435ee2b55f994e5f85e21a9ca93ea7a7@sentry.iqrf.org/5',\n    integrations: [new VueIntegration({ Vue: Vue, attachProps: true, logErrors: true })],\n});\nstore.commit('SOCKET_ONCLOSE');\nstore.commit('spinner/HIDE');\nVue.prototype.$appName = 'IQRF Gateway Webapp frontend';\nvar wsApi = 'ws://' + window.location.hostname + ':1338';\n//const wsApi: string ='ws://tunnel.rehivetech.com:45117/ws';\nVue.use(VueNativeSock, wsApi, {\n    store: store,\n    format: 'json',\n    reconnection: true,\n});\nVue.use(CoreuiVue);\nVue.use(VueMeta);\nVue.use(VueToast, {\n    position: 'top',\n    duration: 10000\n});\naxios.defaults.baseURL = '//' + window.location.host + '/api/v0/';\naxios.interceptors.response.use(function (response) {\n    return response;\n}, function (error) {\n    if (error.response === undefined) {\n        // TODO: Add Network error toaster notification\n        return Promise.reject(error);\n    }\n    if (error.response.status === 401) {\n        store.dispatch('user/signOut')\n            .then(function () {\n            location.replace('/sign/in');\n        });\n    }\n    return Promise.reject(error);\n});\nnew Vue({\n    el: '#app',\n    components: {\n        App: App,\n        LoadingSpinner: LoadingSpinner,\n        TheHeader: TheHeader,\n        TheSidebar: TheSidebar,\n        TrConfiguration: TrConfiguration,\n        AWSCreator: AWSCreator,\n        MainDisambiguation: MainDisambiguation,\n        InterfacePorts: InterfacePorts,\n        InterfaceMappings: InterfaceMappings,\n    },\n    router: router,\n    store: store,\n    i18n: i18n,\n    metaInfo: {\n        titleTemplate: function (titleChunk) {\n            return (titleChunk ? i18n.t(titleChunk).toString() + \" | \" : '') +\n                i18n.t('core.title').toString();\n        }\n    },\n});\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ResourceUsage.vue?vue&type=style&index=0&id=6ed3f697&scoped=true&lang=css&\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"9f045b6e\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ResourceUsage.vue?vue&type=style&index=0&id=6ed3f697&scoped=true&lang=css&\", function() {\n     var newContent = require(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ResourceUsage.vue?vue&type=style&index=0&id=6ed3f697&scoped=true&lang=css&\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SignIn.vue?vue&type=style&index=0&id=7b84bbc3&scoped=true&lang=css&\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"0498fb9a\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SignIn.vue?vue&type=style&index=0&id=7b84bbc3&scoped=true&lang=css&\", function() {\n     var newContent = require(\"!!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SignIn.vue?vue&type=style&index=0&id=7b84bbc3&scoped=true&lang=css&\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BinaryOutputManager.vue?vue&type=style&index=0&id=1e7284a8&scoped=true&lang=css&\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"f3b35bc8\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BinaryOutputManager.vue?vue&type=style&index=0&id=1e7284a8&scoped=true&lang=css&\", function() {\n     var newContent = require(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BinaryOutputManager.vue?vue&type=style&index=0&id=1e7284a8&scoped=true&lang=css&\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SensorManager.vue?vue&type=style&index=0&id=571486a2&scoped=true&lang=css&\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"4112e3f0\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SensorManager.vue?vue&type=style&index=0&id=571486a2&scoped=true&lang=css&\", function() {\n     var newContent = require(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SensorManager.vue?vue&type=style&index=0&id=571486a2&scoped=true&lang=css&\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","import axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\n/**\n * Optional feature service\n */\nvar FeatureService = /** @class */ (function () {\n    function FeatureService() {\n    }\n    /**\n     * Fetch all features\n     */\n    FeatureService.prototype.fetchAll = function () {\n        return axios.get('features', { headers: authorizationHeader() });\n    };\n    return FeatureService;\n}());\nexport default new FeatureService();\n","import FeatureService from '../../services/FeatureService';\nvar state = {\n    features: {},\n};\nvar actions = {\n    // @ts-ignore\n    fetch: function (_a) {\n        var commit = _a.commit;\n        return FeatureService.fetchAll()\n            .then(function (response) {\n            commit('SET', response.data);\n        });\n    },\n};\nvar getters = {\n    isEnabled: function (state) { return function (name) {\n        try {\n            return state.features[name].enabled;\n        }\n        catch (e) {\n            return undefined;\n        }\n    }; },\n    configuration: function (state) { return function (name) {\n        try {\n            return state.features[name];\n        }\n        catch (e) {\n            return undefined;\n        }\n    }; },\n};\nvar mutations = {\n    SET: function (state, features) {\n        state.features = features;\n    }\n};\nexport default {\n    namespaced: true,\n    state: state,\n    actions: actions,\n    getters: getters,\n    mutations: mutations,\n};\n","var state = {\n    show: 'responsive',\n    minimize: false,\n};\nvar mutations = {\n    toggleSidebarDesktop: function (state) {\n        var sidebarOpened = [true, 'responsive'].includes(state.show);\n        state.show = sidebarOpened ? false : 'responsive';\n    },\n    toggleSidebarMobile: function (state) {\n        var sidebarClosed = [false, 'responsive'].includes(state.show);\n        state.show = sidebarClosed ? true : 'responsive';\n    },\n    set: function (state, _a) {\n        var variable = _a[0], value = _a[1];\n        state[variable] = value;\n    }\n};\nexport default {\n    namespaced: true,\n    state: state,\n    mutations: mutations\n};\n","var state = {\n    enabled: null,\n    text: null,\n};\nvar getters = {\n    isEnabled: function (state) {\n        return state.enabled;\n    },\n    text: function (state) {\n        return state.text;\n    },\n};\nvar mutations = {\n    HIDE: function (state) {\n        state.enabled = false;\n        state.text = null;\n    },\n    SHOW: function (state, text) {\n        if (text === void 0) { text = null; }\n        state.enabled = true;\n        state.text = text;\n    },\n    UPDATE_TEXT: function (state, text) {\n        state.text = text;\n    },\n};\nexport default {\n    namespaced: true,\n    state: state,\n    getters: getters,\n    mutations: mutations,\n};\n","import axios from 'axios';\n/**\n * Authentication service\n */\nvar AuthenticationService = /** @class */ (function () {\n    function AuthenticationService() {\n    }\n    /**\n     * Signs in the user (REST API)\n     * @param username Username\n     * @param password Password\n     */\n    AuthenticationService.prototype.apiLogin = function (username, password) {\n        var data = {\n            username: username,\n            password: password\n        };\n        return axios.post('user/signIn', data);\n    };\n    /**\n     * Signs in the user (Nette login)\n     * @param username Username\n     * @param password Password\n     */\n    AuthenticationService.prototype.netteLogin = function (username, password) {\n        var data = new URLSearchParams();\n        data.append('username', username);\n        data.append('password', password);\n        data.append('remember', 'on');\n        data.append('send', 'Sign+in');\n        data.append('_do', 'signInForm-submit');\n        return axios.post('//' + window.location.host + '/sign/in', data);\n    };\n    /**\n     * Signs in the user\n     * @param username Username\n     * @param password Password\n     */\n    AuthenticationService.prototype.login = function (username, password) {\n        return Promise.all([\n            this.apiLogin(username, password),\n            this.netteLogin(username, password)\n        ]);\n    };\n    /**\n     * Signs out the user (Nette)\n     */\n    AuthenticationService.prototype.logout = function () {\n        return axios.get('//' + window.location.host + '/sign/out');\n    };\n    return AuthenticationService;\n}());\nexport default new AuthenticationService();\n","import AuthenticationService from '../../services/AuthenticationService';\nvar state = {\n    user: null,\n};\nvar actions = {\n    signIn: function (_a, credentials) {\n        var commit = _a.commit;\n        return AuthenticationService.login(credentials.username, credentials.password)\n            .then(function (responses) {\n            var apiResponse = responses[0];\n            commit('SIGN_IN', apiResponse.data);\n            return responses;\n        })\n            .catch(function (error) {\n            console.error(error);\n            return Promise.reject(error);\n        });\n    },\n    signOut: function (_a) {\n        var commit = _a.commit;\n        return AuthenticationService.logout()\n            .then(function () {\n            commit('SIGN_OUT');\n        });\n    },\n};\nvar getters = {\n    isLoggedIn: function (state) {\n        return state.user !== null;\n    },\n    getId: function (state) {\n        if (state.user === null) {\n            return null;\n        }\n        return state.user.id;\n    },\n    getName: function (state) {\n        if (state.user === null) {\n            return null;\n        }\n        return state.user.username;\n    },\n    getRole: function (state) {\n        if (state.user === null) {\n            return null;\n        }\n        return state.user.role;\n    },\n    getToken: function (state) {\n        if (state.user === null) {\n            return null;\n        }\n        return state.user.token;\n    },\n};\nvar mutations = {\n    SIGN_IN: function (state, data) {\n        state.user = data;\n    },\n    SIGN_OUT: function (state) {\n        state.user = null;\n    },\n};\nexport default {\n    namespaced: true,\n    state: state,\n    actions: actions,\n    getters: getters,\n    mutations: mutations,\n};\n","import Vue from 'vue';\nimport { v4 as uuidv4 } from 'uuid';\nvar state = {\n    socket: {\n        isConnected: false,\n        reconnectError: false,\n    },\n    requests: {},\n    responses: {},\n};\nvar actions = {\n    sendRequest: function (context, request) {\n        if (request.data.msgId === undefined) {\n            request.data.msgId = uuidv4();\n        }\n        Vue.prototype.$socket.sendObj(request);\n        context.commit('SOCKET_ONSEND', request);\n    },\n};\nvar getters = {\n    isSocketConnected: function (state) {\n        return state.socket.isConnected;\n    },\n};\nvar mutations = {\n    SOCKET_ONOPEN: function (state, event) {\n        Vue.prototype.$socket = event.currentTarget;\n        state.socket.isConnected = true;\n    },\n    // eslint-disable-next-line no-unused-vars\n    SOCKET_ONCLOSE: function (state) {\n        state.socket.isConnected = false;\n    },\n    SOCKET_ONERROR: function (state, event) {\n        console.error(state, event);\n    },\n    SOCKET_ONMESSAGE: function (state, message) {\n        state.responses[message.data.msgId] = message;\n    },\n    SOCKET_ONSEND: function (state, request) {\n        state.requests[request.data.msgId] = request;\n    },\n    SOCKET_RECONNECT: function (state, count) {\n        // eslint-disable-next-line no-console\n        console.info(state, count);\n    },\n    SOCKET_RECONNECT_ERROR: function (state) {\n        state.socket.reconnectError = true;\n    },\n};\nexport default {\n    state: state,\n    actions: actions,\n    getters: getters,\n    mutations: mutations,\n};\n","import Vue from 'vue';\nimport Vuex from 'vuex';\nimport createPersistentState from 'vuex-persistedstate';\nimport features from './modules/features.module';\nimport sidebar from './modules/sidebar.module';\nimport spinner from './modules/spinner.module';\nimport user from './modules/user.module';\nimport webSocketClient from './modules/webSocketClient.module';\nVue.use(Vuex);\nvar store = new Vuex.Store({\n    modules: {\n        features: features,\n        sidebar: sidebar,\n        spinner: spinner,\n        user: user,\n        webSocketClient: webSocketClient,\n    },\n    plugins: [createPersistentState()]\n});\nexport default store;\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LoadingSpinner.vue?vue&type=style&index=0&id=e0752284&scoped=true&lang=scss&\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"42e34533\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LoadingSpinner.vue?vue&type=style&index=0&id=e0752284&scoped=true&lang=scss&\", function() {\n     var newContent = require(\"!!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LoadingSpinner.vue?vue&type=style&index=0&id=e0752284&scoped=true&lang=scss&\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","// @ts-ignore\nimport store from '../store';\nexport function authorizationHeader() {\n    var token = store.getters['user/getToken'];\n    if (token === null) {\n        return {};\n    }\n    return { 'Authorization': 'Bearer ' + token };\n}\n"],"sourceRoot":""}