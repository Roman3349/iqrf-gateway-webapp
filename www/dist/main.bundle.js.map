{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/components/Gateway/ResourceUsage.vue?7f12","webpack:///./js/components/SignIn.vue?8d56","webpack:///./js/pages/IqrfNet/DeviceEnumeration.vue?517c","webpack:///./js/components/IqrfNet/DevicesInfo.vue?d4af","webpack:///./js/pages/IqrfNet/NetworkManager.vue?fd56","webpack:///./js/components/IqrfNet/BinaryOutputManager.vue?931a","webpack:///./js/components/IqrfNet/SensorManager.vue?9817","webpack:///./css/app.scss","webpack:///./js/components/LoadingSpinner.vue?77ff","webpack:///./js/pages/Cloud/CloudDisambiguation.vue?7592","webpack:///./js/pages/Cloud/CloudDisambiguation.vue?b875","webpack:///js/pages/Cloud/CloudDisambiguation.vue","webpack:///./js/pages/Cloud/CloudDisambiguation.vue","webpack:///./js/pages/Cloud/AzureCreator.vue?8b64","webpack:///./js/i18n.ts","webpack:///./js/helpers/FormErrorHandler.ts","webpack:///./js/services/CloudService.ts","webpack:///./js/services/ServiceService.ts","webpack:///./js/pages/Cloud/AzureCreator.vue?404b","webpack:///js/pages/Cloud/AzureCreator.vue","webpack:///./js/pages/Cloud/AzureCreator.vue","webpack:///./js/pages/Cloud/AwsCreator.vue?c05a","webpack:///./js/pages/Cloud/AwsCreator.vue?d8ca","webpack:///js/pages/Cloud/AwsCreator.vue","webpack:///./js/pages/Cloud/AwsCreator.vue","webpack:///./js/pages/Cloud/HexioCreator.vue?f5f1","webpack:///js/pages/Cloud/HexioCreator.vue","webpack:///./js/pages/Cloud/HexioCreator.vue?a691","webpack:///./js/pages/Cloud/HexioCreator.vue","webpack:///./js/pages/Cloud/IbmCreator.vue?c219","webpack:///js/pages/Cloud/IbmCreator.vue","webpack:///./js/pages/Cloud/IbmCreator.vue?ede2","webpack:///./js/pages/Cloud/IbmCreator.vue","webpack:///./js/pages/Cloud/InteliGlueCreator.vue?b57f","webpack:///js/pages/Cloud/InteliGlueCreator.vue","webpack:///./js/pages/Cloud/InteliGlueCreator.vue?6f6b","webpack:///./js/pages/Cloud/InteliGlueCreator.vue","webpack:///./js/pages/Cloud/PixlaControl.vue?a256","webpack:///./js/components/Cloud/PixlaTokenEditor.vue?f421","webpack:///./js/services/PixlaService.ts","webpack:///./js/components/Cloud/PixlaTokenEditor.vue?d80e","webpack:///js/components/Cloud/PixlaTokenEditor.vue","webpack:///./js/components/Cloud/PixlaTokenEditor.vue","webpack:///./js/pages/Cloud/PixlaControl.vue?a718","webpack:///js/pages/Cloud/PixlaControl.vue","webpack:///./js/pages/Cloud/PixlaControl.vue","webpack:///./js/pages/Gateway/GatewayDisambiguation.vue?f226","webpack:///js/pages/Gateway/GatewayDisambiguation.vue","webpack:///./js/pages/Gateway/GatewayDisambiguation.vue?f9bc","webpack:///./js/pages/Gateway/GatewayDisambiguation.vue","webpack:///./js/pages/Gateway/GatewayInfo.vue?9b4f","webpack:///./js/components/Gateway/CoordinatorInfo.vue?f3f9","webpack:///./js/services/IqrfNetService.ts","webpack:///./js/components/Gateway/CoordinatorInfo.vue?67d0","webpack:///js/components/Gateway/CoordinatorInfo.vue","webpack:///./js/components/Gateway/CoordinatorInfo.vue","webpack:///./js/services/DaemonModeService.ts","webpack:///./js/services/GatewayService.ts","webpack:///./js/components/Gateway/ResourceUsage.vue?f00a","webpack:///js/components/Gateway/ResourceUsage.vue","webpack:///./js/components/Gateway/ResourceUsage.vue?8846","webpack:///./js/components/Gateway/ResourceUsage.vue","webpack:///./js/helpers/fileDownloader.ts","webpack:///js/pages/Gateway/GatewayInfo.vue","webpack:///./js/pages/Gateway/GatewayInfo.vue?5831","webpack:///./js/pages/Gateway/GatewayInfo.vue","webpack:///./js/pages/Gateway/DaemonLogViewer.vue?d7a8","webpack:///js/pages/Gateway/DaemonLogViewer.vue","webpack:///./js/pages/Gateway/DaemonLogViewer.vue?9e76","webpack:///./js/pages/Gateway/DaemonLogViewer.vue","webpack:///./js/pages/Gateway/DaemonMode.vue?2593","webpack:///js/pages/Gateway/DaemonMode.vue","webpack:///./js/pages/Gateway/DaemonMode.vue?749b","webpack:///./js/pages/Gateway/DaemonMode.vue","webpack:///./js/pages/Gateway/PowerControl.vue?f2ed","webpack:///./js/pages/Gateway/PowerControl.vue?9468","webpack:///js/pages/Gateway/PowerControl.vue","webpack:///./js/pages/Gateway/PowerControl.vue","webpack:///./js/pages/Gateway/ServiceControl.vue?32a1","webpack:///js/pages/Gateway/ServiceControl.vue","webpack:///./js/pages/Gateway/ServiceControl.vue?454b","webpack:///./js/pages/Gateway/ServiceControl.vue","webpack:///./js/components/SignIn.vue?3504","webpack:///./js/components/SignIn.vue?4876","webpack:///js/components/SignIn.vue","webpack:///./js/components/SignIn.vue","webpack:///./js/pages/IqrfNet/IqrfNetDisambiguation.vue?453b","webpack:///js/pages/IqrfNet/IqrfNetDisambiguation.vue","webpack:///./js/pages/IqrfNet/IqrfNetDisambiguation.vue?2ef5","webpack:///./js/pages/IqrfNet/IqrfNetDisambiguation.vue","webpack:///./js/pages/IqrfNet/DeviceEnumeration.vue?3d8b","webpack:///./js/services/IqrfRepository/ProductService.ts","webpack:///./js/helpers/timeout.ts","webpack:///js/pages/IqrfNet/DeviceEnumeration.vue","webpack:///./js/pages/IqrfNet/DeviceEnumeration.vue?493f","webpack:///./js/pages/IqrfNet/DeviceEnumeration.vue","webpack:///./js/pages/IqrfNet/NetworkManager.vue?3906","webpack:///./js/components/IqrfNet/BondingManager.vue?b8e5","webpack:///./js/components/IqrfNet/BondingManager.vue?087d","webpack:///js/components/IqrfNet/BondingManager.vue","webpack:///./js/components/IqrfNet/BondingManager.vue","webpack:///./js/components/IqrfNet/DevicesInfo.vue?49e7","webpack:///./js/helpers/Device.ts","webpack:///./js/components/IqrfNet/DeviceIcon.vue?198e","webpack:///js/components/IqrfNet/DeviceIcon.vue","webpack:///./js/components/IqrfNet/DeviceIcon.vue?130e","webpack:///./js/components/IqrfNet/DeviceIcon.vue","webpack:///./js/components/IqrfNet/DevicesInfo.vue?b2d6","webpack:///js/components/IqrfNet/DevicesInfo.vue","webpack:///./js/components/IqrfNet/DevicesInfo.vue","webpack:///./js/components/IqrfNet/DiscoveryManager.vue?38c0","webpack:///js/components/IqrfNet/DiscoveryManager.vue","webpack:///./js/components/IqrfNet/DiscoveryManager.vue?0dd4","webpack:///./js/components/IqrfNet/DiscoveryManager.vue","webpack:///./js/components/IqrfNet/AutoNetwork.vue?34bb","webpack:///js/components/IqrfNet/AutoNetwork.vue","webpack:///./js/components/IqrfNet/AutoNetwork.vue?b784","webpack:///./js/components/IqrfNet/AutoNetwork.vue","webpack:///./js/pages/IqrfNet/NetworkManager.vue?3645","webpack:///js/pages/IqrfNet/NetworkManager.vue","webpack:///./js/pages/IqrfNet/NetworkManager.vue","webpack:///./js/pages/IqrfNet/SendJsonRequest.vue?4a6e","webpack:///./js/iqrfNet/sendJson.ts","webpack:///./js/pages/IqrfNet/SendJsonRequest.vue?9619","webpack:///js/pages/IqrfNet/SendJsonRequest.vue","webpack:///./js/pages/IqrfNet/SendJsonRequest.vue","webpack:///./js/pages/IqrfNet/SendDpaPacket.vue?39ea","webpack:///./js/components/IqrfNet/DpaMacros.vue?07ef","webpack:///./js/services/IqrfService.ts","webpack:///./js/components/IqrfNet/DpaMacros.vue?cc29","webpack:///js/components/IqrfNet/DpaMacros.vue","webpack:///./js/components/IqrfNet/DpaMacros.vue","webpack:///./js/iqrfNet/sendPacket.ts","webpack:///./js/pages/IqrfNet/SendDpaPacket.vue?7896","webpack:///js/pages/IqrfNet/SendDpaPacket.vue","webpack:///./js/pages/IqrfNet/SendDpaPacket.vue","webpack:///./js/pages/IqrfNet/StandardManager.vue?03f8","webpack:///./js/components/IqrfNet/BinaryOutputManager.vue?661d","webpack:///./js/services/DaemonApi/StandardBinaryOutputService.ts","webpack:///./js/components/IqrfNet/BinaryOutputManager.vue?7c8b","webpack:///js/components/IqrfNet/BinaryOutputManager.vue","webpack:///./js/components/IqrfNet/BinaryOutputManager.vue","webpack:///./js/components/IqrfNet/DaliManager.vue?6a65","webpack:///./js/services/DaemonApi/StandardDaliService.ts","webpack:///./js/components/IqrfNet/DaliManager.vue?1bd2","webpack:///js/components/IqrfNet/DaliManager.vue","webpack:///./js/components/IqrfNet/DaliManager.vue","webpack:///./js/components/IqrfNet/LightManager.vue?2058","webpack:///./js/services/DaemonApi/StandardLightService.ts","webpack:///./js/components/IqrfNet/LightManager.vue?7cc2","webpack:///js/components/IqrfNet/LightManager.vue","webpack:///./js/components/IqrfNet/LightManager.vue","webpack:///./js/components/IqrfNet/SensorManager.vue?fd4c","webpack:///./js/services/DaemonApi/StandardSensorService.ts","webpack:///./js/components/IqrfNet/SensorManager.vue?9978","webpack:///js/components/IqrfNet/SensorManager.vue","webpack:///./js/components/IqrfNet/SensorManager.vue","webpack:///./js/pages/IqrfNet/StandardManager.vue?b5ae","webpack:///js/pages/IqrfNet/StandardManager.vue","webpack:///./js/pages/IqrfNet/StandardManager.vue","webpack:///./js/pages/Config/ConfigDisambiguation.vue?1191","webpack:///js/pages/Config/ConfigDisambiguation.vue","webpack:///./js/pages/Config/ConfigDisambiguation.vue?3e7f","webpack:///./js/pages/Config/ConfigDisambiguation.vue","webpack:///./js/pages/Config/ConfigMigration.vue?3ea5","webpack:///./js/services/DaemonConfigurationService.ts","webpack:///./js/pages/Config/ConfigMigration.vue?a824","webpack:///js/pages/Config/ConfigMigration.vue","webpack:///./js/pages/Config/ConfigMigration.vue","webpack:///./js/pages/Config/TranslatorConfig.vue?6666","webpack:///./js/services/FeatureConfigService.ts","webpack:///./js/pages/Config/TranslatorConfig.vue?93f6","webpack:///js/pages/Config/TranslatorConfig.vue","webpack:///./js/pages/Config/TranslatorConfig.vue","webpack:///./js/pages/Config/ControllerConfig.vue?ee95","webpack:///js/pages/Config/ControllerConfig.vue","webpack:///./js/pages/Config/ControllerConfig.vue?c42f","webpack:///./js/pages/Config/ControllerConfig.vue","webpack:///./js/pages/Config/MenderConfig.vue?32ec","webpack:///js/pages/Config/MenderConfig.vue","webpack:///./js/pages/Config/MenderConfig.vue?9a47","webpack:///./js/pages/Config/MenderConfig.vue","webpack:///./js/pages/Config/IqrfInfo.vue?5ba7","webpack:///js/pages/Config/IqrfInfo.vue","webpack:///./js/pages/Config/IqrfInfo.vue?5da6","webpack:///./js/pages/Config/IqrfInfo.vue","webpack:///./js/pages/Config/IqrfRepository.vue?71b8","webpack:///js/pages/Config/IqrfRepository.vue","webpack:///./js/pages/Config/IqrfRepository.vue?cf0b","webpack:///./js/pages/Config/IqrfRepository.vue","webpack:///./js/pages/Config/IqrfCdc.vue?577c","webpack:///./js/components/Config/InterfacePorts.vue?2166","webpack:///js/components/Config/InterfacePorts.vue","webpack:///./js/components/Config/InterfacePorts.vue?9ed8","webpack:///./js/components/Config/InterfacePorts.vue","webpack:///./js/pages/Config/IqrfCdc.vue?2720","webpack:///js/pages/Config/IqrfCdc.vue","webpack:///./js/pages/Config/IqrfCdc.vue","webpack:///./js/pages/Config/IqrfDpa.vue?22b6","webpack:///js/pages/Config/IqrfDpa.vue","webpack:///./js/pages/Config/IqrfDpa.vue?1595","webpack:///./js/pages/Config/IqrfDpa.vue","webpack:///./js/pages/Config/IqrfSpi.vue?b98d","webpack:///./js/components/Config/InterfaceMappings.vue?7ef1","webpack:///./js/components/Config/InterfaceMappings.vue?ae2f","webpack:///js/components/Config/InterfaceMappings.vue","webpack:///./js/components/Config/InterfaceMappings.vue","webpack:///./js/pages/Config/IqrfSpi.vue?006a","webpack:///js/pages/Config/IqrfSpi.vue","webpack:///./js/pages/Config/IqrfSpi.vue","webpack:///./js/pages/Config/IqrfUart.vue?5450","webpack:///js/pages/Config/IqrfUart.vue","webpack:///./js/pages/Config/IqrfUart.vue?271a","webpack:///./js/pages/Config/IqrfUart.vue","webpack:///./js/pages/Config/JsonMngMetaDataApi.vue?5f91","webpack:///js/pages/Config/JsonMngMetaDataApi.vue","webpack:///./js/pages/Config/JsonMngMetaDataApi.vue?1b7d","webpack:///./js/pages/Config/JsonMngMetaDataApi.vue","webpack:///./js/pages/Config/JsonRawApi.vue?dbe1","webpack:///js/pages/Config/JsonRawApi.vue","webpack:///./js/pages/Config/JsonRawApi.vue?4a3d","webpack:///./js/pages/Config/JsonRawApi.vue","webpack:///./js/pages/Config/JsonSplitter.vue?f56c","webpack:///js/pages/Config/JsonSplitter.vue","webpack:///./js/pages/Config/JsonSplitter.vue?b731","webpack:///./js/pages/Config/JsonSplitter.vue","webpack:///./js/pages/Config/MonitorForm.vue?e7a2","webpack:///js/pages/Config/MonitorForm.vue","webpack:///./js/pages/Config/MonitorForm.vue?fdbe","webpack:///./js/pages/Config/MonitorForm.vue","webpack:///./js/pages/Config/MonitorList.vue?3455","webpack:///js/pages/Config/MonitorList.vue","webpack:///./js/pages/Config/MonitorList.vue?0332","webpack:///./js/pages/Config/MonitorList.vue","webpack:///./js/pages/Config/MqMessagingForm.vue?cd70","webpack:///js/pages/Config/MqMessagingForm.vue","webpack:///./js/pages/Config/MqMessagingForm.vue?4bcd","webpack:///./js/pages/Config/MqMessagingForm.vue","webpack:///./js/pages/Config/MqMessagingTable.vue?efdb","webpack:///./js/pages/Config/MqMessagingTable.vue?e82d","webpack:///js/pages/Config/MqMessagingTable.vue","webpack:///./js/pages/Config/MqMessagingTable.vue","webpack:///./js/pages/Config/MqttMessagingForm.vue?f5e7","webpack:///js/pages/Config/MqttMessagingForm.vue","webpack:///./js/pages/Config/MqttMessagingForm.vue?598f","webpack:///./js/pages/Config/MqttMessagingForm.vue","webpack:///./js/pages/Config/MqttMessagingTable.vue?54b2","webpack:///js/pages/Config/MqttMessagingTable.vue","webpack:///./js/pages/Config/MqttMessagingTable.vue?2bee","webpack:///./js/pages/Config/MqttMessagingTable.vue","webpack:///./js/pages/Config/UdpMessagingForm.vue?b12c","webpack:///js/pages/Config/UdpMessagingForm.vue","webpack:///./js/pages/Config/UdpMessagingForm.vue?d121","webpack:///./js/pages/Config/UdpMessagingForm.vue","webpack:///./js/pages/Config/UdpMessagingTable.vue?666f","webpack:///js/pages/Config/UdpMessagingTable.vue","webpack:///./js/pages/Config/UdpMessagingTable.vue?0e39","webpack:///./js/pages/Config/UdpMessagingTable.vue","webpack:///./js/pages/Config/TracerList.vue?7bf3","webpack:///js/pages/Config/TracerList.vue","webpack:///./js/pages/Config/TracerList.vue?717f","webpack:///./js/pages/Config/TracerList.vue","webpack:///./js/pages/Config/TracerForm.vue?6f68","webpack:///js/pages/Config/TracerForm.vue","webpack:///./js/pages/Config/TracerForm.vue?66e7","webpack:///./js/pages/Config/TracerForm.vue","webpack:///./js/pages/Config/MainConfiguration.vue?9403","webpack:///js/pages/Config/MainConfiguration.vue","webpack:///./js/pages/Config/MainConfiguration.vue?48b1","webpack:///./js/pages/Config/MainConfiguration.vue","webpack:///./js/pages/Config/ComponentList.vue?e54d","webpack:///js/pages/Config/ComponentList.vue","webpack:///./js/pages/Config/ComponentList.vue?6a5c","webpack:///./js/pages/Config/ComponentList.vue","webpack:///./js/pages/Config/ComponentForm.vue?76db","webpack:///js/pages/Config/ComponentForm.vue","webpack:///./js/pages/Config/ComponentForm.vue?ee1d","webpack:///./js/pages/Config/ComponentForm.vue","webpack:///./js/pages/Config/IqmeshServices.vue?3a00","webpack:///./js/components/Config/OtaUpload.vue?8570","webpack:///js/components/Config/OtaUpload.vue","webpack:///./js/components/Config/OtaUpload.vue?5ac0","webpack:///./js/components/Config/OtaUpload.vue","webpack:///./js/pages/Config/IqmeshServices.vue?4edb","webpack:///js/pages/Config/IqmeshServices.vue","webpack:///./js/pages/Config/IqmeshServices.vue","webpack:///./js/pages/Config/WebsocketInterfaceForm.vue?5172","webpack:///js/pages/Config/WebsocketInterfaceForm.vue","webpack:///./js/pages/Config/WebsocketInterfaceForm.vue?d40d","webpack:///./js/pages/Config/WebsocketInterfaceForm.vue","webpack:///./js/pages/Config/WebsocketMessagingForm.vue?3d55","webpack:///js/pages/Config/WebsocketMessagingForm.vue","webpack:///./js/pages/Config/WebsocketMessagingForm.vue?d83a","webpack:///./js/pages/Config/WebsocketMessagingForm.vue","webpack:///./js/pages/Config/WebsocketServiceForm.vue?36d6","webpack:///js/pages/Config/WebsocketServiceForm.vue","webpack:///./js/pages/Config/WebsocketServiceForm.vue?b356","webpack:///./js/pages/Config/WebsocketServiceForm.vue","webpack:///./js/pages/Config/WebsocketList.vue?ff47","webpack:///./js/components/Config/WebsocketInterfaceList.vue?d83e","webpack:///js/components/Config/WebsocketInterfaceList.vue","webpack:///./js/components/Config/WebsocketInterfaceList.vue?e3b1","webpack:///./js/components/Config/WebsocketInterfaceList.vue","webpack:///./js/components/Config/WebsocketMessagingList.vue?a0f0","webpack:///js/components/Config/WebsocketMessagingList.vue","webpack:///./js/components/Config/WebsocketMessagingList.vue?9b0f","webpack:///./js/components/Config/WebsocketMessagingList.vue","webpack:///./js/components/Config/WebsocketServiceList.vue?c214","webpack:///js/components/Config/WebsocketServiceList.vue","webpack:///./js/components/Config/WebsocketServiceList.vue?ac86","webpack:///./js/components/Config/WebsocketServiceList.vue","webpack:///./js/pages/Config/WebsocketList.vue?ca20","webpack:///js/pages/Config/WebsocketList.vue","webpack:///./js/pages/Config/WebsocketList.vue","webpack:///./js/pages/Config/SchedulerList.vue?bf52","webpack:///./js/services/SchedulerService.ts","webpack:///./js/pages/Config/SchedulerList.vue?4511","webpack:///js/pages/Config/SchedulerList.vue","webpack:///./js/pages/Config/SchedulerList.vue","webpack:///./js/pages/Config/SchedulerForm.vue?270c","webpack:///./js/pages/Config/SchedulerForm.vue?95d3","webpack:///js/pages/Config/SchedulerForm.vue","webpack:///./js/pages/Config/SchedulerForm.vue","webpack:///./js/pages/Core/UserAdd.vue?85cc","webpack:///./js/services/UserService.ts","webpack:///./js/pages/Core/UserAdd.vue?90ed","webpack:///js/pages/Core/UserAdd.vue","webpack:///./js/pages/Core/UserAdd.vue","webpack:///./js/pages/Core/UserEdit.vue?0489","webpack:///js/pages/Core/UserEdit.vue","webpack:///./js/pages/Core/UserEdit.vue?d35f","webpack:///./js/pages/Core/UserEdit.vue","webpack:///./js/pages/Core/UserList.vue?8456","webpack:///js/pages/Core/UserList.vue","webpack:///./js/pages/Core/UserList.vue?55b2","webpack:///./js/pages/Core/UserList.vue","webpack:///./js/pages/Network/NetworkDisambiguation.vue?870e","webpack:///js/pages/Network/NetworkDisambiguation.vue","webpack:///./js/pages/Network/NetworkDisambiguation.vue?41bb","webpack:///./js/pages/Network/NetworkDisambiguation.vue","webpack:///./js/services/NetworkConnectionService.ts","webpack:///./js/pages/Network/ConnectionForm.vue?a4ad","webpack:///./js/pages/Network/ConnectionForm.vue?4a08","webpack:///js/pages/Network/ConnectionForm.vue","webpack:///./js/pages/Network/ConnectionForm.vue","webpack:///./js/services/NetworkInterfaceService.ts","webpack:///./js/pages/Network/EthernetInterfaces.vue?0935","webpack:///./js/components/Network/EthernetConnections.vue?6d23","webpack:///./js/components/Network/EthernetConnections.vue?509f","webpack:///js/components/Network/EthernetConnections.vue","webpack:///./js/components/Network/EthernetConnections.vue","webpack:///./js/pages/Network/EthernetInterfaces.vue?fe78","webpack:///js/pages/Network/EthernetInterfaces.vue","webpack:///./js/pages/Network/EthernetInterfaces.vue","webpack:///./js/router/index.ts","webpack:///./js/components/App.vue?728f","webpack:///js/components/App.vue","webpack:///./js/components/App.vue?af37","webpack:///./js/components/App.vue","webpack:///./js/components/TheDashboard.vue?252b","webpack:///./js/components/LoadingSpinner.vue?e606","webpack:///js/components/LoadingSpinner.vue","webpack:///./js/components/LoadingSpinner.vue?678f","webpack:///./js/components/LoadingSpinner.vue","webpack:///./js/components/TheHeader.vue?22f2","webpack:///./js/components/TheHeader.vue?444a","webpack:///js/components/TheHeader.vue","webpack:///./js/components/TheHeader.vue","webpack:///./js/components/TheSidebar.vue?c3ca","webpack:///./js/components/TheSidebar.vue?e384","webpack:///js/components/TheSidebar.vue","webpack:///./js/components/TheSidebar.vue","webpack:///./js/components/TheDashboard.vue?0985","webpack:///js/components/TheDashboard.vue","webpack:///./js/components/TheDashboard.vue","webpack:///./js/components/IqrfNet/TrConfiguration.vue?b032","webpack:///./js/components/IqrfNet/AddressChanger.vue?7033","webpack:///js/components/IqrfNet/AddressChanger.vue","webpack:///./js/components/IqrfNet/AddressChanger.vue?e364","webpack:///./js/components/IqrfNet/AddressChanger.vue","webpack:///js/components/IqrfNet/TrConfiguration.vue","webpack:///./js/components/IqrfNet/TrConfiguration.vue?ce66","webpack:///./js/components/IqrfNet/TrConfiguration.vue","webpack:///./js/components/MainDisambiguation.vue?5efa","webpack:///js/components/MainDisambiguation.vue","webpack:///./js/components/MainDisambiguation.vue?888b","webpack:///./js/components/MainDisambiguation.vue","webpack:///./js/main.ts","webpack:///./js/components/Gateway/ResourceUsage.vue?04b3","webpack:///./js/components/SignIn.vue?2bf8","webpack:///./js/pages/IqrfNet/DeviceEnumeration.vue?3f6b","webpack:///./js/components/IqrfNet/DevicesInfo.vue?d724","webpack:///./js/pages/IqrfNet/NetworkManager.vue?d4c4","webpack:///./js/components/IqrfNet/BinaryOutputManager.vue?705a","webpack:///./js/components/IqrfNet/SensorManager.vue?1b81","webpack:///./js/components/LoadingSpinner.vue?6618","webpack:///./js/helpers/authorizationHeader.ts","webpack:///./js/services/FeatureService.ts","webpack:///./js/store/modules/features.module.ts","webpack:///./js/store/modules/sidebar.module.ts","webpack:///./js/store/modules/spinner.module.ts","webpack:///./js/services/AuthenticationService.ts","webpack:///./js/store/modules/user.module.ts","webpack:///./js/store/modules/webSocketClient.module.ts","webpack:///./js/store/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","3","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","content","locals","add","default","render","_vm","this","_h","$createElement","_c","_self","attrs","to","staticClass","_v","_s","$t","$store","getters","_e","_withStripped","options","__file","color","size","href","scopedSlots","_u","fn","ref","invalid","rules","required","errors","touched","valid","label","model","connectionString","callback","$$v","expression","disabled","on","click","$event","preventDefault","save","saveAndRestart","messages","use","locale","fallbackLocale","FormErrorHandler","cloudError","error","store","commit","response","status","$toast","i18n","toString","console","message","configError","serviceError","schedulerError","CloudService","serviceName","a","post","headers","authorizationHeader","ServiceService","disable","enable","getStatus","restart","start","stop","endpoint","input","isEmpty","certEmpty","firstCert","staticStyle","keyEmpty","firstKey","address","clientId","requestTopic","responseTopic","username","password","organizationId","deviceType","deviceId","token","eventId","topic","between","integer","type","min","max","port","_n","showEditor","missing","unsupported","enabled","active","target","show","tokenUpdated","getToken","submit","processSubmit","close","proxy","PixlaService","then","setToken","put","info","board","gwId","pixla","versions","controller","daemon","webapp","hostname","_l","getIpAddresses","iface","addresses","getMacAddresses","diskUsages","usage","fsName","fsType","memoryUsage","swapUsage","downloadDiagnostics","hasData","trMcuType","trType","mcuType","osInfo","mid","osVersion","osBuild","enumeration","dpaVer","flags","rfMode","networkType","supplyVoltage","IqrfNetService","autoNetwork","json","discoveryTxPower","discoveryBeforeStart","skipDiscoveryEachWave","actionRetries","stopConditions","assign","req","overlappingNetworks","hwpidFiltering","dispatch","bondLocal","bondSmartConnect","scCode","testRetries","clearAllBonds","coordinatorOnly","removeBond","discovery","txPower","maxAddr","enumerateDevice","getBonded","getDiscovered","ping","addr","sendJson","writeTrConfiguration","configuration","rfBand","deviceAddr","DaemonModeService","set","newMode","GatewayService","getDiagnosticsArchive","responseType","getInfo","getLatestLog","getLogArchive","performPowerOff","performReboot","used","style","width","role","fileDownloader","contentType","fileName","contentDisposition","fileNameMatch","match","blob","Blob","fileUrl","URL","createObjectURL","file","document","createElement","setAttribute","body","appendChild","log","downloadArchive","setMode","powerOff","$options","icon","cilPowerStandby","reboot","cilReload","refreshStatus","md","alt","src","handleSubmit","placeholder","autocomplete","icons","user","lock","undefined","peripheralData","hwpId","manufacturer","product","homePage","picture","osData","rfModeStd","rfModeLp","rssi","ProductService","hwpid","timeout","setTimeout","lg","variant","activeTab","title","updateDevices","bondMethod","autoAddress","checked","bondingRetries","unbondCoordinatorOnly","processSubmitBond","modalUnbond","modalClear","processSubmitClearAll","processSubmitUnbond","coordinator","unbonded","bonded","discovered","frcPing","timedOut","Array","keys","num","row","col","device","devices","getAddress","Device","online","getIcon","getIconColor","hasLink","class","requred","$set","useOverlappingNetworks","networks","network","useHwpidFiltering","hwpidFilter","useWaves","waves","useEmptyWaves","emptyWaves","useNodes","nodeCondition","numberOfTotalNodes","numberOfNewNodes","abortOnTooManyNodesFound","processSubmitAutoNetwork","mType","directives","rawName","request","success","arg","highlight","highlighter","readonly","StatusMessages","packet","addressOverwrite","timeoutOverwrite","setPacket","macros","group","id","placement","$emit","IqrfService","getInterfacePorts","interfaceType","getMacros","__spreadArrays","il","arguments","k","jl","Packet","nadr","pnum","pcmd","pdata","detectTimeout","parse","packetArray","split","nadrLo","nadrHi","parseInt","hwpidLo","hwpidHi","map","hex","int","padStart","join","updateNadr","validatePacket","re","RegExp","index","for","state","shape","submitEnumerate","submitGetStates","submitSetState","numOutputs","ind","states","off","StandardBinaryOutput","StandardBinaryOutputService","enumerate","getOutputs","setOutputs","outputs","commands","removeDaliCommand","addDaliCommand","sendDali","responseReceived","answers","answer","StandardDaliService","send","power","submitGetPower","submitSetPower","submitIncrementPower","submitDecrementPower","colspan","numLights","prevPower","StandardLight","StandardLightService","decrementPower","lights","incrementPower","getPower","light","setPower","disabeld","submitReadAll","sensors","unit","StandardSensorService","readAll","configEmpty","firstConfig","importConfig","exportConfig","DaemonConfigurationService","createComponent","createInstance","component","url","encodeURIComponent","getComponent","getInstance","instance","deleteComponent","delete","deleteInstance","export","import","config","updateComponent","updateInstance","mqtt","client_id","cid","visibility","changeVisibility","hidden","shown","pw","rest","api_key_r","api_key","FeatureConfigService","getConfig","featureName","saveConfig","ws_addr","wsServers","api","monitor","logger","filePath","severity","apiCallSetCustom","change","updateApiCall","resetButton","button","statusLed","greenLed","redLed","daemonApi","returnVerbose","factoryReset","ServerURL","TenantToken","InventoryPollIntervalSeconds","RetryPollIntervalSeconds","UpdatePollIntervalSeconds","enumAtStartUp","enumPeriod","enumUniformDpaVer","urlRepo","checkPeriod","downloadIfRepoCacheEmpty","IqrfInterface","updatePort","ports","setPort","DpaHandlerTimeout","powerEnableGpioPin","busEnableGpioPin","pgmSwitchGpioPin","spiReset","updateMapping","mappings","setMapping","baudRate","baudRates","metaDataToMessages","asyncDpaMessage","validateJsonResponse","reportPeriod","webSocket","WebsocketPort","acceptOnlyLocalhost","submitButton","fields","items","instances","pagination","striped","sorter","external","resetable","item","changeAcceptOnlyLocalhost","edit","modals","remove","removeInterface","LocalMqName","RemoteMqName","acceptAsyncMsg","changeAcceptAsyncMsg","confirmDelete","performDelete","BrokerAddr","ClientId","Persistence","Qos","qosOptions","TopicRequest","TopicResponse","User","Password","EnabledSSL","KeepAliveInterval","ConnectTimeout","MaxReconnect","MinReconnect","TrustStore","KeyStore","PrivateKey","PrivateKeyPassword","EnabledCipherSuites","EnableServerCertAuth","changeEnabledSSL","RemotePort","LocalPort","currentInstance","removeInstance","saveInstance","path","filename","maxSizeMB","timestampFiles","VerbosityLevels","level","channel","removeLevel","addLevel","applicationName","resourceDir","dataDir","cacheDir","userDir","configurationDir","deploymentDir","components","changeEnabled","removeComponent","saveComponent","libraryPath","libraryName","startlevel","uploadPath","messaging","service","RequiredInterfaces","addInterface","instanceMessaging","changeAccept","removeService","modal","exportScheduler","tasks","retrieved","timeString","timeSpec","time","displayMTypes","task","mTypes","taskId","closeImport","empty","importScheduler","first","removeTask","SchedulerService","addTask","JSON","stringify","forEach","addTaskREST","newTask","editTaskREST","oldTaskId","editTask","listTasks","listTasksREST","getTask","getTaskREST","removeTaskREST","saveTask","cronMessage","exactTime","periodic","calculateCron","cronTime","period","format","pickerSettings","dateFormat","Date","toISOString","startTime","messagings","removeMessage","addMessage","language","UserService","changePassword","oldPassword","newPassword","old","new","getLoggedIn","list","loaded","userId","users","changeRole","changeLanguage","ConnectionType","ipv4","method","ipv4Methods","mask","deleteIpv4Address","addIpv4Address","gateway","dns","deleteIpv4Dns","addIpv4Dns","ipv6","ipv6Methods","prefix","deleteIpv6Address","addIpv6Address","deleteIpv6Dns","addIpv6Dns","NetworkConnectionService","connect","uuid","interfaceName","params","disconnect","InterfaceState","InterfaceType","interfaces","getStatusBadgeColor","connections","updateConnection","getConnections","NetworkInterfaceService","routes","SignIn","children","CloudDisambiguation","meta","AzureCreator","AwsCreator","HexioCreator","IbmCreator","InteliGlueCreator","PixlaControl","ConfigDisambiguation","MainConfiguration","ComponentList","ComponentForm","props","IqrfCdc","IqrfDpa","IqrfInfo","IqmeshServices","IqrfRepository","IqrfSpi","IqrfUart","JsonRawApi","JsonMngMetaDataApi","JsonSplitter","MonitorList","MonitorForm","SchedulerList","SchedulerForm","route","Number","isNaN","MqMessagingTable","MqMessagingForm","MqttMessagingTable","MqttMessagingForm","UdpMessagingTable","UdpMessagingForm","WebsocketList","WebsocketInterfaceForm","WebsocketMessagingForm","WebsocketServiceForm","TracerList","TracerForm","ConfigMigration","MenderConfig","TranslatorConfig","ControllerConfig","GatewayDisambiguation","GatewayInfo","DaemonLogViewer","DaemonMode","PowerControl","ServiceControl","IqrfNetDisambiguation","DeviceEnumeration","NetworkManager","StandardManager","SendDpaPacket","SendJsonRequest","NetworkDisambiguation","EthernetInterfaces","ConnectionForm","UserList","UserAdd","UserEdit","metaInfo","titleTemplate","router","beforeEach","from","next","startsWith","titleEl","getElementById","innerText","text","parts","metaTranslate","flashes","location","replace","fullPath","fluid","_t","fixed","signOut","cilLockLocked","minimize","flat","getNav","nativeOn","rfChannelRules","rule","rfChannelValidatorMessages","rfChannelA","rfChannelB","rfSubChannelA","rfSubChannelB","rfAltDsmChannel","stdAndLpNetwork","rxFilter","lpRxTimeout","rfPgmEnableAfterReset","rfPgmTerminateAfter1Min","rfPgmTerminateMcuPin","rfPgmDualChannel","rfPgmLpMode","rfPgmIncorrectUpload","peripherals","peripheral","unchangeablePeripherals","includes","customDpaHandler","dpaHandlerDetected","dpaPeerToPeer","peerToPeer","localFrcReception","ioSetup","dpaAutoexec","routingOff","neverSleep","uartBaudrate","uartBaudRates","nodeDpaInterface","changeAddress","dsn","integrations","Vue","attachProps","logErrors","$appName","wsApi","reconnection","position","duration","defaults","baseURL","host","interceptors","Promise","reject","el","App","TheDashboard","TrConfiguration","MainDisambiguation","titleChunk","FeatureService","fetchAll","namespaced","features","actions","fetch","_a","isEnabled","e","mutations","SET","toggleSidebarDesktop","sidebarOpened","toggleSidebarMobile","sidebarClosed","variable","HIDE","SHOW","UPDATE_TEXT","AuthenticationService","apiLogin","netteLogin","URLSearchParams","append","login","all","logout","signIn","credentials","responses","apiResponse","catch","isLoggedIn","getId","getName","getRole","SIGN_IN","SIGN_OUT","socket","isConnected","reconnectError","requests","SOCKET_ONOPEN","event","$socket","currentTarget","SOCKET_ONCLOSE","SOCKET_ONERROR","SOCKET_ONMESSAGE","msgId","SOCKET_ONSEND","SOCKET_RECONNECT","count","SOCKET_RECONNECT_ERROR","sendRequest","context","sendObj","isSocketConnected","Store","sidebar","spinner","webSocketClient","plugins"],"mappings":"aACE,SAASA,EAAqBC,GAQ7B,IAPA,IAMIC,EAAUC,EANVC,EAAWH,EAAK,GAChBI,EAAcJ,EAAK,GACnBK,EAAiBL,EAAK,GAIHM,EAAI,EAAGC,EAAW,GACpCD,EAAIH,EAASK,OAAQF,IACzBJ,EAAUC,EAASG,GAChBG,OAAOC,UAAUC,eAAeC,KAAKC,EAAiBX,IAAYW,EAAgBX,IACpFK,EAASO,KAAKD,EAAgBX,GAAS,IAExCW,EAAgBX,GAAW,EAE5B,IAAID,KAAYG,EACZK,OAAOC,UAAUC,eAAeC,KAAKR,EAAaH,KACpDc,EAAQd,GAAYG,EAAYH,IAKlC,IAFGe,GAAqBA,EAAoBhB,GAEtCO,EAASC,QACdD,EAASU,OAATV,GAOD,OAHAW,EAAgBJ,KAAKK,MAAMD,EAAiBb,GAAkB,IAGvDe,IAER,SAASA,IAER,IADA,IAAIC,EACIf,EAAI,EAAGA,EAAIY,EAAgBV,OAAQF,IAAK,CAG/C,IAFA,IAAIgB,EAAiBJ,EAAgBZ,GACjCiB,GAAY,EACRC,EAAI,EAAGA,EAAIF,EAAed,OAAQgB,IAAK,CAC9C,IAAIC,EAAQH,EAAeE,GACG,IAA3BX,EAAgBY,KAAcF,GAAY,GAE3CA,IACFL,EAAgBQ,OAAOpB,IAAK,GAC5Be,EAASM,EAAoBA,EAAoBC,EAAIN,EAAe,KAItE,OAAOD,EAIR,IAAIQ,EAAmB,GAKnBhB,EAAkB,CACrBiB,EAAG,GAGAZ,EAAkB,GAGtB,SAASS,EAAoB1B,GAG5B,GAAG4B,EAAiB5B,GACnB,OAAO4B,EAAiB5B,GAAU8B,QAGnC,IAAIC,EAASH,EAAiB5B,GAAY,CACzCK,EAAGL,EACHgC,GAAG,EACHF,QAAS,IAUV,OANAhB,EAAQd,GAAUW,KAAKoB,EAAOD,QAASC,EAAQA,EAAOD,QAASJ,GAG/DK,EAAOC,GAAI,EAGJD,EAAOD,QAKfJ,EAAoBO,EAAInB,EAGxBY,EAAoBQ,EAAIN,EAGxBF,EAAoBS,EAAI,SAASL,EAASM,EAAMC,GAC3CX,EAAoBY,EAAER,EAASM,IAClC5B,OAAO+B,eAAeT,EAASM,EAAM,CAAEI,YAAY,EAAMC,IAAKJ,KAKhEX,EAAoBgB,EAAI,SAASZ,GACX,oBAAXa,QAA0BA,OAAOC,aAC1CpC,OAAO+B,eAAeT,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DrC,OAAO+B,eAAeT,EAAS,aAAc,CAAEe,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKzC,OAAO0C,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBzC,OAAO+B,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBS,EAAEc,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAStB,GAChC,IAAIM,EAASN,GAAUA,EAAOiB,WAC7B,WAAwB,OAAOjB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAL,EAAoBS,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRX,EAAoBY,EAAI,SAASgB,EAAQC,GAAY,OAAO/C,OAAOC,UAAUC,eAAeC,KAAK2C,EAAQC,IAGzG7B,EAAoB8B,EAAI,SAExB,IAAIC,EAAaC,OAAqB,aAAIA,OAAqB,cAAK,GAChEC,EAAmBF,EAAW5C,KAAKuC,KAAKK,GAC5CA,EAAW5C,KAAOf,EAClB2D,EAAaA,EAAWG,QACxB,IAAI,IAAIvD,EAAI,EAAGA,EAAIoD,EAAWlD,OAAQF,IAAKP,EAAqB2D,EAAWpD,IAC3E,IAAIU,EAAsB4C,EAI1B1C,EAAgBJ,KAAK,CAAC,IAAI,EAAE,IAErBM,I,q24CCvJT,mBAAgZ,G,uDCAhZ,mBAA0X,G,uDCA1X,mBAAoZ,G,uDCApZ,mBAA6b,G,uDCA7b,mBAAiZ,G,uDCAjZ,mBAAsZ,G,uDCAtZ,mBAAgZ,G,m7CCGhZ,IAAI0C,EAAU,EAAQ,KACA,iBAAZA,IAAsBA,EAAU,CAAC,CAAC9B,EAAO1B,EAAIwD,EAAS,MAC7DA,EAAQC,SAAQ/B,EAAOD,QAAU+B,EAAQC,SAG/BC,EADH,EAAQ,IAA4DC,SAC7D,WAAYH,GAAS,EAAO,K,uDCR7C,mBAA8a,G,gMCA1aI,EAAS,WACX,IAAIC,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,QACA,CAAEE,MAAO,CAAE,eAAgB,KAC3B,CACEF,EACE,aACA,CACEA,EAAG,iBAAkB,CAAEE,MAAO,CAAEC,GAAI,sBAAyB,CAC3DH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,yBACd,cAGNX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,+BACd,gBAIRX,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CAAEE,MAAO,CAAEC,GAAI,kBAAqB,CACvDH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,wBACd,cAGNX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,8BACd,gBAIRX,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CAAEE,MAAO,CAAEC,GAAI,gBAAmB,CACrDH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,0BACd,cAGNX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,gCACd,gBAIRX,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CAAEE,MAAO,CAAEC,GAAI,kBAAqB,CACvDH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aAAeT,EAAIU,GAAGV,EAAIW,GAAG,sBAAwB,cAGzDX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,4BACd,gBAIRX,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CAAEE,MAAO,CAAEC,GAAI,wBAA2B,CAC7DH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,sCACd,cAGNX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,4CACd,gBAIRX,EAAIS,GAAG,KACPT,EAAIY,OAAOC,QAAQ,sBAAsB,SACrCT,EAAG,iBAAkB,CAAEE,MAAO,CAAEC,GAAI,kBAAqB,CACvDH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,sBACd,cAGNX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,4BACd,gBAIRX,EAAIc,MAEV,IAGJ,IAIJf,EAAOgB,eAAgB,E,+BC9H0L,EC6DjN,CACA,2BACA,YACA,UACA,eACA,oBAEA,UACA,sB,OC9DI,EAAY,YACd,EACAhB,EHoHoB,IGlHpB,EACA,KACA,KACA,MAuBF,EAAUiB,QAAQC,OAAS,yCACZ,Q,QCtCX,EAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,QACA,CACEA,EACE,cACA,CACEA,EACE,UACA,CACEE,MAAO,CACLY,MAAO,UACPC,KAAM,KACNC,KACE,uFAGN,CAACpB,EAAIS,GAAG,WAAaT,EAAIU,GAAGV,EAAIW,GAAG,qBAAuB,YAE5DX,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CACLY,MAAO,SACPC,KAAM,KACNC,KAAM,iCAGV,CACEpB,EAAIS,GACF,WAAaT,EAAIU,GAAGV,EAAIW,GAAG,uBAAyB,aAK5D,GAEFX,EAAIS,GAAG,KACPL,EACE,YACA,CACEA,EAAG,qBAAsB,CACvBiB,YAAarB,EAAIsB,GAAG,CAClB,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAIC,EAAUD,EAAIC,QAClB,MAAO,CACLrB,EACE,QACA,CACEA,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,WACP,kBAAmB,CACjBC,SACE,iDAGNN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,uCAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GAAGiB,EAAO,KAEpCI,MAAO,CACLrD,MAAOqB,EAAIiC,iBACXC,SAAU,SAASC,GACjBnC,EAAIiC,iBAAmBE,GAEzBC,WAAY,0BAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,UAAWmB,SAAUZ,GACrCa,GAAI,CACFC,MAAO,SAASC,GAEd,OADAA,EAAOC,iBACAzC,EAAI0C,KAAKF,MAItB,CACExC,EAAIS,GACF,eACET,EAAIU,GAAGV,EAAIW,GAAG,eACd,gBAIRX,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,YAAamB,SAAUZ,GACvCa,GAAI,CACFC,MAAO,SAASC,GAEd,OADAA,EAAOC,iBACAzC,EAAI2C,eAAeH,MAIhC,CACExC,EAAIS,GACF,eACET,EAAIU,GAAGV,EAAIW,GAAG,sBACd,iBAKV,WAQd,IAGJ,IAIJ,EAAOI,eAAgB,E,qECrJnB6B,EAAW,CACX,GAFK,EAAQ,MAIjB,UAAIC,IAAI,KACO,UAAI,IAAQ,CACvBC,OAAQ,KACRC,eAAgB,KAChBH,SAAUA,ICkFC,MAtFuB,WAClC,SAASI,KAmFT,OA7EAA,EAAiBzG,UAAU0G,WAAa,SAAUC,GAC9CC,EAAA,EAAMC,OAAO,gBACTF,EAAMG,SACwB,MAA1BH,EAAMG,SAASC,OACf,UAAIC,OAAOL,MAAMM,EAAK5E,EAAE,mCAAmC6E,YAEtDP,EAAMG,SAASC,QACpB,UAAIC,OAAOL,MAAMM,EAAK5E,EAAE,oCAAoC6E,YAIhEC,QAAQR,MAAMA,EAAMS,UAO5BX,EAAiBzG,UAAUqH,YAAc,SAAUV,GAC/CC,EAAA,EAAMC,OAAO,gBACTF,EAAMG,SACwB,MAA1BH,EAAMG,SAASC,OACf,UAAIC,OAAOL,MAAMM,EAAK5E,EAAE,oCAAoC6E,YAE7B,MAA1BP,EAAMG,SAASC,OACpB,UAAIC,OAAOL,MAAMM,EAAK5E,EAAE,oCAAoC6E,YAG5DC,QAAQR,MAAMA,EAAMS,SAIxBD,QAAQR,MAAMA,EAAMS,UAO5BX,EAAiBzG,UAAUsH,aAAe,SAAUX,GAChDC,EAAA,EAAMC,OAAO,gBACTF,EAAMG,SACwB,MAA1BH,EAAMG,SAASC,OACf,UAAIC,OAAOL,MAAMM,EAAK5E,EAAE,mCAAmC6E,YAE5B,MAA1BP,EAAMG,SAASC,OACpB,UAAIC,OAAOL,MAAMM,EAAK5E,EAAE,qCAAqC6E,YAE9B,MAA1BP,EAAMG,SAASC,QACpB,UAAIC,OAAOL,MAAMM,EAAK5E,EAAE,kCAAkC6E,YAI9DC,QAAQR,MAAMA,EAAMS,UAO5BX,EAAiBzG,UAAUuH,eAAiB,SAAUZ,GAClDC,EAAA,EAAMC,OAAO,gBACTF,EAAMG,SACwB,MAA1BH,EAAMG,SAASC,OACf,UAAIC,OAAOL,MAAMM,EAAK5E,EAAE,8CAA8C6E,YAEvC,MAA1BP,EAAMG,SAASC,OACpB,UAAIC,OAAOL,MAAMM,EAAK5E,EAAE,2CAA2C6E,YAEpC,MAA1BP,EAAMG,SAASC,QACpB,UAAIC,OAAOL,MAAMM,EAAK5E,EAAE,yCAAyC6E,YAIrEC,QAAQR,MAAMA,EAAMS,UAGrBX,EApF0B,I,OCYtB,MAbmB,WAC9B,SAASe,KAUT,OAHAA,EAAaxH,UAAUyC,OAAS,SAAUgF,EAAanI,GACnD,OAAO,EAAAoI,EAAMC,KAAK,UAAYF,EAAanI,EAAM,CAAEsI,QAAS,OAAAC,EAAA,QAEzDL,EAXsB,IC+ClB,MA/CqB,WAChC,SAASM,KA4CT,OAtCAA,EAAe9H,UAAU+H,QAAU,SAAUpG,GACzC,OAAO,EAAA+F,EAAMC,KAAK,YAAchG,EAAO,WAAY,KAAM,CAAEiG,QAAS,OAAAC,EAAA,QAMxEC,EAAe9H,UAAUgI,OAAS,SAAUrG,GACxC,OAAO,EAAA+F,EAAMC,KAAK,YAAchG,EAAO,UAAW,KAAM,CAAEiG,QAAS,OAAAC,EAAA,QAMvEC,EAAe9H,UAAUiI,UAAY,SAAUtG,GAC3C,OAAO,EAAA+F,EAAM1F,IAAI,YAAcL,EAAM,CAAEiG,QAAS,OAAAC,EAAA,QAMpDC,EAAe9H,UAAUkI,QAAU,SAAUvG,GACzC,OAAO,EAAA+F,EAAMC,KAAK,YAAchG,EAAO,WAAY,KAAM,CAAEiG,QAAS,OAAAC,EAAA,QAMxEC,EAAe9H,UAAUmI,MAAQ,SAAUxG,GACvC,OAAO,EAAA+F,EAAMC,KAAK,YAAchG,EAAO,SAAU,KAAM,CAAEiG,QAAS,OAAAC,EAAA,QAMtEC,EAAe9H,UAAUoI,KAAO,SAAUzG,GACtC,OAAO,EAAA+F,EAAMC,KAAK,YAAchG,EAAO,QAAS,KAAM,CAAEiG,QAAS,OAAAC,EAAA,QAE9DC,EA7CwB,ICLuK,EC+D1M,CACA,oBACA,YACA,YACA,UACA,cACA,gBACA,UACA,WACA,uBACA,wBAEA,KAZA,WAaA,OACA,sBACA,sBAGA,QAlBA,WAmBA,6BAEA,SACA,KADA,WACA,WAEA,OADA,mCACA,oEACA,iBACA,gCACA,+DAEA,mBAEA,OADA,gBACA,sBAGA,eAbA,WAaA,WACA,YACA,iBACA,gCACA,iCACA,iBACA,gCACA,iBACA,qDACA,eAGA,mBACA,wBAGA,wBAGA,UACA,mCC9GI,EAAY,YACd,EACA,EP8IoB,IO5IpB,EACA,KACA,KACA,MAuBF,EAAUrD,QAAQC,OAAS,kCACZ,Q,QCtCX,EAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,QACA,CACEA,EACE,cACA,CACEA,EACE,UACA,CACEE,MAAO,CACLY,MAAO,UACPC,KAAM,KACNC,KACE,uFAGN,CAACpB,EAAIS,GAAG,WAAaT,EAAIU,GAAGV,EAAIW,GAAG,qBAAuB,YAE5DX,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CACLY,MAAO,SACPC,KAAM,KACNC,KAAM,iCAGV,CACEpB,EAAIS,GACF,WAAaT,EAAIU,GAAGV,EAAIW,GAAG,uBAAyB,aAK5D,GAEFX,EAAIS,GAAG,KACPL,EACE,YACA,CACEA,EAAG,qBAAsB,CACvBiB,YAAarB,EAAIsB,GAAG,CAClB,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAIC,EAAUD,EAAIC,QAClB,MAAO,CACLrB,EACE,QACA,CACEA,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,WACP,kBAAmB,CACjBC,SAAU,2CAGdN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,iCAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GAAGiB,EAAO,KAEpCI,MAAO,CACLrD,MAAOqB,EAAI4E,SACX1C,SAAU,SAASC,GACjBnC,EAAI4E,SAAWzC,GAEjBC,WAAY,kBAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPL,EACE,MACA,CAAEI,YAAa,cACf,CACEJ,EAAG,aAAc,CACfoB,IAAK,cACLlB,MAAO,CACLyB,MAAO/B,EAAIW,GACT,qCAGJ2B,GAAI,CACFuC,MAAO,SAASrC,GACd,OAAOxC,EAAI8E,QAAQ,SAErBvC,MAAO,SAASC,GACd,OAAOxC,EAAI8E,QAAQ,YAIzB9E,EAAIS,GAAG,KACPT,EAAI+E,YAAc/E,EAAIgF,UAClB5E,EAAG,IAAK,CAAE6E,YAAa,CAAE/D,MAAO,QAAW,CACzClB,EAAIS,GACF,iBACET,EAAIU,GACFV,EAAIW,GACF,8CAGJ,kBAGNX,EAAIc,MAEV,GAEFd,EAAIS,GAAG,KACPL,EACE,MACA,CAAEI,YAAa,cACf,CACEJ,EAAG,aAAc,CACfoB,IAAK,aACLlB,MAAO,CACLyB,MAAO/B,EAAIW,GAAG,6BAEhB2B,GAAI,CACFuC,MAAO,SAASrC,GACd,OAAOxC,EAAI8E,QAAQ,QAErBvC,MAAO,SAASC,GACd,OAAOxC,EAAI8E,QAAQ,WAIzB9E,EAAIS,GAAG,KACPT,EAAIkF,WAAalF,EAAImF,SACjB/E,EAAG,IAAK,CAAE6E,YAAa,CAAE/D,MAAO,QAAW,CACzClB,EAAIS,GACF,iBACET,EAAIU,GACFV,EAAIW,GACF,sCAGJ,kBAGNX,EAAIc,MAEV,GAEFd,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CACLY,MAAO,UACPmB,SAAUZ,GAAWzB,EAAI+E,WAAa/E,EAAIkF,UAE5C5C,GAAI,CACFC,MAAO,SAASC,GAEd,OADAA,EAAOC,iBACAzC,EAAI0C,KAAKF,MAItB,CACExC,EAAIS,GACF,eACET,EAAIU,GAAGV,EAAIW,GAAG,eACd,gBAIRX,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CACLY,MAAO,YACPmB,SAAUZ,GAAWzB,EAAI+E,WAAa/E,EAAIkF,UAE5C5C,GAAI,CACFC,MAAO,SAASC,GAEd,OADAA,EAAOC,iBACAzC,EAAI2C,eAAeH,MAIhC,CACExC,EAAIS,GACF,eACET,EAAIU,GAAGV,EAAIW,GAAG,sBACd,iBAKV,WAQd,IAGJ,IAIJ,EAAOI,eAAgB,E,YCvOiL,ECqFxM,CACA,kBACA,YACA,YACA,UACA,cACA,gBACA,UACA,WACA,eACA,uBACA,wBAEA,KAbA,WAcA,OACA,cACA,kBACA,aACA,YACA,aACA,cAGA,QAvBA,WAwBA,6BAEA,SACA,aADA,WAEA,mBAIA,OAHA,mCACA,wEACA,sEACA,GAEA,KARA,WAQA,WACA,mCACA,+CACA,iBACA,gCACA,+DAEA,mBAEA,OADA,gBACA,sBAGA,eApBA,WAoBA,WACA,YACA,iBACA,gCACA,iCACA,iBACA,gCACA,iBACA,qDACA,eAGA,mBACA,wBAGA,uBAEA,QAtCA,SAsCA,GACA,YACA,iBACA,mBAEA,yEAEA,gBACA,kBAEA,yECxJI,EAAY,YACd,EACA,EH6NoB,IG3NpB,EACA,KACA,KACA,MAuBF,EAAUC,QAAQC,OAAS,gCACZ,Q,QCtCX,EAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,QACA,CACEA,EACE,YACA,CACEA,EAAG,qBAAsB,CACvBiB,YAAarB,EAAIsB,GAAG,CAClB,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAIC,EAAUD,EAAIC,QAClB,MAAO,CACLrB,EACE,QACA,CACEA,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,WACP,kBAAmB,CACjBC,SAAU,qCAGdN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,2BAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GAAGiB,EAAO,KAEpCI,MAAO,CACLrD,MAAOqB,EAAIoF,QACXlD,SAAU,SAASC,GACjBnC,EAAIoF,QAAUjD,GAEhBC,WAAY,iBAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,WACP,kBAAmB,CACjBC,SAAU,uCAGdN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,6BAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GAAGiB,EAAO,KAEpCI,MAAO,CACLrD,MAAOqB,EAAIqF,SACXnD,SAAU,SAASC,GACjBnC,EAAIqF,SAAWlD,GAEjBC,WAAY,kBAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,WACP,kBAAmB,CACjBC,SAAU,2CAGdN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,iCAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GAAGiB,EAAO,KAEpCI,MAAO,CACLrD,MAAOqB,EAAIsF,aACXpD,SAAU,SAASC,GACjBnC,EAAIsF,aAAenD,GAErBC,WAAY,sBAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,WACP,kBAAmB,CACjBC,SACE,4CAGNN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,kCAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GAAGiB,EAAO,KAEpCI,MAAO,CACLrD,MAAOqB,EAAIuF,cACXrD,SAAU,SAASC,GACjBnC,EAAIuF,cAAgBpD,GAEtBC,WAAY,uBAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,WACP,kBAAmB,CACjBC,SAAU,uCAGdN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,6BAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GAAGiB,EAAO,KAEpCI,MAAO,CACLrD,MAAOqB,EAAIwF,SACXtD,SAAU,SAASC,GACjBnC,EAAIwF,SAAWrD,GAEjBC,WAAY,kBAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,WACP,kBAAmB,CACjBC,SAAU,uCAGdN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,6BAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GAAGiB,EAAO,KAEpCI,MAAO,CACLrD,MAAOqB,EAAIyF,SACXvD,SAAU,SAASC,GACjBnC,EAAIyF,SAAWtD,GAEjBC,WAAY,kBAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,UAAWmB,SAAUZ,GACrCa,GAAI,CACFC,MAAO,SAASC,GAEd,OADAA,EAAOC,iBACAzC,EAAI0C,KAAKF,MAItB,CACExC,EAAIS,GACF,eACET,EAAIU,GAAGV,EAAIW,GAAG,eACd,gBAIRX,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,YAAamB,SAAUZ,GACvCa,GAAI,CACFC,MAAO,SAASC,GAEd,OADAA,EAAOC,iBACAzC,EAAI2C,eAAeH,MAIhC,CACExC,EAAIS,GACF,eACET,EAAIU,GAAGV,EAAIW,GAAG,sBACd,iBAKV,WAQd,IAGJ,IAIJ,EAAOI,eAAgB,EC7MvB,ICrH0M,EDqH1M,CACA,oBACA,YACA,YACA,UACA,cACA,UACA,WACA,uBACA,wBAEA,KAXA,WAYA,OACA,oBACA,8BACA,cACA,+BACA,iCACA,cACA,gBAGA,QAtBA,WAuBA,6BAEA,SACA,YADA,WAEA,OACA,oBACA,uBACA,+BACA,iCACA,uBACA,yBAGA,KAXA,WAWA,WACA,mCACA,8CACA,iBACA,gCACA,+DAEA,mBAEA,OADA,gBACA,sBAGA,eAvBA,WAuBA,WACA,YACA,iBACA,gCACA,iCACA,iBACA,gCACA,iBACA,qDACA,eAGA,mBACA,wBAGA,wBAGA,UACA,iCElLI,EAAY,YACd,EACA,EHwToB,IGtTpB,EACA,KACA,KACA,MAuBF,EAAUC,QAAQC,OAAS,kCACZ,Q,QCtCX,EAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,QACA,CACEA,EACE,cACA,CACEA,EACE,UACA,CACEE,MAAO,CACLY,MAAO,UACPC,KAAM,KACNC,KACE,uFAGN,CAACpB,EAAIS,GAAG,WAAaT,EAAIU,GAAGV,EAAIW,GAAG,qBAAuB,YAE5DX,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CACLY,MAAO,SACPC,KAAM,KACNC,KAAM,iCAGV,CACEpB,EAAIS,GACF,WAAaT,EAAIU,GAAGV,EAAIW,GAAG,uBAAyB,aAK5D,GAEFX,EAAIS,GAAG,KACPL,EACE,YACA,CACEA,EAAG,qBAAsB,CACvBiB,YAAarB,EAAIsB,GAAG,CAClB,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAIC,EAAUD,EAAIC,QAClB,MAAO,CACLrB,EACE,QACA,CACEA,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,WACP,kBAAmB,CACjBC,SACE,gDAGNN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,sCAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GAAGiB,EAAO,KAEpCI,MAAO,CACLrD,MAAOqB,EAAI0F,eACXxD,SAAU,SAASC,GACjBnC,EAAI0F,eAAiBvD,GAEvBC,WAAY,wBAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,WACP,kBAAmB,CACjBC,SACE,4CAGNN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,kCAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GAAGiB,EAAO,KAEpCI,MAAO,CACLrD,MAAOqB,EAAI2F,WACXzD,SAAU,SAASC,GACjBnC,EAAI2F,WAAaxD,GAEnBC,WAAY,oBAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,WACP,kBAAmB,CACjBC,SAAU,0CAGdN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,gCAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GAAGiB,EAAO,KAEpCI,MAAO,CACLrD,MAAOqB,EAAI4F,SACX1D,SAAU,SAASC,GACjBnC,EAAI4F,SAAWzD,GAEjBC,WAAY,kBAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,WACP,kBAAmB,CACjBC,SAAU,uCAGdN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,6BAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GAAGiB,EAAO,KAEpCI,MAAO,CACLrD,MAAOqB,EAAI6F,MACX3D,SAAU,SAASC,GACjBnC,EAAI6F,MAAQ1D,GAEdC,WAAY,eAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,WACP,kBAAmB,CACjBC,SAAU,yCAGdN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,+BAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GAAGiB,EAAO,KAEpCI,MAAO,CACLrD,MAAOqB,EAAI8F,QACX5D,SAAU,SAASC,GACjBnC,EAAI8F,QAAU3D,GAEhBC,WAAY,iBAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,UAAWmB,SAAUZ,GACrCa,GAAI,CACFC,MAAO,SAASC,GAEd,OADAA,EAAOC,iBACAzC,EAAI0C,KAAKF,MAItB,CACExC,EAAIS,GACF,eACET,EAAIU,GAAGV,EAAIW,GAAG,eACd,gBAIRX,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,YAAamB,SAAUZ,GACvCa,GAAI,CACFC,MAAO,SAASC,GAEd,OADAA,EAAOC,iBACAzC,EAAI2C,eAAeH,MAIhC,CACExC,EAAIS,GACF,eACET,EAAIU,GAAGV,EAAIW,GAAG,sBACd,iBAKV,WAQd,IAGJ,IAIJ,EAAOI,eAAgB,ECtMvB,ICvHwM,GDuHxM,CACA,kBACA,YACA,YACA,UACA,cACA,gBACA,UACA,WACA,uBACA,wBAEA,KAZA,WAaA,OACA,uBACA,oBACA,gBACA,cACA,WACA,iBAGA,QAtBA,WAuBA,6BAEA,SACA,YADA,WAEA,OACA,mCACA,2BACA,uBACA,iBACA,uBAGA,KAVA,WAUA,WACA,mCACA,8CACA,iBACA,gCACA,+DAEA,mBAEA,OADA,gBACA,sBAGA,eAtBA,WAsBA,WACA,YACA,iBACA,gCACA,iCACA,iBACA,gCACA,iBACA,qDACA,eAGA,mBACA,wBAGA,wBAGA,UACA,oCEnLI,GAAY,YACd,GACA,EHmToB,IGjTpB,EACA,KACA,KACA,MAuBF,GAAUC,QAAQC,OAAS,gCACZ,U,QCtCX,GAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,QACA,CACEA,EACE,YACA,CACEA,EAAG,qBAAsB,CACvBiB,YAAarB,EAAIsB,GAAG,CAClB,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAIC,EAAUD,EAAIC,QAClB,MAAO,CACLrB,EACE,QACA,CACEA,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,WACP,kBAAmB,CACjBC,SACE,wDAGNN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,8CAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GAAGiB,EAAO,KAEpCI,MAAO,CACLrD,MAAOqB,EAAI+F,MACX7D,SAAU,SAASC,GACjBnC,EAAI+F,MAAQ5D,GAEdC,WAAY,eAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,mCACP,kBAAmB,CACjBsE,QACE,8DACFC,QACE,8DACFtE,SACE,2DAGNN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACL4F,KAAM,SACNC,IAAK,IACLC,IAAK,QACLrE,MAAO/B,EAAIW,GACT,iDAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GAAGiB,EAAO,KAEpCI,MAAO,CACLrD,MAAOqB,EAAIqG,KACXnE,SAAU,SAASC,GACjBnC,EAAIqG,KAAOrG,EAAIsG,GAAGnE,IAEpBC,WAAY,cAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,WACP,kBAAmB,CACjBC,SACE,uDAGNN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,6CAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GAAGiB,EAAO,KAEpCI,MAAO,CACLrD,MAAOqB,EAAIqF,SACXnD,SAAU,SAASC,GACjBnC,EAAIqF,SAAWlD,GAEjBC,WAAY,kBAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,WACP,kBAAmB,CACjBC,SACE,uDAGNN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,6CAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GAAGiB,EAAO,KAEpCI,MAAO,CACLrD,MAAOqB,EAAIyF,SACXvD,SAAU,SAASC,GACjBnC,EAAIyF,SAAWtD,GAEjBC,WAAY,kBAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,UAAWmB,SAAUZ,GACrCa,GAAI,CACFC,MAAO,SAASC,GAEd,OADAA,EAAOC,iBACAzC,EAAI0C,KAAKF,MAItB,CACExC,EAAIS,GACF,eACET,EAAIU,GAAGV,EAAIW,GAAG,eACd,gBAIRX,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,YAAamB,SAAUZ,GACvCa,GAAI,CACFC,MAAO,SAASC,GAEd,OADAA,EAAOC,iBACAzC,EAAI2C,eAAeH,MAIhC,CACExC,EAAIS,GACF,eACET,EAAIU,GAAGV,EAAIW,GAAG,sBACd,iBAKV,WAQd,IAGJ,IAIJ,GAAOI,eAAgB,EC5JvB,IC9F+M,GD8F/M,CACA,yBACA,YACA,YACA,UACA,cACA,UACA,WACA,uBACA,wBAEA,KAXA,WAYA,OACA,yBACA,WACA,UACA,cACA,gBAGA,QApBA,WAqBA,2BACA,2BACA,6BAEA,SACA,YADA,WAEA,OACA,qBACA,uBACA,uBACA,yBAGA,KATA,WASA,WACA,mCACA,8CACA,iBACA,gCACA,+DAEA,mBAEA,OADA,gBACA,sBAGA,eArBA,WAqBA,WACA,YACA,iBACA,gCACA,iCACA,iBACA,gCACA,iBACA,qDACA,eAGA,mBACA,wBAGA,wBAGA,UACA,iDEzJI,GAAY,YACd,GACA,GHgPoB,IG9OpB,EACA,KACA,KACA,MAuBF,GAAUC,QAAQC,OAAS,uCACZ,U,QCtCX,GAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,QACA,CAAEE,MAAO,CAAE,eAAgB,KAC3B,CACEF,EAAG,QAAS,CAAEI,YAAa,uBAAyB,CAClDJ,EAAG,QAAS,CACVA,EAAG,KAAM,CACPA,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,yBAC/BX,EAAIS,GAAG,KACPL,EACE,KACA,CAAEI,YAAa,UACf,CACEJ,EAAG,MAAO,CAAEI,YAAa,WAAa,CACpCR,EAAIS,GAAG,iBAAmBT,EAAIU,GAAGV,EAAI6F,OAAS,kBAEhD7F,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,UAAWC,KAAM,MACjCmB,GAAI,CACFC,MAAO,SAASC,GACdxC,EAAIuG,YAAa,KAIvB,CACEvG,EAAIS,GACF,iBACET,EAAIU,GAAGV,EAAIW,GAAG,eACd,mBAKV,KAGJX,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,sBAC/BX,EAAIS,GAAG,KACPT,EAAIwG,QACApG,EAAG,KAAM,CACPJ,EAAIS,GACF,eACET,EAAIU,GAAGV,EAAIW,GAAG,2BACd,gBAGNX,EAAIc,KACRd,EAAIS,GAAG,KACPT,EAAIyG,YACArG,EAAG,KAAM,CACPJ,EAAIS,GACF,eACET,EAAIU,GAAGV,EAAIW,GAAG,+BACd,gBAGNP,EACE,KACA,CAAEI,YAAa,UACf,CACEJ,EAAG,MAAO,CAAEI,YAAa,WAAa,CACpCR,EAAIS,GACF,iBACET,EAAIU,GACFV,EAAIW,GACF,mBACGX,EAAI0G,QAAU,UAAY,cAGjC,kBACA1G,EAAIU,GACFV,EAAIW,GACF,mBACGX,EAAI2G,OAAS,SAAW,cAG/B,kBAGN3G,EAAIS,GAAG,KACNT,EAAI0G,QAmBD1G,EAAIc,KAlBJV,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,UAAWC,KAAM,MACjCmB,GAAI,CACFC,MAAO,SAASC,GACd,OAAOxC,EAAIuE,YAIjB,CACEvE,EAAIS,GACF,iBACET,EAAIU,GAAGV,EAAIW,GAAG,2BACd,kBAKZX,EAAIS,GAAG,KACPT,EAAI0G,QACAtG,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,SAAUC,KAAM,MAChCmB,GAAI,CACFC,MAAO,SAASC,GACd,OAAOxC,EAAIsE,aAIjB,CACEtE,EAAIS,GACF,iBACET,EAAIU,GAAGV,EAAIW,GAAG,4BACd,kBAIRX,EAAIc,MAEV,SAKZd,EAAIS,GAAG,KACNT,EAAIwG,SAAYxG,EAAIyG,YAwBjBzG,EAAIc,KAvBJV,EACE,MACA,CACEA,EACE,UACA,CACEE,MAAO,CACLY,MAAO,UACPE,KAAM,4BACNwF,OAAQ,WAGZ,CACE5G,EAAIS,GACF,WACET,EAAIU,GAAGV,EAAIW,GAAG,0BACd,aAKV,GAGNX,EAAIS,GAAG,KACPL,EAAG,mBAAoB,CACrBE,MAAO,CAAEuG,KAAM7G,EAAIuG,YACnBjE,GAAI,CACF,cAAe,SAASE,GACtBxC,EAAIuG,WAAa/D,GAEnBsE,aAAc9G,EAAI+G,aAIxB,IAIJ,GAAOhG,eAAgB,ECjLvB,IAAI,GAAS,WACX,IAAIf,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EAAG,qBAAsB,CAC9BiB,YAAarB,EAAIsB,GAAG,CAClB,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAIC,EAAUD,EAAIC,QAClB,MAAO,CACLrB,EACE,QACA,CACEkC,GAAI,CACF0E,OAAQ,SAASxE,GAEf,OADAA,EAAOC,iBACAzC,EAAIiH,cAAczE,MAI/B,CACEpC,EACE,SACA,CACEE,MAAO,CAAEY,MAAO,UAAW2F,KAAM7G,EAAI6G,MACrCvE,GAAI,CACF,cAAe,SAASE,GACtBxC,EAAI6G,KAAOrE,IAGfnB,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,SACLsC,GAAI,WACF,MAAO,CACLnB,EAAG,KAAM,CAAEI,YAAa,eAAiB,CACvCR,EAAIS,GACF,eACET,EAAIU,GACFV,EAAIW,GAAG,gCAET,gBAGNX,EAAIS,GAAG,KACPL,EAAG,eAAgB,CACjBI,YAAa,aACb8B,GAAI,CAAEC,MAAOvC,EAAIkH,WAIvBC,OAAO,GAET,CACElI,IAAK,SACLsC,GAAI,WACF,MAAO,CACLnB,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,UAChBoB,GAAI,CAAEC,MAAOvC,EAAIkH,QAEnB,CACElH,EAAIS,GACF,eACET,EAAIU,GAAGV,EAAIW,GAAG,iBACd,gBAIRX,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CACLY,MAAO,UACPgF,KAAM,SACN7D,SAAUZ,IAGd,CACEzB,EAAIS,GACF,eACET,EAAIU,GAAGV,EAAIW,GAAG,eACd,kBAMZwG,OAAO,IAGX,MACA,IAGJ,CACEnH,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,WACP,kBAAmB,CACjBC,SAAU,yCAGdN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,+BAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GAAGiB,EAAO,KAEpCI,MAAO,CACLrD,MAAOqB,EAAI6F,MACX3D,SAAU,SAASC,GACjBnC,EAAI6F,MAAQ1D,GAEdC,WAAY,eAOxB,MACA,MAIN,IAGJ,WASd,GAAOrB,eAAgB,E,aCjIR,OArBmB,WAC9B,SAASqG,KAkBT,OAbAA,EAAa7K,UAAUwK,SAAW,WAC9B,OAAO,EAAA9C,EAAM1F,IAAI,QAAS,CAAE4F,QAAS,OAAAC,EAAA,OAChCiD,MAAK,SAAUhE,GAChB,OAAOA,EAASxH,KAAKgK,UAO7BuB,EAAa7K,UAAU+K,SAAW,SAAUzB,GACxC,OAAO,EAAA5B,EAAMsD,IAAI,QAAS,CAAE1B,MAAOA,GAAS,CAAE1B,QAAS,OAAAC,EAAA,QAEpDgD,EAnBsB,ICL6K,GC8C9M,CACA,wBACA,YACA,YACA,UACA,WACA,YACA,uBACA,wBAEA,OACA,MACA,aACA,cAGA,KAhBA,WAiBA,OACA,WAGA,QArBA,WAsBA,6BAEA,SACA,MADA,WAEA,8BAEA,cAJA,WAIA,WACA,wBACA,iBACA,aACA,gCACA,0BACA,wBACA,iBACA,8DAGA,kBACA,eACA,iEChFI,GAAY,YACd,GACA,GJiJoB,II/IpB,EACA,KACA,KACA,MAuBF,GAAUpG,QAAQC,OAAS,2CACZ,U,QCtC2L,GC+D1M,CACA,oBACA,YACA,YACA,UACA,qBAEA,KAPA,WAQA,OACA,cACA,2BACA,WACA,UACA,WACA,WACA,YACA,iBAGA,QAnBA,WAoBA,mCACA,gBACA,kBAEA,SACA,OADA,WACA,WACA,mCACA,2BACA,iBACA,cACA,iBACA,kDACA,eAGA,yBAEA,QAbA,WAaA,WACA,mCACA,4BACA,iBACA,cACA,iBACA,mDACA,eAGA,yBAEA,UAzBA,WAyBA,WACA,8BACA,kBACA,iBACA,uBACA,yBACA,uBACA,mCAEA,yBAEA,SApCA,WAoCA,WACA,cACA,kBACA,UACA,mCAEA,kBACA,aACA,oCAGA,YA/CA,SA+CA,GACA,mCACA,iBACA,iBACA,gBACA,wEAEA,gBACA,6CACA,oBACA,0EAGA,QA5DA,WA4DA,WACA,mCACA,4BACA,iBACA,cACA,iBACA,mDACA,eAGA,yBAEA,MAxEA,WAwEA,WACA,mCACA,0BACA,iBACA,cACA,iBACA,iDACA,eAGA,yBAEA,KApFA,WAoFA,WACA,mCACA,yBACA,iBACA,cACA,iBACA,gDACA,eAGA,0BAGA,iBAzHA,SAyHA,OACA,eACA,kDACA,eACA,kDAEA,4BAIA,UACA,4BC5LI,GAAY,YACd,GACA,GRuKoB,IQrKpB,EACA,KACA,KACA,MAuBF,GAAUD,QAAQC,OAAS,kCACZ,U,QCtCX,GAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,QACA,CAAEE,MAAO,CAAE,eAAgB,KAC3B,CACEF,EACE,aACA,CACEA,EAAG,iBAAkB,CAAEE,MAAO,CAAEC,GAAI,mBAAsB,CACxDH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aAAeT,EAAIU,GAAGV,EAAIW,GAAG,uBAAyB,cAG1DX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,6BACd,gBAIRX,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CAAEE,MAAO,CAAEC,GAAI,kBAAqB,CACvDH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aAAeT,EAAIU,GAAGV,EAAIW,GAAG,sBAAwB,cAGzDX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,4BACd,gBAIRX,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CAAEE,MAAO,CAAEC,GAAI,0BAA6B,CAC/DH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aAAeT,EAAIU,GAAGV,EAAIW,GAAG,uBAAyB,cAG1DX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,6BACd,gBAIRX,EAAIS,GAAG,KACPL,EACE,iBACA,CAAEE,MAAO,CAAEC,GAAI,kCACf,CACEH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,sCACd,cAGNX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,4CACd,gBAKVX,EAAIS,GAAG,KACPT,EAAIY,OAAOC,QAAQ,sBAAsB,OACrCT,EAAG,iBAAkB,CAAEE,MAAO,CAAEC,GAAI,kBAAqB,CACvDH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,sBACd,cAGNX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,4BACd,gBAIRX,EAAIc,KACRd,EAAIS,GAAG,KACPT,EAAIY,OAAOC,QAAQ,sBAAsB,sBACrCT,EACE,iBACA,CAAEE,MAAO,CAAEC,GAAI,kCACf,CACEH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,sCACd,cAGNX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GACFV,EAAIW,GAAG,4CAET,gBAKVX,EAAIc,KACRd,EAAIS,GAAG,KACPT,EAAIY,OAAOC,QAAQ,sBAAsB,WACrCT,EAAG,iBAAkB,CAAEE,MAAO,CAAEC,GAAI,sBAAyB,CAC3DH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,0BACd,cAGNX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,gCACd,gBAIRX,EAAIc,KACRd,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CAAEE,MAAO,CAAEC,GAAI,oBAAuB,CACzDH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,wBACd,cAGNX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,8BACd,iBAKV,IAGJ,IAIJ,GAAOI,eAAgB,ECzFvB,ICnFmN,GDmFnN,CACA,6BACA,YACA,UACA,eACA,oBAEA,UACA,wBEpFI,GAAY,YACd,GACA,GHkKoB,IGhKpB,EACA,KACA,KACA,MAuBF,GAAUC,QAAQC,OAAS,6CACZ,U,QCtCX,GAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,QACA,CAAEE,MAAO,CAAE,eAAgB,KAC3B,CACEF,EAAG,MAAO,CAAEI,YAAa,oBAAsB,CAChC,OAAbR,EAAIwH,KACApH,EAAG,QAAS,CAAEI,YAAa,uBAAyB,CAClDJ,EAAG,QAAS,CACVA,EAAG,KAAM,CACPA,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,0BAC/BX,EAAIS,GAAG,KACPL,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIwH,KAAKC,YAEnCzH,EAAIS,GAAG,KACPT,EAAIwH,KAAKE,KACLtH,EAAG,KAAM,CACPA,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,yBAC/BX,EAAIS,GAAG,KACPL,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIwH,KAAKE,WAEnC1H,EAAIc,KACRd,EAAIS,GAAG,KACPT,EAAIwH,KAAKG,MACLvH,EAAG,KAAM,CACPA,EAAG,KAAM,CACPA,EACE,IACA,CAAEE,MAAO,CAAEc,KAAM,8BACjB,CACEpB,EAAIS,GACF,mBACET,EAAIU,GAAGV,EAAIW,GAAG,yBACd,sBAKVX,EAAIS,GAAG,KACPL,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIwH,KAAKG,YAEnC3H,EAAIc,KACRd,EAAIS,GAAG,KACPT,EAAIwH,KAAKI,SAASC,WACdzH,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GACFT,EAAIU,GACFV,EAAIW,GAAG,kDAIbX,EAAIS,GAAG,KACPL,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIwH,KAAKI,SAASC,iBAE5C7H,EAAIc,KACRd,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GACFT,EAAIU,GAAGV,EAAIW,GAAG,8CAGlBX,EAAIS,GAAG,KACPL,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIwH,KAAKI,SAASE,aAE5C9H,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GACFT,EAAIU,GAAGV,EAAIW,GAAG,8CAGlBX,EAAIS,GAAG,KACPL,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIwH,KAAKI,SAASG,aAE5C/H,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,6BAC/BX,EAAIS,GAAG,KACPL,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIwH,KAAKQ,eAEnChI,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,iCAEvBX,EAAIS,GAAG,KACPL,EACE,KACAJ,EAAIiI,GAAGjI,EAAIkI,gBAAgB,SAAS1G,GAClC,IAAI2G,EAAQ3G,EAAI2G,MACZC,EAAY5G,EAAI4G,UACpB,OAAOhI,EAAG,OAAQ,CAAEnB,IAAKkJ,GAAS,CAChC/H,EAAG,SAAU,CAACJ,EAAIS,GAAGT,EAAIU,GAAGyH,GAAS,QACrCnI,EAAIS,GAAG,IAAMT,EAAIU,GAAG0H,IACpBhI,EAAG,WAGP,KAGJJ,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,kCAEvBX,EAAIS,GAAG,KACPL,EACE,KACAJ,EAAIiI,GAAGjI,EAAIqI,iBAAiB,SAAS7G,GACnC,IAAI2G,EAAQ3G,EAAI2G,MACZ/C,EAAU5D,EAAI4D,QAClB,OAAOhF,EAAG,OAAQ,CAAEnB,IAAKkJ,GAAS,CAChC/H,EAAG,SAAU,CAACJ,EAAIS,GAAGT,EAAIU,GAAGyH,GAAS,QACrCnI,EAAIS,GAAG,IAAMT,EAAIU,GAAG0E,IACpBhF,EAAG,WAGP,KAGJJ,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,iCAEvBX,EAAIS,GAAG,KACPL,EACE,KACAJ,EAAIiI,GAAGjI,EAAIwH,KAAKc,YAAY,SAASC,GACnC,OAAOnI,EACL,MACA,CAAEnB,IAAKsJ,EAAMC,QACb,CACEpI,EAAG,SAAU,CACXJ,EAAIS,GACFT,EAAIU,GAAG6H,EAAMC,QACX,KACAxI,EAAIU,GAAG6H,EAAME,QACb,QAGNzI,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CAAEE,MAAO,CAAEiI,MAAOA,KACvCnI,EAAG,OAEL,MAGJ,KAGJJ,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,kCAEvBX,EAAIS,GAAG,KACPL,EACE,KACA,CACEA,EAAG,iBAAkB,CACnBE,MAAO,CAAEiI,MAAOvI,EAAIwH,KAAKkB,gBAG7B,KAGJ1I,EAAIS,GAAG,KACPT,EAAIwH,KAAKmB,UACLvI,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,gCAEvBX,EAAIS,GAAG,KACPL,EACE,KACA,CACEA,EAAG,iBAAkB,CACnBE,MAAO,CAAEiI,MAAOvI,EAAIwH,KAAKmB,cAG7B,KAGJ3I,EAAIc,KACRd,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,6BAC/BX,EAAIS,GAAG,KACPL,EAAG,KAAM,CAACA,EAAG,qBAAsB,KAErCJ,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,2BAC/BX,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,sBAAwBX,EAAInB,gBAKzDmB,EAAIc,OAEVd,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,WAChBoB,GAAI,CACFC,MAAO,SAASC,GACd,OAAOxC,EAAI4I,yBAIjB,CACE5I,EAAIS,GACF,SAAWT,EAAIU,GAAGV,EAAIW,GAAG,iCAAmC,WAKpE,IAIJ,GAAOI,eAAgB,ECtOvB,IAAI,GAAS,WACX,IAAIf,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOF,EAAI6I,QACPzI,EAAG,OAAQ,CACTA,EAAG,SAAU,CACXJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,+BAAiC,QAExDX,EAAIS,GAAG,OAAST,EAAIU,GAAGV,EAAI8I,UAAUC,SACrC3I,EAAG,MACHJ,EAAIS,GAAG,KACPL,EAAG,SAAU,CACXJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,4BAA8B,QAErDX,EAAIS,GAAG,OAAST,EAAIU,GAAGV,EAAI8I,UAAUE,UACrC5I,EAAG,MACHJ,EAAIS,GAAG,KACPL,EAAG,SAAU,CACXJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,6BAA+B,QAEtDX,EAAIS,GAAG,IAAMT,EAAIU,GAAGV,EAAIiJ,OAAOC,MAC/B9I,EAAG,MACHJ,EAAIS,GAAG,KACPL,EAAG,SAAU,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,uBAAyB,QAC5DX,EAAIS,GACF,OACET,EAAIU,GAAGV,EAAIiJ,OAAOE,WAClB,KACAnJ,EAAIU,GAAGV,EAAIiJ,OAAOG,SAClB,KAEJhJ,EAAG,MACHJ,EAAIS,GAAG,KACPL,EAAG,SAAU,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,wBAA0B,QAC7DX,EAAIS,GAAG,OAAST,EAAIU,GAAGV,EAAIqJ,YAAYC,SACvClJ,EAAG,MACHJ,EAAIS,GAAG,KACPT,EAAIqJ,YAAYE,MAAMC,OAClBpJ,EAAG,OAAQ,CACTA,EAAG,SAAU,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,8BACnCX,EAAIS,GAAG,SAAWT,EAAIU,GAAGV,EAAIqJ,YAAYE,MAAMC,QAAU,UAE3DxJ,EAAIqJ,YAAYE,MAAME,YACtBrJ,EAAG,OAAQ,CACTA,EAAG,SAAU,CACXJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,mCAEvBX,EAAIS,GACF,SAAWT,EAAIU,GAAGV,EAAIqJ,YAAYE,MAAME,aAAe,UAG3DzJ,EAAIc,KACRd,EAAIS,GAAG,KACPL,EAAG,SAAU,CACXJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,4BAA8B,QAErDX,EAAIS,GAAG,OAAST,EAAIU,GAAGV,EAAIiJ,OAAOS,gBAClCtJ,EAAG,QAELA,EAAG,OAAQ,CACTJ,EAAIS,GAAG,OAAST,EAAIU,GAAGV,EAAIW,GAAG,0BAA4B,SAIlE,GAAOI,eAAgB,EC7DvB,IAyOe,OAzOqB,WAChC,SAAS4I,KAsOT,OAhOAA,EAAepN,UAAUqN,YAAc,SAAUA,GAC7C,IAAIC,EAAO,CACP,MAAS,4BACT,KAAQ,CACJ,IAAO,CACH,iBAAoBD,EAAYE,iBAChC,qBAAwBF,EAAYG,qBACpC,sBAAyBH,EAAYI,sBACrC,cAAiBJ,EAAYK,eAEjC,eAAiB,IAYzB,OATIL,EAAYM,gBACZ5N,OAAO6N,OAAON,EAAKhO,KAAKuO,IAAK,CAAE,eAAkBR,EAAYM,iBAE7DN,EAAYS,qBACZ/N,OAAO6N,OAAON,EAAKhO,KAAKuO,IAAK,CAAE,oBAAuBR,EAAYS,sBAElET,EAAYU,gBACZhO,OAAO6N,OAAON,EAAKhO,KAAKuO,IAAK,CAAE,eAAkBR,EAAYU,iBAE1DnH,EAAA,EAAMoH,SAAS,cAAeV,IAMzCF,EAAepN,UAAUiO,UAAY,SAAUpF,GAC3C,OAAOjC,EAAA,EAAMoH,SAAS,cAAe,CACjC,MAAS,8BACT,KAAQ,CACJ,OAAU,EACV,IAAO,CACH,WAAcnF,GAElB,eAAiB,MAU7BuE,EAAepN,UAAUkO,iBAAmB,SAAUrF,EAASsF,EAAQC,GACnE,OAAOxH,EAAA,EAAMoH,SAAS,cAAe,CACjC,MAAS,6BACT,KAAQ,CACJ,OAAU,EACV,IAAO,CACH,WAAcnF,EACd,iBAAoBsF,EACpB,mBAAsBC,GAE1B,eAAiB,MAQ7BhB,EAAepN,UAAUqO,cAAgB,SAAUC,GAC/C,OAAIA,EACO1H,EAAA,EAAMoH,SAAS,cAAe,CACjC,MAAS,qCACT,KAAQ,CACJ,IAAO,CACH,KAAQ,EACR,MAAS,IAEb,eAAiB,KAKlBtK,KAAK6K,WAAW,KAAK,IAQpCnB,EAAepN,UAAUwO,UAAY,SAAUC,EAASC,GACpD,OAAO9H,EAAA,EAAMoH,SAAS,cAAe,CACjC,MAAS,iCACT,KAAQ,CACJ,OAAU,EACV,IAAO,CACH,KAAQ,EACR,MAAS,CACL,QAAWS,EACX,QAAWC,IAGnB,eAAiB,MAQ7BtB,EAAepN,UAAU2O,gBAAkB,SAAU9F,GACjD,OAAOjC,EAAA,EAAMoH,SAAS,cAAe,CACjC,MAAS,gCACT,KAAQ,CACJ,OAAU,EACV,IAAO,CACH,WAAcnF,EACd,qBAAuB,GAE3B,eAAiB,MAO7BuE,EAAepN,UAAU4O,UAAY,WACjC,OAAOhI,EAAA,EAAMoH,SAAS,cAAe,CACjC,MAAS,qCACT,KAAQ,CACJ,IAAO,CACH,KAAQ,EACR,MAAS,IAEb,eAAiB,MAO7BZ,EAAepN,UAAU6O,cAAgB,WACrC,OAAOjI,EAAA,EAAMoH,SAAS,cAAe,CACjC,MAAS,yCACT,KAAQ,CACJ,IAAO,CACH,KAAQ,EACR,MAAS,IAEb,eAAiB,MAO7BZ,EAAepN,UAAU8O,KAAO,WAC5B,OAAOlI,EAAA,EAAMoH,SAAS,cAAe,CACjC,MAAS,oBACT,KAAQ,CACJ,IAAO,CACH,KAAQ,EACR,MAAS,CACL,WAAc,EACd,SAAY,CAAC,EAAG,IAEpB,eAAiB,OAUjCZ,EAAepN,UAAUuO,WAAa,SAAUQ,EAAMT,GAClD,OAAIA,EACO1H,EAAA,EAAMoH,SAAS,cAAe,CACjC,MAAS,kCACT,KAAQ,CACJ,IAAO,CACH,KAAQ,EACR,MAAS,CACL,SAAYe,IAGpB,eAAiB,KAKlBnI,EAAA,EAAMoH,SAAS,cAAe,CACjC,MAAS,2BACT,KAAQ,CACJ,OAAU,EACV,IAAO,CACH,WAAce,GAElB,eAAiB,MASjC3B,EAAepN,UAAUgP,SAAW,SAAU1B,GAC1C,OAAO1G,EAAA,EAAMoH,SAAS,cAAeV,IAOzCF,EAAepN,UAAUiP,qBAAuB,SAAUpG,EAASqG,GAG/D,cAFOA,EAAcC,OACrBD,EAAcE,WAAavG,EACpBjC,EAAA,EAAMoH,SAAS,cAAe,CACjC,MAAS,4BACT,KAAQ,CACJ,OAAU,EACV,IAAOkB,EACP,eAAiB,MAItB9B,EAvOwB,ICJ0K,GC6B7M,CACA,uBACA,KAFA,WAGA,OACA,iBACA,WACA,YACA,iBAGA,QAVA,WAUA,WACA,oDACA,gCACA,kDAGA,IACA,yBACA,sCACA,kBACA,+BACA,aACA,SACA,iBAGA,uBAEA,cA5BA,WA6BA,qBCnDI,GAAY,YACd,GACA,GJuDoB,IIrDpB,EACA,KACA,KACA,MAuBF,GAAU3I,QAAQC,OAAS,4CACZ,U,QCRA,OA1BwB,WACnC,SAAS2K,KAuBT,OAlBAA,EAAkBrP,UAAUgC,IAAM,WAC9B,OAAO0B,KAAK4L,IAAI,KAMpBD,EAAkBrP,UAAUsP,IAAM,SAAUC,GACxC,OAAO3I,EAAA,EAAMoH,SAAS,cAAe,CACjC,MAAS,iBACT,KAAQ,CACJ,IAAO,CACH,SAAYuB,GAEhB,eAAiB,MAItBF,EAxB2B,IC0CvB,OAzCqB,WAChC,SAASG,KAsCT,OAjCAA,EAAexP,UAAUyP,sBAAwB,WAC7C,OAAO,EAAA/H,EAAM1F,IAAI,cAAe,CAAE4F,QAAS,OAAAC,EAAA,KAAuB6H,aAAc,UAKpFF,EAAexP,UAAU2P,QAAU,WAC/B,OAAO,EAAAjI,EAAM1F,IAAI,eAAgB,CAAE4F,QAAS,OAAAC,EAAA,QAKhD2H,EAAexP,UAAU4P,aAAe,WACpC,OAAO,EAAAlI,EAAM1F,IAAI,cAAe,CAAE4F,QAAS,OAAAC,EAAA,QAK/C2H,EAAexP,UAAU6P,cAAgB,WACrC,OAAO,EAAAnI,EAAM1F,IAAI,eAAgB,CAAE4F,QAAS,OAAAC,EAAA,KAAuB6H,aAAc,UAKrFF,EAAexP,UAAU8P,gBAAkB,WACvC,OAAO,EAAApI,EAAMC,KAAK,mBAAoB,KAAM,CAAEC,QAAS,OAAAC,EAAA,QAK3D2H,EAAexP,UAAU+P,cAAgB,WACrC,OAAO,EAAArI,EAAMC,KAAK,iBAAkB,KAAM,CAAEC,QAAS,OAAAC,EAAA,QAElD2H,EAvCwB,ICL/B,GAAS,WACX,IAAI/L,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EAAG,MAAO,CAAEI,YAAa,SAAW,CACzCR,EAAIS,GACF,OACET,EAAIU,GAAGV,EAAIW,GAAG,6BACd,OACAX,EAAIU,GAAGV,EAAIuI,MAAMgE,MACjB,MACAvM,EAAIU,GAAGV,EAAIuI,MAAMpH,MACjB,QAEJf,EAAG,MAAO,CAAEI,YAAa,YAAc,CACrCJ,EACE,MACA,CACEI,YAAa,kCACbgM,MAAO,CAAEC,MAAOzM,EAAIuI,MAAMA,OAC1BjI,MAAO,CAAEoM,KAAM,gBAEjB,CACE1M,EAAIS,GACF,WACET,EAAIU,GAAGV,EAAIuI,MAAMgE,MACjB,KACAvM,EAAIU,GAAGV,EAAIuI,MAAMA,OACjB,kBAQd,GAAOxH,eAAgB,ECnBvB,ICjB2M,GDiB3M,CACA,qBACA,OACA,OACA,YACA,eEdI,I,OAAY,YACd,GACA,GHyBoB,IGvBpB,EACA,KACA,WACA,OAuBF,GAAUC,QAAQC,OAAS,0CACZ,U,QCvCR,SAAS0L,GAAetJ,EAAUuJ,EAAaC,GAClD,IAAIC,EAAqBzJ,EAASc,QAAQ,uBAC1C,GAAI2I,EAAoB,CACpB,IAAIC,EAAgBD,EAAmBE,MAAM,mBAChB,IAAzBD,EAAc1Q,SACdwQ,EAAWE,EAAc,IAGjC,IAAIE,EAAO,IAAIC,KAAK,CAAC7J,EAASxH,MAAO,CAAEqK,KAAM0G,IACzCO,EAAU3N,OAAO4N,IAAIC,gBAAgBJ,GACrCK,EAAOC,SAASC,cAAc,KAIlC,OAHAF,EAAKlM,KAAO+L,EACZG,EAAKG,aAAa,WAAYZ,GAC9BU,SAASG,KAAKC,YAAYL,GACnBA,E,qhCCmFX,ICjGyM,GDiGzM,CACA,mBACA,uEACA,KAHA,WAIA,OACA,iBACA,UACA,iBAGA,UACA,eADA,WAEA,IADA,EACA,KADA,KAEA,sBAFA,IAEA,0CACA,sBAGA,QACA,aACA,sCARA,8BAWA,UAEA,gBAdA,WAeA,IADA,EACA,KADA,KAEA,sBAFA,IAEA,0CACA,qBAGA,QACA,aACA,wBARA,8BAWA,WAGA,QAtCA,WAsCA,WACA,mCACA,oDACA,6BAIA,gCACA,mCAGA,IACA,mCACA,SACA,uBAVA,YAaA,sDACA,SAEA,aACA,MACA,YACA,cACA,mCAGA,6DAEA,cAnEA,WAoEA,oBAEA,SACA,oBADA,WACA,WACA,mCACA,iCACA,YACA,6DACA,gCACA,aAEA,8DAGA,UACA,6BE7KI,GAAY,YACd,GACA,Gf4NoB,Ie1NpB,EACA,KACA,KACA,MAuBF,GAAUtM,QAAQC,OAAS,mCACZ,U,QCtCX,GAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOF,EAAI4N,IACPxN,EACE,QACA,CAAEE,MAAO,CAAE,eAAgB,KAC3B,CACEF,EAAG,MAAO,CAAEI,YAAa,OAAS,CAACR,EAAIS,GAAGT,EAAIU,GAAGV,EAAI4N,QACrD5N,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,QAChBoB,GAAI,CACFC,MAAO,SAASC,GACd,OAAOxC,EAAI6N,qBAIjB,CAAC7N,EAAIS,GAAG,SAAWT,EAAIU,GAAGV,EAAIW,GAAG,yBAA2B,WAGhE,GAEFX,EAAIc,MAGV,GAAOC,eAAgB,ECfvB,ICd6M,GDc7M,CACA,uBACA,YACA,YACA,WAEA,KANA,WAOA,OACA,WAGA,QAXA,WAWA,WACA,mCACA,kBACA,MACA,YACA,aACA,mCAGA,mBACA,gCACA,YACA,4BACA,qEAKA,SACA,gBADA,WACA,WACA,mCACA,yBACA,YACA,sDACA,gCACA,aAEA,8DAGA,UACA,4BEjDI,GAAY,YACd,GACA,GHmBoB,IGjBpB,EACA,KACA,KACA,MAuBF,GAAUC,QAAQC,OAAS,uCACZ,U,QCtCX,GAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EAAG,QAAS,CAAEE,MAAO,CAAE,eAAgB,KAAQ,CACpDF,EAAG,QAAS,CAAEI,YAAa,uBAAyB,CAClDJ,EAAG,KAAM,CACPA,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,2BAC/BX,EAAIS,GAAG,KACPL,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,sBAAwBX,EAAInB,cAG/DmB,EAAIS,GAAG,KACM,YAAbT,EAAInB,KACAuB,EACE,MACA,CACEA,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,WAChBoB,GAAI,CACFC,MAAO,SAASC,GACd,OAAOxC,EAAI8N,QAAQ,kBAIzB,CACE9N,EAAIS,GACF,WACET,EAAIU,GAAGV,EAAIW,GAAG,mCACd,YAIRX,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,WAChBoB,GAAI,CACFC,MAAO,SAASC,GACd,OAAOxC,EAAI8N,QAAQ,cAIzB,CACE9N,EAAIS,GACF,WACET,EAAIU,GAAGV,EAAIW,GAAG,+BACd,YAIRX,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,WAChBoB,GAAI,CACFC,MAAO,SAASC,GACd,OAAOxC,EAAI8N,QAAQ,iBAIzB,CACE9N,EAAIS,GACF,WACET,EAAIU,GAAGV,EAAIW,GAAG,kCACd,aAKV,GAEFX,EAAIc,QAIZ,GAAOC,eAAgB,ECtDvB,IC1BwM,GD0BxM,CACA,kBACA,YACA,YACA,WAEA,KANA,WAOA,OACA,UACA,iBAGA,QAZA,WAYA,WACA,oDACA,6BAIA,gCACA,mCAGA,IACA,mCACA,SACA,iBACA,kDAGA,YAEA,SACA,iBACA,eACA,YACA,kBApBA,eAwBA,sDACA,gBAGA,cA3CA,WA4CA,oBAEA,SACA,QADA,WAEA,UAEA,QAJA,SAIA,GACA,YAGA,UACA,6BE1EI,GAAY,YACd,GACA,GHsEoB,IGpEpB,EACA,KACA,KACA,MAuBF,GAAUC,QAAQC,OAAS,kCACZ,U,QCtCX,GAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,QACA,CAAEE,MAAO,CAAE,eAAgB,KAC3B,CACEF,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,UAChBoB,GAAI,CACFC,MAAO,SAASC,GACd,OAAOxC,EAAI+N,cAIjB,CACE3N,EAAG,QAAS,CACVE,MAAO,CAAEX,QAASK,EAAIgO,SAASC,KAAKC,mBAEtClO,EAAIS,GACF,SAAWT,EAAIU,GAAGV,EAAIW,GAAG,iCAAmC,SAGhE,GAEFX,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,WAChBoB,GAAI,CACFC,MAAO,SAASC,GACd,OAAOxC,EAAImO,YAIjB,CACE/N,EAAG,QAAS,CAAEE,MAAO,CAAEX,QAASK,EAAIgO,SAASC,KAAKG,aAClDpO,EAAIS,GACF,SAAWT,EAAIU,GAAGV,EAAIW,GAAG,+BAAiC,SAG9D,IAGJ,IAIJ,GAAOI,eAAgB,E,iCCpDmL,GCkB1M,CACA,oBACA,YACA,YACA,UACA,YAEA,SACA,SADA,WACA,WACA,qBACA,iBACA,iBACA,uDAIA,OATA,WASA,WACA,mBACA,iBACA,iBACA,sDAKA,MACA,qBACA,gBAEA,UACA,8BCzCI,GAAY,YACd,GACA,GH0CoB,IGxCpB,EACA,KACA,KACA,MAuBF,GAAUC,QAAQC,OAAS,oCACZ,U,QCtCX,GAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EAAG,QAAS,CAAEE,MAAO,CAAE,eAAgB,KAAQ,CACnDN,EAAIwG,SAAYxG,EAAIyG,YAkIjBzG,EAAIc,KAjIJV,EACE,MACA,CACGJ,EAAI0G,QAmBD1G,EAAIc,KAlBJV,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,WAChBoB,GAAI,CACFC,MAAO,SAASC,GACd,OAAOxC,EAAIuE,YAIjB,CACEvE,EAAIS,GACF,WACET,EAAIU,GAAGV,EAAIW,GAAG,2BACd,YAKZX,EAAIS,GAAG,KACPT,EAAI0G,QACAtG,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,UAChBoB,GAAI,CACFC,MAAO,SAASC,GACd,OAAOxC,EAAIsE,aAIjB,CACEtE,EAAIS,GACF,WACET,EAAIU,GAAGV,EAAIW,GAAG,4BACd,YAIRX,EAAIc,KACRd,EAAIS,GAAG,KACNT,EAAI2G,OAmBD3G,EAAIc,KAlBJV,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,WAChBoB,GAAI,CACFC,MAAO,SAASC,GACd,OAAOxC,EAAI0E,WAIjB,CACE1E,EAAIS,GACF,WACET,EAAIU,GAAGV,EAAIW,GAAG,0BACd,YAKZX,EAAIS,GAAG,KACPT,EAAI2G,OACAvG,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,UAChBoB,GAAI,CACFC,MAAO,SAASC,GACd,OAAOxC,EAAI2E,UAIjB,CACE3E,EAAIS,GACF,WACET,EAAIU,GAAGV,EAAIW,GAAG,yBACd,YAIRX,EAAIc,KACRd,EAAIS,GAAG,KACPT,EAAI2G,OACAvG,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,WAChBoB,GAAI,CACFC,MAAO,SAASC,GACd,OAAOxC,EAAIyE,aAIjB,CACEzE,EAAIS,GACF,WACET,EAAIU,GAAGV,EAAIW,GAAG,4BACd,YAIRX,EAAIc,KACRd,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,aAChBoB,GAAI,CACFC,MAAO,SAASC,GACd,OAAOxC,EAAIqO,mBAIjB,CACErO,EAAIS,GACF,WACET,EAAIU,GAAGV,EAAIW,GAAG,2BACd,aAKV,GAGNX,EAAIS,GAAG,KACPL,EAAG,MACHJ,EAAIS,GAAG,KACPL,EAAG,SAAU,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,mBAAqB,QACxDX,EAAIS,GAAG,KACPT,EAAIwG,QACApG,EAAG,OAAQ,CACTJ,EAAIS,GAAG,SAAWT,EAAIU,GAAGV,EAAIW,GAAG,2BAA6B,UAE/DX,EAAIc,KACRd,EAAIS,GAAG,KACPT,EAAIyG,YACArG,EAAG,OAAQ,CACTJ,EAAIS,GACF,SAAWT,EAAIU,GAAGV,EAAIW,GAAG,+BAAiC,UAG9DP,EAAG,OAAQ,CACTJ,EAAIS,GACF,SACET,EAAIU,GACFV,EAAIW,GACF,mBAAqBX,EAAI0G,QAAU,UAAY,cAGnD,UACA1G,EAAIU,GACFV,EAAIW,GAAG,mBAAqBX,EAAI2G,OAAS,SAAW,cAEtD,UAGV3G,EAAIS,GAAG,KACPL,EAAG,MACHA,EAAG,MACHJ,EAAIS,GAAG,KACPT,EAAIsD,OACAlD,EAAG,MAAO,CAAEI,YAAa,OAAS,CAACR,EAAIS,GAAGT,EAAIU,GAAGV,EAAIsD,WACrDtD,EAAIc,QAIZ,GAAOC,eAAgB,ECvIvB,QACA,0BACA,sBACA,0BACA,MACA,uBAGA,IACA,kDACA,kDACA,UACA,4CCvD4M,GD0D5M,CACA,sBACA,YACA,YACA,WAEA,OACA,aACA,YACA,cAGA,KAZA,WAaA,OACA,UACA,WACA,WACA,YACA,iBAGA,OACA,wBACA,mCACA,mBACA,mBAGA,QA5BA,WA6BA,mCACA,kBAEA,SACA,OADA,WACA,WACA,mCACA,2BACA,qDACA,yBAEA,QAPA,WAOA,WACA,mCACA,4BACA,sDACA,yBAEA,UAbA,WAaA,WACA,kCAOA,OANA,oBACA,iBACA,wCACA,kBACA,yDAIA,8BACA,kBACA,iBACA,uBACA,yBACA,uBACA,mCAEA,yBAEA,YAjCA,SAiCA,GACA,mCACA,iBACA,iBACA,gBACA,wEAEA,gBACA,6CACA,oBACA,0EAGA,cA9CA,SA8CA,GACA,iBACA,oBACA,oDACA,aAGA,cArDA,WAsDA,mCACA,kBAEA,QAzDA,WAyDA,WACA,mCACA,4BACA,sDACA,yBAEA,MA/DA,WA+DA,WACA,mCACA,0BACA,oDACA,yBAEA,KArEA,WAqEA,WACA,mCACA,yBACA,mDACA,0BAGA,iBA5GA,SA4GA,OACA,eACA,6BACA,OACA,4CACA,eACA,gEAEA,4BAIA,SAxHA,WAyHA,OACA,oCACA,qCACA,+BE/KI,GAAY,YACd,GACA,GHwKoB,IGtKpB,EACA,KACA,KACA,MAuBF,GAAUC,QAAQC,OAAS,sCACZ,U,QCtCX,GAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,MACA,CAAEI,YAAa,qCACf,CACEJ,EACE,aACA,CACEA,EACE,OACA,CAAEI,YAAa,0BACf,CACEJ,EACE,OACA,CAAEE,MAAO,CAAEgO,GAAI,MACf,CACElO,EAAG,MAAO,CAAEI,YAAa,oBAAsB,CAC7CJ,EAAG,MAAO,CACRI,YAAa,eACbF,MAAO,CACLiO,IAAKvO,EAAIW,GAAG,cACZ6N,IAAK,0BAIXxO,EAAIS,GAAG,KACPL,EACE,QACA,CAAEI,YAAa,OACf,CACEJ,EACE,YACA,CACEA,EAAG,qBAAsB,CACvBiB,YAAarB,EAAIsB,GAAG,CAClB,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAIC,EAAUD,EAAIC,QAClB,MAAO,CACLrB,EACE,QACA,CACEkC,GAAI,CACF0E,OAAQ,SAASxE,GAEf,OADAA,EAAOC,iBACAzC,EAAIyO,aAAajM,MAI9B,CACEpC,EACE,KACA,CAAEI,YAAa,eACf,CACER,EAAIS,GACF,uBACET,EAAIU,GACFV,EAAIW,GAAG,uBAET,wBAIRX,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,WACP,kBAAmB,CACjBC,SACE,mCAGNN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAIM,EAAQN,EAAIM,MACZD,EAAUL,EAAIK,QACdD,EAASJ,EAAII,OACjB,MAAO,CACLxB,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,yBAEF+N,YAAa1O,EAAIW,GACf,yBAEFgO,aACE,WACF,WAAY9M,EACRC,EACA,KACJ,mBAAoB9B,EAAIW,GACtBiB,EAAO,KAGXP,YAAarB,EAAIsB,GACf,CACE,CACErC,IACE,kBACFsC,GAAI,WACF,MAAO,CACLnB,EAAG,QAAS,CACVE,MAAO,CACLX,QACEK,EACGgO,SACAY,MACAC,UAKb1H,OAAO,IAGX,MACA,GAEFnF,MAAO,CACLrD,MAAOqB,EAAIwF,SACXtD,SAAU,SACRC,GAEAnC,EAAIwF,SAAWrD,GAEjBC,WAAY,kBAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,WACP,kBAAmB,CACjBC,SACE,mCAGNN,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAIM,EAAQN,EAAIM,MACZD,EAAUL,EAAIK,QACdD,EAASJ,EAAII,OACjB,MAAO,CACLxB,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,yBAEF+N,YAAa1O,EAAIW,GACf,yBAEFuF,KAAM,WACNyI,aACE,WACF,WAAY9M,EACRC,EACA,KACJ,mBAAoB9B,EAAIW,GACtBiB,EAAO,KAGXP,YAAarB,EAAIsB,GACf,CACE,CACErC,IACE,kBACFsC,GAAI,WACF,MAAO,CACLnB,EAAG,QAAS,CACVE,MAAO,CACLX,QACEK,EACGgO,SACAY,MACAE,UAKb3H,OAAO,IAGX,MACA,GAEFnF,MAAO,CACLrD,MAAOqB,EAAIyF,SACXvD,SAAU,SACRC,GAEAnC,EAAIyF,SAAWtD,GAEjBC,WAAY,kBAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CACLY,MAAO,UACPgF,KAAM,SACN7D,SAAUZ,IAGd,CACEzB,EAAIS,GACF,uBACET,EAAIU,GACFV,EAAIW,GAAG,sBAET,yBAKV,WAQd,IAGJ,IAGJ,IAGJ,IAGJ,IAGJ,IAIJ,GAAOI,eAAgB,E,sDC9QuK,GCuE9L,CACA,cACA,YACA,gBACA,UACA,cACA,UACA,UACA,WACA,WACA,UACA,uBACA,wBAEA,KAdA,WAeA,OACA,YACA,YACA,eAGA,QArBA,WAsBA,6BAEA,SACA,aADA,WACA,WACA,aACA,oFACA,yCAEA,iBACA,oBACA,iBACA,qDAGA,kBACA,eACA,0DACA,eAGA,oBAGA,OACA,UACA,WAEA,UACA,6BCjHI,I,OAAY,YACd,GACA,GHmQoB,IGjQpB,EACA,KACA,WACA,OAuBF,GAAUC,QAAQC,OAAS,2BACZ,U,QCvCX,GAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,QACA,CAAEE,MAAO,CAAE,eAAgB,KAC3B,CACEF,EACE,aACA,CACEA,EAAG,iBAAkB,CAAEE,MAAO,CAAEC,GAAI,uBAA0B,CAC5DH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,6BACd,cAGNX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,mCACd,gBAIRX,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CAAEE,MAAO,CAAEC,GAAI,wBAA2B,CAC7DH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,2BACd,cAGNX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,iCACd,gBAIRX,EAAIS,GAAG,KACPT,EAAIY,OAAOC,QAAQ,sBAAsB,YACrCT,EAAG,iBAAkB,CAAEE,MAAO,CAAEC,GAAI,wBAA2B,CAC7DH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,2BACd,cAGNX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,iCACd,gBAIRX,EAAIc,KACRd,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CAAEE,MAAO,CAAEC,GAAI,wBAA2B,CAC7DH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,kCACd,cAGNX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,wCACd,gBAIRX,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CAAEE,MAAO,CAAEC,GAAI,sBAAyB,CAC3DH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,iCACd,cAGNX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,uCACd,gBAIRX,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CAAEE,MAAO,CAAEC,GAAI,uBAA0B,CAC5DH,EAAG,SAAU,CAAEI,YAAa,2BAA6B,CACvDR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,2BACd,cAGNX,EAAIS,GAAG,KACPL,EAAG,IAAK,CAAEI,YAAa,wBAA0B,CAC/CR,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,iCACd,iBAKV,IAGJ,IAIJ,GAAOI,eAAgB,ECnEvB,IC7DmN,GD6DnN,CACA,6BACA,YACA,UACA,eACA,oBAEA,UACA,wBE9DI,GAAY,YACd,GACA,GHsHoB,IGpHpB,EACA,KACA,KACA,MAuBF,GAAUC,QAAQC,OAAS,6CACZ,U,QCtCX,GAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,YAAwB6O,IAAjB/O,EAAIqD,SACPjD,EACE,MACA,CACEA,EACE,QACA,CACEA,EAAG,cAAe,CAChBJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,sCAEvBX,EAAIS,GAAG,KACPL,EAAG,YAAa,CACdA,EAAG,QAAS,CAAEI,YAAa,uBAAyB,CAClDJ,EAAG,QAAS,CACVA,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,sCAEvBX,EAAIS,GAAG,KACPL,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIqD,SAASsI,iBAEvC3L,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,iCAEvBX,EAAIS,GAAG,KACPL,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIgP,eAAeC,YAE7CjP,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GACFT,EAAIU,GAAGV,EAAIW,GAAG,wCAGlBX,EAAIS,GAAG,KACPL,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIqD,SAAS6L,mBAEvClP,EAAIS,GAAG,UACSsO,IAAhB/O,EAAImP,QACA/O,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GACFT,EAAIU,GAAGV,EAAIW,GAAG,mCAGlBX,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,IAAK,CAAEE,MAAO,CAAEc,KAAMpB,EAAImP,QAAQC,WAAc,CACjDpP,EAAIS,GAAGT,EAAIU,GAAGV,EAAImP,QAAQjR,aAIhC8B,EAAIc,KACRd,EAAIS,GAAG,UACSsO,IAAhB/O,EAAImP,QACA/O,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GACFT,EAAIU,GAAGV,EAAIW,GAAG,mCAGlBX,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,MAAO,CACRI,YAAa,iBACbF,MAAO,CACLiO,IAAKvO,EAAIqD,SAAS8L,QAClBX,IAAKxO,EAAImP,QAAQE,eAKzBjP,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GACFT,EAAIU,GAAGV,EAAIW,GAAG,mCAGlBX,EAAIS,GAAG,KACPL,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIqD,SAAS8L,qBAMnD,GAEFnP,EAAIS,GAAG,KACPL,EACE,QACA,CACEA,EAAG,cAAe,CAChBJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,kCAEvBX,EAAIS,GAAG,KACPL,EACE,YACA,CACEA,EAAG,QAAS,CAAEI,YAAa,uBAAyB,CAClDJ,EAAG,QAAS,CACVA,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,kCAEvBX,EAAIS,GAAG,KACPL,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIsP,OAAOxG,UAAUC,aAE/C/I,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,+BAEvBX,EAAIS,GAAG,KACPL,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIsP,OAAOpG,UAErClJ,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GACFT,EAAIU,GAAGV,EAAIW,GAAG,qCAGlBX,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPJ,EAAIS,GACFT,EAAIU,GAAGV,EAAIsP,OAAOnG,WAChB,KACAnJ,EAAIU,GAAGV,EAAIsP,OAAOlG,SAClB,SAIRpJ,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GACFT,EAAIU,GAAGV,EAAIW,GAAG,sCAGlBX,EAAIS,GAAG,KACPL,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIgP,eAAe1F,aAE7CtJ,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,kCAEvBX,EAAIS,GAAG,KACPT,EAAIgP,eAAezF,MAAMgG,UACrBnP,EACE,KACA,CACEA,EAAG,QAAS,CACVI,YAAa,aACbF,MAAO,CACLiO,IAAK,MACLC,IAAK,wBAGTxO,EAAIS,GAAG,KACPL,EAAG,SAAU,CACXJ,EAAIS,GACFT,EAAIU,GACFV,EAAIW,GAAG,wCAKf,GAEFX,EAAIgP,eAAezF,MAAMiG,SACzBpP,EACE,KACA,CACEA,EAAG,QAAS,CACVI,YAAa,aACbF,MAAO,CAAEiO,IAAK,KAAMC,IAAK,uBAE3BxO,EAAIS,GAAG,KACPL,EAAG,SAAU,CACXJ,EAAIS,GACFT,EAAIU,GACFV,EAAIW,GAAG,uCAKf,GAEFX,EAAIc,OAEVd,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,gCAEvBX,EAAIS,GAAG,KACPL,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIsP,OAAOG,WAErCzP,EAAIS,GAAG,KACPL,EAAG,KAAM,CACPA,EAAG,KAAM,CACPJ,EAAIS,GACFT,EAAIU,GAAGV,EAAIW,GAAG,yCAGlBX,EAAIS,GAAG,KACPL,EAAG,KAAM,CAACJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIsP,OAAO5F,wBAIzC1J,EAAIS,GAAG,KACPL,EACE,UACA,CAAEE,MAAO,CAAEY,MAAO,UAAWX,GAAI,sBACjC,CACEP,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,6BACd,eAKV,IAGJ,IAGJ,GAEFP,EAAG,QAGT,GAAOW,eAAgB,EChPvB,IAYe,OAZqB,WAChC,SAAS2O,KAST,OAHAA,EAAenT,UAAUgC,IAAM,SAAUoR,GACrC,OAAO,EAAA1L,EAAM1F,IAAI,oDAAsDoR,IAEpED,EAVwB,ICE5B,SAASE,GAAQjM,EAAStH,GAC7B,OAAOwT,YAAW,WACd1M,EAAA,EAAMC,OAAO,gBACb,UAAIG,OAAOL,MAAMM,EAAK5E,EAAE+E,GAASF,cAClCpH,GC2FP,IClG+M,GDkG/M,CACA,yBACA,YACA,YACA,UACA,cACA,gBACA,YAEA,OACA,SACA,YACA,YACA,YAGA,KAhBA,WAiBA,OACA,gBACA,cACA,sBACA,iBAGA,QAxBA,WAwBA,WACA,wCACA,mCACA,kCAEA,oDACA,4BAGA,OAFA,qCACA,8BAOA,GAJA,0BACA,oDACA,0DAEA,6BACA,kDADA,CAIA,wBACA,gCACA,gBACA,qBAKA,OAJA,yCACA,eACA,yDAIA,iBACA,IACA,aACA,yCACA,kBACA,+BACA,kBACA,oBAEA,wBACA,yCAGA,eACA,2DACA,qBAMA,cA1EA,WA2EA,oBAEA,UACA,oCExKI,I,OAAY,YACd,GACA,GLsOoB,IKpOpB,EACA,KACA,WACA,OAuBF,GAAU2E,QAAQC,OAAS,yCACZ,U,QCvCX,GAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,OACA,CACEA,EACE,OACA,CAAEE,MAAO,CAAEwP,GAAI,MACf,CACE1P,EACE,QACA,CACEA,EACE,QACA,CAAEE,MAAO,CAAEyP,QAAS,OAAQ,aAAc/P,EAAIgQ,YAC9C,CACE5P,EACE,OACA,CAAEE,MAAO,CAAE2P,MAAO,WAClB,CACE7P,EAAG,iBAAkB,CACnBkC,GAAI,CAAE,iBAAkBtC,EAAIkQ,iBAE9BlQ,EAAIS,GAAG,KACPL,EAAG,mBAAoB,CACrBkC,GAAI,CAAE,iBAAkBtC,EAAIkQ,kBAGhC,GAEFlQ,EAAIS,GAAG,KACPL,EACE,OACA,CAAEE,MAAO,CAAE2P,MAAO,gBAClB,CACE7P,EAAG,cAAe,CAChBkC,GAAI,CAAE,iBAAkBtC,EAAIkQ,kBAGhC,IAGJ,IAGJ,IAGJ,GAEFlQ,EAAIS,GAAG,KACPL,EACE,OACA,CAAEE,MAAO,CAAEwP,GAAI,MACf,CAAC1P,EAAG,cAAe,CAAEoB,IAAK,UAC1B,IAGJ,IAIJ,GAAOT,eAAgB,E,sBChEnB,GAAS,WACX,IAAIf,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,QACA,CAAEI,YAAa,6CACf,CACEJ,EACE,YACA,CACEA,EAAG,qBAAsB,CACvBiB,YAAarB,EAAIsB,GAAG,CAClB,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAIC,EAAUD,EAAIC,QAClB,MAAO,CACLrB,EACE,QACA,CACEA,EAAG,UAAW,CACZE,MAAO,CACL3B,MAAOqB,EAAImQ,WACXpO,MAAO/B,EAAIW,GACT,kDAEFK,QAAS,CACP,CACErC,MAAO,QACPoD,MAAO/B,EAAIW,GACT,wDAGJ,CACEhC,MAAO,eACPoD,MAAO/B,EAAIW,GACT,0DAKR2B,GAAI,CACF,eAAgB,SAASE,GACvBxC,EAAImQ,WAAa3N,MAIvBxC,EAAIS,GAAG,KACY,gBAAnBT,EAAImQ,WACA/P,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,iCACP,kBAAmB,CACjBC,SACE,kDACFsE,QACE,kDACFD,QACE,oDAGN3E,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACL4F,KAAM,SACNC,IAAK,IACLC,IAAK,MACLrE,MAAO/B,EAAIW,GACT,+CAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GACtBiB,EAAO,IAETS,SAAUrC,EAAIoQ,aAEhBpO,MAAO,CACLrD,MAAOqB,EAAIoF,QACXlD,SAAU,SAASC,GACjBnC,EAAIoF,QAAUpF,EAAIsG,GAAGnE,IAEvBC,WAAY,iBAOxB,MACA,KAGJpC,EAAIc,KACRd,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CACnBE,MAAO,CACL+P,QAASrQ,EAAIoQ,YACbrO,MAAO/B,EAAIW,GACT,oDAGJ2B,GAAI,CACF,iBAAkB,SAASE,GACzBxC,EAAIoQ,YAAc5N,MAIxBxC,EAAIS,GAAG,KACPL,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,iCACP,kBAAmB,CACjBuE,QACE,kDACFtE,SACE,yDACFqE,QACE,2DAGN3E,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbC,EAAUL,EAAIK,QACdC,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACL4F,KAAM,SACNC,IAAK,IACLC,IAAK,MACLrE,MAAO/B,EAAIW,GACT,sDAEF,WAAYkB,EAAUC,EAAQ,KAC9B,mBAAoB9B,EAAIW,GAAGiB,EAAO,KAEpCI,MAAO,CACLrD,MAAOqB,EAAIsQ,eACXpO,SAAU,SAASC,GACjBnC,EAAIsQ,eAAiBtQ,EAAIsG,GAAGnE,IAE9BC,WAAY,wBAOxB,MACA,KAGJpC,EAAIS,GAAG,KACY,iBAAnBT,EAAImQ,WACA/P,EAAG,qBAAsB,CACvBE,MAAO,CACLoB,MAAO,kBACP,kBAAmB,CACjBC,SACE,yDACF+I,OACE,2DAGNrJ,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAII,EAASJ,EAAII,OACbE,EAAQN,EAAIM,MAChB,MAAO,CACL1B,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,oDAEF,WAAYmB,EACZ,mBAAoB9B,EAAIW,GACtBiB,EAAO,KAGXI,MAAO,CACLrD,MAAOqB,EAAI0K,OACXxI,SAAU,SAASC,GACjBnC,EAAI0K,OAASvI,GAEfC,WAAY,gBAOxB,MACA,KAGJpC,EAAIc,KACRd,EAAIS,GAAG,KACPL,EAAG,iBAAkB,CACnBE,MAAO,CACL+P,QAASrQ,EAAIuQ,sBACbxO,MAAO/B,EAAIW,GACT,8DAGJ2B,GAAI,CACF,iBAAkB,SAASE,GACzBxC,EAAIuQ,sBAAwB/N,MAIlCxC,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CACLY,MAAO,UACPgF,KAAM,SACN7D,SAAUZ,GAEZa,GAAI,CACFC,MAAO,SAASC,GAEd,OADAA,EAAOC,iBACAzC,EAAIwQ,kBAAkBhO,MAInC,CACExC,EAAIS,GACF,eACET,EAAIU,GAAGV,EAAIW,GAAG,eACd,gBAIRX,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CACLY,MAAO,YACPgF,KAAM,SACN7D,SAAUZ,GAAWzB,EAAIoQ,aAE3B9N,GAAI,CACFC,MAAO,SAASC,GACdxC,EAAIyQ,aAAc,KAIxB,CACEzQ,EAAIS,GACF,eACET,EAAIU,GAAGV,EAAIW,GAAG,iBACd,gBAIRX,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,YAAagF,KAAM,UACnC5D,GAAI,CACFC,MAAO,SAASC,GACdxC,EAAI0Q,YAAa,KAIvB,CACE1Q,EAAIS,GACF,eACET,EAAIU,GAAGV,EAAIW,GAAG,qBACd,gBAIRX,EAAIS,GAAG,KACPL,EACE,SACA,CACEE,MAAO,CACL2P,MAAOjQ,EAAIW,GAAG,oBACdO,MAAO,SACP2F,KAAM7G,EAAI0Q,YAEZpO,GAAI,CACF,cAAe,SAASE,GACtBxC,EAAI0Q,WAAalO,IAGrBnB,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,SACLsC,GAAI,WACF,MAAO,CACLnB,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,UAChBoB,GAAI,CACFC,MAAO,SAASC,GACdxC,EAAI0Q,YAAa,KAIvB,CACE1Q,EAAIS,GACF,mBACET,EAAIU,GAAGV,EAAIW,GAAG,aACd,oBAIRX,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,WAChBoB,GAAI,CACFC,MAAOvC,EAAI2Q,wBAGf,CACE3Q,EAAIS,GACF,mBACET,EAAIU,GAAGV,EAAIW,GAAG,cACd,sBAMZwG,OAAO,IAGX,MACA,IAGJ,CACEnH,EAAIS,GACF,eACET,EAAIU,GACFV,EAAIW,GACF,mEAGJ,kBAIRX,EAAIS,GAAG,KACPL,EACE,SACA,CACEE,MAAO,CACL2P,MAAOjQ,EAAIW,GAAG,gBACdO,MAAO,SACP2F,KAAM7G,EAAIyQ,aAEZnO,GAAI,CACF,cAAe,SAASE,GACtBxC,EAAIyQ,YAAcjO,IAGtBnB,YAAarB,EAAIsB,GACf,CACE,CACErC,IAAK,SACLsC,GAAI,WACF,MAAO,CACLnB,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,UAChBoB,GAAI,CACFC,MAAO,SAASC,GACdxC,EAAIyQ,aAAc,KAIxB,CACEzQ,EAAIS,GACF,mBACET,EAAIU,GAAGV,EAAIW,GAAG,aACd,oBAIRX,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,WAChBoB,GAAI,CAAEC,MAAOvC,EAAI4Q,sBAEnB,CACE5Q,EAAIS,GACF,mBACET,EAAIU,GAAGV,EAAIW,GAAG,cACd,sBAMZwG,OAAO,IAGX,MACA,IAGJ,CACEnH,EAAIS,GACF,eACET,EAAIU,GACFV,EAAIW,GACF,oEAGJ,mBAKV,WAQd,IAGJ,IAIJ,GAAOI,eAAgB,E,sBC1cqL,GC+I5M,CACA,sBACA,YACA,YACA,UACA,cACA,UACA,WACA,oBACA,YACA,aACA,uBACA,wBAEA,KAdA,WAeA,OACA,UACA,eACA,mBACA,iBACA,cACA,eACA,yBACA,UACA,eAGA,QA3BA,WA2BA,WACA,2BACA,2BACA,4BACA,kCAEA,OADA,4BACA,WAEA,oDAOA,GANA,0BACA,kDAGA,oEAEA,4BACA,oDACA,+CAGA,OAFA,wBACA,gCACA,uBACA,OACA,eACA,uDACA,YAEA,MACA,OACA,iBACA,+DACA,YAEA,0BACA,MACA,QACA,eACA,kEACA,iBAIA,2DACA,6CAGA,OAFA,wBACA,gCACA,uBACA,OACA,eACA,uDACA,YAEA,MACA,OACA,+BACA,iBACA,uEACA,YAGA,iBACA,kEACA,YAGA,0BACA,MACA,UACA,eACA,uEACA,YAEA,MACA,QACA,eACA,qEACA,gBAIA,mCACA,wBACA,gCACA,eACA,8DACA,iBAMA,cArHA,WAsHA,oBAEA,SACA,kBADA,WAEA,mCACA,0BACA,iBACA,gBAEA,2BAEA,mCACA,iBACA,uDAEA,oEAIA,oBAjBA,WAkBA,oBACA,mCACA,wDAEA,sBAtBA,WAuBA,mBACA,mCACA,gDCzRI,GAAY,YACd,GACA,GHgcoB,IG9bpB,EACA,KACA,KACA,MAuBF,GAAUC,QAAQC,OAAS,2CACZ,U,QCtCX,GAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,QACA,CACEA,EAAG,cAAe,CAChBJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,gDAEvBX,EAAIS,GAAG,KACPL,EACE,YACA,CACEA,EAAG,QAAS,CAAEI,YAAa,qBAAuB,CAChDJ,EAAG,QAAS,CACVA,EAAG,KAAM,CACPA,EACE,KACA,CACEA,EAAG,QAAS,CACVI,YAAa,YACbF,MAAO,CAAEX,QAASK,EAAIgO,SAASY,MAAMiC,eAEvC7Q,EAAIS,GACF,iBACET,EAAIU,GACFV,EAAIW,GACF,yDAGJ,iBAGN,GAEFX,EAAIS,GAAG,KACPL,E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DA,wBACA,uBACA,OACA,gCACA,eACA,uDACA,YAEA,MACA,OACA,6EACA,8BAEA,iBACA,mEACA,YAEA,2BAEA,MACA,QACA,eACA,mEACA,gBAIA,mCACA,wBACA,gCACA,eACA,8DACA,iBAMA,cAnGA,WAoGA,oBAEA,SACA,oBADA,SACA,GACA,2BAeA,OAdA,wCACA,+CAEA,8BACA,kBACA,oBAEA,gBACA,+EAEA,mBACA,kFAEA,oDAGA,yBAnBA,WAoBA,mDACA,uBACA,KACA,qBACA,6CAEA,gBACA,mCAEA,gBACA,wEACA,6BACA,4DAEA,yDAGA,0BACA,oBAEA,8BACA,gDAEA,uDACA,yFAEA,mCACA,qBE9YI,GAAY,YACd,GACA,GHuuBoB,IGruBpB,EACA,KACA,KACA,MAuBF,GAAUC,QAAQC,OAAS,wCACZ,U,QCtC6L,GC4B5M,CACA,sBACA,YACA,UACA,UACA,WACA,eACA,kBACA,eACA,qBAEA,KAXA,WAYA,OACA,cAGA,SACA,cADA,WAEA,mCACA,uCACA,kCAGA,UACA,uCC5CI,I,OAAY,YACd,GACA,GxBqDoB,IwBnDpB,EACA,KACA,WACA,OAuBF,GAAUD,QAAQC,OAAS,sCACZ,U,QCvCX,GAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,MACA,CACEA,EACE,QACA,CACEA,EACE,cACA,CACEA,EACE,UACA,CACEE,MAAO,CACLY,MAAO,UACPC,KAAM,KACNC,KAAM,8CACNwF,OAAQ,WAGZ,CACE5G,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,mCACd,eAKV,GAEFX,EAAIS,GAAG,KACPL,EACE,YACA,CACEA,EAAG,qBAAsB,CACvBiB,YAAarB,EAAIsB,GAAG,CAClB,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAIC,EAAUD,EAAIC,QAClB,MAAO,CACLrB,EACE,QACA,CACEkC,GAAI,CACF0E,OAAQ,SAASxE,GAEf,OADAA,EAAOC,iBACAzC,EAAIiH,cAAczE,MAI/B,CACEpC,EAAG,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OAKRxC,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CACL4F,KAAM,SACNhF,MAAO,UACPmB,SAAUZ,IAGd,CACEzB,EAAIS,GACF,aAAeT,EAAIU,GAAGV,EAAI2e,cAAgB,eAKlD,WAQd,IAIJ,GAAO5d,eAAgB,EC7dvB,IC5N+M,GD4N/M,CACA,yBACA,YACA,mBACA,eACA,eACA,iBACA,iCACA,uBACA,wBAEA,OACA,UACA,YACA,YACA,eAGA,KAlBA,WAmBA,OACA,oCACA,eACA,cACA,gBACA,cACA,cACA,MACA,kBACA,mBACA,UACA,cACA,cACA,qBACA,iBACA,eACA,gBACA,gBACA,cACA,gBACA,wBACA,yBACA,wBACA,qBAIA,UACA,WADA,WACA,WAEA,MADA,QACA,iBACA,OACA,QACA,wDAIA,aAVA,WAWA,4CACA,6CAGA,QA7DA,WA8DA,2BACA,2BACA,uBACA,4BACA,sBACA,kBAGA,SACA,UADA,WACA,WACA,mCACA,iDACA,kBACA,gCACA,uBACA,uCAEA,mBACA,gCACA,gCACA,qBAGA,WAfA,WAeA,WACA,mCACA,qBACA,uEACA,8CACA,8CAEA,yDACA,8CACA,+CAGA,eA3BA,WA4BA,mCACA,mCACA,sCACA,oBACA,mFACA,YAGA,oBACA,oFACA,cAKA,SAjHA,WAkHA,OACA,4CACA,wCEzUI,GAAY,YACd,GACA,GH+qBoB,IG7qBpB,EACA,KACA,KACA,MAuBF,GAAUC,QAAQC,OAAS,wCACZ,U,QCtCX,GAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,MACA,CACEA,EACE,QACA,CACEA,EACE,cACA,CACEA,EACE,UACA,CACEI,YAAa,cACbF,MAAO,CACLY,MAAO,UACPX,GAAI,mBACJY,KAAM,OAGV,CACEf,EAAG,QAAS,CAAEE,MAAO,CAAEX,QAASK,EAAIgO,SAASY,MAAM/O,OACnDG,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,sBACd,aAGN,IAGJ,GAEFX,EAAIS,GAAG,KACPL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cAAgBgK,EAAQ,CAAEhgB,QAAS,OAAAC,EAAA,QAK3DqgB,EAAiBloB,UAAUid,aAAe,WACtC,OAAO,EAAAvV,EAAM1F,IAAI,mBAAoB,CAAE4F,QAAS,OAAAC,EAAA,KAAuB6H,aAAc,iBAMzFwY,EAAiBloB,UAAUgd,aAAe,SAAUgB,GAChD,OAAO,EAAAtW,EAAMC,KAAK,mBAAoBqW,EAAQ,CAAEpW,QAAS,OAAAC,EAAA,QAEtDqgB,EArJ0B,I,SCHsK,GCyK3M,CACA,qBACA,YACA,YACA,UACA,cACA,gBACA,UACA,WACA,eACA,aAEA,YACA,eAEA,KAfA,WAgBA,OACA,QACA,CACA,aACA,4CAEA,CACA,eACA,6CACA,UACA,WAEA,CACA,eACA,iDAEA,CACA,WACA,+CAEA,CACA,cACA,qCACA,UACA,YAGA,cACA,SACA,SACA,UAEA,OACA,WAEA,aACA,SACA,YACA,eACA,cACA,cACA,UACA,eACA,iBACA,kBAEA,WACA,eACA,eAGA,QAnEA,WAmEA,WACA,uCACA,gBACA,iBAEA,gBAEA,oDACA,0BACA,aACA,aACA,cAEA,2BACA,0BACA,aACA,yBACA,uCACA,mBACA,eACA,YAGA,8BACA,uCACA,gCACA,4BACA,mCACA,+BACA,gBAEA,uBAEA,yCACA,2BACA,iCAEA,8CACA,gCACA,2BACA,iBACA,4DAEA,cAEA,eACA,+DAOA,cAxHA,WAyHA,oBAEA,SACA,YADA,WAEA,2BACA,4BAEA,cALA,SAKA,GACA,IACA,2BACA,wBACA,YAEA,EAGA,qBACA,SAIA,OAHA,uBACA,2BAEA,cAEA,uBAEA,SACA,WAGA,SA3BA,WA2BA,WACA,kBACA,mCACA,aACA,mBACA,kBACA,gCACA,eACA,sBAEA,iDAEA,gBAGA,QA1CA,SA0CA,GACA,eAEA,WA7CA,WA6CA,WACA,mCACA,sBACA,qBACA,aACA,qBACA,iBACA,gCACA,iBACA,4DAEA,gBAEA,iDAEA,kBAGA,gBA/DA,WA+DA,WACA,mCACA,kBACA,kBACA,gCAEA,uBADA,sDAEA,YAGA,gBAzEA,WAyEA,WACA,2BACA,mCACA,qEACA,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,SAAU,SAASC,GACjBnC,EAAIkS,KACFlS,EAAIikB,KAAK9nB,EAAI,GACb,UACAgG,IAGJC,WAAY,2BAOxB,MACA,KAGJpC,EAAIS,GAAG,KACPT,EAAIikB,KAAK5nB,OAAS,EACd+D,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,UAChBoB,GAAI,CACFC,MAAO,SAASC,GACd,OAAOxC,EAAIsmB,cAAcnqB,EAAI,MAInC,CACE6D,EAAIS,GACF,iBACET,EAAIU,GACFV,EAAIW,GACF,oCAGJ,kBAIRX,EAAIc,KACRd,EAAIS,GAAG,KACPtE,IAAM6D,EAAIikB,KAAK5nB,OACX+D,EACE,UACA,CACEE,MAAO,CAAEY,MAAO,WAChBoB,GAAI,CAAEC,MAAOvC,EAAIumB,aAEnB,CACEvmB,EAAIS,GACF,iBACET,EAAIU,GACFV,EAAIW,GACF,iCAGJ,kBAIRX,EAAIc,MAEV,MAGJd,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CACL4F,KAAM,SACNhF,MAAO,UACPmB,SAAUZ,IAGd,CACEzB,EAAIS,GACF,eACET,EAAIU,GAAGV,EAAIW,GAAG,eACd,iBAKV,WAQd,IAGJ,IAIJ,GAAOI,eAAgB,E,2CC3eoL,GCgK3M,CACA,qBACA,YACA,YACA,YACA,UACA,cACA,UACA,WACA,oBACA,aACA,eACA,qBACA,uBACA,wBAEA,YACA,eAEA,OACA,IACA,YACA,YACA,eAGA,KA1BA,WA2BA,OACA,kCACA,cACA,UACA,UACA,YACA,YACA,SACA,aACA,cAEA,YACA,uBACA,2BACA,sCAEA,cACA,iBACA,WACA,eAGA,QAjDA,WAiDA,WACA,uCACA,gBACA,SACA,uBAGA,SACA,sBAGA,2BACA,4BACA,gCACA,IAEA,OADA,eACA,EACA,SACA,aAGA,iCACA,oBACA,2CAEA,oDACA,4BACA,aACA,mBACA,qBAEA,8BACA,0BACA,kBACA,+BACA,4CAEA,GADA,gCACA,2BACA,yBAKA,GAJA,kBACA,sBACA,sBACA,kDACA,uBACA,SACA,4BACA,QACA,sBACA,8CAGA,cAEA,QACA,CACA,2BACA,qDAKA,qCACA,eACA,sDACA,gBAGA,0CACA,gCACA,2BACA,oBAEA,kCACA,mCAKA,sBAEA,cAjIA,WAkIA,oBAEA,SACA,cADA,WAEA,IACA,EADA,kCACA,OACA,UACA,gDAEA,sBADA,MACA,iBAEA,UAGA,iBADA,SACA,sCAEA,MAGA,WAjBA,WAkBA,oBAEA,cApBA,SAoBA,GACA,uBAEA,QAvBA,SAuBA,cACA,kBACA,mCACA,aACA,kBACA,kBACA,gCACA,uBACA,2BACA,2BACA,SACA,iCACA,4EAEA,YAEA,kBACA,qCACA,eACA,sDACA,eAIA,eAGA,cAlDA,WAkDA,WACA,mCACA,aACA,oCACA,sCACA,6CAEA,kBACA,gCACA,uBACA,kBACA,sCACA,mBACA,8CAOA,SAtEA,WAsEA,WACA,mCACA,gDAGA,GAFA,uCACA,iCACA,uBACA,4CACA,QACA,kCAGA,0BACA,OACA,wBACA,qBACA,MACA,OACA,yBACA,wBAEA,qBAEA,MACA,OACA,MACA,QACA,iCAEA,gBAEA,4BACA,mDACA,0CAEA,2CACA,aACA,sDACA,8CACA,iDAEA,kDAGA,aACA,+DACA,8CACA,kDAEA,uBACA,oDAIA,aA3HA,SA2HA,GACA,cASA,OARA,oBACA,iCACA,mCACA,kCACA,iCACA,gCACA,iCACA,mCACA,UAEA,eAvIA,WAwIA,wCACA,oBACA,8DAIA,gBACA,YACA,eACA,cACA,cACA,UACA,eACA,iBACA,mBAGA,SA7RA,WA8RA,OACA,iDACA,oECzbI,GAAY,YACd,GACA,GHieoB,IG/dpB,EACA,KACA,KACA,MAuBF,GAAUC,QAAQC,OAAS,oCACZ,U,QCtCX,GAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,QACA,CAAEE,MAAO,CAAE,eAAgB,KAC3B,CACEF,EAAG,qBAAsB,CACvBiB,YAAarB,EAAIsB,GAAG,CAClB,CACErC,IAAK,UACLsC,GAAI,SAASC,GACX,IAAIC,EAAUD,EAAIC,QAClB,MAAO,CACLrB,EACE,QACA,CA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dD,EAASJ,EAAII,OACjB,MAAO,CACLxB,EAAG,SAAU,CACXE,MAAO,CACLyB,MAAO/B,EAAIW,GACT,yBAEF,WAAYkB,EACRC,EACA,KACJ,mBAAoB9B,EAAIW,GACtBiB,EAAO,IAETsE,KAAM,WACNyI,aAAc,gBAEhB3M,MAAO,CACLrD,MAAOqB,EAAI4mB,YACX1kB,SAAU,SAASC,GACjBnC,EAAI4mB,YAAczkB,GAEpBC,WAAY,qBAOxB,MACA,MAIN,GAEFpC,EAAIc,KACRd,EAAIS,GAAG,KACPL,EACE,UACA,CACEE,MAAO,CACLY,MAAO,UACPgF,KAAM,SACN7D,SAAUZ,IAGd,CACEzB,EAAIS,GACF,aACET,EAAIU,GAAGV,EAAIW,GAAG,eACd,eAKV,OAMV,MACA,EACA,cAGJX,EAAIc,MAEV,IAIJ,GAAOC,eAAgB,ECpOvB,ICzGsM,GDyGtM,CACA,gBACA,YACA,YACA,UACA,UACA,WACA,aACA,uBACA,wBAEA,OACA,QACA,YACA,cAGA,KAjBA,WAkBA,OACA,UACA,cACA,cACA,UACA,iBACA,mBAGA,QA3BA,WA2BA,WACA,4BACA,mCACA,oBACA,kBACA,YACA,2BACA,2BACA,mBACA,mCAEA,mBACA,YACA,gCACA,0BACA,yBACA,oEAIA,SACA,aADA,WACA,WACA,iDACA,iDACA,qDACA,iBACA,gBACA,eAEA,kBACA,eACA,+DAIA,mBACA,iDACA,iBAKA,YAtBA,WAsBA,WACA,4BACA,uBACA,uBACA,iBAEA,iBACA,yBACA,iBACA,8DACA,eAGA,mBACA,yBACA,eACA,6DAKA,QA3CA,WA4CA,qCACA,iBACA,kCAIA,UACA,+BEpMI,GAAY,YACd,GACA,GHmUoB,IGjUpB,EACA,KACA,KACA,MAuBF,GAAUC,QAAQC,OAAS,6BACZ,U,QCtCX,GAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,MACA,CACEA,EACE,QACA,CACEA,EACE,cACA,CACEA,EACE,UACA,CACEI,YAAa,cACbF,MAAO,CAAEY,MAAO,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ACR3sB,MAAO,SAASC,GACd,OAAOxC,EAAIY,OAAOwC,OAAO,cAAe,CAAC,YAAapD,EAAI+uB,gBAKlE,IAIJ,GAAOhuB,eAAgB,E,sIChD2K,GCuClM,CACA,kBACA,YACA,qBACA,cACA,mBACA,wBAEA,UACA,KADA,WAEA,uCAEA,SAJA,WAKA,2CAEA,OAPA,WAOA,WA2VA,MA1VA,CACA,CACA,oBACA,WACA,CACA,4BACA,8BACA,eACA,kBACA,oBACA,yBACA,OACA,CACA,mCACA,oBACA,0BAEA,CACA,kCACA,mBACA,0BAEA,CACA,mCACA,2BACA,0BAEA,CACA,kDACA,mCACA,0BAEA,CACA,kCACA,mBACA,cACA,0BAEA,CACA,kDACA,mCACA,6BACA,0BAEA,CACA,sCACA,uBACA,kBACA,0BAEA,CACA,oCACA,qBACA,4BAIA,CACA,4BACA,6BACA,cACA,iBACA,oBACA,yBACA,OACA,CACA,kCACA,mBACA,iBAEA,CACA,wCACA,wBACA,iBAEA,CACA,gDACA,wBACA,kBAEA,CACA,qCACA,uBACA,0BACA,0BAEA,CACA,qCACA,uBACA,0BACA,0BAEA,CACA,sCACA,wBACA,2BACA,0BAEA,CACA,qCACA,uBACA,0BAEA,CACA,4CACA,8BACA,0BAEA,CACA,sCACA,wBACA,0BAEA,CACA,oCACA,qBACA,iBAEA,CACA,kCACA,mBACA,0BAEA,CACA,uCACA,wBACA,0BAEA,CACA,gCACA,iBACA,0BAEA,CACA,iCACA,kBACA,0BAEA,CACA,wCACA,2BACA,iBAEA,CACA,gDACA,qCACA,0BAEA,CACA,0CACA,4BACA,iBAEA,CACA,uCACA,wBACA,0BAEA,CACA,oCACA,qBACA,0BAEA,CACA,qCACA,sBACA,0BAEA,CACA,uCACA,wBACA,0BAEA,CACA,uCACA,yBACA,gCACA,0BAEA,CACA,uCACA,yBACA,gCACA,0BAEA,CACA,oCACA,qBACA,iBACA,4BAIA,CACA,4BACA,8BACA,eACA,kBACA,oBACA,yBACA,OACA,CACA,yCACA,wBACA,0BAEA,CACA,uCACA,yBACA,0BAEA,CACA,uCACA,yBACA,mBACA,0BAEA,CACA,8CACA,yBACA,0BAEA,CACA,6CACA,uBACA,0BAEA,CACA,uCACA,wBACA,4BAIA,CACA,4BACA,8BACA,eACA,kBACA,yBACA,oBACA,yBACA,OACA,CACA,uCACA,uBACA,4BAIA,CACA,4BACA,4BACA,aACA,gBACA,oBACA,yBACA,OACA,CACA,qCACA,uBACA,0BAEA,CACA,oCACA,mBACA,0BAEA,CACA,sCACA,iBACA,0BAEA,CACA,kCACA,mBACA,0BAEA,CACA,kDACA,yBACA,0BAEA,CACA,kCACA,mBACA,gBACA,4BAIA,CACA,wBACA,mCACA,kEACA,gBACA,kBACA,qBAEA,CACA,4BACA,mCACA,kBACA,oBACA,yBACA,OACA,CACA,4CACA,kEACA,gBACA,0BAEA,CACA,6CACA,wEACA,gBACA,4BAIA,CACA,wBACA,sCACA,sEACA,gBACA,sBACA,qBAEA,CACA,wBACA,gCACA,YACA,oBACA,0BAEA,CACA,wBACA,yCACA,+DACA,gBACA,eACA,wBAKA,oBAyBA,OAxBA,4CACA,yBACA,2DAGA,eACA,oDAGA,UACA,oCACA,yBACA,2DAGA,eACA,mDAGA,EANA,SASA,GAnBA,QAqBA,QCnaI,GAAY,YACd,GACA,GHsCoB,IGpCpB,EACA,KACA,KACA,MAuBF,GAAUC,QAAQC,OAAS,+BACZ,U,QCtCqL,GCyBpM,CACA,oBACA,YACA,yBACA,qBACA,kBACA,aACA,gBCzBI,GAAY,YACd,GACA,Gf2BoB,IezBpB,EACA,KACA,KACA,MAuBF,GAAUD,QAAQC,OAAS,iCACZ,U,QCtCX,GAAS,WACX,IAAIjB,EAAMC,KACNC,EAAKF,EAAIG,eACTC,EAAKJ,EAAIK,MAAMD,IAAMF,EACzB,OAAOE,EACL,MACA,CACEA,EAAG,iBAAkB,CAAEE,MAAO,CAAE,kBAAmBN,EAAIoF,WACvDpF,EAAIS,GAAG,KACQ,OAAfT,EAAIua,OACAna,EACE,QACA,CACEA,EAAG,cAAe,CAChBJ,EAAIS,GAAGT,EAAIU,GAAGV,EAAIW,GAAG,qCAEvB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,YACA,YACA,UACA,cACA,gBACA,UACA,WACA,uBACA,wBAEA,OACA,gBACA,YACA,cAGA,KAlBA,WAmBA,OACA,eAGA,QAvBA,WAwBA,2BACA,2BACA,4BACA,kCAEA,SACA,cADA,WAEA,yDEjEI,GAAY,YACd,GACA,GHuGoB,IGrGpB,EACA,KACA,KACA,M,qhCAuBF,GAAUC,QAAQC,OAAS,2CCoP3B,ICzR6M,GDyR7M,CACA,uBACA,YACA,eDtPe,G,QCuPf,UACA,cACA,gBACA,UACA,WACA,uBACA,wBAEA,OACA,SACA,YACA,cAGA,KAlBA,WAmBA,OACA,YACA,eACA,wBACA,gBACA,sDAGA,UACA,eADA,WAEA,2BACA,UACA,0DACA,UACA,0DACA,UACA,8DAIA,2BAZA,WAaA,SACA,2BACA,UACA,wDACA,MACA,UACA,wDACA,MACA,UACA,wDAGA,OACA,UACA,UACA,aAGA,cA/BA,WA+BA,WAEA,MADA,sDACA,iBACA,OACA,QACA,6EAKA,OACA,oBACA,iBACA,oBACA,eACA,wCACA,mCACA,oCAIA,QA/EA,WA+EA,WACA,2BACA,2BACA,uBACA,uBACA,4BACA,oDACA,4BAGA,OAFA,qCACA,8BAGA,8BAGA,8CAIA,mDACA,uCAJA,qCAOA,wCACA,mCACA,mCAGA,cA3GA,WA4GA,oBAEA,SACA,0BADA,SACA,GACA,qBAKA,OAJA,wCACA,kBACA,qEAIA,iBACA,8BACA,0DACA,+CACA,8BACA,mCACA,gDACA,oBACA,sEAIA,aArBA,WAsBA,8CACA,wCACA,mCACA,yCAEA,oBA3BA,SA2BA,GACA,mCACA,kBACA,oBACA,sEAGA,kBACA,uEAIA,uBAvCA,WAwCA,sDAEA,aADA,oBACA,EACA,qBAGA,2CAGA,0CACA,gDAGA,uBACA,OACA,mCAIA,uBA3DA,WA4DA,IADA,EACA,KADA,KAEA,kBAFA,IAEA,0CACA,qBAHA,8BAKA,YEhcI,GAAY,YACd,GACA,GPwmCoB,IOtmCpB,EACA,KACA,KACA,MAuBF,GAAUD,QAAQC,OAAS,4CACZ,U,QCtCX,GAAS,WACX,IAAIjB,EAAMC,KAC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","file":"main.bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t3: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([201,0,5]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import mod from \"-!../../../node_modules/vue-style-loader/index.js!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ResourceUsage.vue?vue&type=style&index=0&id=6ed3f697&scoped=true&lang=css&\"; export default mod; export * from \"-!../../../node_modules/vue-style-loader/index.js!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ResourceUsage.vue?vue&type=style&index=0&id=6ed3f697&scoped=true&lang=css&\"","import mod from \"-!../../node_modules/vue-style-loader/index.js!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SignIn.vue?vue&type=style&index=0&id=7b84bbc3&scoped=true&lang=css&\"; export default mod; export * from \"-!../../node_modules/vue-style-loader/index.js!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SignIn.vue?vue&type=style&index=0&id=7b84bbc3&scoped=true&lang=css&\"","import mod from \"-!../../../node_modules/vue-style-loader/index.js!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DeviceEnumeration.vue?vue&type=style&index=0&id=7b8817a0&scoped=true&lang=css&\"; export default mod; export * from \"-!../../../node_modules/vue-style-loader/index.js!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DeviceEnumeration.vue?vue&type=style&index=0&id=7b8817a0&scoped=true&lang=css&\"","import mod from \"-!../../../node_modules/vue-style-loader/index.js!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/sass-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DevicesInfo.vue?vue&type=style&index=0&id=22f61cec&scoped=true&lang=scss&\"; export default mod; export * from \"-!../../../node_modules/vue-style-loader/index.js!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/sass-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DevicesInfo.vue?vue&type=style&index=0&id=22f61cec&scoped=true&lang=scss&\"","import mod from \"-!../../../node_modules/vue-style-loader/index.js!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetworkManager.vue?vue&type=style&index=0&id=9bbbfec0&scoped=true&lang=css&\"; export default mod; export * from \"-!../../../node_modules/vue-style-loader/index.js!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetworkManager.vue?vue&type=style&index=0&id=9bbbfec0&scoped=true&lang=css&\"","import mod from \"-!../../../node_modules/vue-style-loader/index.js!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BinaryOutputManager.vue?vue&type=style&index=0&id=1e7284a8&scoped=true&lang=css&\"; export default mod; export * from \"-!../../../node_modules/vue-style-loader/index.js!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BinaryOutputManager.vue?vue&type=style&index=0&id=1e7284a8&scoped=true&lang=css&\"","import mod from \"-!../../../node_modules/vue-style-loader/index.js!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SensorManager.vue?vue&type=style&index=0&id=09a96214&scoped=true&lang=css&\"; export default mod; export * from \"-!../../../node_modules/vue-style-loader/index.js!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SensorManager.vue?vue&type=style&index=0&id=09a96214&scoped=true&lang=css&\"","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../node_modules/mini-css-extract-plugin/dist/loader.js!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js!./app.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"40d34a10\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../node_modules/mini-css-extract-plugin/dist/loader.js!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js!./app.scss\", function() {\n     var newContent = require(\"!!../node_modules/mini-css-extract-plugin/dist/loader.js!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js!./app.scss\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","import mod from \"-!../../node_modules/vue-style-loader/index.js!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LoadingSpinner.vue?vue&type=style&index=0&id=e0752284&scoped=true&lang=scss&\"; export default mod; export * from \"-!../../node_modules/vue-style-loader/index.js!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LoadingSpinner.vue?vue&type=style&index=0&id=e0752284&scoped=true&lang=scss&\"","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\n        \"CListGroup\",\n        [\n          _c(\"CListGroupItem\", { attrs: { to: \"/cloud/ibm-cloud/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"cloud.ibmCloud.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"cloud.ibmCloud.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/cloud/azure/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"cloud.msAzure.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"cloud.msAzure.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/cloud/aws/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"cloud.amazonAws.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"cloud.amazonAws.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/cloud/hexio/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"cloud.hexio.title\")) + \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"cloud.hexio.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/cloud/inteli-glue/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"cloud.intelimentsInteliGlue.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"cloud.intelimentsInteliGlue.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"pixla\")\n            ? _c(\"CListGroupItem\", { attrs: { to: \"/cloud/pixla/\" } }, [\n                _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"cloud.pixla.title\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"cloud.pixla.description\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ])\n              ])\n            : _vm._e()\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CloudDisambiguation.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CloudDisambiguation.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard body-wrapper>\n\t\t<CListGroup>\n\t\t\t<CListGroupItem to='/cloud/ibm-cloud/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('cloud.ibmCloud.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('cloud.ibmCloud.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/cloud/azure/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('cloud.msAzure.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('cloud.msAzure.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/cloud/aws/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('cloud.amazonAws.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('cloud.amazonAws.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/cloud/hexio/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('cloud.hexio.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('cloud.hexio.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/cloud/inteli-glue/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('cloud.intelimentsInteliGlue.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('cloud.intelimentsInteliGlue.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"pixla\")'\n\t\t\t\tto='/cloud/pixla/'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('cloud.pixla.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('cloud.pixla.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t</CListGroup>\n\t</CCard>\n</template>\n\n<script>\nimport {CCard, CListGroup, CListGroupItem} from '@coreui/vue/src';\n\nexport default {\n\tname: 'CloudDisambiguation',\n\tcomponents: {\n\t\tCCard,\n\t\tCListGroup,\n\t\tCListGroupItem\n\t},\n\tmetaInfo: {\n\t\ttitle: 'cloud.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./CloudDisambiguation.vue?vue&type=template&id=6688c9de&\"\nimport script from \"./CloudDisambiguation.vue?vue&type=script&lang=js&\"\nexport * from \"./CloudDisambiguation.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6688c9de')) {\n      api.createRecord('6688c9de', component.options)\n    } else {\n      api.reload('6688c9de', component.options)\n    }\n    module.hot.accept(\"./CloudDisambiguation.vue?vue&type=template&id=6688c9de&\", function () {\n      api.rerender('6688c9de', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Cloud/CloudDisambiguation.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardHeader\",\n        [\n          _c(\n            \"CButton\",\n            {\n              attrs: {\n                color: \"primary\",\n                size: \"sm\",\n                href:\n                  \"https://github.com/iqrfsdk/iot-starter-kit/blob/master/install/pdf/iqrf-part3b.pdf\"\n              }\n            },\n            [_vm._v(\"\\n\\t\\t\\t\" + _vm._s(_vm.$t(\"cloud.guides.pdf\")) + \"\\n\\t\\t\")]\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CButton\",\n            {\n              attrs: {\n                color: \"danger\",\n                size: \"sm\",\n                href: \"https://youtu.be/SIBoTrYwR2g\"\n              }\n            },\n            [\n              _vm._v(\n                \"\\n\\t\\t\\t\" + _vm._s(_vm.$t(\"cloud.guides.video\")) + \"\\n\\t\\t\"\n              )\n            ]\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"cloud.msAzure.form.messages.connectionString\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.msAzure.form.connectionString\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.connectionString,\n                                        callback: function($$v) {\n                                          _vm.connectionString = $$v\n                                        },\n                                        expression: \"connectionString\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"primary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.save($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.saveAndRestart($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.saveRestart\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import Vue from 'vue';\nimport VueI18n from 'vue-i18n';\nvar en = require('./locales/en.json');\nvar messages = {\n    'en': en\n};\nVue.use(VueI18n);\nexport default new VueI18n({\n    locale: 'en',\n    fallbackLocale: 'en',\n    messages: messages\n});\n","import i18n from '../i18n';\nimport store from '../store';\nimport Vue from 'vue';\n/**\n * Form error handler\n */\nvar FormErrorHandler = /** @class */ (function () {\n    function FormErrorHandler() {\n    }\n    /**\n     * Handles Cloud errors\n     * @param error caught axios error\n     */\n    FormErrorHandler.prototype.cloudError = function (error) {\n        store.commit('spinner/HIDE');\n        if (error.response) {\n            if (error.response.status === 400) {\n                Vue.$toast.error(i18n.t('forms.messages.submitBadRequest').toString());\n            }\n            else if (error.response.status) {\n                Vue.$toast.error(i18n.t('forms.messages.submitServerError').toString());\n            }\n        }\n        else {\n            console.error(error.message);\n        }\n    };\n    /**\n     * Handles Config errors\n     * @param error caught axios error\n     */\n    FormErrorHandler.prototype.configError = function (error) {\n        store.commit('spinner/HIDE');\n        if (error.response) {\n            if (error.response.status === 404) {\n                Vue.$toast.error(i18n.t('forms.messages.componentNotFound').toString());\n            }\n            else if (error.response.status === 500) {\n                Vue.$toast.error(i18n.t('forms.messages.submitServerError').toString());\n            }\n            else {\n                console.error(error.message);\n            }\n        }\n        else {\n            console.error(error.message);\n        }\n    };\n    /**\n     * Handles Service errors\n     * @param error caught axios error\n     */\n    FormErrorHandler.prototype.serviceError = function (error) {\n        store.commit('spinner/HIDE');\n        if (error.response) {\n            if (error.response.status === 400) {\n                Vue.$toast.error(i18n.t('forms.messages.submitBadRequest').toString());\n            }\n            else if (error.response.status === 404) {\n                Vue.$toast.error(i18n.t('service.errors.unsupportedService').toString());\n            }\n            else if (error.response.status === 500) {\n                Vue.$toast.error(i18n.t('service.errors.unsupportedInit').toString());\n            }\n        }\n        else {\n            console.error(error.message);\n        }\n    };\n    /**\n     * Handles Scheduler errors\n     * @param error caugh axios error\n     */\n    FormErrorHandler.prototype.schedulerError = function (error) {\n        store.commit('spinner/HIDE');\n        if (error.response) {\n            if (error.response.status === 400) {\n                Vue.$toast.error(i18n.t('config.scheduler.messages.rest.invalidTask').toString());\n            }\n            else if (error.response.status === 404) {\n                Vue.$toast.error(i18n.t('config.scheduler.messages.rest.notFound').toString());\n            }\n            else if (error.response.status === 409) {\n                Vue.$toast.error(i18n.t('config.scheduler.messages.rest.exists').toString());\n            }\n        }\n        else {\n            console.error(error.message);\n        }\n    };\n    return FormErrorHandler;\n}());\nexport default new FormErrorHandler();\n","import axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\n/**\n * Cloud connections service\n */\nvar CloudService = /** @class */ (function () {\n    function CloudService() {\n    }\n    /**\n     * Saves and creates new mqtt cloud connection.\n     * @param serviceName Cloud service name\n     * @param data Cloud connection configuration\n     */\n    CloudService.prototype.create = function (serviceName, data) {\n        return axios.post('clouds/' + serviceName, data, { headers: authorizationHeader() });\n    };\n    return CloudService;\n}());\nexport default new CloudService();\n","import axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\n/**\n * System service service\n */\nvar ServiceService = /** @class */ (function () {\n    function ServiceService() {\n    }\n    /**\n     * Disables the service\n     * @param name Service name\n     */\n    ServiceService.prototype.disable = function (name) {\n        return axios.post('services/' + name + '/disable', null, { headers: authorizationHeader() });\n    };\n    /**\n     * Enables the service\n     * @param name Service name\n     */\n    ServiceService.prototype.enable = function (name) {\n        return axios.post('services/' + name + '/enable', null, { headers: authorizationHeader() });\n    };\n    /**\n     * Retrieves the service status\n     * @param name Service name\n     */\n    ServiceService.prototype.getStatus = function (name) {\n        return axios.get('services/' + name, { headers: authorizationHeader() });\n    };\n    /**\n     * Restarts the service\n     * @param name Service name\n     */\n    ServiceService.prototype.restart = function (name) {\n        return axios.post('services/' + name + '/restart', null, { headers: authorizationHeader() });\n    };\n    /**\n     * Starts the service\n     * @param name Service name\n     */\n    ServiceService.prototype.start = function (name) {\n        return axios.post('services/' + name + '/start', null, { headers: authorizationHeader() });\n    };\n    /**\n     * Stops the service\n     * @param name Service name\n     */\n    ServiceService.prototype.stop = function (name) {\n        return axios.post('services/' + name + '/stop', null, { headers: authorizationHeader() });\n    };\n    return ServiceService;\n}());\nexport default new ServiceService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AzureCreator.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AzureCreator.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard>\n\t\t<CCardHeader>\n\t\t\t<CButton\n\t\t\t\tcolor='primary'\n\t\t\t\tsize='sm'\n\t\t\t\thref='https://github.com/iqrfsdk/iot-starter-kit/blob/master/install/pdf/iqrf-part3b.pdf'\n\t\t\t>\n\t\t\t\t{{ $t('cloud.guides.pdf') }}\n\t\t\t</CButton>\n\t\t\t<CButton\n\t\t\t\tcolor='danger'\n\t\t\t\tsize='sm'\n\t\t\t\thref='https://youtu.be/SIBoTrYwR2g'\n\t\t\t>\n\t\t\t\t{{ $t('cloud.guides.video') }}\n\t\t\t</CButton>\n\t\t</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.msAzure.form.messages.connectionString\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='connectionString'\n\t\t\t\t\t\t\t:label='$t(\"cloud.msAzure.form.connectionString\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t:disabled='invalid'\n\t\t\t\t\t\t@click.prevent='save'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='secondary'\n\t\t\t\t\t\t:disabled='invalid'\n\t\t\t\t\t\t@click.prevent='saveAndRestart'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.saveRestart') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {required} from 'vee-validate/dist/rules';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport CloudService from '../../services/CloudService';\nimport ServiceService from '../../services/ServiceService';\n\nexport default {\n\tname: 'AzureCreator',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tconnectionString: null,\n\t\t\tserviceName: 'azure',\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t},\n\tmethods: {\n\t\tsave() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\treturn CloudService.create(this.serviceName, {'connectionString': this.connectionString})\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(this.$t('cloud.messages.success').toString());\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.cloudError(error);\n\t\t\t\t\treturn Promise.reject(error);\n\t\t\t\t});\n\t\t},\n\t\tsaveAndRestart() {\n\t\t\tthis.save()\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\t\t\tServiceService.restart('iqrf-gateway-daemon')\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\t\tthis.$t('service.iqrf-gateway-daemon.messages.restart')\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tFormErrorHandler.serviceError(error);\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => {});\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'cloud.msAzure.form.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./AzureCreator.vue?vue&type=template&id=2edb6a8a&\"\nimport script from \"./AzureCreator.vue?vue&type=script&lang=js&\"\nexport * from \"./AzureCreator.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('2edb6a8a')) {\n      api.createRecord('2edb6a8a', component.options)\n    } else {\n      api.reload('2edb6a8a', component.options)\n    }\n    module.hot.accept(\"./AzureCreator.vue?vue&type=template&id=2edb6a8a&\", function () {\n      api.rerender('2edb6a8a', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Cloud/AzureCreator.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardHeader\",\n        [\n          _c(\n            \"CButton\",\n            {\n              attrs: {\n                color: \"primary\",\n                size: \"sm\",\n                href:\n                  \"https://github.com/iqrfsdk/iot-starter-kit/blob/master/install/pdf/iqrf-part3a.pdf\"\n              }\n            },\n            [_vm._v(\"\\n\\t\\t\\t\" + _vm._s(_vm.$t(\"cloud.guides.pdf\")) + \"\\n\\t\\t\")]\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CButton\",\n            {\n              attrs: {\n                color: \"danger\",\n                size: \"sm\",\n                href: \"https://youtu.be/Z9R2vdaw3KA\"\n              }\n            },\n            [\n              _vm._v(\n                \"\\n\\t\\t\\t\" + _vm._s(_vm.$t(\"cloud.guides.video\")) + \"\\n\\t\\t\"\n              )\n            ]\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"cloud.amazonAws.form.messages.endpoint\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.amazonAws.form.endpoint\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.endpoint,\n                                        callback: function($$v) {\n                                          _vm.endpoint = $$v\n                                        },\n                                        expression: \"endpoint\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _c(\"CInputFile\", {\n                              ref: \"awsFormCert\",\n                              attrs: {\n                                label: _vm.$t(\n                                  \"cloud.amazonAws.form.certificate\"\n                                )\n                              },\n                              on: {\n                                input: function($event) {\n                                  return _vm.isEmpty(\"cert\")\n                                },\n                                click: function($event) {\n                                  return _vm.isEmpty(\"cert\")\n                                }\n                              }\n                            }),\n                            _vm._v(\" \"),\n                            _vm.certEmpty && !_vm.firstCert\n                              ? _c(\"p\", { staticStyle: { color: \"red\" } }, [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                      _vm._s(\n                                        _vm.$t(\n                                          \"cloud.amazonAws.form.messages.certificate\"\n                                        )\n                                      ) +\n                                      \"\\n\\t\\t\\t\\t\\t\"\n                                  )\n                                ])\n                              : _vm._e()\n                          ],\n                          1\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _c(\"CInputFile\", {\n                              ref: \"awsFormKey\",\n                              attrs: {\n                                label: _vm.$t(\"cloud.amazonAws.form.key\")\n                              },\n                              on: {\n                                input: function($event) {\n                                  return _vm.isEmpty(\"key\")\n                                },\n                                click: function($event) {\n                                  return _vm.isEmpty(\"key\")\n                                }\n                              }\n                            }),\n                            _vm._v(\" \"),\n                            _vm.keyEmpty && !_vm.firstKey\n                              ? _c(\"p\", { staticStyle: { color: \"red\" } }, [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                      _vm._s(\n                                        _vm.$t(\n                                          \"cloud.amazonAws.form.messages.key\"\n                                        )\n                                      ) +\n                                      \"\\n\\t\\t\\t\\t\\t\"\n                                  )\n                                ])\n                              : _vm._e()\n                          ],\n                          1\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              color: \"primary\",\n                              disabled: invalid || _vm.certEmpty || _vm.keyEmpty\n                            },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.save($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              color: \"secondary\",\n                              disabled: invalid || _vm.certEmpty || _vm.keyEmpty\n                            },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.saveAndRestart($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.saveRestart\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AwsCreator.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AwsCreator.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard>\n\t\t<CCardHeader>\n\t\t\t<CButton\n\t\t\t\tcolor='primary'\n\t\t\t\tsize='sm'\n\t\t\t\thref='https://github.com/iqrfsdk/iot-starter-kit/blob/master/install/pdf/iqrf-part3a.pdf'\n\t\t\t>\n\t\t\t\t{{ $t('cloud.guides.pdf') }}\n\t\t\t</CButton>\n\t\t\t<CButton\n\t\t\t\tcolor='danger'\n\t\t\t\tsize='sm'\n\t\t\t\thref='https://youtu.be/Z9R2vdaw3KA'\n\t\t\t>\n\t\t\t\t{{ $t('cloud.guides.video') }}\n\t\t\t</CButton>\n\t\t</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.amazonAws.form.messages.endpoint\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='endpoint'\n\t\t\t\t\t\t\t:label='$t(\"cloud.amazonAws.form.endpoint\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<div class='form-group'>\n\t\t\t\t\t\t<CInputFile\n\t\t\t\t\t\t\tref='awsFormCert'\n\t\t\t\t\t\t\t:label='$t(\"cloud.amazonAws.form.certificate\")'\n\t\t\t\t\t\t\t@input='isEmpty(\"cert\")'\n\t\t\t\t\t\t\t@click='isEmpty(\"cert\")'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<p v-if='certEmpty && !firstCert' style='color:red'>\n\t\t\t\t\t\t\t{{ $t('cloud.amazonAws.form.messages.certificate') }}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='form-group'>\n\t\t\t\t\t\t<CInputFile\n\t\t\t\t\t\t\tref='awsFormKey'\n\t\t\t\t\t\t\t:label='$t(\"cloud.amazonAws.form.key\")'\n\t\t\t\t\t\t\t@input='isEmpty(\"key\")'\n\t\t\t\t\t\t\t@click='isEmpty(\"key\")'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<p v-if='keyEmpty && !firstKey' style='color:red'>\n\t\t\t\t\t\t\t{{ $t('cloud.amazonAws.form.messages.key') }}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t:disabled='invalid || certEmpty || keyEmpty'\n\t\t\t\t\t\t@click.prevent='save'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='secondary'\n\t\t\t\t\t\t:disabled='invalid || certEmpty || keyEmpty'\n\t\t\t\t\t\t@click.prevent='saveAndRestart'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.saveRestart') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CForm, CInput, CInputFile} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {required} from 'vee-validate/dist/rules';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport CloudService from '../../services/CloudService';\nimport ServiceService from '../../services/ServiceService';\n\nexport default {\n\tname: 'AWSCreator',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputFile,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tendpoint: null,\n\t\t\tserviceName: 'aws',\n\t\t\tcertEmpty: true,\n\t\t\tkeyEmpty: true,\n\t\t\tfirstCert: true,\n\t\t\tfirstKey: true,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t},\n\tmethods: {\n\t\tbuildRequest() {\n\t\t\tlet\tformData = new FormData();\n\t\t\tformData.append('endpoint', this.endpoint);\n\t\t\tformData.append('certificate', this.$refs.awsFormCert.$el.children[1].files[0]);\n\t\t\tformData.append('privateKey', this.$refs.awsFormKey.$el.children[1].files[0]);\n\t\t\treturn formData;\n\t\t},\n\t\tsave() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tCloudService.create(this.serviceName, this.buildRequest())\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(this.$t('cloud.messages.success').toString());\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.cloudError(error);\n\t\t\t\t\treturn Promise.reject(error);\n\t\t\t\t});\n\t\t},\n\t\tsaveAndRestart() {\n\t\t\tthis.save()\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\t\t\tServiceService.restart('iqrf-gateway-daemon')\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\t\tthis.$t('service.iqrf-gateway-daemon.messages.restart')\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tFormErrorHandler.serviceError(error);\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => {});\n\t\t},\n\t\tisEmpty(button) {\n\t\t\tif (button === 'cert') {\n\t\t\t\tif (this.firstCert) {\n\t\t\t\t\tthis.firstCert = false;\n\t\t\t\t}\n\t\t\t\tthis.certEmpty = this.$refs.awsFormCert.$el.children[1].files.length === 0;\n\t\t\t} else {\n\t\t\t\tif (this.firstKey) {\n\t\t\t\t\tthis.firstKey = false;\n\t\t\t\t}\n\t\t\t\tthis.keyEmpty = this.$refs.awsFormKey.$el.children[1].files.length === 0;\n\t\t\t}\n\t\t}\n\t}\n};\n</script>\n","import { render, staticRenderFns } from \"./AwsCreator.vue?vue&type=template&id=0f32129c&\"\nimport script from \"./AwsCreator.vue?vue&type=script&lang=js&\"\nexport * from \"./AwsCreator.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('0f32129c')) {\n      api.createRecord('0f32129c', component.options)\n    } else {\n      api.reload('0f32129c', component.options)\n    }\n    module.hot.accept(\"./AwsCreator.vue?vue&type=template&id=0f32129c&\", function () {\n      api.rerender('0f32129c', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Cloud/AwsCreator.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"cloud.hexio.form.messages.broker\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.hexio.form.broker\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.address,\n                                        callback: function($$v) {\n                                          _vm.address = $$v\n                                        },\n                                        expression: \"address\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"cloud.hexio.form.messages.clientId\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.hexio.form.clientId\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.clientId,\n                                        callback: function($$v) {\n                                          _vm.clientId = $$v\n                                        },\n                                        expression: \"clientId\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"cloud.hexio.form.messages.topicRequest\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.hexio.form.topicRequest\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.requestTopic,\n                                        callback: function($$v) {\n                                          _vm.requestTopic = $$v\n                                        },\n                                        expression: \"requestTopic\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"cloud.hexio.form.messages.topicResponse\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.hexio.form.topicResponse\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.responseTopic,\n                                        callback: function($$v) {\n                                          _vm.responseTopic = $$v\n                                        },\n                                        expression: \"responseTopic\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"cloud.hexio.form.messages.username\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.hexio.form.username\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.username,\n                                        callback: function($$v) {\n                                          _vm.username = $$v\n                                        },\n                                        expression: \"username\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"cloud.hexio.form.messages.password\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.hexio.form.password\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.password,\n                                        callback: function($$v) {\n                                          _vm.password = $$v\n                                        },\n                                        expression: \"password\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"primary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.save($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.saveAndRestart($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.saveRestart\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.hexio.form.messages.broker\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='address'\n\t\t\t\t\t\t\t:label='$t(\"cloud.hexio.form.broker\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.hexio.form.messages.clientId\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='clientId'\n\t\t\t\t\t\t\t:label='$t(\"cloud.hexio.form.clientId\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.hexio.form.messages.topicRequest\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='requestTopic'\n\t\t\t\t\t\t\t:label='$t(\"cloud.hexio.form.topicRequest\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.hexio.form.messages.topicResponse\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='responseTopic'\n\t\t\t\t\t\t\t:label='$t(\"cloud.hexio.form.topicResponse\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.hexio.form.messages.username\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='username'\n\t\t\t\t\t\t\t:label='$t(\"cloud.hexio.form.username\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.hexio.form.messages.password\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='password'\n\t\t\t\t\t\t\t:label='$t(\"cloud.hexio.form.password\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t:disabled='invalid'\n\t\t\t\t\t\t@click.prevent='save'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='secondary'\n\t\t\t\t\t\t:disabled='invalid'\n\t\t\t\t\t\t@click.prevent='saveAndRestart'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.saveRestart') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {required} from 'vee-validate/dist/rules';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport CloudService from '../../services/CloudService';\nimport ServiceService from '../../services/ServiceService';\n\nexport default {\n\tname: 'HexioCreator',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tserviceName: 'hexio',\n\t\t\taddress: 'connect.hexio.cloud',\n\t\t\tclientId: null,\n\t\t\trequestTopic: 'Iqrf/DpaRequest',\n\t\t\tresponseTopic: 'Iqrf/DpaResponse',\n\t\t\tusername: null,\n\t\t\tpassword: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t},\n\tmethods: {\n\t\tbuildConfig() {\n\t\t\treturn {\n\t\t\t\t'broker': this.address,\n\t\t\t\t'clientId': this.clientId,\n\t\t\t\t'topicRequest': this.requestTopic,\n\t\t\t\t'topicResponse': this.responseTopic,\n\t\t\t\t'username': this.username,\n\t\t\t\t'password': this.password,\n\t\t\t};\n\t\t},\n\t\tsave() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tCloudService.create(this.serviceName, this.buildConfig())\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(this.$t('cloud.messages.success').toString());\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.cloudError(error);\n\t\t\t\t\treturn Promise.reject(error);\n\t\t\t\t});\n\t\t},\n\t\tsaveAndRestart() {\n\t\t\tthis.save()\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\t\t\tServiceService.restart('iqrf-gateway-daemon')\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\t\tthis.$t('service.iqrf-gateway-daemon.messages.restart')\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tFormErrorHandler.serviceError(error);\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => {});\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'cloud.hexio.form.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./HexioCreator.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./HexioCreator.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./HexioCreator.vue?vue&type=template&id=ea714750&\"\nimport script from \"./HexioCreator.vue?vue&type=script&lang=js&\"\nexport * from \"./HexioCreator.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('ea714750')) {\n      api.createRecord('ea714750', component.options)\n    } else {\n      api.reload('ea714750', component.options)\n    }\n    module.hot.accept(\"./HexioCreator.vue?vue&type=template&id=ea714750&\", function () {\n      api.rerender('ea714750', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Cloud/HexioCreator.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardHeader\",\n        [\n          _c(\n            \"CButton\",\n            {\n              attrs: {\n                color: \"primary\",\n                size: \"sm\",\n                href:\n                  \"https://github.com/iqrfsdk/iot-starter-kit/blob/master/install/pdf/iqrf-part3c.pdf\"\n              }\n            },\n            [_vm._v(\"\\n\\t\\t\\t\" + _vm._s(_vm.$t(\"cloud.guides.pdf\")) + \"\\n\\t\\t\")]\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CButton\",\n            {\n              attrs: {\n                color: \"danger\",\n                size: \"sm\",\n                href: \"https://youtu.be/xoAReOyrkZ4\"\n              }\n            },\n            [\n              _vm._v(\n                \"\\n\\t\\t\\t\" + _vm._s(_vm.$t(\"cloud.guides.video\")) + \"\\n\\t\\t\"\n              )\n            ]\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"cloud.ibmCloud.form.messages.organizationId\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.ibmCloud.form.organizationId\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.organizationId,\n                                        callback: function($$v) {\n                                          _vm.organizationId = $$v\n                                        },\n                                        expression: \"organizationId\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"cloud.ibmCloud.form.messages.deviceType\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.ibmCloud.form.deviceType\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.deviceType,\n                                        callback: function($$v) {\n                                          _vm.deviceType = $$v\n                                        },\n                                        expression: \"deviceType\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"cloud.ibmCloud.form.messages.deviceId\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.ibmCloud.form.deviceId\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.deviceId,\n                                        callback: function($$v) {\n                                          _vm.deviceId = $$v\n                                        },\n                                        expression: \"deviceId\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"cloud.ibmCloud.form.messages.token\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.ibmCloud.form.token\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.token,\n                                        callback: function($$v) {\n                                          _vm.token = $$v\n                                        },\n                                        expression: \"token\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"cloud.ibmCloud.form.messages.eventId\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.ibmCloud.form.eventId\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.eventId,\n                                        callback: function($$v) {\n                                          _vm.eventId = $$v\n                                        },\n                                        expression: \"eventId\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"primary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.save($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.saveAndRestart($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.saveRestart\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardHeader>\n\t\t\t<CButton\n\t\t\t\tcolor='primary'\n\t\t\t\tsize='sm'\n\t\t\t\thref='https://github.com/iqrfsdk/iot-starter-kit/blob/master/install/pdf/iqrf-part3c.pdf'\n\t\t\t>\n\t\t\t\t{{ $t('cloud.guides.pdf') }}\n\t\t\t</CButton>\n\t\t\t<CButton\n\t\t\t\tcolor='danger'\n\t\t\t\tsize='sm'\n\t\t\t\thref='https://youtu.be/xoAReOyrkZ4'\n\t\t\t>\n\t\t\t\t{{ $t('cloud.guides.video') }}\n\t\t\t</CButton>\n\t\t</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.ibmCloud.form.messages.organizationId\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='organizationId'\n\t\t\t\t\t\t\t:label='$t(\"cloud.ibmCloud.form.organizationId\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.ibmCloud.form.messages.deviceType\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='deviceType'\n\t\t\t\t\t\t\t:label='$t(\"cloud.ibmCloud.form.deviceType\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.ibmCloud.form.messages.deviceId\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='deviceId'\n\t\t\t\t\t\t\t:label='$t(\"cloud.ibmCloud.form.deviceId\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.ibmCloud.form.messages.token\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='token'\n\t\t\t\t\t\t\t:label='$t(\"cloud.ibmCloud.form.token\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.ibmCloud.form.messages.eventId\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='eventId'\n\t\t\t\t\t\t\t:label='$t(\"cloud.ibmCloud.form.eventId\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t:disabled='invalid'\n\t\t\t\t\t\t@click.prevent='save'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='secondary'\n\t\t\t\t\t\t:disabled='invalid'\n\t\t\t\t\t\t@click.prevent='saveAndRestart'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.saveRestart') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {required} from 'vee-validate/dist/rules';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport CloudService from '../../services/CloudService';\nimport ServiceService from '../../services/ServiceService';\n\nexport default {\n\tname: 'IbmCreator',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tserviceName: 'ibmCloud',\n\t\t\torganizationId: null,\n\t\t\tdeviceType: null,\n\t\t\tdeviceId: null,\n\t\t\ttoken: null,\n\t\t\teventId: 'iqrf',\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t},\n\tmethods: {\n\t\tbuildConfig() {\n\t\t\treturn {\n\t\t\t\t'organizationId': this.organizationId,\n\t\t\t\t'deviceType': this.deviceType,\n\t\t\t\t'deviceId': this.deviceId,\n\t\t\t\t'token': this.token,\n\t\t\t\t'eventId': this.eventId\n\t\t\t};\n\t\t},\n\t\tsave() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tCloudService.create(this.serviceName, this.buildConfig())\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(this.$t('cloud.messages.success').toString());\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.cloudError(error);\n\t\t\t\t\treturn Promise.reject(error);\n\t\t\t\t});\n\t\t},\n\t\tsaveAndRestart() {\n\t\t\tthis.save()\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\t\t\tServiceService.restart('iqrf-gateway-daemon')\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\t\tthis.$t('service.iqrf-gateway-daemon.messages.restart')\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tFormErrorHandler.serviceError(error);\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => {});\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'cloud.ibmCloud.form.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IbmCreator.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IbmCreator.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./IbmCreator.vue?vue&type=template&id=5f36f6c5&\"\nimport script from \"./IbmCreator.vue?vue&type=script&lang=js&\"\nexport * from \"./IbmCreator.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('5f36f6c5')) {\n      api.createRecord('5f36f6c5', component.options)\n    } else {\n      api.reload('5f36f6c5', component.options)\n    }\n    module.hot.accept(\"./IbmCreator.vue?vue&type=template&id=5f36f6c5&\", function () {\n      api.rerender('5f36f6c5', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Cloud/IbmCreator.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"cloud.intelimentsInteliGlue.form.messages.rootTopic\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.intelimentsInteliGlue.form.rootTopic\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.topic,\n                                        callback: function($$v) {\n                                          _vm.topic = $$v\n                                        },\n                                        expression: \"topic\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required|integer|between:0,65535\",\n                            \"custom-messages\": {\n                              between:\n                                \"cloud.intelimentsInteliGlue.form.messages.assignedPortRange\",\n                              integer:\n                                \"cloud.intelimentsInteliGlue.form.messages.assignedPortRange\",\n                              required:\n                                \"cloud.intelimentsInteliGlue.form.messages.assignedPort\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        max: \"65535\",\n                                        label: _vm.$t(\n                                          \"cloud.intelimentsInteliGlue.form.assignedPort\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.port,\n                                        callback: function($$v) {\n                                          _vm.port = _vm._n($$v)\n                                        },\n                                        expression: \"port\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"cloud.intelimentsInteliGlue.form.messages.clientId\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.intelimentsInteliGlue.form.clientId\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.clientId,\n                                        callback: function($$v) {\n                                          _vm.clientId = $$v\n                                        },\n                                        expression: \"clientId\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"cloud.intelimentsInteliGlue.form.messages.password\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"cloud.intelimentsInteliGlue.form.password\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.password,\n                                        callback: function($$v) {\n                                          _vm.password = $$v\n                                        },\n                                        expression: \"password\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"primary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.save($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.saveAndRestart($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.saveRestart\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.intelimentsInteliGlue.form.messages.rootTopic\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='topic'\n\t\t\t\t\t\t\t:label='$t(\"cloud.intelimentsInteliGlue.form.rootTopic\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required|integer|between:0,65535'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tbetween: \"cloud.intelimentsInteliGlue.form.messages.assignedPortRange\",\n\t\t\t\t\t\t\tinteger: \"cloud.intelimentsInteliGlue.form.messages.assignedPortRange\",\n\t\t\t\t\t\t\trequired: \"cloud.intelimentsInteliGlue.form.messages.assignedPort\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='port'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='65535'\n\t\t\t\t\t\t\t:label='$t(\"cloud.intelimentsInteliGlue.form.assignedPort\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.intelimentsInteliGlue.form.messages.clientId\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='clientId'\n\t\t\t\t\t\t\t:label='$t(\"cloud.intelimentsInteliGlue.form.clientId\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"cloud.intelimentsInteliGlue.form.messages.password\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='password'\n\t\t\t\t\t\t\t:label='$t(\"cloud.intelimentsInteliGlue.form.password\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t:disabled='invalid'\n\t\t\t\t\t\t@click.prevent='save'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='secondary'\n\t\t\t\t\t\t:disabled='invalid'\n\t\t\t\t\t\t@click.prevent='saveAndRestart'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.saveRestart') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {between, integer, required} from 'vee-validate/dist/rules';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport CloudService from '../../services/CloudService';\nimport ServiceService from '../../services/ServiceService';\n\nexport default {\n\tname: 'InteliGlueCreator',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tserviceName: 'inteliGlue',\n\t\t\ttopic: null,\n\t\t\tport: null,\n\t\t\tclientId: null,\n\t\t\tpassword: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t},\n\tmethods: {\n\t\tbuildConfig() {\n\t\t\treturn {\n\t\t\t\t'rootTopic': this.topic,\n\t\t\t\t'assignedPort': this.port,\n\t\t\t\t'clientId': this.clientId,\n\t\t\t\t'password': this.password,\n\t\t\t};\n\t\t},\n\t\tsave() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tCloudService.create(this.serviceName, this.buildConfig())\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(this.$t('cloud.messages.success').toString());\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.cloudError(error);\n\t\t\t\t\treturn Promise.reject(error);\n\t\t\t\t});\n\t\t},\n\t\tsaveAndRestart() {\n\t\t\tthis.save()\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\t\t\tServiceService.restart('iqrf-gateway-daemon')\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\t\tthis.$t('service.iqrf-gateway-daemon.messages.restart')\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tFormErrorHandler.serviceError(error);\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => {});\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'cloud.intelimentsInteliGlue.form.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./InteliGlueCreator.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./InteliGlueCreator.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./InteliGlueCreator.vue?vue&type=template&id=041bb1c7&\"\nimport script from \"./InteliGlueCreator.vue?vue&type=script&lang=js&\"\nexport * from \"./InteliGlueCreator.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('041bb1c7')) {\n      api.createRecord('041bb1c7', component.options)\n    } else {\n      api.reload('041bb1c7', component.options)\n    }\n    module.hot.accept(\"./InteliGlueCreator.vue?vue&type=template&id=041bb1c7&\", function () {\n      api.rerender('041bb1c7', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Cloud/InteliGlueCreator.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\"table\", { staticClass: \"table table-striped\" }, [\n        _c(\"tbody\", [\n          _c(\"tr\", [\n            _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"cloud.pixla.token\")))]),\n            _vm._v(\" \"),\n            _c(\n              \"td\",\n              { staticClass: \"d-flex\" },\n              [\n                _c(\"div\", { staticClass: \"mr-auto\" }, [\n                  _vm._v(\"\\n\\t\\t\\t\\t\\t\\t\" + _vm._s(_vm.token) + \"\\n\\t\\t\\t\\t\\t\")\n                ]),\n                _vm._v(\" \"),\n                _c(\n                  \"CButton\",\n                  {\n                    attrs: { color: \"primary\", size: \"sm\" },\n                    on: {\n                      click: function($event) {\n                        _vm.showEditor = true\n                      }\n                    }\n                  },\n                  [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"forms.edit\")) +\n                        \"\\n\\t\\t\\t\\t\\t\"\n                    )\n                  ]\n                )\n              ],\n              1\n            )\n          ]),\n          _vm._v(\" \"),\n          _c(\"tr\", [\n            _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"service.status\")))]),\n            _vm._v(\" \"),\n            _vm.missing\n              ? _c(\"td\", [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"service.states.missing\")) +\n                      \"\\n\\t\\t\\t\\t\"\n                  )\n                ])\n              : _vm._e(),\n            _vm._v(\" \"),\n            _vm.unsupported\n              ? _c(\"td\", [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"service.states.unsupported\")) +\n                      \"\\n\\t\\t\\t\\t\"\n                  )\n                ])\n              : _c(\n                  \"td\",\n                  { staticClass: \"d-flex\" },\n                  [\n                    _c(\"div\", { staticClass: \"mr-auto\" }, [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\\t\\t\" +\n                          _vm._s(\n                            _vm.$t(\n                              \"service.states.\" +\n                                (_vm.enabled ? \"enabled\" : \"disabled\")\n                            )\n                          ) +\n                          \",\\n\\t\\t\\t\\t\\t\\t\" +\n                          _vm._s(\n                            _vm.$t(\n                              \"service.states.\" +\n                                (_vm.active ? \"active\" : \"inactive\")\n                            )\n                          ) +\n                          \"\\n\\t\\t\\t\\t\\t\"\n                      )\n                    ]),\n                    _vm._v(\" \"),\n                    !_vm.enabled\n                      ? _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"success\", size: \"sm\" },\n                            on: {\n                              click: function($event) {\n                                return _vm.enable()\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"service.actions.enable\")) +\n                                \"\\n\\t\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    _vm.enabled\n                      ? _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"danger\", size: \"sm\" },\n                            on: {\n                              click: function($event) {\n                                return _vm.disable()\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"service.actions.disable\")) +\n                                \"\\n\\t\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      : _vm._e()\n                  ],\n                  1\n                )\n          ])\n        ])\n      ]),\n      _vm._v(\" \"),\n      !_vm.missing && !_vm.unsupported\n        ? _c(\n            \"div\",\n            [\n              _c(\n                \"CButton\",\n                {\n                  attrs: {\n                    color: \"primary\",\n                    href: \"https://www.pixla.online/\",\n                    target: \"_blank\"\n                  }\n                },\n                [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"cloud.pixla.dashboard\")) +\n                      \"\\n\\t\\t\"\n                  )\n                ]\n              )\n            ],\n            1\n          )\n        : _vm._e(),\n      _vm._v(\" \"),\n      _c(\"PixlaTokenEditor\", {\n        attrs: { show: _vm.showEditor },\n        on: {\n          \"update:show\": function($event) {\n            _vm.showEditor = $event\n          },\n          tokenUpdated: _vm.getToken\n        }\n      })\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"ValidationObserver\", {\n    scopedSlots: _vm._u([\n      {\n        key: \"default\",\n        fn: function(ref) {\n          var invalid = ref.invalid\n          return [\n            _c(\n              \"CForm\",\n              {\n                on: {\n                  submit: function($event) {\n                    $event.preventDefault()\n                    return _vm.processSubmit($event)\n                  }\n                }\n              },\n              [\n                _c(\n                  \"CModal\",\n                  {\n                    attrs: { color: \"primary\", show: _vm.show },\n                    on: {\n                      \"update:show\": function($event) {\n                        _vm.show = $event\n                      }\n                    },\n                    scopedSlots: _vm._u(\n                      [\n                        {\n                          key: \"header\",\n                          fn: function() {\n                            return [\n                              _c(\"h5\", { staticClass: \"modal-title\" }, [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\" +\n                                    _vm._s(\n                                      _vm.$t(\"cloud.pixla.editModal.title\")\n                                    ) +\n                                    \"\\n\\t\\t\\t\\t\"\n                                )\n                              ]),\n                              _vm._v(\" \"),\n                              _c(\"CButtonClose\", {\n                                staticClass: \"text-white\",\n                                on: { click: _vm.close }\n                              })\n                            ]\n                          },\n                          proxy: true\n                        },\n                        {\n                          key: \"footer\",\n                          fn: function() {\n                            return [\n                              _c(\n                                \"CButton\",\n                                {\n                                  attrs: { color: \"danger\" },\n                                  on: { click: _vm.close }\n                                },\n                                [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t\\t\\t\" +\n                                      _vm._s(_vm.$t(\"forms.cancel\")) +\n                                      \"\\n\\t\\t\\t\\t\"\n                                  )\n                                ]\n                              ),\n                              _vm._v(\" \"),\n                              _c(\n                                \"CButton\",\n                                {\n                                  attrs: {\n                                    color: \"success\",\n                                    type: \"submit\",\n                                    disabled: invalid\n                                  }\n                                },\n                                [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t\\t\\t\" +\n                                      _vm._s(_vm.$t(\"forms.edit\")) +\n                                      \"\\n\\t\\t\\t\\t\"\n                                  )\n                                ]\n                              )\n                            ]\n                          },\n                          proxy: true\n                        }\n                      ],\n                      null,\n                      true\n                    )\n                  },\n                  [\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required\",\n                        \"custom-messages\": {\n                          required: \"cloud.pixla.editModal.messages.token\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\n                                      \"cloud.pixla.editModal.token\"\n                                    ),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0])\n                                  },\n                                  model: {\n                                    value: _vm.token,\n                                    callback: function($$v) {\n                                      _vm.token = $$v\n                                    },\n                                    expression: \"token\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    })\n                  ],\n                  1\n                )\n              ],\n              1\n            )\n          ]\n        }\n      }\n    ])\n  })\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\n/**\n * PIXLA management service\n */\nvar PixlaService = /** @class */ (function () {\n    function PixlaService() {\n    }\n    /**\n     * Retrieves the device token\n     */\n    PixlaService.prototype.getToken = function () {\n        return axios.get('pixla', { headers: authorizationHeader() })\n            .then(function (response) {\n            return response.data.token;\n        });\n    };\n    /**\n     * Sets the new device token\n     * @param token Net token to set\n     */\n    PixlaService.prototype.setToken = function (token) {\n        return axios.put('pixla', { token: token }, { headers: authorizationHeader() });\n    };\n    return PixlaService;\n}());\nexport default new PixlaService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PixlaTokenEditor.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PixlaTokenEditor.vue?vue&type=script&lang=js&\"","<template>\n\t<ValidationObserver v-slot='{ invalid }'>\n\t\t<CForm @submit.prevent='processSubmit'>\n\t\t\t<CModal\n\t\t\t\tcolor='primary'\n\t\t\t\t:show.sync='show'\n\t\t\t>\n\t\t\t\t<template #header>\n\t\t\t\t\t<h5 class='modal-title'>\n\t\t\t\t\t\t{{ $t('cloud.pixla.editModal.title') }}\n\t\t\t\t\t</h5>\n\t\t\t\t\t<CButtonClose class='text-white' @click='close' />\n\t\t\t\t</template>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\trequired: \"cloud.pixla.editModal.messages.token\"\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='token'\n\t\t\t\t\t\t:label='$t(\"cloud.pixla.editModal.token\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<template #footer>\n\t\t\t\t\t<CButton color='danger' @click='close'>\n\t\t\t\t\t\t{{ $t('forms.cancel') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton color='success' type='submit' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.edit') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</template>\n\t\t\t</CModal>\n\t\t</CForm>\n\t</ValidationObserver>\n</template>\n\n<script>\nimport {CButton, CForm, CInput, CModal} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {required} from 'vee-validate/dist/rules';\nimport PixlaService from '../../services/PixlaService';\n\nexport default {\n\tname: 'PixlaTokenEditor',\n\tcomponents: {\n\t\tCButton,\n\t\tCForm,\n\t\tCInput,\n\t\tCModal,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tprops: {\n\t\tshow: {\n\t\t\ttype: Boolean,\n\t\t\trequired: true,\n\t\t}\n\t},\n\tdata() {\n\t\treturn {\n\t\t\ttoken: '',\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t},\n\tmethods: {\n\t\tclose() {\n\t\t\tthis.$emit('update:show', false);\n\t\t},\n\t\tprocessSubmit() {\n\t\t\tPixlaService.setToken(this.token)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.token = null;\n\t\t\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\t\t\tthis.$emit('update:show', false);\n\t\t\t\t\tthis.$emit('tokenUpdated');\n\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\tthis.$t('cloud.pixla.editModal.messages.success').toString()\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\tthis.$t('cloud.pixla.editModal.messages.failure').toString()\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t}\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./PixlaTokenEditor.vue?vue&type=template&id=6ca8028d&\"\nimport script from \"./PixlaTokenEditor.vue?vue&type=script&lang=js&\"\nexport * from \"./PixlaTokenEditor.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6ca8028d')) {\n      api.createRecord('6ca8028d', component.options)\n    } else {\n      api.reload('6ca8028d', component.options)\n    }\n    module.hot.accept(\"./PixlaTokenEditor.vue?vue&type=template&id=6ca8028d&\", function () {\n      api.rerender('6ca8028d', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/Cloud/PixlaTokenEditor.vue\"\nexport default component.exports","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PixlaControl.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PixlaControl.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard body-wrapper>\n\t\t<table class='table table-striped'>\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>{{ $t('cloud.pixla.token') }}</th>\n\t\t\t\t\t<td class='d-flex'>\n\t\t\t\t\t\t<div class='mr-auto'>\n\t\t\t\t\t\t\t{{ token }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<CButton color='primary' size='sm' @click='showEditor = true'>\n\t\t\t\t\t\t\t{{ $t('forms.edit') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>{{ $t('service.status') }}</th>\n\t\t\t\t\t<td v-if='missing'>\n\t\t\t\t\t\t{{ $t('service.states.missing') }}\n\t\t\t\t\t</td>\n\t\t\t\t\t<td v-if='unsupported'>\n\t\t\t\t\t\t{{ $t('service.states.unsupported') }}\n\t\t\t\t\t</td>\n\t\t\t\t\t<td v-else class='d-flex'>\n\t\t\t\t\t\t<div class='mr-auto'>\n\t\t\t\t\t\t\t{{ $t('service.states.' + (enabled ? 'enabled' : 'disabled')) }},\n\t\t\t\t\t\t\t{{ $t('service.states.' + (active ? 'active' : 'inactive')) }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\tv-if='!enabled'\n\t\t\t\t\t\t\tcolor='success'\n\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t@click='enable()'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ $t('service.actions.enable') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\tv-if='enabled'\n\t\t\t\t\t\t\tcolor='danger'\n\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t@click='disable()'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ $t('service.actions.disable') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t\t<div v-if='!missing && !unsupported'>\n\t\t\t<CButton color='primary' href='https://www.pixla.online/' target='_blank'>\n\t\t\t\t{{ $t('cloud.pixla.dashboard') }}\n\t\t\t</CButton>\n\t\t</div>\n\t\t<PixlaTokenEditor :show.sync='showEditor' @tokenUpdated='getToken' />\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard} from '@coreui/vue/src';\nimport PixlaTokenEditor from '../../components/Cloud/PixlaTokenEditor';\nimport PixlaService from '../../services/PixlaService';\nimport ServiceService from '../../services/ServiceService';\n\nexport default {\n\tname: 'PixlaControl',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tPixlaTokenEditor,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tshowEditor: false,\n\t\t\tserviceName: 'gwman-client',\n\t\t\ttoken: null,\n\t\t\tactive: false,\n\t\t\tenabled: false,\n\t\t\tmissing: false,\n\t\t\tstatus: null,\n\t\t\tunsupported: false,\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.$store.commit('spinner/SHOW');\n\t\tthis.getToken();\n\t\tthis.getStatus();\n\t},\n\tmethods: {\n\t\tenable() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.enable(this.serviceName)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getStatus();\n\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\tthis.$t('service.' + this.serviceName + '.messages.enable')\n\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\tdisable() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.disable(this.serviceName)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getStatus();\n\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\tthis.$t('service.' + this.serviceName + '.messages.disable')\n\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\tgetStatus() {\n\t\t\tServiceService.getStatus(this.serviceName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.unsupported = false;\n\t\t\t\t\tthis.active = response.data.active;\n\t\t\t\t\tthis.enabled = response.data.enabled;\n\t\t\t\t\tthis.status = response.data.status;\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t})\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\tgetToken() {\n\t\t\tPixlaService.getToken()\n\t\t\t\t.then((token) => {\n\t\t\t\t\tthis.token = token;\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tthis.token = null;\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t});\n\t\t},\n\t\thandleError(error) {\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tlet response = error.response;\n\t\t\tif (response.status === 404) {\n\t\t\t\tthis.missing = true;\n\t\t\t\tthis.$toast.error(this.$t('service.errors.missingService').toString());\n\t\t\t}\n\t\t\tif (response.status === 500 &&\n\t\t\t\t\tresponse.data.message === 'Unsupported init system') {\n\t\t\t\tthis.unsupported = false;\n\t\t\t\tthis.$toast.error(this.$t('service.errors.unsupportedInit').toString());\n\t\t\t}\n\t\t},\n\t\trestart() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.restart(this.serviceName)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getStatus();\n\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\tthis.$t('service.' + this.serviceName + '.messages.restart')\n\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\tstart() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.start(this.serviceName)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getStatus();\n\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\tthis.$t('service.' + this.serviceName + '.messages.start')\n\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\tstop() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.stop(this.serviceName)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getStatus();\n\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\tthis.$t('service.' + this.serviceName + '.messages.stop')\n\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t},\n\tbeforeRouteEnter(to, from, next) {\n\t\tnext(vm => {\n\t\t\tif (!vm.$store.getters['features/isEnabled']('pixla')) {\n\t\t\t\tvm.$toast.error(\n\t\t\t\t\tvm.$t('cloud.pixla.messages.disabled').toString()\n\t\t\t\t);\n\t\t\t\tvm.$router.push(from.path);\n\t\t\t}\n\t\t});\n\t},\n\tmetaInfo: {\n\t\ttitle: 'cloud.pixla.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./PixlaControl.vue?vue&type=template&id=03b6e156&\"\nimport script from \"./PixlaControl.vue?vue&type=script&lang=js&\"\nexport * from \"./PixlaControl.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('03b6e156')) {\n      api.createRecord('03b6e156', component.options)\n    } else {\n      api.reload('03b6e156', component.options)\n    }\n    module.hot.accept(\"./PixlaControl.vue?vue&type=template&id=03b6e156&\", function () {\n      api.rerender('03b6e156', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Cloud/PixlaControl.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\n        \"CListGroup\",\n        [\n          _c(\"CListGroupItem\", { attrs: { to: \"/gateway/info/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"gateway.info.title\")) + \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"gateway.info.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/gateway/log/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"gateway.log.title\")) + \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"gateway.log.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/gateway/change-mode/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"gateway.mode.title\")) + \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"gateway.mode.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\n            \"CListGroupItem\",\n            { attrs: { to: \"/service/iqrf-gateway-daemon/\" } },\n            [\n              _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                _vm._v(\n                  \"\\n\\t\\t\\t\\t\" +\n                    _vm._s(_vm.$t(\"service.iqrf-gateway-daemon.title\")) +\n                    \"\\n\\t\\t\\t\"\n                )\n              ]),\n              _vm._v(\" \"),\n              _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                _vm._v(\n                  \"\\n\\t\\t\\t\\t\" +\n                    _vm._s(_vm.$t(\"service.iqrf-gateway-daemon.description\")) +\n                    \"\\n\\t\\t\\t\"\n                )\n              ])\n            ]\n          ),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"ssh\")\n            ? _c(\"CListGroupItem\", { attrs: { to: \"/service/ssh/\" } }, [\n                _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"service.ssh.title\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"service.ssh.description\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ])\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"unattendedUpgrades\")\n            ? _c(\n                \"CListGroupItem\",\n                { attrs: { to: \"/service/unattended-upgrades/\" } },\n                [\n                  _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"service.unattended-upgrades.title\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\"service.unattended-upgrades.description\")\n                        ) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"updater\")\n            ? _c(\"CListGroupItem\", { attrs: { to: \"/gateway/updater/\" } }, [\n                _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"gateway.updater.title\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"gateway.updater.description\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ])\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/gateway/power/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"gateway.power.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"gateway.power.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ])\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<CListGroup>\n\t\t\t<CListGroupItem to='/gateway/info/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('gateway.info.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('gateway.info.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/gateway/log/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('gateway.log.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('gateway.log.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/gateway/change-mode/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('gateway.mode.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('gateway.mode.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/service/iqrf-gateway-daemon/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('service.iqrf-gateway-daemon.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('service.iqrf-gateway-daemon.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"ssh\")'\n\t\t\t\tto='/service/ssh/'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('service.ssh.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('service.ssh.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"unattendedUpgrades\")'\n\t\t\t\tto='/service/unattended-upgrades/'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('service.unattended-upgrades.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('service.unattended-upgrades.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"updater\")'\n\t\t\t\tto='/gateway/updater/'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('gateway.updater.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('gateway.updater.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/gateway/power/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('gateway.power.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('gateway.power.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t</CListGroup>\n\t</CCard>\n</template>\n\n<script>\nimport {CCard, CListGroup, CListGroupItem} from '@coreui/vue/src';\n\nexport default {\n\tname: 'GatewayDisambiguation',\n\tcomponents: {\n\t\tCCard,\n\t\tCListGroup,\n\t\tCListGroupItem\n\t},\n\tmetaInfo: {\n\t\ttitle: 'gateway.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GatewayDisambiguation.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GatewayDisambiguation.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GatewayDisambiguation.vue?vue&type=template&id=3b6d1b7c&\"\nimport script from \"./GatewayDisambiguation.vue?vue&type=script&lang=js&\"\nexport * from \"./GatewayDisambiguation.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('3b6d1b7c')) {\n      api.createRecord('3b6d1b7c', component.options)\n    } else {\n      api.reload('3b6d1b7c', component.options)\n    }\n    module.hot.accept(\"./GatewayDisambiguation.vue?vue&type=template&id=3b6d1b7c&\", function () {\n      api.rerender('3b6d1b7c', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Gateway/GatewayDisambiguation.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\"div\", { staticClass: \"table-responsive\" }, [\n        _vm.info !== null\n          ? _c(\"table\", { staticClass: \"table table-striped\" }, [\n              _c(\"tbody\", [\n                _c(\"tr\", [\n                  _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.board\")))]),\n                  _vm._v(\" \"),\n                  _c(\"td\", [_vm._v(_vm._s(_vm.info.board))])\n                ]),\n                _vm._v(\" \"),\n                _vm.info.gwId\n                  ? _c(\"tr\", [\n                      _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.gwId\")))]),\n                      _vm._v(\" \"),\n                      _c(\"td\", [_vm._v(_vm._s(_vm.info.gwId))])\n                    ])\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _vm.info.pixla\n                  ? _c(\"tr\", [\n                      _c(\"th\", [\n                        _c(\n                          \"a\",\n                          { attrs: { href: \"https://www.pixla.online/\" } },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"gateway.info.gwmonId\")) +\n                                \"\\n\\t\\t\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"td\", [_vm._v(_vm._s(_vm.info.pixla))])\n                    ])\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _vm.info.versions.controller\n                  ? _c(\"tr\", [\n                      _c(\"th\", [\n                        _vm._v(\n                          _vm._s(\n                            _vm.$t(\"gateway.info.version.iqrfGatewayController\")\n                          )\n                        )\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"td\", [_vm._v(_vm._s(_vm.info.versions.controller))])\n                    ])\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _c(\"tr\", [\n                  _c(\"th\", [\n                    _vm._v(\n                      _vm._s(_vm.$t(\"gateway.info.version.iqrfGatewayDaemon\"))\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"td\", [_vm._v(_vm._s(_vm.info.versions.daemon))])\n                ]),\n                _vm._v(\" \"),\n                _c(\"tr\", [\n                  _c(\"th\", [\n                    _vm._v(\n                      _vm._s(_vm.$t(\"gateway.info.version.iqrfGatewayWebapp\"))\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"td\", [_vm._v(_vm._s(_vm.info.versions.webapp))])\n                ]),\n                _vm._v(\" \"),\n                _c(\"tr\", [\n                  _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.hostname\")))]),\n                  _vm._v(\" \"),\n                  _c(\"td\", [_vm._v(_vm._s(_vm.info.hostname))])\n                ]),\n                _vm._v(\" \"),\n                _c(\"tr\", [\n                  _c(\"th\", [\n                    _vm._v(_vm._s(_vm.$t(\"gateway.info.addresses.ip\")))\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"td\",\n                    _vm._l(_vm.getIpAddresses, function(ref) {\n                      var iface = ref.iface\n                      var addresses = ref.addresses\n                      return _c(\"span\", { key: iface }, [\n                        _c(\"strong\", [_vm._v(_vm._s(iface) + \": \")]),\n                        _vm._v(\" \" + _vm._s(addresses)),\n                        _c(\"br\")\n                      ])\n                    }),\n                    0\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"tr\", [\n                  _c(\"th\", [\n                    _vm._v(_vm._s(_vm.$t(\"gateway.info.addresses.mac\")))\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"td\",\n                    _vm._l(_vm.getMacAddresses, function(ref) {\n                      var iface = ref.iface\n                      var address = ref.address\n                      return _c(\"span\", { key: iface }, [\n                        _c(\"strong\", [_vm._v(_vm._s(iface) + \": \")]),\n                        _vm._v(\" \" + _vm._s(address)),\n                        _c(\"br\")\n                      ])\n                    }),\n                    0\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"tr\", [\n                  _c(\"th\", [\n                    _vm._v(_vm._s(_vm.$t(\"gateway.info.usages.disks\")))\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"td\",\n                    _vm._l(_vm.info.diskUsages, function(usage) {\n                      return _c(\n                        \"div\",\n                        { key: usage.fsName },\n                        [\n                          _c(\"strong\", [\n                            _vm._v(\n                              _vm._s(usage.fsName) +\n                                \" (\" +\n                                _vm._s(usage.fsType) +\n                                \"):\"\n                            )\n                          ]),\n                          _vm._v(\" \"),\n                          _c(\"resource-usage\", { attrs: { usage: usage } }),\n                          _c(\"br\")\n                        ],\n                        1\n                      )\n                    }),\n                    0\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"tr\", [\n                  _c(\"th\", [\n                    _vm._v(_vm._s(_vm.$t(\"gateway.info.usages.memory\")))\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"td\",\n                    [\n                      _c(\"resource-usage\", {\n                        attrs: { usage: _vm.info.memoryUsage }\n                      })\n                    ],\n                    1\n                  )\n                ]),\n                _vm._v(\" \"),\n                _vm.info.swapUsage\n                  ? _c(\"tr\", [\n                      _c(\"th\", [\n                        _vm._v(_vm._s(_vm.$t(\"gateway.info.usages.swap\")))\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\n                        \"td\",\n                        [\n                          _c(\"resource-usage\", {\n                            attrs: { usage: _vm.info.swapUsage }\n                          })\n                        ],\n                        1\n                      )\n                    ])\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _c(\"tr\", [\n                  _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.tr.title\")))]),\n                  _vm._v(\" \"),\n                  _c(\"td\", [_c(\"coordinator-info\")], 1)\n                ]),\n                _vm._v(\" \"),\n                _c(\"tr\", [\n                  _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.gwMode\")))]),\n                  _vm._v(\" \"),\n                  _c(\"td\", [\n                    _vm._v(_vm._s(_vm.$t(\"gateway.mode.modes.\" + _vm.mode)))\n                  ])\n                ])\n              ])\n            ])\n          : _vm._e()\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"CButton\",\n        {\n          attrs: { color: \"primary\" },\n          on: {\n            click: function($event) {\n              return _vm.downloadDiagnostics()\n            }\n          }\n        },\n        [\n          _vm._v(\n            \"\\n\\t\\t\" + _vm._s(_vm.$t(\"gateway.diagnostics.download\")) + \"\\n\\t\"\n          )\n        ]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.hasData\n    ? _c(\"span\", [\n        _c(\"strong\", [\n          _vm._v(_vm._s(_vm.$t(\"gateway.info.tr.moduleType\")) + \": \")\n        ]),\n        _vm._v(\"\\n\\t\" + _vm._s(_vm.trMcuType.trType)),\n        _c(\"br\"),\n        _vm._v(\" \"),\n        _c(\"strong\", [\n          _vm._v(_vm._s(_vm.$t(\"gateway.info.tr.mcuType\")) + \": \")\n        ]),\n        _vm._v(\"\\n\\t\" + _vm._s(_vm.trMcuType.mcuType)),\n        _c(\"br\"),\n        _vm._v(\" \"),\n        _c(\"strong\", [\n          _vm._v(_vm._s(_vm.$t(\"gateway.info.tr.moduleId\")) + \": \")\n        ]),\n        _vm._v(\" \" + _vm._s(_vm.osInfo.mid)),\n        _c(\"br\"),\n        _vm._v(\" \"),\n        _c(\"strong\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.tr.os\")) + \": \")]),\n        _vm._v(\n          \"\\n\\t\" +\n            _vm._s(_vm.osInfo.osVersion) +\n            \" (\" +\n            _vm._s(_vm.osInfo.osBuild) +\n            \")\"\n        ),\n        _c(\"br\"),\n        _vm._v(\" \"),\n        _c(\"strong\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.tr.dpa\")) + \": \")]),\n        _vm._v(\"\\n\\t\" + _vm._s(_vm.enumeration.dpaVer)),\n        _c(\"br\"),\n        _vm._v(\" \"),\n        _vm.enumeration.flags.rfMode\n          ? _c(\"span\", [\n              _c(\"strong\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.tr.rfMode\")))]),\n              _vm._v(\"\\n\\t\\t\" + _vm._s(_vm.enumeration.flags.rfMode) + \"\\n\\t\")\n            ])\n          : _vm.enumeration.flags.networkType\n          ? _c(\"span\", [\n              _c(\"strong\", [\n                _vm._v(_vm._s(_vm.$t(\"gateway.info.tr.networkType\")))\n              ]),\n              _vm._v(\n                \"\\n\\t\\t\" + _vm._s(_vm.enumeration.flags.networkType) + \"\\n\\t\"\n              )\n            ])\n          : _vm._e(),\n        _vm._v(\" \"),\n        _c(\"strong\", [\n          _vm._v(_vm._s(_vm.$t(\"gateway.info.tr.voltage\")) + \": \")\n        ]),\n        _vm._v(\"\\n\\t\" + _vm._s(_vm.osInfo.supplyVoltage)),\n        _c(\"br\")\n      ])\n    : _c(\"span\", [\n        _vm._v(\"\\n\\t\" + _vm._s(_vm.$t(\"gateway.info.tr.error\")) + \"\\n\")\n      ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import store from '../store';\n/**\n * IQRF Network service\n */\nvar IqrfNetService = /** @class */ (function () {\n    function IqrfNetService() {\n    }\n    /**\n     * Performs AutoNetwork\n     * @param autoNetwork Object containing AutoNetwork parameters\n     */\n    IqrfNetService.prototype.autoNetwork = function (autoNetwork) {\n        var json = {\n            'mType': 'iqmeshNetwork_AutoNetwork',\n            'data': {\n                'req': {\n                    'discoveryTxPower': autoNetwork.discoveryTxPower,\n                    'discoveryBeforeStart': autoNetwork.discoveryBeforeStart,\n                    'skipDiscoveryEachWave': autoNetwork.skipDiscoveryEachWave,\n                    'actionRetries': autoNetwork.actionRetries,\n                },\n                'returnVerbose': true,\n            },\n        };\n        if (autoNetwork.stopConditions) {\n            Object.assign(json.data.req, { 'stopConditions': autoNetwork.stopConditions });\n        }\n        if (autoNetwork.overlappingNetworks) {\n            Object.assign(json.data.req, { 'overlappingNetworks': autoNetwork.overlappingNetworks });\n        }\n        if (autoNetwork.hwpidFiltering) {\n            Object.assign(json.data.req, { 'hwpidFiltering': autoNetwork.hwpidFiltering });\n        }\n        return store.dispatch('sendRequest', json);\n    };\n    /**\n     * Bonds a node locally\n     * @param address A requested address for the bonded node. If this parameter equals to 0, then the first free address is assigned to the node.\n     */\n    IqrfNetService.prototype.bondLocal = function (address) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqmeshNetwork_BondNodeLocal',\n            'data': {\n                'repeat': 2,\n                'req': {\n                    'deviceAddr': address,\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Bonds a node via IQRF Smart Connect\n     * @param address Address to bond the device to.  If this parameter equals to 0, then the first free address is assigned to the node.\n     * @param scCode Device Smart Connect code\n     * @param testRetries Maximum number of FRCs used to test whether the Node was successfully bonded\n     */\n    IqrfNetService.prototype.bondSmartConnect = function (address, scCode, testRetries) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqmeshNetwork_SmartConnect',\n            'data': {\n                'repeat': 2,\n                'req': {\n                    'deviceAddr': address,\n                    'smartConnectCode': scCode,\n                    'bondingTestRetries': testRetries,\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Clears all bonds\n     * @param coordinatorOnly Removes bonds only in the coordinator memory\n     */\n    IqrfNetService.prototype.clearAllBonds = function (coordinatorOnly) {\n        if (coordinatorOnly) {\n            return store.dispatch('sendRequest', {\n                'mType': 'iqrfEmbedCoordinator_ClearAllBonds',\n                'data': {\n                    'req': {\n                        'nAdr': 0,\n                        'param': {},\n                    },\n                    'returnVerbose': true,\n                },\n            });\n        }\n        else {\n            return this.removeBond(255, false);\n        }\n    };\n    /**\n     * Performs Coordinator discovery\n     * @param txPower TX Power\n     * @param maxAddr Maximum node address\n     */\n    IqrfNetService.prototype.discovery = function (txPower, maxAddr) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfEmbedCoordinator_Discovery',\n            'data': {\n                'repeat': 2,\n                'req': {\n                    'nAdr': 0,\n                    'param': {\n                        'txPower': txPower,\n                        'maxAddr': maxAddr,\n                    },\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Performs device enumeration\n     * @param address Device address\n     */\n    IqrfNetService.prototype.enumerateDevice = function (address) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqmeshNetwork_EnumerateDevice',\n            'data': {\n                'repeat': 2,\n                'req': {\n                    'deviceAddr': address,\n                    'morePeripheralsInfo': true,\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Retrieves list of bonded devices\n     */\n    IqrfNetService.prototype.getBonded = function () {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfEmbedCoordinator_BondedDevices',\n            'data': {\n                'req': {\n                    'nAdr': 0,\n                    'param': {},\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Retrieves list of discovered devices\n     */\n    IqrfNetService.prototype.getDiscovered = function () {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfEmbedCoordinator_DiscoveredDevices',\n            'data': {\n                'req': {\n                    'nAdr': 0,\n                    'param': {},\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Perform FRC Ping\n     */\n    IqrfNetService.prototype.ping = function () {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfEmbedFrc_Send',\n            'data': {\n                'req': {\n                    'nAdr': 0,\n                    'param': {\n                        'frcCommand': 0,\n                        'userData': [0, 0],\n                    },\n                    'returnVerbose': true,\n                },\n            },\n        });\n    };\n    /**\n     * Removes a bond\n     * @param addr Address of a node bond to be removed\n     * @param coordinatorOnly Removes a bond only in the coordinator memory\n     */\n    IqrfNetService.prototype.removeBond = function (addr, coordinatorOnly) {\n        if (coordinatorOnly) {\n            return store.dispatch('sendRequest', {\n                'mType': 'iqrfEmbedCoordinator_RemoveBond',\n                'data': {\n                    'req': {\n                        'nAdr': 0,\n                        'param': {\n                            'bondAddr': addr,\n                        },\n                    },\n                    'returnVerbose': true,\n                },\n            });\n        }\n        else {\n            return store.dispatch('sendRequest', {\n                'mType': 'iqmeshNetwork_RemoveBond',\n                'data': {\n                    'repeat': 2,\n                    'req': {\n                        'deviceAddr': addr,\n                    },\n                    'returnVerbose': true,\n                },\n            });\n        }\n    };\n    /**\n     * Sends JSON API request\n     * @param json JSON API request string\n     */\n    IqrfNetService.prototype.sendJson = function (json) {\n        return store.dispatch('sendRequest', json);\n    };\n    /**\n     * Writes TR configuration\n     * @param address Device address to write the configuration to\n     * @param configuration New TR configuration\n     */\n    IqrfNetService.prototype.writeTrConfiguration = function (address, configuration) {\n        delete configuration.rfBand;\n        configuration.deviceAddr = address;\n        return store.dispatch('sendRequest', {\n            'mType': 'iqmeshNetwork_WriteTrConf',\n            'data': {\n                'repeat': 2,\n                'req': configuration,\n                'returnVerbose': true,\n            },\n        });\n    };\n    return IqrfNetService;\n}());\nexport default new IqrfNetService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CoordinatorInfo.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CoordinatorInfo.vue?vue&type=script&lang=js&\"","<template>\n\t<span v-if='hasData'>\n\t\t<strong>{{ $t('gateway.info.tr.moduleType') }}: </strong>\n\t\t{{ trMcuType.trType }}<br>\n\t\t<strong>{{ $t('gateway.info.tr.mcuType') }}: </strong>\n\t\t{{ trMcuType.mcuType }}<br>\n\t\t<strong>{{ $t('gateway.info.tr.moduleId') }}: </strong> {{ osInfo.mid }}<br>\n\t\t<strong>{{ $t('gateway.info.tr.os') }}: </strong>\n\t\t{{ osInfo.osVersion }} ({{ osInfo.osBuild }})<br>\n\t\t<strong>{{ $t('gateway.info.tr.dpa') }}: </strong>\n\t\t{{ enumeration.dpaVer }}<br>\n\t\t<span v-if='enumeration.flags.rfMode'>\n\t\t\t<strong>{{ $t('gateway.info.tr.rfMode') }}</strong>\n\t\t\t{{ enumeration.flags.rfMode }}\n\t\t</span>\n\t\t<span v-else-if='enumeration.flags.networkType'>\n\t\t\t<strong>{{ $t('gateway.info.tr.networkType') }}</strong>\n\t\t\t{{ enumeration.flags.networkType }}\n\t\t</span>\n\t\t<strong>{{ $t('gateway.info.tr.voltage') }}: </strong>\n\t\t{{ osInfo.supplyVoltage }}<br>\n\t</span>\n\t<span v-else>\n\t\t{{ $t('gateway.info.tr.error') }}\n\t</span>\n</template>\n\n<script>\nimport IqrfNetService from '../../services/IqrfNetService';\nexport default {\n\tname: 'CoordinatorInfo',\n\tdata() {\n\t\treturn {\n\t\t\tenumeration: null,\n\t\t\thasData: false,\n\t\t\tosInfo: null,\n\t\t\ttrMcuType: null\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type !== 'SOCKET_ONMESSAGE' ||\n\t\t\t\t\tmutation.payload.mType !== 'iqmeshNetwork_EnumerateDevice') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst data = mutation.payload.data.rsp;\n\t\t\t\tthis.enumeration = data.peripheralEnumeration;\n\t\t\t\tthis.osInfo = data.osRead;\n\t\t\t\tthis.trMcuType = this.osInfo.trMcuType;\n\t\t\t\tthis.hasData = true;\n\t\t\t} catch (e) {\n\t\t\t\tthis.hasData = false;\n\t\t\t}\n\t\t});\n\t\tIqrfNetService.enumerateDevice(0);\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./CoordinatorInfo.vue?vue&type=template&id=62cb4fe2&\"\nimport script from \"./CoordinatorInfo.vue?vue&type=script&lang=js&\"\nexport * from \"./CoordinatorInfo.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('62cb4fe2')) {\n      api.createRecord('62cb4fe2', component.options)\n    } else {\n      api.reload('62cb4fe2', component.options)\n    }\n    module.hot.accept(\"./CoordinatorInfo.vue?vue&type=template&id=62cb4fe2&\", function () {\n      api.rerender('62cb4fe2', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/Gateway/CoordinatorInfo.vue\"\nexport default component.exports","import store from '../store';\n/**\n * IQRF Gateway Daemon operational mode service\n */\nvar DaemonModeService = /** @class */ (function () {\n    function DaemonModeService() {\n    }\n    /**\n     * Retrieve the current operational mode\n     */\n    DaemonModeService.prototype.get = function () {\n        return this.set('');\n    };\n    /**\n     * Sets a new mode operational mode\n     * @param newMode New operational mode\n     */\n    DaemonModeService.prototype.set = function (newMode) {\n        return store.dispatch('sendRequest', {\n            'mType': 'mngDaemon_Mode',\n            'data': {\n                'req': {\n                    'operMode': newMode,\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    return DaemonModeService;\n}());\nexport default new DaemonModeService();\n","import axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\n/**\n * Gateway service\n */\nvar GatewayService = /** @class */ (function () {\n    function GatewayService() {\n    }\n    /**\n     * Retrieves a ZIP archive with diagnostics data\n     */\n    GatewayService.prototype.getDiagnosticsArchive = function () {\n        return axios.get('diagnostics', { headers: authorizationHeader(), responseType: 'blob' });\n    };\n    /**\n     * Retrieves information about the gateway\n     */\n    GatewayService.prototype.getInfo = function () {\n        return axios.get('gateway/info', { headers: authorizationHeader() });\n    };\n    /**\n     * Retrieves the latest IQRF gateway Daemon's log file\n     */\n    GatewayService.prototype.getLatestLog = function () {\n        return axios.get('gateway/log', { headers: authorizationHeader() });\n    };\n    /**\n     * Retrieves a ZIP archive with IQRF Gateway Daemon's log files\n     */\n    GatewayService.prototype.getLogArchive = function () {\n        return axios.get('gateway/logs', { headers: authorizationHeader(), responseType: 'blob' });\n    };\n    /**\n     * Performs power off\n     */\n    GatewayService.prototype.performPowerOff = function () {\n        return axios.post('gateway/poweroff', null, { headers: authorizationHeader() });\n    };\n    /**\n     * Performs reboot\n     */\n    GatewayService.prototype.performReboot = function () {\n        return axios.post('gateway/reboot', null, { headers: authorizationHeader() });\n    };\n    return GatewayService;\n}());\nexport default new GatewayService();\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"usage\" }, [\n    _vm._v(\n      \"\\n\\t\" +\n        _vm._s(_vm.$t(\"gateway.info.usages.used\")) +\n        \"\\n\\t\" +\n        _vm._s(_vm.usage.used) +\n        \" / \" +\n        _vm._s(_vm.usage.size) +\n        \"\\n\\t\"\n    ),\n    _c(\"div\", { staticClass: \"progress\" }, [\n      _c(\n        \"div\",\n        {\n          staticClass: \"progress-bar usage-progress-bar\",\n          style: { width: _vm.usage.usage },\n          attrs: { role: \"progressbar\" }\n        },\n        [\n          _vm._v(\n            \"\\n\\t\\t\\t\" +\n              _vm._s(_vm.usage.used) +\n              \" (\" +\n              _vm._s(_vm.usage.usage) +\n              \")\\n\\t\\t\"\n          )\n        ]\n      )\n    ])\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<div class='usage'>\n\t\t{{ $t('gateway.info.usages.used') }}\n\t\t{{ usage.used }} / {{ usage.size }}\n\t\t<div class='progress'>\n\t\t\t<div\n\t\t\t\tclass='progress-bar usage-progress-bar'\n\t\t\t\trole='progressbar'\n\t\t\t\t:style='{ width: usage.usage }'\n\t\t\t>\n\t\t\t\t{{ usage.used }} ({{ usage.usage }})\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nexport default {\n\tname: 'ResourceUsage',\n\tprops: {\n\t\tusage: {\n\t\t\ttype: Object,\n\t\t\trequired: true,\n\t\t}\n\t},\n};\n</script>\n\n<style scoped>\n.usage {\n\tdisplay: inline;\n}\n</style>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ResourceUsage.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ResourceUsage.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ResourceUsage.vue?vue&type=template&id=6ed3f697&scoped=true&\"\nimport script from \"./ResourceUsage.vue?vue&type=script&lang=js&\"\nexport * from \"./ResourceUsage.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ResourceUsage.vue?vue&type=style&index=0&id=6ed3f697&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"6ed3f697\",\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6ed3f697')) {\n      api.createRecord('6ed3f697', component.options)\n    } else {\n      api.reload('6ed3f697', component.options)\n    }\n    module.hot.accept(\"./ResourceUsage.vue?vue&type=template&id=6ed3f697&scoped=true&\", function () {\n      api.rerender('6ed3f697', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/Gateway/ResourceUsage.vue\"\nexport default component.exports","export function fileDownloader(response, contentType, fileName) {\n    var contentDisposition = response.headers['content-disposition'];\n    if (contentDisposition) {\n        var fileNameMatch = contentDisposition.match(/filename=\"(.+)\"/);\n        if (fileNameMatch.length === 2) {\n            fileName = fileNameMatch[1];\n        }\n    }\n    var blob = new Blob([response.data], { type: contentType });\n    var fileUrl = window.URL.createObjectURL(blob);\n    var file = document.createElement('a');\n    file.href = fileUrl;\n    file.setAttribute('download', fileName);\n    document.body.appendChild(file);\n    return file;\n}\n","<template>\n\t<CCard body-wrapper>\n\t\t<div class='table-responsive'>\n\t\t\t<table v-if='info !== null' class='table table-striped'>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('gateway.info.board') }}</th>\n\t\t\t\t\t\t<td>{{ info.board }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr v-if='info.gwId'>\n\t\t\t\t\t\t<th>{{ $t('gateway.info.gwId') }}</th>\n\t\t\t\t\t\t<td>{{ info.gwId }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr v-if='info.pixla'>\n\t\t\t\t\t\t<th>\n\t\t\t\t\t\t\t<a href='https://www.pixla.online/'>\n\t\t\t\t\t\t\t\t{{ $t('gateway.info.gwmonId') }}\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</th>\n\t\t\t\t\t\t<td>{{ info.pixla }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr v-if='info.versions.controller'>\n\t\t\t\t\t\t<th>{{ $t('gateway.info.version.iqrfGatewayController') }}</th>\n\t\t\t\t\t\t<td>{{ info.versions.controller }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('gateway.info.version.iqrfGatewayDaemon') }}</th>\n\t\t\t\t\t\t<td>{{ info.versions.daemon }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('gateway.info.version.iqrfGatewayWebapp') }}</th>\n\t\t\t\t\t\t<td>{{ info.versions.webapp }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('gateway.info.hostname') }}</th>\n\t\t\t\t\t\t<td>{{ info.hostname }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('gateway.info.addresses.ip') }}</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<span v-for='{iface, addresses} of getIpAddresses' :key='iface'>\n\t\t\t\t\t\t\t\t<strong>{{ iface }}: </strong> {{ addresses }}<br>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('gateway.info.addresses.mac') }}</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<span v-for='{iface, address} of getMacAddresses' :key='iface'>\n\t\t\t\t\t\t\t\t<strong>{{ iface }}: </strong> {{ address }}<br>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('gateway.info.usages.disks') }}</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div v-for='usage of info.diskUsages' :key='usage.fsName'>\n\t\t\t\t\t\t\t\t<strong>{{ usage.fsName }} ({{ usage.fsType }}):</strong>\n\t\t\t\t\t\t\t\t<resource-usage :usage='usage' /><br>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('gateway.info.usages.memory') }}</th>\n\t\t\t\t\t\t<td><resource-usage :usage='info.memoryUsage' /></td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr v-if='info.swapUsage'>\n\t\t\t\t\t\t<th>{{ $t('gateway.info.usages.swap') }}</th>\n\t\t\t\t\t\t<td><resource-usage :usage='info.swapUsage' /></td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('gateway.info.tr.title') }}</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<coordinator-info />\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('gateway.info.gwMode') }}</th>\n\t\t\t\t\t\t<td>{{ $t('gateway.mode.modes.' + mode) }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\t\t<CButton color='primary' @click='downloadDiagnostics()'>\n\t\t\t{{ $t('gateway.diagnostics.download') }}\n\t\t</CButton>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard} from '@coreui/vue/src';\nimport CoordinatorInfo from '../../components/Gateway/CoordinatorInfo';\nimport DaemonModeService from '../../services/DaemonModeService';\nimport GatewayService from '../../services/GatewayService';\nimport ResourceUsage from '../../components/Gateway/ResourceUsage';\nimport {fileDownloader} from '../../helpers/fileDownloader';\n\nexport default {\n\tname: 'GatewayInfo',\n\tcomponents: {CButton, CCard, CoordinatorInfo, ResourceUsage},\n\tdata() {\n\t\treturn {\n\t\t\tcoordinator: null,\n\t\t\tinfo: null,\n\t\t\tmode: 'unknown'\n\t\t};\n\t},\n\tcomputed: {\n\t\tgetIpAddresses() {\n\t\t\tlet addresses = [];\n\t\t\tfor (const nInterface of this.info.interfaces) {\n\t\t\t\tif (nInterface.ipAddresses === null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\taddresses.push({\n\t\t\t\t\tiface: nInterface.name,\n\t\t\t\t\taddresses: nInterface.ipAddresses.join(', ')\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn addresses;\n\t\t},\n\t\tgetMacAddresses() {\n\t\t\tlet addresses = [];\n\t\t\tfor (const nInterface of this.info.interfaces) {\n\t\t\t\tif (nInterface.macAddress === null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\taddresses.push({\n\t\t\t\t\tiface: nInterface.name,\n\t\t\t\t\taddress: nInterface.macAddress\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn addresses;\n\t\t}\n\t},\n\tcreated() {\n\t\tthis.$store.commit('spinner/SHOW');\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONOPEN') {\n\t\t\t\tDaemonModeService.get();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (mutation.type !== 'SOCKET_ONMESSAGE' ||\n\t\t\t\t\tmutation.payload.mType !== 'mngDaemon_Mode') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tthis.mode = mutation.payload.data.rsp.operMode;\n\t\t\t} catch (e) {\n\t\t\t\tthis.mode = 'unknown';\n\t\t\t}\n\t\t});\n\t\tif (this.$store.state.webSocketClient.socket.isConnected) {\n\t\t\tDaemonModeService.get();\n\t\t}\n\t\tGatewayService.getInfo()\n\t\t\t.then(\n\t\t\t\t(response) => {\n\t\t\t\t\tthis.info = response.data;\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t}\n\t\t\t)\n\t\t\t.catch(() => this.$store.commit('spinner/HIDE'));\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\tdownloadDiagnostics() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tGatewayService.getDiagnosticsArchive().then(\n\t\t\t\t(response) => {\n\t\t\t\t\tconst file = fileDownloader(response, 'application/zip', 'iqrf-gateway-diagnostics.zip');\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tfile.click();\n\t\t\t\t}\n\t\t\t).catch(() => (this.$store.commit('spinner/HIDE')));\n\t\t}\n\t},\n\tmetaInfo: {\n\t\ttitle: 'gateway.info.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GatewayInfo.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GatewayInfo.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GatewayInfo.vue?vue&type=template&id=2922fd04&\"\nimport script from \"./GatewayInfo.vue?vue&type=script&lang=js&\"\nexport * from \"./GatewayInfo.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('2922fd04')) {\n      api.createRecord('2922fd04', component.options)\n    } else {\n      api.reload('2922fd04', component.options)\n    }\n    module.hot.accept(\"./GatewayInfo.vue?vue&type=template&id=2922fd04&\", function () {\n      api.rerender('2922fd04', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Gateway/GatewayInfo.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.log\n    ? _c(\n        \"CCard\",\n        { attrs: { \"body-wrapper\": \"\" } },\n        [\n          _c(\"pre\", { staticClass: \"log\" }, [_vm._v(_vm._s(_vm.log))]),\n          _vm._v(\" \"),\n          _c(\n            \"CButton\",\n            {\n              attrs: { color: \"info\" },\n              on: {\n                click: function($event) {\n                  return _vm.downloadArchive()\n                }\n              }\n            },\n            [_vm._v(\"\\n\\t\\t\" + _vm._s(_vm.$t(\"gateway.log.download\")) + \"\\n\\t\")]\n          )\n        ],\n        1\n      )\n    : _vm._e()\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard v-if='log' body-wrapper>\n\t\t<pre class='log'>{{ log }}</pre>\n\t\t<CButton color='info' @click='downloadArchive()'>\n\t\t\t{{ $t('gateway.log.download') }}\n\t\t</CButton>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard} from '@coreui/vue/src';\nimport GatewayService from '../../services/GatewayService';\nimport {fileDownloader} from '../../helpers/fileDownloader';\n\nexport default {\n\tname: 'DaemonLogViewer',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tlog: null\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.$store.commit('spinner/SHOW');\n\t\tGatewayService.getLatestLog()\n\t\t\t.then(\n\t\t\t\t(response) => {\n\t\t\t\t\tthis.log = response.data;\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t}\n\t\t\t)\n\t\t\t.catch((error) => {\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\tif (error.response) {\n\t\t\t\t\tif (error.response.data.code === 500) {\n\t\t\t\t\t\tthis.$toast.error(this.$t('gateway.log.messages.notFound').toString());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t},\n\tmethods: {\n\t\tdownloadArchive() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tGatewayService.getLogArchive().then(\n\t\t\t\t(response) => {\n\t\t\t\t\tconst file = fileDownloader(response, 'application/zip', 'iqrf-gateway-logs.zip');\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tfile.click();\n\t\t\t\t}\n\t\t\t).catch(() => (this.$store.commit('spinner/HIDE')));\n\t\t}\n\t},\n\tmetaInfo: {\n\t\ttitle: 'gateway.log.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DaemonLogViewer.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DaemonLogViewer.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DaemonLogViewer.vue?vue&type=template&id=1b439f44&\"\nimport script from \"./DaemonLogViewer.vue?vue&type=script&lang=js&\"\nexport * from \"./DaemonLogViewer.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('1b439f44')) {\n      api.createRecord('1b439f44', component.options)\n    } else {\n      api.reload('1b439f44', component.options)\n    }\n    module.hot.accept(\"./DaemonLogViewer.vue?vue&type=template&id=1b439f44&\", function () {\n      api.rerender('1b439f44', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Gateway/DaemonLogViewer.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"CCard\", { attrs: { \"body-wrapper\": \"\" } }, [\n    _c(\"table\", { staticClass: \"table table-striped\" }, [\n      _c(\"tr\", [\n        _c(\"th\", [_vm._v(_vm._s(_vm.$t(\"gateway.info.gwMode\")))]),\n        _vm._v(\" \"),\n        _c(\"td\", [_vm._v(_vm._s(_vm.$t(\"gateway.mode.modes.\" + _vm.mode)))])\n      ])\n    ]),\n    _vm._v(\" \"),\n    _vm.mode !== \"unknown\"\n      ? _c(\n          \"div\",\n          [\n            _c(\n              \"CButton\",\n              {\n                attrs: { color: \"primary\" },\n                on: {\n                  click: function($event) {\n                    return _vm.setMode(\"operational\")\n                  }\n                }\n              },\n              [\n                _vm._v(\n                  \"\\n\\t\\t\\t\" +\n                    _vm._s(_vm.$t(\"gateway.mode.modes.operational\")) +\n                    \"\\n\\t\\t\"\n                )\n              ]\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"CButton\",\n              {\n                attrs: { color: \"primary\" },\n                on: {\n                  click: function($event) {\n                    return _vm.setMode(\"service\")\n                  }\n                }\n              },\n              [\n                _vm._v(\n                  \"\\n\\t\\t\\t\" +\n                    _vm._s(_vm.$t(\"gateway.mode.modes.service\")) +\n                    \"\\n\\t\\t\"\n                )\n              ]\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"CButton\",\n              {\n                attrs: { color: \"primary\" },\n                on: {\n                  click: function($event) {\n                    return _vm.setMode(\"forwarding\")\n                  }\n                }\n              },\n              [\n                _vm._v(\n                  \"\\n\\t\\t\\t\" +\n                    _vm._s(_vm.$t(\"gateway.mode.modes.forwarding\")) +\n                    \"\\n\\t\\t\"\n                )\n              ]\n            )\n          ],\n          1\n        )\n      : _vm._e()\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<table class='table table-striped'>\n\t\t\t<tr>\n\t\t\t\t<th>{{ $t('gateway.info.gwMode') }}</th>\n\t\t\t\t<td>{{ $t('gateway.mode.modes.' + mode) }}</td>\n\t\t\t</tr>\n\t\t</table>\n\t\t<div v-if='mode !== \"unknown\"'>\n\t\t\t<CButton color='primary' @click='setMode(\"operational\")'>\n\t\t\t\t{{ $t('gateway.mode.modes.operational') }}\n\t\t\t</CButton>\n\t\t\t<CButton color='primary' @click='setMode(\"service\")'>\n\t\t\t\t{{ $t('gateway.mode.modes.service') }}\n\t\t\t</CButton>\n\t\t\t<CButton color='primary' @click='setMode(\"forwarding\")'>\n\t\t\t\t{{ $t('gateway.mode.modes.forwarding') }}\n\t\t\t</CButton>\n\t\t</div>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard} from '@coreui/vue/src';\nimport DaemonModeService from '../../services/DaemonModeService';\n\nexport default {\n\tname: 'DaemonMode',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tloaded: false,\n\t\t\tmode: 'unknown',\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONOPEN') {\n\t\t\t\tthis.getMode();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (mutation.type !== 'SOCKET_ONMESSAGE' ||\n\t\t\t\t\tmutation.payload.mType !== 'mngDaemon_Mode') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tthis.mode = mutation.payload.data.rsp.operMode;\n\t\t\t\tif (this.loaded) {\n\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\tthis.$t('gateway.mode.messages.' + this.mode).toString()\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthis.loaded = true;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.mode = 'unknown';\n\t\t\t\tthis.$toast.error(\n\t\t\t\t\tthis.$t('gateway.mode.messages.' + this.loaded ? 'set' : 'get')\n\t\t\t\t\t\t.toString()\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t\tif (this.$store.state.webSocketClient.socket.isConnected) {\n\t\t\tthis.getMode();\n\t\t}\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\tgetMode() {\n\t\t\tDaemonModeService.get();\n\t\t},\n\t\tsetMode(newMode) {\n\t\t\tDaemonModeService.set(newMode);\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'gateway.mode.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DaemonMode.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DaemonMode.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DaemonMode.vue?vue&type=template&id=41db1fc5&\"\nimport script from \"./DaemonMode.vue?vue&type=script&lang=js&\"\nexport * from \"./DaemonMode.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('41db1fc5')) {\n      api.createRecord('41db1fc5', component.options)\n    } else {\n      api.reload('41db1fc5', component.options)\n    }\n    module.hot.accept(\"./DaemonMode.vue?vue&type=template&id=41db1fc5&\", function () {\n      api.rerender('41db1fc5', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Gateway/DaemonMode.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\n        \"CButton\",\n        {\n          attrs: { color: \"danger\" },\n          on: {\n            click: function($event) {\n              return _vm.powerOff()\n            }\n          }\n        },\n        [\n          _c(\"CIcon\", {\n            attrs: { content: _vm.$options.icon.cilPowerStandby }\n          }),\n          _vm._v(\n            \"\\n\\t\\t\" + _vm._s(_vm.$t(\"gateway.power.powerOff.title\")) + \"\\n\\t\"\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CButton\",\n        {\n          attrs: { color: \"primary\" },\n          on: {\n            click: function($event) {\n              return _vm.reboot()\n            }\n          }\n        },\n        [\n          _c(\"CIcon\", { attrs: { content: _vm.$options.icon.cilReload } }),\n          _vm._v(\n            \"\\n\\t\\t\" + _vm._s(_vm.$t(\"gateway.power.reboot.title\")) + \"\\n\\t\"\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PowerControl.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PowerControl.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard body-wrapper>\n\t\t<CButton color='danger' @click='powerOff()'>\n\t\t\t<CIcon :content='$options.icon.cilPowerStandby' />\n\t\t\t{{ $t('gateway.power.powerOff.title') }}\n\t\t</CButton>\n\t\t<CButton color='primary' @click='reboot()'>\n\t\t\t<CIcon :content='$options.icon.cilReload' />\n\t\t\t{{ $t('gateway.power.reboot.title') }}\n\t\t</CButton>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CIcon} from '@coreui/vue/src';\nimport { cilPowerStandby, cilReload } from '@coreui/icons';\nimport GatewayService from '../../services/GatewayService';\n\nexport default {\n\tname: 'PowerControl',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCIcon,\n\t},\n\tmethods: {\n\t\tpowerOff() {\n\t\t\tGatewayService.performPowerOff()\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\tthis.$t('gateway.power.powerOff.success').toString()\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t},\n\t\treboot() {\n\t\t\tGatewayService.performReboot()\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\tthis.$t('gateway.power.reboot.success').toString()\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t},\n\t},\n\ticon: {\n\t\tcilPowerStandby,\n\t\tcilReload,\n\t},\n\tmetaInfo: {\n\t\ttitle: 'gateway.power.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./PowerControl.vue?vue&type=template&id=9fdc3fd4&\"\nimport script from \"./PowerControl.vue?vue&type=script&lang=js&\"\nexport * from \"./PowerControl.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('9fdc3fd4')) {\n      api.createRecord('9fdc3fd4', component.options)\n    } else {\n      api.reload('9fdc3fd4', component.options)\n    }\n    module.hot.accept(\"./PowerControl.vue?vue&type=template&id=9fdc3fd4&\", function () {\n      api.rerender('9fdc3fd4', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Gateway/PowerControl.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"CCard\", { attrs: { \"body-wrapper\": \"\" } }, [\n    !_vm.missing && !_vm.unsupported\n      ? _c(\n          \"div\",\n          [\n            !_vm.enabled\n              ? _c(\n                  \"CButton\",\n                  {\n                    attrs: { color: \"success\" },\n                    on: {\n                      click: function($event) {\n                        return _vm.enable()\n                      }\n                    }\n                  },\n                  [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"service.actions.enable\")) +\n                        \"\\n\\t\\t\"\n                    )\n                  ]\n                )\n              : _vm._e(),\n            _vm._v(\" \"),\n            _vm.enabled\n              ? _c(\n                  \"CButton\",\n                  {\n                    attrs: { color: \"danger\" },\n                    on: {\n                      click: function($event) {\n                        return _vm.disable()\n                      }\n                    }\n                  },\n                  [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"service.actions.disable\")) +\n                        \"\\n\\t\\t\"\n                    )\n                  ]\n                )\n              : _vm._e(),\n            _vm._v(\" \"),\n            !_vm.active\n              ? _c(\n                  \"CButton\",\n                  {\n                    attrs: { color: \"success\" },\n                    on: {\n                      click: function($event) {\n                        return _vm.start()\n                      }\n                    }\n                  },\n                  [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"service.actions.start\")) +\n                        \"\\n\\t\\t\"\n                    )\n                  ]\n                )\n              : _vm._e(),\n            _vm._v(\" \"),\n            _vm.active\n              ? _c(\n                  \"CButton\",\n                  {\n                    attrs: { color: \"danger\" },\n                    on: {\n                      click: function($event) {\n                        return _vm.stop()\n                      }\n                    }\n                  },\n                  [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"service.actions.stop\")) +\n                        \"\\n\\t\\t\"\n                    )\n                  ]\n                )\n              : _vm._e(),\n            _vm._v(\" \"),\n            _vm.active\n              ? _c(\n                  \"CButton\",\n                  {\n                    attrs: { color: \"primary\" },\n                    on: {\n                      click: function($event) {\n                        return _vm.restart()\n                      }\n                    }\n                  },\n                  [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"service.actions.restart\")) +\n                        \"\\n\\t\\t\"\n                    )\n                  ]\n                )\n              : _vm._e(),\n            _vm._v(\" \"),\n            _c(\n              \"CButton\",\n              {\n                attrs: { color: \"secondary\" },\n                on: {\n                  click: function($event) {\n                    return _vm.refreshStatus()\n                  }\n                }\n              },\n              [\n                _vm._v(\n                  \"\\n\\t\\t\\t\" +\n                    _vm._s(_vm.$t(\"service.actions.status\")) +\n                    \"\\n\\t\\t\"\n                )\n              ]\n            )\n          ],\n          1\n        )\n      : _vm._e(),\n    _vm._v(\" \"),\n    _c(\"br\"),\n    _vm._v(\" \"),\n    _c(\"strong\", [_vm._v(_vm._s(_vm.$t(\"service.status\")) + \": \")]),\n    _vm._v(\" \"),\n    _vm.missing\n      ? _c(\"span\", [\n          _vm._v(\"\\n\\t\\t\" + _vm._s(_vm.$t(\"service.states.missing\")) + \"\\n\\t\")\n        ])\n      : _vm._e(),\n    _vm._v(\" \"),\n    _vm.unsupported\n      ? _c(\"span\", [\n          _vm._v(\n            \"\\n\\t\\t\" + _vm._s(_vm.$t(\"service.states.unsupported\")) + \"\\n\\t\"\n          )\n        ])\n      : _c(\"span\", [\n          _vm._v(\n            \"\\n\\t\\t\" +\n              _vm._s(\n                _vm.$t(\n                  \"service.states.\" + (_vm.enabled ? \"enabled\" : \"disabled\")\n                )\n              ) +\n              \",\\n\\t\\t\" +\n              _vm._s(\n                _vm.$t(\"service.states.\" + (_vm.active ? \"active\" : \"inactive\"))\n              ) +\n              \"\\n\\t\"\n          )\n        ]),\n    _vm._v(\" \"),\n    _c(\"br\"),\n    _c(\"br\"),\n    _vm._v(\" \"),\n    _vm.status\n      ? _c(\"pre\", { staticClass: \"log\" }, [_vm._v(_vm._s(_vm.status))])\n      : _vm._e()\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<div v-if='!missing && !unsupported'>\n\t\t\t<CButton v-if='!enabled' color='success' @click='enable()'>\n\t\t\t\t{{ $t('service.actions.enable') }}\n\t\t\t</CButton>\n\t\t\t<CButton v-if='enabled' color='danger' @click='disable()'>\n\t\t\t\t{{ $t('service.actions.disable') }}\n\t\t\t</CButton>\n\t\t\t<CButton v-if='!active' color='success' @click='start()'>\n\t\t\t\t{{ $t('service.actions.start') }}\n\t\t\t</CButton>\n\t\t\t<CButton v-if='active' color='danger' @click='stop()'>\n\t\t\t\t{{ $t('service.actions.stop') }}\n\t\t\t</CButton>\n\t\t\t<CButton v-if='active' color='primary' @click='restart()'>\n\t\t\t\t{{ $t('service.actions.restart') }}\n\t\t\t</CButton>\n\t\t\t<CButton color='secondary' @click='refreshStatus()'>\n\t\t\t\t{{ $t('service.actions.status') }}\n\t\t\t</CButton>\n\t\t</div>\n\t\t<br>\n\t\t<strong>{{ $t('service.status') }}: </strong>\n\t\t<span v-if='missing'>\n\t\t\t{{ $t('service.states.missing') }}\n\t\t</span>\n\t\t<span v-if='unsupported'>\n\t\t\t{{ $t('service.states.unsupported') }}\n\t\t</span>\n\t\t<span v-else>\n\t\t\t{{ $t('service.states.' + (enabled ? 'enabled' : 'disabled')) }},\n\t\t\t{{ $t('service.states.' + (active ? 'active' : 'inactive')) }}\n\t\t</span>\n\t\t<br><br>\n\t\t<pre v-if='status' class='log'>{{ status }}</pre>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard} from '@coreui/vue/src';\nimport ServiceService from '../../services/ServiceService';\n\nconst whitelisted = [\n\t'iqrf-gateway-controller',\n\t'iqrf-gateway-daemon',\n\t'iqrf-gateway-translator',\n\t'ssh',\n\t'unattended-upgrades',\n];\n\nconst features = {\n\t'iqrf-gateway-controller': 'iqrfGatewayController',\n\t'iqrf-gateway-translator': 'iqrfGatewayTranslator',\n\t'ssh': 'ssh',\n\t'unattended-upgrades': 'unattendedUpgrades',\n};\n\nexport default {\n\tname: 'ServiceControl',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t},\n\tprops: {\n\t\tserviceName: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t}\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tactive: false,\n\t\t\tenabled: false,\n\t\t\tmissing: false,\n\t\t\tstatus: null,\n\t\t\tunsupported: false,\n\t\t};\n\t},\n\twatch: {\n\t\tserviceName: function (newVal) {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tthis.serviceName = newVal;\n\t\t\tthis.getStatus();\n\t\t}\n\t},\n\tcreated() {\n\t\tthis.$store.commit('spinner/SHOW');\n\t\tthis.getStatus();\n\t},\n\tmethods: {\n\t\tenable() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.enable(this.serviceName)\n\t\t\t\t.then(() => (this.handleSuccess('enable')))\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\tdisable() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.disable(this.serviceName)\n\t\t\t\t.then(() => (this.handleSuccess('disable')))\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\tgetStatus() {\n\t\t\tif (!whitelisted.includes(this.serviceName)) {\n\t\t\t\tthis.unsupported = true;\n\t\t\t\tthis.status = null;\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\tthis.$toast.error(\n\t\t\t\t\tthis.$t('service.errors.unsupportedService').toString()\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tServiceService.getStatus(this.serviceName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.unsupported = false;\n\t\t\t\t\tthis.active = response.data.active;\n\t\t\t\t\tthis.enabled = response.data.enabled;\n\t\t\t\t\tthis.status = response.data.status;\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t})\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\thandleError(error) {\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tlet response = error.response;\n\t\t\tif (response.status === 404) {\n\t\t\t\tthis.missing = true;\n\t\t\t\tthis.$toast.error(this.$t('service.errors.missingService').toString());\n\t\t\t}\n\t\t\tif (response.status === 500 &&\n\t\t\t\t\tresponse.data.message === 'Unsupported init system') {\n\t\t\t\tthis.unsupported = false;\n\t\t\t\tthis.$toast.error(this.$t('service.errors.unsupportedInit').toString());\n\t\t\t}\n\t\t},\n\t\thandleSuccess(action) {\n\t\t\tthis.getStatus();\n\t\t\tthis.$toast.success(\n\t\t\t\tthis.$t('service.' + this.serviceName + '.messages.' + action)\n\t\t\t\t\t.toString()\n\t\t\t);\n\t\t},\n\t\trefreshStatus() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tthis.getStatus();\n\t\t},\n\t\trestart() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.restart(this.serviceName)\n\t\t\t\t.then(() => (this.handleSuccess('restart')))\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\tstart() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.start(this.serviceName)\n\t\t\t\t.then(() => (this.handleSuccess('start')))\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t\tstop() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tServiceService.stop(this.serviceName)\n\t\t\t\t.then(() => (this.handleSuccess('stop')))\n\t\t\t\t.catch(this.handleError);\n\t\t},\n\t},\n\tbeforeRouteEnter(to, from, next) {\n\t\tnext(vm => {\n\t\t\tconst feature = features[vm.serviceName];\n\t\t\tif (feature !== undefined &&\n\t\t\t\t\t!vm.$store.getters['features/isEnabled'](feature)) {\n\t\t\t\tvm.$toast.error(\n\t\t\t\t\tvm.$t('service.' +vm.serviceName + '.messages.disabled').toString()\n\t\t\t\t);\n\t\t\t\tvm.$router.push(from.path);\n\t\t\t}\n\t\t});\n\t},\n\tmetaInfo() {\n\t\treturn {\n\t\t\ttitle: whitelisted.includes(this.serviceName) ?\n\t\t\t\t'service.' + this.serviceName + '.title' :\n\t\t\t\t'service.unsupported.title',\n\t\t};\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ServiceControl.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ServiceControl.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ServiceControl.vue?vue&type=template&id=52aeda34&\"\nimport script from \"./ServiceControl.vue?vue&type=script&lang=js&\"\nexport * from \"./ServiceControl.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('52aeda34')) {\n      api.createRecord('52aeda34', component.options)\n    } else {\n      api.reload('52aeda34', component.options)\n    }\n    module.hot.accept(\"./ServiceControl.vue?vue&type=template&id=52aeda34&\", function () {\n      api.rerender('52aeda34', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Gateway/ServiceControl.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"c-app flex-row align-items-center\" },\n    [\n      _c(\n        \"CContainer\",\n        [\n          _c(\n            \"CRow\",\n            { staticClass: \"justify-content-center\" },\n            [\n              _c(\n                \"CCol\",\n                { attrs: { md: \"8\" } },\n                [\n                  _c(\"div\", { staticClass: \"py-5 text-center\" }, [\n                    _c(\"img\", {\n                      staticClass: \"mx-auto logo\",\n                      attrs: {\n                        alt: _vm.$t(\"core.title\"),\n                        src: \"/img/logo-blue.svg\"\n                      }\n                    })\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"CCard\",\n                    { staticClass: \"p-4\" },\n                    [\n                      _c(\n                        \"CCardBody\",\n                        [\n                          _c(\"ValidationObserver\", {\n                            scopedSlots: _vm._u([\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var invalid = ref.invalid\n                                  return [\n                                    _c(\n                                      \"CForm\",\n                                      {\n                                        on: {\n                                          submit: function($event) {\n                                            $event.preventDefault()\n                                            return _vm.handleSubmit($event)\n                                          }\n                                        }\n                                      },\n                                      [\n                                        _c(\n                                          \"h1\",\n                                          { staticClass: \"text-center\" },\n                                          [\n                                            _vm._v(\n                                              \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                                _vm._s(\n                                                  _vm.$t(\"core.sign.in.title\")\n                                                ) +\n                                                \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\"\n                                            )\n                                          ]\n                                        ),\n                                        _vm._v(\" \"),\n                                        _c(\"ValidationProvider\", {\n                                          attrs: {\n                                            rules: \"required\",\n                                            \"custom-messages\": {\n                                              required:\n                                                \"core.sign.in.messages.username\"\n                                            }\n                                          },\n                                          scopedSlots: _vm._u(\n                                            [\n                                              {\n                                                key: \"default\",\n                                                fn: function(ref) {\n                                                  var valid = ref.valid\n                                                  var touched = ref.touched\n                                                  var errors = ref.errors\n                                                  return [\n                                                    _c(\"CInput\", {\n                                                      attrs: {\n                                                        label: _vm.$t(\n                                                          \"core.sign.in.username\"\n                                                        ),\n                                                        placeholder: _vm.$t(\n                                                          \"core.sign.in.username\"\n                                                        ),\n                                                        autocomplete:\n                                                          \"username\",\n                                                        \"is-valid\": touched\n                                                          ? valid\n                                                          : null,\n                                                        \"invalid-feedback\": _vm.$t(\n                                                          errors[0]\n                                                        )\n                                                      },\n                                                      scopedSlots: _vm._u(\n                                                        [\n                                                          {\n                                                            key:\n                                                              \"prepend-content\",\n                                                            fn: function() {\n                                                              return [\n                                                                _c(\"CIcon\", {\n                                                                  attrs: {\n                                                                    content:\n                                                                      _vm\n                                                                        .$options\n                                                                        .icons\n                                                                        .user\n                                                                  }\n                                                                })\n                                                              ]\n                                                            },\n                                                            proxy: true\n                                                          }\n                                                        ],\n                                                        null,\n                                                        true\n                                                      ),\n                                                      model: {\n                                                        value: _vm.username,\n                                                        callback: function(\n                                                          $$v\n                                                        ) {\n                                                          _vm.username = $$v\n                                                        },\n                                                        expression: \"username\"\n                                                      }\n                                                    })\n                                                  ]\n                                                }\n                                              }\n                                            ],\n                                            null,\n                                            true\n                                          )\n                                        }),\n                                        _vm._v(\" \"),\n                                        _c(\"ValidationProvider\", {\n                                          attrs: {\n                                            rules: \"required\",\n                                            \"custom-messages\": {\n                                              required:\n                                                \"core.sign.in.messages.password\"\n                                            }\n                                          },\n                                          scopedSlots: _vm._u(\n                                            [\n                                              {\n                                                key: \"default\",\n                                                fn: function(ref) {\n                                                  var valid = ref.valid\n                                                  var touched = ref.touched\n                                                  var errors = ref.errors\n                                                  return [\n                                                    _c(\"CInput\", {\n                                                      attrs: {\n                                                        label: _vm.$t(\n                                                          \"core.sign.in.password\"\n                                                        ),\n                                                        placeholder: _vm.$t(\n                                                          \"core.sign.in.password\"\n                                                        ),\n                                                        type: \"password\",\n                                                        autocomplete:\n                                                          \"password\",\n                                                        \"is-valid\": touched\n                                                          ? valid\n                                                          : null,\n                                                        \"invalid-feedback\": _vm.$t(\n                                                          errors[0]\n                                                        )\n                                                      },\n                                                      scopedSlots: _vm._u(\n                                                        [\n                                                          {\n                                                            key:\n                                                              \"prepend-content\",\n                                                            fn: function() {\n                                                              return [\n                                                                _c(\"CIcon\", {\n                                                                  attrs: {\n                                                                    content:\n                                                                      _vm\n                                                                        .$options\n                                                                        .icons\n                                                                        .lock\n                                                                  }\n                                                                })\n                                                              ]\n                                                            },\n                                                            proxy: true\n                                                          }\n                                                        ],\n                                                        null,\n                                                        true\n                                                      ),\n                                                      model: {\n                                                        value: _vm.password,\n                                                        callback: function(\n                                                          $$v\n                                                        ) {\n                                                          _vm.password = $$v\n                                                        },\n                                                        expression: \"password\"\n                                                      }\n                                                    })\n                                                  ]\n                                                }\n                                              }\n                                            ],\n                                            null,\n                                            true\n                                          )\n                                        }),\n                                        _vm._v(\" \"),\n                                        _c(\n                                          \"CButton\",\n                                          {\n                                            attrs: {\n                                              color: \"primary\",\n                                              type: \"submit\",\n                                              disabled: invalid\n                                            }\n                                          },\n                                          [\n                                            _vm._v(\n                                              \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                                _vm._s(\n                                                  _vm.$t(\"core.sign.in.send\")\n                                                ) +\n                                                \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\"\n                                            )\n                                          ]\n                                        )\n                                      ],\n                                      1\n                                    )\n                                  ]\n                                }\n                              }\n                            ])\n                          })\n                        ],\n                        1\n                      )\n                    ],\n                    1\n                  )\n                ],\n                1\n              )\n            ],\n            1\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SignIn.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SignIn.vue?vue&type=script&lang=js&\"","<template>\n\t<div class='c-app flex-row align-items-center'>\n\t\t<CContainer>\n\t\t\t<CRow class='justify-content-center'>\n\t\t\t\t<CCol md='8'>\n\t\t\t\t\t<div class='py-5 text-center'>\n\t\t\t\t\t\t<img :alt='$t(\"core.title\")' class='mx-auto logo' src='/img/logo-blue.svg'>\n\t\t\t\t\t</div>\n\t\t\t\t\t<CCard class='p-4'>\n\t\t\t\t\t\t<CCardBody>\n\t\t\t\t\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t\t\t\t\t<CForm @submit.prevent='handleSubmit'>\n\t\t\t\t\t\t\t\t\t<h1 class='text-center'>\n\t\t\t\t\t\t\t\t\t\t{{ $t('core.sign.in.title') }}\n\t\t\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t\t\t\t:custom-messages='{required: \"core.sign.in.messages.username\"}'\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\t\tv-model='username'\n\t\t\t\t\t\t\t\t\t\t\t:label='$t(\"core.sign.in.username\")'\n\t\t\t\t\t\t\t\t\t\t\t:placeholder='$t(\"core.sign.in.username\")'\n\t\t\t\t\t\t\t\t\t\t\tautocomplete='username'\n\t\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<template #prepend-content>\n\t\t\t\t\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.user' />\n\t\t\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t\t\t</CInput>\n\t\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t\t\t\t:custom-messages='{required: \"core.sign.in.messages.password\"}'\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\t\tv-model='password'\n\t\t\t\t\t\t\t\t\t\t\t:label='$t(\"core.sign.in.password\")'\n\t\t\t\t\t\t\t\t\t\t\t:placeholder='$t(\"core.sign.in.password\")'\n\t\t\t\t\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\t\t\t\t\tautocomplete='password'\n\t\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<template #prepend-content>\n\t\t\t\t\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.lock' />\n\t\t\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t\t\t</CInput>\n\t\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t\t\t\t\t\t{{ $t('core.sign.in.send') }}\n\t\t\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t\t</CForm>\n\t\t\t\t\t\t\t</ValidationObserver>\n\t\t\t\t\t\t</CCardBody>\n\t\t\t\t\t</CCard>\n\t\t\t\t</CCol>\n\t\t\t</CRow>\n\t\t</CContainer>\n\t</div>\n</template>\n\n<script>\nimport {CContainer, CCard, CCardBody, CCol, CForm, CIcon, CInput, CRow} from '@coreui/vue/src';\nimport {cilUser, cilLockLocked} from '@coreui/icons';\nimport {required} from 'vee-validate/dist/rules';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\n\nexport default {\n\tname: 'SignIn',\n\tcomponents: {\n\t\tCContainer,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCol,\n\t\tCForm,\n\t\tCIcon,\n\t\tCInput,\n\t\tCRow,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tusername: '',\n\t\t\tpassword: '',\n\t\t\tsubmitted: false,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t},\n\tmethods: {\n\t\thandleSubmit() {\n\t\t\tPromise.all([\n\t\t\t\tthis.$store.dispatch('user/signIn', {username: this.username, password: this.password}),\n\t\t\t\tthis.$store.dispatch('features/fetch'),\n\t\t\t])\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$router.push('/');\n\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\tthis.$t('core.sign.in.messages.success').toString()\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\tthis.$t('core.sign.in.messages.incorrectUsernameOrPassword')\n\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\tthis.submitted = true;\n\t\t}\n\t},\n\ticons: {\n\t\tuser: cilUser,\n\t\tlock: cilLockLocked,\n\t},\n\tmetaInfo: {\n\t\ttitle: 'core.sign.in.title',\n\t},\n};\n</script>\n\n<style scoped>\n.logo {\n\tmin-width: 320px;\n}\n</style>\n","import { render, staticRenderFns } from \"./SignIn.vue?vue&type=template&id=7b84bbc3&scoped=true&\"\nimport script from \"./SignIn.vue?vue&type=script&lang=js&\"\nexport * from \"./SignIn.vue?vue&type=script&lang=js&\"\nimport style0 from \"./SignIn.vue?vue&type=style&index=0&id=7b84bbc3&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"7b84bbc3\",\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('7b84bbc3')) {\n      api.createRecord('7b84bbc3', component.options)\n    } else {\n      api.reload('7b84bbc3', component.options)\n    }\n    module.hot.accept(\"./SignIn.vue?vue&type=template&id=7b84bbc3&scoped=true&\", function () {\n      api.rerender('7b84bbc3', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/SignIn.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\n        \"CListGroup\",\n        [\n          _c(\"CListGroupItem\", { attrs: { to: \"/iqrfnet/send-raw/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.sendPacket.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.sendPacket.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/iqrfnet/send-json/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.sendJson.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.sendJson.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"trUpload\")\n            ? _c(\"CListGroupItem\", { attrs: { to: \"/iqrfnet/tr-upload/\" } }, [\n                _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"iqrfnet.trUpload.title\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"iqrfnet.trUpload.description\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ])\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/iqrfnet/tr-config/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.trConfiguration.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.trConfiguration.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/iqrfnet/network/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.networkManager.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.networkManager.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/iqrfnet/standard/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.standard.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.standard.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ])\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<CListGroup>\n\t\t\t<CListGroupItem to='/iqrfnet/send-raw/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('iqrfnet.sendPacket.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('iqrfnet.sendPacket.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/iqrfnet/send-json/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('iqrfnet.sendJson.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('iqrfnet.sendJson.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"trUpload\")'\n\t\t\t\tto='/iqrfnet/tr-upload/'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('iqrfnet.trUpload.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('iqrfnet.trUpload.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/iqrfnet/tr-config/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('iqrfnet.trConfiguration.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('iqrfnet.trConfiguration.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/iqrfnet/network/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('iqrfnet.networkManager.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('iqrfnet.networkManager.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/iqrfnet/standard/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('iqrfnet.standard.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('iqrfnet.standard.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t</CListGroup>\n\t</CCard>\n</template>\n\n<script>\nimport {CCard, CListGroup, CListGroupItem} from '@coreui/vue/src';\n\nexport default {\n\tname: 'IqrfNetDisambiguation',\n\tcomponents: {\n\t\tCCard,\n\t\tCListGroup,\n\t\tCListGroupItem\n\t},\n\tmetaInfo: {\n\t\ttitle: 'iqrfnet.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqrfNetDisambiguation.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqrfNetDisambiguation.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./IqrfNetDisambiguation.vue?vue&type=template&id=2fa1e694&\"\nimport script from \"./IqrfNetDisambiguation.vue?vue&type=script&lang=js&\"\nexport * from \"./IqrfNetDisambiguation.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('2fa1e694')) {\n      api.createRecord('2fa1e694', component.options)\n    } else {\n      api.reload('2fa1e694', component.options)\n    }\n    module.hot.accept(\"./IqrfNetDisambiguation.vue?vue&type=template&id=2fa1e694&\", function () {\n      api.rerender('2fa1e694', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/IqrfNet/IqrfNetDisambiguation.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.response !== undefined\n    ? _c(\n        \"div\",\n        [\n          _c(\n            \"CCard\",\n            [\n              _c(\"CCardHeader\", [\n                _vm._v(_vm._s(_vm.$t(\"iqrfnet.enumeration.deviceInfo\")))\n              ]),\n              _vm._v(\" \"),\n              _c(\"CCardBody\", [\n                _c(\"table\", { staticClass: \"table table-striped\" }, [\n                  _c(\"tbody\", [\n                    _c(\"tr\", [\n                      _c(\"th\", [\n                        _vm._v(_vm._s(_vm.$t(\"iqrfnet.enumeration.deviceAddr\")))\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"td\", [_vm._v(_vm._s(_vm.response.deviceAddr))])\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"tr\", [\n                      _c(\"th\", [\n                        _vm._v(_vm._s(_vm.$t(\"iqrfnet.enumeration.hwpid\")))\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"td\", [_vm._v(_vm._s(_vm.peripheralData.hwpId))])\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"tr\", [\n                      _c(\"th\", [\n                        _vm._v(\n                          _vm._s(_vm.$t(\"iqrfnet.enumeration.manufacturer\"))\n                        )\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"td\", [_vm._v(_vm._s(_vm.response.manufacturer))])\n                    ]),\n                    _vm._v(\" \"),\n                    _vm.product !== undefined\n                      ? _c(\"tr\", [\n                          _c(\"th\", [\n                            _vm._v(\n                              _vm._s(_vm.$t(\"iqrfnet.enumeration.product\"))\n                            )\n                          ]),\n                          _vm._v(\" \"),\n                          _c(\"td\", [\n                            _c(\"a\", { attrs: { href: _vm.product.homePage } }, [\n                              _vm._v(_vm._s(_vm.product.name))\n                            ])\n                          ])\n                        ])\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    _vm.product !== undefined\n                      ? _c(\"tr\", [\n                          _c(\"th\", [\n                            _vm._v(\n                              _vm._s(_vm.$t(\"iqrfnet.enumeration.picture\"))\n                            )\n                          ]),\n                          _vm._v(\" \"),\n                          _c(\"td\", [\n                            _c(\"img\", {\n                              staticClass: \"productPicture\",\n                              attrs: {\n                                alt: _vm.response.product,\n                                src: _vm.product.picture\n                              }\n                            })\n                          ])\n                        ])\n                      : _c(\"tr\", [\n                          _c(\"th\", [\n                            _vm._v(\n                              _vm._s(_vm.$t(\"iqrfnet.enumeration.product\"))\n                            )\n                          ]),\n                          _vm._v(\" \"),\n                          _c(\"td\", [_vm._v(_vm._s(_vm.response.product))])\n                        ])\n                  ])\n                ])\n              ])\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CCard\",\n            [\n              _c(\"CCardHeader\", [\n                _vm._v(_vm._s(_vm.$t(\"iqrfnet.enumeration.trInfo\")))\n              ]),\n              _vm._v(\" \"),\n              _c(\n                \"CCardBody\",\n                [\n                  _c(\"table\", { staticClass: \"table table-striped\" }, [\n                    _c(\"tbody\", [\n                      _c(\"tr\", [\n                        _c(\"th\", [\n                          _vm._v(_vm._s(_vm.$t(\"iqrfnet.enumeration.trType\")))\n                        ]),\n                        _vm._v(\" \"),\n                        _c(\"td\", [_vm._v(_vm._s(_vm.osData.trMcuType.trType))])\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"tr\", [\n                        _c(\"th\", [\n                          _vm._v(_vm._s(_vm.$t(\"iqrfnet.enumeration.mid\")))\n                        ]),\n                        _vm._v(\" \"),\n                        _c(\"td\", [_vm._v(_vm._s(_vm.osData.mid))])\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"tr\", [\n                        _c(\"th\", [\n                          _vm._v(\n                            _vm._s(_vm.$t(\"iqrfnet.enumeration.osVersion\"))\n                          )\n                        ]),\n                        _vm._v(\" \"),\n                        _c(\"td\", [\n                          _vm._v(\n                            _vm._s(_vm.osData.osVersion) +\n                              \" (\" +\n                              _vm._s(_vm.osData.osBuild) +\n                              \")\"\n                          )\n                        ])\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"tr\", [\n                        _c(\"th\", [\n                          _vm._v(\n                            _vm._s(_vm.$t(\"iqrfnet.enumeration.dpaVersion\"))\n                          )\n                        ]),\n                        _vm._v(\" \"),\n                        _c(\"td\", [_vm._v(_vm._s(_vm.peripheralData.dpaVer))])\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"tr\", [\n                        _c(\"th\", [\n                          _vm._v(_vm._s(_vm.$t(\"iqrfnet.enumeration.rfMode\")))\n                        ]),\n                        _vm._v(\" \"),\n                        _vm.peripheralData.flags.rfModeStd\n                          ? _c(\n                              \"td\",\n                              [\n                                _c(\"CIcon\", {\n                                  staticClass: \"rfModeIcon\",\n                                  attrs: {\n                                    alt: \"STD\",\n                                    src: \"/img/std-black.svg\"\n                                  }\n                                }),\n                                _vm._v(\" \"),\n                                _c(\"strong\", [\n                                  _vm._v(\n                                    _vm._s(\n                                      _vm.$t(\"iqrfnet.enumeration.rfModes.std\")\n                                    )\n                                  )\n                                ])\n                              ],\n                              1\n                            )\n                          : _vm.peripheralData.flags.rfModeLp\n                          ? _c(\n                              \"td\",\n                              [\n                                _c(\"CIcon\", {\n                                  staticClass: \"rfModeIcon\",\n                                  attrs: { alt: \"LP\", src: \"/img/lp-black.svg\" }\n                                }),\n                                _vm._v(\" \"),\n                                _c(\"strong\", [\n                                  _vm._v(\n                                    _vm._s(\n                                      _vm.$t(\"iqrfnet.enumeration.rfModes.lp\")\n                                    )\n                                  )\n                                ])\n                              ],\n                              1\n                            )\n                          : _vm._e()\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"tr\", [\n                        _c(\"th\", [\n                          _vm._v(_vm._s(_vm.$t(\"iqrfnet.enumeration.rssi\")))\n                        ]),\n                        _vm._v(\" \"),\n                        _c(\"td\", [_vm._v(_vm._s(_vm.osData.rssi))])\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"tr\", [\n                        _c(\"th\", [\n                          _vm._v(\n                            _vm._s(_vm.$t(\"iqrfnet.enumeration.supplyVoltage\"))\n                          )\n                        ]),\n                        _vm._v(\" \"),\n                        _c(\"td\", [_vm._v(_vm._s(_vm.osData.supplyVoltage))])\n                      ])\n                    ])\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"CButton\",\n                    { attrs: { color: \"primary\", to: \"/iqrfnet/network/\" } },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" +\n                          _vm._s(_vm.$t(\"iqrfnet.enumeration.back\")) +\n                          \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  )\n                ],\n                1\n              )\n            ],\n            1\n          )\n        ],\n        1\n      )\n    : _c(\"div\")\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import axios from 'axios';\nvar ProductService = /** @class */ (function () {\n    function ProductService() {\n    }\n    /**\n     * Retrieves the product by its HWPID\n     * @param hwpid Product HWPID\n     */\n    ProductService.prototype.get = function (hwpid) {\n        return axios.get('https://repository.iqrfalliance.org/api/products/' + hwpid);\n    };\n    return ProductService;\n}());\nexport default new ProductService();\n","import i18n from '../i18n';\nimport store from '../store';\nimport Vue from 'vue';\nexport function timeout(message, length) {\n    return setTimeout(function () {\n        store.commit('spinner/HIDE');\n        Vue.$toast.error(i18n.t(message).toString());\n    }, length);\n}\n","<template>\n\t<div v-if='response !== undefined'>\n\t\t<CCard>\n\t\t\t<CCardHeader>{{ $t('iqrfnet.enumeration.deviceInfo') }}</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<table class='table table-striped'>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>{{ $t('iqrfnet.enumeration.deviceAddr') }}</th>\n\t\t\t\t\t\t\t<td>{{ response.deviceAddr }}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>{{ $t('iqrfnet.enumeration.hwpid') }}</th>\n\t\t\t\t\t\t\t<td>{{ peripheralData.hwpId }}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>{{ $t('iqrfnet.enumeration.manufacturer') }}</th>\n\t\t\t\t\t\t\t<td>{{ response.manufacturer }}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr v-if='product !== undefined'>\n\t\t\t\t\t\t\t<th>{{ $t('iqrfnet.enumeration.product') }}</th>\n\t\t\t\t\t\t\t<td><a :href='product.homePage'>{{ product.name }}</a></td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr v-if='product !== undefined'>\n\t\t\t\t\t\t\t<th>{{ $t('iqrfnet.enumeration.picture') }}</th>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t:alt='response.product'\n\t\t\t\t\t\t\t\t\tclass='productPicture'\n\t\t\t\t\t\t\t\t\t:src='product.picture'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr v-else>\n\t\t\t\t\t\t\t<th>{{ $t('iqrfnet.enumeration.product') }}</th>\n\t\t\t\t\t\t\t<td>{{ response.product }}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t\t<CCard>\n\t\t\t<CCardHeader>{{ $t('iqrfnet.enumeration.trInfo') }}</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<table class='table table-striped'>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>{{ $t('iqrfnet.enumeration.trType') }}</th>\n\t\t\t\t\t\t\t<td>{{ osData.trMcuType.trType }}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>{{ $t('iqrfnet.enumeration.mid') }}</th>\n\t\t\t\t\t\t\t<td>{{ osData.mid }}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>{{ $t('iqrfnet.enumeration.osVersion') }}</th>\n\t\t\t\t\t\t\t<td>{{ osData.osVersion }} ({{ osData.osBuild }})</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>{{ $t('iqrfnet.enumeration.dpaVersion') }}</th>\n\t\t\t\t\t\t\t<td>{{ peripheralData.dpaVer }}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>{{ $t('iqrfnet.enumeration.rfMode') }}</th>\n\t\t\t\t\t\t\t<td v-if='peripheralData.flags.rfModeStd'>\n\t\t\t\t\t\t\t\t<CIcon alt='STD' class='rfModeIcon' src='/img/std-black.svg' />\n\t\t\t\t\t\t\t\t<strong>{{ $t('iqrfnet.enumeration.rfModes.std') }}</strong>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td v-else-if='peripheralData.flags.rfModeLp'>\n\t\t\t\t\t\t\t\t<CIcon alt='LP' class='rfModeIcon' src='/img/lp-black.svg' />\n\t\t\t\t\t\t\t\t<strong>{{ $t('iqrfnet.enumeration.rfModes.lp') }}</strong>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>{{ $t('iqrfnet.enumeration.rssi') }}</th>\n\t\t\t\t\t\t\t<td>{{ osData.rssi }}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>{{ $t('iqrfnet.enumeration.supplyVoltage') }}</th>\n\t\t\t\t\t\t\t<td>{{ osData.supplyVoltage }}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t\t<CButton color='primary' to='/iqrfnet/network/'>\n\t\t\t\t\t{{ $t('iqrfnet.enumeration.back') }}\n\t\t\t\t</CButton>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t</div>\n\t<div v-else />\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CIcon} from '@coreui/vue/src';\nimport IqrfNetService from '../../services/IqrfNetService';\nimport ProductService from '../../services/IqrfRepository/ProductService';\nimport {timeout} from '../../helpers/timeout';\n\nexport default {\n\tname: 'DeviceEnumeration',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCIcon,\n\t},\n\tprops: {\n\t\taddress: {\n\t\t\ttype: Number,\n\t\t\trequired: false,\n\t\t\tdefault: 0,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tresponse: undefined,\n\t\t\tosData: undefined,\n\t\t\tperipheralData: undefined,\n\t\t\tproduct: undefined,\n\t\t};\n\t},\n\tcreated() {\n\t\tif (this.$store.getters.isSocketConnected) {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tIqrfNetService.enumerateDevice(this.address);\n\t\t}\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONOPEN') {\n\t\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\t\tIqrfNetService.enumerateDevice(this.address);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONSEND' &&\n\t\t\t\t\tmutation.payload.mType !== 'iqmeshNetwork_EnumerateDevice') {\n\t\t\t\tthis.timeout = timeout('iqrfnet.enumeration.messages.failure', 30000);\n\t\t\t}\n\t\t\tif (mutation.type !== 'SOCKET_ONMESSAGE' ||\n\t\t\t\t\tmutation.payload.mType !== 'iqmeshNetwork_EnumerateDevice') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tconst response = mutation.payload;\n\t\t\tif (response.data.status !== 0) {\n\t\t\t\tthis.$router.push('/iqrfnet/network/');\n\t\t\t\tthis.$toast.error(\n\t\t\t\t\tthis.$t('iqrfnet.enumeration.messages.failure').toString()\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst data = response.data.rsp;\n\t\t\tif (data) {\n\t\t\t\tthis.response = data;\n\t\t\t\tthis.peripheralData = data.peripheralEnumeration;\n\t\t\t\tthis.osData = data.osRead;\n\t\t\t\tProductService.get(this.peripheralData.hwpId)\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\tthis.product = response.data;\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\tif (error.response !== undefined && error.response.status === 404) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('iqrfnet.enumeration.messages.repositoryUnavailable')\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t});\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmetaInfo: {\n\t\ttitle: 'iqrfnet.enumeration.title',\n\t},\n};\n</script>\n\n<style scoped>\n@media (max-width: 768px) {\n\t.productPicture {\n\t\tmax-height: 100%;\n\t\tmax-width: 100%;\n\t}\n}\n\n@media (min-width: 768px) {\n\t.productPicture {\n\t\tmax-height: 33%;\n\t\tmax-width: 33%;\n\t}\n}\n</style>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DeviceEnumeration.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DeviceEnumeration.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DeviceEnumeration.vue?vue&type=template&id=7b8817a0&scoped=true&\"\nimport script from \"./DeviceEnumeration.vue?vue&type=script&lang=js&\"\nexport * from \"./DeviceEnumeration.vue?vue&type=script&lang=js&\"\nimport style0 from \"./DeviceEnumeration.vue?vue&type=style&index=0&id=7b8817a0&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"7b8817a0\",\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('7b8817a0')) {\n      api.createRecord('7b8817a0', component.options)\n    } else {\n      api.reload('7b8817a0', component.options)\n    }\n    module.hot.accept(\"./DeviceEnumeration.vue?vue&type=template&id=7b8817a0&scoped=true&\", function () {\n      api.rerender('7b8817a0', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/IqrfNet/DeviceEnumeration.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CRow\",\n    [\n      _c(\n        \"CCol\",\n        { attrs: { lg: \"6\" } },\n        [\n          _c(\n            \"CCard\",\n            [\n              _c(\n                \"CTabs\",\n                { attrs: { variant: \"tabs\", \"active-tab\": _vm.activeTab } },\n                [\n                  _c(\n                    \"CTab\",\n                    { attrs: { title: \"IQMESH\" } },\n                    [\n                      _c(\"BondingManager\", {\n                        on: { \"update-devices\": _vm.updateDevices }\n                      }),\n                      _vm._v(\" \"),\n                      _c(\"DiscoveryManager\", {\n                        on: { \"update-devices\": _vm.updateDevices }\n                      })\n                    ],\n                    1\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"CTab\",\n                    { attrs: { title: \"AutoNetwork\" } },\n                    [\n                      _c(\"AutoNetwork\", {\n                        on: { \"update-devices\": _vm.updateDevices }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              )\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CCol\",\n        { attrs: { lg: \"6\" } },\n        [_c(\"DevicesInfo\", { ref: \"devs\" })],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { staticClass: \"border-top-0 border-left-0 border-right-0\" },\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"CSelect\", {\n                          attrs: {\n                            value: _vm.bondMethod,\n                            label: _vm.$t(\n                              \"iqrfnet.networkManager.bonding.form.bondMethod\"\n                            ),\n                            options: [\n                              {\n                                value: \"local\",\n                                label: _vm.$t(\n                                  \"iqrfnet.networkManager.bonding.form.bondMethodLocal\"\n                                )\n                              },\n                              {\n                                value: \"smartConnect\",\n                                label: _vm.$t(\n                                  \"iqrfnet.networkManager.bonding.form.bondMethodSmart\"\n                                )\n                              }\n                            ]\n                          },\n                          on: {\n                            \"update:value\": function($event) {\n                              _vm.bondMethod = $event\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _vm.bondMethod !== \"autoNetwork\"\n                          ? _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"integer|required|between:1,239\",\n                                \"custom-messages\": {\n                                  required:\n                                    \"iqrfnet.networkManager.messages.bonding.address\",\n                                  integer:\n                                    \"iqrfnet.networkManager.messages.invalid.integer\",\n                                  between:\n                                    \"iqrfnet.networkManager.messages.bonding.address\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var touched = ref.touched\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CInput\", {\n                                          attrs: {\n                                            type: \"number\",\n                                            min: \"1\",\n                                            max: \"239\",\n                                            label: _vm.$t(\n                                              \"iqrfnet.networkManager.bonding.form.address\"\n                                            ),\n                                            \"is-valid\": touched ? valid : null,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            ),\n                                            disabled: _vm.autoAddress\n                                          },\n                                          model: {\n                                            value: _vm.address,\n                                            callback: function($$v) {\n                                              _vm.address = _vm._n($$v)\n                                            },\n                                            expression: \"address\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            })\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.autoAddress,\n                            label: _vm.$t(\n                              \"iqrfnet.networkManager.bonding.form.autoAddress\"\n                            )\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              _vm.autoAddress = $event\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|between:0,255\",\n                            \"custom-messages\": {\n                              integer:\n                                \"iqrfnet.networkManager.messages.invalid.integer\",\n                              required:\n                                \"iqrfnet.networkManager.messages.bonding.bondingRetries\",\n                              between:\n                                \"iqrfnet.networkManager.messages.bonding.bondingRetries\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        max: \"255\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.networkManager.bonding.form.bondingRetries\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.bondingRetries,\n                                        callback: function($$v) {\n                                          _vm.bondingRetries = _vm._n($$v)\n                                        },\n                                        expression: \"bondingRetries\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _vm.bondMethod === \"smartConnect\"\n                          ? _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"required|scCode\",\n                                \"custom-messages\": {\n                                  required:\n                                    \"iqrfnet.networkManager.messages.missing.bonding.scCode\",\n                                  scCode:\n                                    \"iqrfnet.networkManager.messages.invalid.bonding.scCode\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CInput\", {\n                                          attrs: {\n                                            label: _vm.$t(\n                                              \"iqrfnet.networkManager.bonding.form.smartConnect\"\n                                            ),\n                                            \"is-valid\": valid,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            )\n                                          },\n                                          model: {\n                                            value: _vm.scCode,\n                                            callback: function($$v) {\n                                              _vm.scCode = $$v\n                                            },\n                                            expression: \"scCode\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            })\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.unbondCoordinatorOnly,\n                            label: _vm.$t(\n                              \"iqrfnet.networkManager.bonding.form.unbondCoordinatorOnly\"\n                            )\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              _vm.unbondCoordinatorOnly = $event\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              color: \"primary\",\n                              type: \"button\",\n                              disabled: invalid\n                            },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.processSubmitBond($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.bond\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              color: \"secondary\",\n                              type: \"button\",\n                              disabled: invalid || _vm.autoAddress\n                            },\n                            on: {\n                              click: function($event) {\n                                _vm.modalUnbond = true\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.unbond\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", type: \"button\" },\n                            on: {\n                              click: function($event) {\n                                _vm.modalClear = true\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.clearBonds\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CModal\",\n                          {\n                            attrs: {\n                              title: _vm.$t(\"forms.clearBonds\"),\n                              color: \"danger\",\n                              show: _vm.modalClear\n                            },\n                            on: {\n                              \"update:show\": function($event) {\n                                _vm.modalClear = $event\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"footer\",\n                                  fn: function() {\n                                    return [\n                                      _c(\n                                        \"CButton\",\n                                        {\n                                          attrs: { color: \"danger\" },\n                                          on: {\n                                            click: function($event) {\n                                              _vm.modalClear = false\n                                            }\n                                          }\n                                        },\n                                        [\n                                          _vm._v(\n                                            \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                              _vm._s(_vm.$t(\"forms.no\")) +\n                                              \"\\n\\t\\t\\t\\t\\t\\t\"\n                                          )\n                                        ]\n                                      ),\n                                      _vm._v(\" \"),\n                                      _c(\n                                        \"CButton\",\n                                        {\n                                          attrs: { color: \"success\" },\n                                          on: {\n                                            click: _vm.processSubmitClearAll\n                                          }\n                                        },\n                                        [\n                                          _vm._v(\n                                            \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                              _vm._s(_vm.$t(\"forms.yes\")) +\n                                              \"\\n\\t\\t\\t\\t\\t\\t\"\n                                          )\n                                        ]\n                                      )\n                                    ]\n                                  },\n                                  proxy: true\n                                }\n                              ],\n                              null,\n                              true\n                            )\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\n                                    \"iqrfnet.networkManager.messages.submit.removeBond.confirmClear\"\n                                  )\n                                ) +\n                                \"\\n\\t\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CModal\",\n                          {\n                            attrs: {\n                              title: _vm.$t(\"forms.unbond\"),\n                              color: \"danger\",\n                              show: _vm.modalUnbond\n                            },\n                            on: {\n                              \"update:show\": function($event) {\n                                _vm.modalUnbond = $event\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"footer\",\n                                  fn: function() {\n                                    return [\n                                      _c(\n                                        \"CButton\",\n                                        {\n                                          attrs: { color: \"danger\" },\n                                          on: {\n                                            click: function($event) {\n                                              _vm.modalUnbond = false\n                                            }\n                                          }\n                                        },\n                                        [\n                                          _vm._v(\n                                            \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                              _vm._s(_vm.$t(\"forms.no\")) +\n                                              \"\\n\\t\\t\\t\\t\\t\\t\"\n                                          )\n                                        ]\n                                      ),\n                                      _vm._v(\" \"),\n                                      _c(\n                                        \"CButton\",\n                                        {\n                                          attrs: { color: \"success\" },\n                                          on: { click: _vm.processSubmitUnbond }\n                                        },\n                                        [\n                                          _vm._v(\n                                            \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                              _vm._s(_vm.$t(\"forms.yes\")) +\n                                              \"\\n\\t\\t\\t\\t\\t\\t\"\n                                          )\n                                        ]\n                                      )\n                                    ]\n                                  },\n                                  proxy: true\n                                }\n                              ],\n                              null,\n                              true\n                            )\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\n                                    \"iqrfnet.networkManager.messages.submit.removeBond.confirmUnbond\"\n                                  )\n                                ) +\n                                \"\\n\\t\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BondingManager.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BondingManager.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard class='border-top-0 border-left-0 border-right-0'>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<CSelect\n\t\t\t\t\t\t:value.sync='bondMethod'\n\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.bonding.form.bondMethod\")'\n\t\t\t\t\t\t:options='[\n\t\t\t\t\t\t\t{value: \"local\", label: $t(\"iqrfnet.networkManager.bonding.form.bondMethodLocal\")},\n\t\t\t\t\t\t\t{value: \"smartConnect\", label: $t(\"iqrfnet.networkManager.bonding.form.bondMethodSmart\")},\n\t\t\t\t\t\t]'\n\t\t\t\t\t/>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-if='bondMethod !== \"autoNetwork\"'\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:1,239'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.bonding.address\",\n\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.bonding.address\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='address'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.bonding.form.address\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t:disabled='autoAddress'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='autoAddress'\n\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.bonding.form.autoAddress\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid}'\n\t\t\t\t\t\trules='integer|required|between:0,255'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.bonding.bondingRetries\",\n\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.bonding.bondingRetries\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='bondingRetries'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='255'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.bonding.form.bondingRetries\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-if='bondMethod === \"smartConnect\"'\n\t\t\t\t\t\tv-slot='{ errors, valid }'\n\t\t\t\t\t\trules='required|scCode'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.missing.bonding.scCode\",\n\t\t\t\t\t\t\tscCode: \"iqrfnet.networkManager.messages.invalid.bonding.scCode\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='scCode'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.bonding.form.smartConnect\")'\n\t\t\t\t\t\t\t:is-valid='valid'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='unbondCoordinatorOnly'\n\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.bonding.form.unbondCoordinatorOnly\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='primary' \n\t\t\t\t\t\ttype='button' \n\t\t\t\t\t\t:disabled='invalid' \n\t\t\t\t\t\t@click.prevent='processSubmitBond'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.bond') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='secondary' \n\t\t\t\t\t\ttype='button' \n\t\t\t\t\t\t:disabled='invalid || autoAddress'\n\t\t\t\t\t\t@click='modalUnbond = true'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.unbond') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='secondary' \n\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t@click='modalClear = true'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.clearBonds') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CModal\n\t\t\t\t\t\t:title='$t(\"forms.clearBonds\")'\n\t\t\t\t\t\tcolor='danger'\n\t\t\t\t\t\t:show.sync='modalClear'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.messages.submit.removeBond.confirmClear') }}\n\t\t\t\t\t\t<template #footer>\n\t\t\t\t\t\t\t<CButton color='danger' @click='modalClear = false'>\n\t\t\t\t\t\t\t\t{{ $t('forms.no') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton color='success' @click='processSubmitClearAll'>\n\t\t\t\t\t\t\t\t{{ $t('forms.yes') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t</CModal>\n\t\t\t\t\t<CModal\n\t\t\t\t\t\t:title='$t(\"forms.unbond\")'\n\t\t\t\t\t\tcolor='danger'\n\t\t\t\t\t\t:show.sync='modalUnbond'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.messages.submit.removeBond.confirmUnbond') }}\n\t\t\t\t\t\t<template #footer>\n\t\t\t\t\t\t\t<CButton color='danger' @click='modalUnbond = false'>\n\t\t\t\t\t\t\t\t{{ $t('forms.no') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton color='success' @click='processSubmitUnbond'>\n\t\t\t\t\t\t\t\t{{ $t('forms.yes') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t</CModal>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInput, CInputCheckbox, CModal, CSelect} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {timeout} from '../../helpers/timeout';\nimport {between, integer, required} from 'vee-validate/dist/rules';\nimport IqrfNetService from '../../services/IqrfNetService';\n\nexport default {\n\tname: 'BondingManager',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tCModal,\n\t\tCSelect,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\taddress: 1,\n\t\t\tautoAddress: false,\n\t\t\tbondMethod: 'local',\n\t\t\tbondingRetries: 1,\n\t\t\tmodalClear: false,\n\t\t\tmodalUnbond: false,\n\t\t\tunbondCoordinatorOnly: false,\n\t\t\tscCode: '',\n\t\t\ttimeout: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\textend('scCode', (code) => {\n\t\t\tconst regex = RegExp('^[a-zA-Z0-9]{34}$');\n\t\t\treturn regex.test(code);\n\t\t});\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONSEND' &&\n\t\t\t\tmutation.payload.mType === ('iqmeshNetwork_BondNodeLocal' ||\n\t\t\t\t\t'iqmeshNetwork_SmartConnect' ||'iqrfEmbedCoordinator_ClearAllBonds' ||\n\t\t\t\t\t'iqrfEmbedCoordinator_RemoveBond')) {\n\t\t\t\tthis.timeout = timeout('iqrfnet.networkManager.messages.submit.timeout', 30000);\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONMESSAGE') {\n\t\t\t\tif (mutation.payload.mType === 'iqmeshNetwork_BondNodeLocal' ||\n\t\t\t\t\tmutation.payload.mType === 'iqmeshNetwork_SmartConnect') {\n\t\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tswitch(mutation.payload.data.status) {\n\t\t\t\t\t\tcase -1:\n\t\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\t\tthis.$t('iqrfnet.networkManager.messages.submit.timeout')\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\t\tthis.$t('iqrfnet.networkManager.messages.submit.bonding.success')\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.$emit('update-devices');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\t\tthis.$t('iqrfnet.networkManager.messages.submit.bonding.error_fail')\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (mutation.payload.mType === 'iqrfEmbedCoordinator_ClearAllBonds' ||\n\t\t\t\t\t\t\tmutation.payload.mType === 'iqmeshNetwork_RemoveBond') {\n\t\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tswitch(mutation.payload.data.status) {\n\t\t\t\t\t\tcase -1:\n\t\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\t\tthis.$t('iqrfnet.networkManager.messages.submit.timeout')\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tif (mutation.payload.data.rsp.nodesNr === 0) {\n\t\t\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\t\t\tthis.$t('iqrfnet.networkManager.messages.submit.removeBond.clearSuccess')\n\t\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\t\t\tthis.$t('iqrfnet.networkManager.messages.submit.removeBond.success')\n\t\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.$emit('update-devices');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1002:\n\t\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\t\tthis.$t('iqrfnet.networkManager.messages.submit.removeBond.remove_error')\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\t\tthis.$t('iqrfnet.networkManager.messages.submit.removeBond.error_fail')\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (mutation.payload.mType === 'messageError') {\n\t\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\tthis.$t('iqrfnet.networkManager.messages.submit.invalidMessage')\n\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\tprocessSubmitBond() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.bondMethod === 'local') {\n\t\t\t\tif (this.autoAddress) {\n\t\t\t\t\tIqrfNetService.bondLocal(0);\n\t\t\t\t} else {\n\t\t\t\t\tIqrfNetService.bondLocal(this.address);\n\t\t\t\t}\n\t\t\t} else if (this.bondMethod === 'smartConnect') {\n\t\t\t\tif (this.autoAddress) {\n\t\t\t\t\tIqrfNetService.bondSmartConnect(0, this.scCode, this.bondingRetries);\n\t\t\t\t} else {\n\t\t\t\t\tIqrfNetService.bondSmartConnect(this.address, this.scCode, this.bondingRetries);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tprocessSubmitUnbond() {\n\t\t\tthis.modalUnbond = false;\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tIqrfNetService.removeBond(this.address, this.unbondCoordinatorOnly);\n\t\t},\n\t\tprocessSubmitClearAll() {\n\t\t\tthis.modalClear = false;\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tIqrfNetService.clearAllBonds(this.unbondCoordinatorOnly);\n\t\t}\n\t}\n};\n</script>\n","import { render, staticRenderFns } from \"./BondingManager.vue?vue&type=template&id=293b26bd&\"\nimport script from \"./BondingManager.vue?vue&type=script&lang=js&\"\nexport * from \"./BondingManager.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('293b26bd')) {\n      api.createRecord('293b26bd', component.options)\n    } else {\n      api.reload('293b26bd', component.options)\n    }\n    module.hot.accept(\"./BondingManager.vue?vue&type=template&id=293b26bd&\", function () {\n      api.rerender('293b26bd', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/BondingManager.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\"CCardHeader\", [\n        _vm._v(_vm._s(_vm.$t(\"iqrfnet.networkManager.devicesInfo.title\")))\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"table\", { staticClass: \"table text-center\" }, [\n            _c(\"tbody\", [\n              _c(\"tr\", [\n                _c(\n                  \"td\",\n                  [\n                    _c(\"CIcon\", {\n                      staticClass: \"text-info\",\n                      attrs: { content: _vm.$options.icons.coordinator }\n                    }),\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\n                            \"iqrfnet.networkManager.devicesInfo.icons.coordinator\"\n                          )\n                        ) +\n                        \"\\n\\t\\t\\t\\t\\t\"\n                    )\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _c(\n                  \"td\",\n                  [\n                    _c(\"CIcon\", {\n                      staticClass: \"text-danger\",\n                      attrs: { content: _vm.$options.icons.unbonded }\n                    }),\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\n                            \"iqrfnet.networkManager.devicesInfo.icons.unbonded\"\n                          )\n                        ) +\n                        \"\\n\\t\\t\\t\\t\\t\"\n                    )\n                  ],\n                  1\n                )\n              ]),\n              _vm._v(\" \"),\n              _c(\"tr\", [\n                _c(\n                  \"td\",\n                  [\n                    _c(\"CIcon\", {\n                      staticClass: \"text-info\",\n                      attrs: { content: _vm.$options.icons.bonded }\n                    }),\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\n                            \"iqrfnet.networkManager.devicesInfo.icons.bonded\"\n                          )\n                        ) +\n                        \"\\n\\t\\t\\t\\t\\t\"\n                    )\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _c(\n                  \"td\",\n                  [\n                    _c(\"CIcon\", {\n                      staticClass: \"text-info\",\n                      attrs: { content: _vm.$options.icons.discovered }\n                    }),\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\n                            \"iqrfnet.networkManager.devicesInfo.icons.discovered\"\n                          )\n                        ) +\n                        \"\\n\\t\\t\\t\\t\\t\"\n                    )\n                  ],\n                  1\n                )\n              ]),\n              _vm._v(\" \"),\n              _c(\"tr\", [\n                _c(\n                  \"td\",\n                  [\n                    _c(\"CIcon\", {\n                      staticClass: \"text-success\",\n                      attrs: { content: _vm.$options.icons.bonded }\n                    }),\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\n                            \"iqrfnet.networkManager.devicesInfo.icons.bondedOnline\"\n                          )\n                        ) +\n                        \"\\n\\t\\t\\t\\t\\t\"\n                    )\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _c(\n                  \"td\",\n                  [\n                    _c(\"CIcon\", {\n                      staticClass: \"text-success\",\n                      attrs: { content: _vm.$options.icons.discovered }\n                    }),\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\n                            \"iqrfnet.networkManager.devicesInfo.icons.discoveredOnline\"\n                          )\n                        ) +\n                        \"\\n\\t\\t\\t\\t\\t\"\n                    )\n                  ],\n                  1\n                )\n              ])\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\n            \"CButton\",\n            {\n              staticClass: \"w-100\",\n              attrs: { color: \"primary\" },\n              on: { click: _vm.frcPing }\n            },\n            [_vm._v(\"\\n\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.pingNodes\")) + \"\\n\\t\\t\")]\n          ),\n          _vm._v(\" \"),\n          !_vm.timedOut\n            ? _c(\"div\", { staticClass: \"table-responsive\" }, [\n                _c(\n                  \"table\",\n                  { staticClass: \"table table-striped device-info\" },\n                  [\n                    _c(\n                      \"tbody\",\n                      [\n                        _c(\n                          \"tr\",\n                          [\n                            _c(\"th\"),\n                            _vm._v(\" \"),\n                            _vm._l(Array(10).keys(), function(num) {\n                              return _c(\"th\", { key: num }, [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(num) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ])\n                            })\n                          ],\n                          2\n                        ),\n                        _vm._v(\" \"),\n                        _vm._l(Array(24).keys(), function(row) {\n                          return _c(\n                            \"tr\",\n                            { key: row },\n                            [\n                              _c(\"th\", [_vm._v(_vm._s(row) + \"0\")]),\n                              _vm._v(\" \"),\n                              _vm._l(Array(10).keys(), function(col) {\n                                return _c(\n                                  \"td\",\n                                  { key: col },\n                                  [\n                                    _c(\"DeviceIcon\", {\n                                      attrs: {\n                                        device:\n                                          _vm.devices[_vm.getAddress(row, col)]\n                                      }\n                                    })\n                                  ],\n                                  1\n                                )\n                              })\n                            ],\n                            2\n                          )\n                        })\n                      ],\n                      2\n                    )\n                  ]\n                )\n              ])\n            : _c(\"CAlert\", { attrs: { color: \"danger\" } }, [\n                _vm._v(\n                  \"\\n\\t\\t\\t\" +\n                    _vm._s(\n                      _vm.$t(\n                        \"iqrfnet.networkManager.devicesInfo.messages.empty\"\n                      )\n                    ) +\n                    \"\\n\\t\\t\"\n                )\n              ])\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import { cilHome, cilX, cilCheckAlt, cilSignalCellular4 } from '@coreui/icons';\n/**\n * Class representing a device used in Network Manager.\n */\nvar Device = /** @class */ (function () {\n    /**\n     * Constructor\n     * @param address Device address\n     * @param coordinator Specifies if the device is a coordinator device\n     * @param bonded Specifies if the device is bonded\n     * @param discovered Specifies if the device is discovered\n     * @param online Specifies if the device is online\n     */\n    function Device(address, coordinator, bonded, discovered, online) {\n        if (bonded === void 0) { bonded = false; }\n        if (discovered === void 0) { discovered = false; }\n        if (online === void 0) { online = false; }\n        this.address = address;\n        this.coordinator = coordinator;\n        this.bonded = bonded;\n        this.discovered = discovered;\n        this.online = online;\n    }\n    /**\n     * Returns the icon\n     * @returns Icon to render\n     */\n    Device.prototype.getIcon = function () {\n        if (this.address === 0) {\n            return cilHome;\n        }\n        if (this.bonded) {\n            if (this.discovered) {\n                return cilSignalCellular4;\n            }\n            return cilCheckAlt;\n        }\n        return cilX;\n    };\n    /**\n     * Returns the icon color\n     * @returns Icon color\n     */\n    Device.prototype.getIconColor = function () {\n        if (this.address === 0) {\n            return 'text-info';\n        }\n        if (this.bonded) {\n            if (this.online) {\n                return 'text-success';\n            }\n            return 'text-info';\n        }\n        return 'text-danger';\n    };\n    Device.prototype.hasLink = function () {\n        return this.coordinator || this.bonded;\n    };\n    return Device;\n}());\nexport default Device;\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.device.hasLink()\n    ? _c(\n        \"router-link\",\n        { attrs: { to: \"/iqrfnet/enumeration/\" + _vm.device.address } },\n        [\n          _c(\"CIcon\", {\n            class: _vm.device.getIconColor(),\n            attrs: { content: _vm.device.getIcon() }\n          })\n        ],\n        1\n      )\n    : _c(\"CIcon\", {\n        class: _vm.device.getIconColor(),\n        attrs: { content: _vm.device.getIcon() }\n      })\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<router-link\n\t\tv-if='device.hasLink()'\n\t\t:to='\"/iqrfnet/enumeration/\" + device.address'\n\t>\n\t\t<CIcon :class='device.getIconColor()' :content='device.getIcon()' />\n\t</router-link>\n\t<CIcon v-else :class='device.getIconColor()' :content='device.getIcon()' />\n</template>\n\n<script>\nimport Device from '../../helpers/Device';\nimport {CIcon} from '@coreui/vue/src';\n\nexport default {\n\tname: 'DeviceIcon',\n\tcomponents: {\n\t\tCIcon\n\t},\n\tprops: {\n\t\tdevice: {\n\t\t\ttype: Device,\n\t\t\trequired: true,\n\t\t},\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DeviceIcon.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DeviceIcon.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DeviceIcon.vue?vue&type=template&id=579a753e&\"\nimport script from \"./DeviceIcon.vue?vue&type=script&lang=js&\"\nexport * from \"./DeviceIcon.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('579a753e')) {\n      api.createRecord('579a753e', component.options)\n    } else {\n      api.reload('579a753e', component.options)\n    }\n    module.hot.accept(\"./DeviceIcon.vue?vue&type=template&id=579a753e&\", function () {\n      api.rerender('579a753e', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/DeviceIcon.vue\"\nexport default component.exports","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DevicesInfo.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DevicesInfo.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard>\n\t\t<CCardHeader>{{ $t('iqrfnet.networkManager.devicesInfo.title') }}</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<table class='table text-center'>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CIcon class='text-info' :content='$options.icons.coordinator' />\n\t\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.devicesInfo.icons.coordinator') }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CIcon class='text-danger' :content='$options.icons.unbonded' />\n\t\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.devicesInfo.icons.unbonded') }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CIcon class='text-info' :content='$options.icons.bonded' />\n\t\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.devicesInfo.icons.bonded') }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CIcon class='text-info' :content='$options.icons.discovered' />\n\t\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.devicesInfo.icons.discovered') }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CIcon class='text-success' :content='$options.icons.bonded' />\n\t\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.devicesInfo.icons.bondedOnline') }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CIcon class='text-success' :content='$options.icons.discovered' />\n\t\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.devicesInfo.icons.discoveredOnline') }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<CButton color='primary' class='w-100' @click='frcPing'>\n\t\t\t\t{{ $t('forms.pingNodes') }}\n\t\t\t</CButton>\n\t\t\t<div v-if='!timedOut' class='table-responsive'>\n\t\t\t\t<table class='table table-striped device-info'>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th />\n\t\t\t\t\t\t\t<th v-for='num of Array(10).keys()' :key='num'>\n\t\t\t\t\t\t\t\t{{ num }}\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr v-for='row of Array(24).keys()' :key='row'>\n\t\t\t\t\t\t\t<th>{{ row }}0</th>\n\t\t\t\t\t\t\t<td v-for='col of Array(10).keys()' :key='col'>\n\t\t\t\t\t\t\t\t<DeviceIcon :device='devices[getAddress(row, col)]' />\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t\t<CAlert v-else color='danger'>\n\t\t\t\t{{ $t('iqrfnet.networkManager.devicesInfo.messages.empty') }}\n\t\t\t</CAlert>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {cilHome, cilX, cilCheckAlt, cilSignalCellular4} from '@coreui/icons';\nimport {CAlert, CButton, CCard, CCardBody, CCardHeader, CIcon} from '@coreui/vue/src';\nimport Device from '../../helpers/Device';\nimport DeviceIcon from './DeviceIcon';\nimport IqrfNetService from '../../services/IqrfNetService';\n\nexport default {\n\tname: 'DevicesInfo',\n\tcomponents: {\n\t\tCAlert,\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCIcon,\n\t\tDeviceIcon,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tallowedMTypes: [\n\t\t\t\t'iqrfEmbedCoordinator_BondedDevices',\n\t\t\t\t'iqrfEmbedCoordinator_DiscoveredDevices',\n\t\t\t\t'iqrfEmbedFrc_Send',\n\t\t\t],\n\t\t\tdevices: [],\n\t\t\tmanual: false,\n\t\t\tresponseReceived: false,\n\t\t\ttimedOut: false\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.generateDevices();\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONOPEN') {\n\t\t\t\tthis.getDevices();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONSEND') {\n\t\t\t\tif (!this.allowedMTypes.includes(mutation.payload.mType)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.responseReceived = false;\n\t\t\t\tsetTimeout(() => {this.timeOut();}, 30000);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONMESSAGE') {\n\t\t\t\tif (!this.allowedMTypes.includes(mutation.payload.mType)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.responseReceived = true;\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\tif (mutation.payload.mType === 'iqrfEmbedCoordinator_BondedDevices') {\n\t\t\t\t\tthis.parseBondedDevices(mutation.payload);\n\t\t\t\t} else if (mutation.payload.mType === 'iqrfEmbedCoordinator_DiscoveredDevices') {\n\t\t\t\t\tthis.parseDiscoveredDevices(mutation.payload);\n\t\t\t\t} else if (mutation.payload.mType === 'iqrfEmbedFrc_Send') {\n\t\t\t\t\tthis.parseFrcPing(mutation.payload);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tif (this.$store.getters.isSocketConnected) {\n\t\t\tthis.getDevices();\n\t\t}\t\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\tfrcPing() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tIqrfNetService.ping();\n\t\t},\n\t\tgenerateDevices() {\n\t\t\tthis.devices.push(new Device(0, true));\n\t\t\tfor (let i = 1; i <= 239; i++) {\n\t\t\t\tthis.devices.push(new Device(i, false));\n\t\t\t}\n\t\t},\n\t\tgetAddress(row, col) {\n\t\t\treturn row * 10 + col;\n\t\t},\n\t\tgetBondedDevices() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tIqrfNetService.getBonded();\n\t\t},\n\t\tgetDiscoveredDevices() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tIqrfNetService.getDiscovered();\n\t\t},\n\t\tparseBondedDevices(response) {\n\t\t\tswitch (response.data.status) {\n\t\t\t\tcase 0: {\n\t\t\t\t\tthis.devices.forEach(item => {\n\t\t\t\t\t\titem.bonded = false;\n\t\t\t\t\t});\n\t\t\t\t\tconst bonded = response.data.rsp.result.bondedDevices;\n\t\t\t\t\tbonded.forEach(item => {\n\t\t\t\t\t\tthis.devices[item].bonded = true;\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\tthis.$t('iqrfnet.networkManager.devicesInfo.messages.bonded.failure')\n\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t);\n\t\t\t\t\tthis.timedOut = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t\tparseDiscoveredDevices(response) {\n\t\t\tswitch (response.data.status) {\n\t\t\t\tcase 0: {\n\t\t\t\t\tthis.devices.forEach(item => {\n\t\t\t\t\t\titem.discovered = false;\n\t\t\t\t\t});\n\t\t\t\t\tconst discovered = response.data.rsp.result.discoveredDevices;\n\t\t\t\t\tdiscovered.forEach(item => {\n\t\t\t\t\t\tthis.devices[item].discovered = true;\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\tthis.$t('iqrfnet.networkManager.devicesInfo.messages.discovered.failure')\n\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t);\n\t\t\t\t\tthis.timedOut = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t\tparseFrcPing(response) {\n\t\t\tswitch(response.data.status) {\n\t\t\t\tcase 0: {\n\t\t\t\t\tconst online = response.data.rsp.result.frcData.slice(0, 30);\n\t\t\t\t\tlet k = 0;\n\t\t\t\t\tonline.forEach(item => {\n\t\t\t\t\t\tfor (let i = 0; i < 8; ++i) {\n\t\t\t\t\t\t\tconst device = (item & (1 << i)) >> i;\n\t\t\t\t\t\t\tthis.devices[k++].online = (device === 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tif (this.manual) {\n\t\t\t\t\t\tthis.manual = false;\n\t\t\t\t\t\tthis.$forceUpdate();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\tthis.$t('iqrfnet.networkManager.devicesInfo.messages.ping.failure')\n\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t);\n\t\t\t\t\tthis.timedOut = false;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t\tgetDevices() {\n\t\t\tthis.getBondedDevices();\n\t\t\tthis.getDiscoveredDevices();\n\t\t\tthis.frcPing();\n\t\t},\n\t\ttimeOut() {\n\t\t\tif (!this.responseReceived) {\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\tthis.$toast.error(\n\t\t\t\t\tthis.$t('iqrfnet.networkManager.messages.submit.timeout').toString()\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\tsubmitFrcPing() {\n\t\t\tthis.manual = true;\n\t\t\tthis.frcPing();\n\t\t},\n\t},\n\ticons: {\n\t\tcoordinator: cilHome,\n\t\tbonded: cilCheckAlt,\n\t\tdiscovered: cilSignalCellular4,\n\t\tunbonded: cilX\n\t}\n};\n</script>\n\n<style scoped lang='scss'>\n@media (min-width: 440px) and (max-width: 1400px) {\n\t.device-info {\n\t\ttd, th {\n\t\t\tpadding: 0.5rem;\n\t\t}\n\t}\n}\n\n@media (max-width: 440px) {\n\t.device-info {\n\t\ttd, th {\n\t\t\tpadding: 0.25rem;\n\t\t}\n\t}\n}\n</style>\n","import { render, staticRenderFns } from \"./DevicesInfo.vue?vue&type=template&id=22f61cec&scoped=true&\"\nimport script from \"./DevicesInfo.vue?vue&type=script&lang=js&\"\nexport * from \"./DevicesInfo.vue?vue&type=script&lang=js&\"\nimport style0 from \"./DevicesInfo.vue?vue&type=style&index=0&id=22f61cec&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"22f61cec\",\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('22f61cec')) {\n      api.createRecord('22f61cec', component.options)\n    } else {\n      api.reload('22f61cec', component.options)\n    }\n    module.hot.accept(\"./DevicesInfo.vue?vue&type=template&id=22f61cec&scoped=true&\", function () {\n      api.rerender('22f61cec', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/DevicesInfo.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { staticClass: \"border-0\" },\n    [\n      _c(\"CCardHeader\", [\n        _vm._v(\n          \"\\n\\t\\t\" +\n            _vm._s(_vm.$t(\"iqrfnet.networkManager.discovery.title\")) +\n            \"\\n\\t\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      {\n                        on: {\n                          submit: function($event) {\n                            $event.preventDefault()\n                            return _vm.processSubmit($event)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|between:0,7\",\n                            \"custom-messages\": {\n                              integer:\n                                \"iqrfnet.networkManager.messages.invalid.integer\",\n                              required:\n                                \"iqrfnet.networkManager.messages.discovery.txPower\",\n                              between:\n                                \"iqrfnet.networkManager.messages.discovery.txPower\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        max: \"7\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.networkManager.discovery.form.txPower\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.txPower,\n                                        callback: function($$v) {\n                                          _vm.txPower = _vm._n($$v)\n                                        },\n                                        expression: \"txPower\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|between:0,239\",\n                            \"custom-messages\": {\n                              integer:\n                                \"iqrfnet.networkManager.messages.invalid.integer\",\n                              required:\n                                \"iqrfnet.networkManager.messages.discovery.maxAddr\",\n                              between:\n                                \"iqrfnet.networkManager.messages.discovery.maxAddr\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        max: \"239\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.networkManager.discovery.form.maxAddr\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.maxAddr,\n                                        callback: function($$v) {\n                                          _vm.maxAddr = _vm._n($$v)\n                                        },\n                                        expression: \"maxAddr\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              color: \"primary\",\n                              type: \"submit\",\n                              disabled: invalid\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.discovery\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard class='border-0'>\n\t\t<CCardHeader>\n\t\t\t{{ $t('iqrfnet.networkManager.discovery.title') }}\n\t\t</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='processSubmit'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:0,7'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.discovery.txPower\",\n\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.discovery.txPower\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='txPower'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='7'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.discovery.form.txPower\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:0,239'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.discovery.maxAddr\",\n\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.discovery.maxAddr\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='maxAddr'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.discovery.form.maxAddr\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t(\"forms.discovery\") }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {timeout} from '../../helpers/timeout';\nimport {between, integer, required} from 'vee-validate/dist/rules';\nimport IqrfNetService from '../../services/IqrfNetService';\n\nexport default {\n\tname: 'DiscoveryManager',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tmaxAddr: 239,\n\t\t\ttxPower: 6,\n\t\t\tresponseReceived: false,\n\t\t\ttimeout: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONSEND' &&\n\t\t\t\tmutation.payload.mType === 'iqrfEmbedCoordinator_Discovery') {\n\t\t\t\tthis.timeout = timeout('iqrfnet.networkManager.messages.submit.timeout', 30000);\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONMESSAGE') {\n\t\t\t\tif (mutation.payload.mType === 'iqrfEmbedCoordinator_Discovery') {\n\t\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tswitch (mutation.payload.data.status) {\n\t\t\t\t\t\tcase -1:\n\t\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\t\tthis.$t('iqrfnet.networkManager.messages.submit.timeout')\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\t\tthis.$t('iqrfnet.networkManager.messages.submit.discovery.success')\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.$emit('update-devices');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\t\tthis.$t('iqrfnet.networkManager.messages.submit.discovery.error_fail')\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\tprocessSubmit() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tIqrfNetService.discovery(this.txPower, this.maxAddr);\n\t\t},\n\t}\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DiscoveryManager.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DiscoveryManager.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DiscoveryManager.vue?vue&type=template&id=2520b0ec&\"\nimport script from \"./DiscoveryManager.vue?vue&type=script&lang=js&\"\nexport * from \"./DiscoveryManager.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('2520b0ec')) {\n      api.createRecord('2520b0ec', component.options)\n    } else {\n      api.reload('2520b0ec', component.options)\n    }\n    module.hot.accept(\"./DiscoveryManager.vue?vue&type=template&id=2520b0ec&\", function () {\n      api.rerender('2520b0ec', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/DiscoveryManager.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { staticClass: \"border-0\" },\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|between:0,7\",\n                            \"custom-messages\": {\n                              integer:\n                                \"iqrfnet.networkManager.messages.invalid.integer\",\n                              required:\n                                \"iqrfnet.networkManager.messages.discovery.txPower\",\n                              between:\n                                \"iqrfnet.networkManager.messages.discovery.txPower\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        requred: \"true\",\n                                        type: \"number\",\n                                        min: \"0\",\n                                        max: \"7\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.networkManager.autoNetwork.form.discoveryTxPower\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.autoNetwork.discoveryTxPower,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.autoNetwork,\n                                            \"discoveryTxPower\",\n                                            _vm._n($$v)\n                                          )\n                                        },\n                                        expression:\n                                          \"autoNetwork.discoveryTxPower\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.autoNetwork.discoveryBeforeStart,\n                            label: _vm.$t(\n                              \"iqrfnet.networkManager.autoNetwork.form.discoveryBeforeStart\"\n                            )\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              return _vm.$set(\n                                _vm.autoNetwork,\n                                \"discoveryBeforeStart\",\n                                $event\n                              )\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.autoNetwork.skipDiscoveryEachWave,\n                            label: _vm.$t(\n                              \"iqrfnet.networkManager.autoNetwork.form.skipDiscoveryEachWave\"\n                            )\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              return _vm.$set(\n                                _vm.autoNetwork,\n                                \"skipDiscoveryEachWave\",\n                                $event\n                              )\n                            }\n                          }\n                        }),\n                        _c(\"hr\"),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|between:0,3\",\n                            \"custom-messages\": {\n                              integer:\n                                \"iqrfnet.networkManager.messages.invalid.integer\",\n                              required:\n                                \"iqrfnet.networkManager.messages.autoNetwork.actionRetries\",\n                              between:\n                                \"iqrfnet.networkManager.messages.autoNetwork.actionRetries\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        max: \"3\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.networkManager.autoNetwork.form.actionRetries\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.autoNetwork.actionRetries,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.autoNetwork,\n                                            \"actionRetries\",\n                                            _vm._n($$v)\n                                          )\n                                        },\n                                        expression: \"autoNetwork.actionRetries\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _c(\"hr\"),\n                        _vm._v(\" \"),\n                        _c(\"h4\", [\n                          _vm._v(\n                            \"\\n\\t\\t\\t\\t\\t\" +\n                              _vm._s(\n                                _vm.$t(\n                                  \"iqrfnet.networkManager.autoNetwork.form.bondingControl\"\n                                )\n                              ) +\n                              \"\\n\\t\\t\\t\\t\"\n                          )\n                        ]),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.useOverlappingNetworks,\n                            label: _vm.$t(\n                              \"iqrfnet.networkManager.autoNetwork.form.overlappingNetworks\"\n                            )\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              _vm.useOverlappingNetworks = $event\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|between:1,50\",\n                            \"custom-messages\": {\n                              integer:\n                                \"iqrfnet.networkManager.messages.invalid.integer\",\n                              required:\n                                \"iqrfnet.networkManager.messages.autoNetwork.networks\",\n                              between:\n                                \"iqrfnet.networkManager.messages.autoNetwork.networks\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"1\",\n                                        max: \"50\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.networkManager.autoNetwork.form.networks\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0]),\n                                        disabled: !_vm.useOverlappingNetworks\n                                      },\n                                      model: {\n                                        value: _vm.overlappingNetworks.networks,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.overlappingNetworks,\n                                            \"networks\",\n                                            _vm._n($$v)\n                                          )\n                                        },\n                                        expression:\n                                          \"overlappingNetworks.networks\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|between:1,50\",\n                            \"custom-messages\": {\n                              integer:\n                                \"iqrfnet.networkManager.messages.invalid.integer\",\n                              required:\n                                \"iqrfnet.networkManager.messages.autoNetwork.network\",\n                              between:\n                                \"iqrfnet.networkManager.messages.autoNetwork.network\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"1\",\n                                        max: \"50\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.networkManager.autoNetwork.form.network\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0]),\n                                        disabled: !_vm.useOverlappingNetworks\n                                      },\n                                      model: {\n                                        value: _vm.overlappingNetworks.network,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.overlappingNetworks,\n                                            \"network\",\n                                            _vm._n($$v)\n                                          )\n                                        },\n                                        expression:\n                                          \"overlappingNetworks.network\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _c(\"hr\"),\n                        _vm._v(\" \"),\n                        _c(\"h4\", [\n                          _vm._v(\n                            \"\\n\\t\\t\\t\\t\\t\" +\n                              _vm._s(\n                                _vm.$t(\n                                  \"iqrfnet.networkManager.autoNetwork.form.hwpidFiltering\"\n                                )\n                              ) +\n                              \"\\n\\t\\t\\t\\t\"\n                          )\n                        ]),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.useHwpidFiltering,\n                            label: _vm.$t(\n                              \"iqrfnet.networkManager.autoNetwork.form.hwpidEnable\"\n                            )\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              _vm.useHwpidFiltering = $event\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"hwpidFilter\",\n                            \"custom-messages\": {\n                              hwpidFilter:\n                                \"iqrfnet.networkManager.messages.invalid.autoNetwork.hwpidFilter\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"iqrfnet.networkManager.autoNetwork.form.hwpids\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0]),\n                                        disabled: !_vm.useHwpidFiltering\n                                      },\n                                      model: {\n                                        value: _vm.hwpidFiltering,\n                                        callback: function($$v) {\n                                          _vm.hwpidFiltering = $$v\n                                        },\n                                        expression: \"hwpidFiltering\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _c(\"hr\"),\n                        _vm._v(\" \"),\n                        _c(\"h4\", [\n                          _vm._v(\n                            \"\\n\\t\\t\\t\\t\\t\" +\n                              _vm._s(\n                                _vm.$t(\n                                  \"iqrfnet.networkManager.autoNetwork.form.stopConditions\"\n                                )\n                              ) +\n                              \"\\n\\t\\t\\t\\t\"\n                          )\n                        ]),\n                        _vm._v(\" \"),\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _c(\"CInputCheckbox\", {\n                              attrs: {\n                                checked: _vm.useWaves,\n                                label: _vm.$t(\n                                  \"iqrfnet.networkManager.autoNetwork.form.waves\"\n                                )\n                              },\n                              on: {\n                                \"update:checked\": function($event) {\n                                  _vm.useWaves = $event\n                                }\n                              }\n                            }),\n                            _vm._v(\" \"),\n                            _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"integer|required|between:1,127\",\n                                \"custom-messages\": {\n                                  integer:\n                                    \"iqrfnet.networkManager.messages.invalid.integer\",\n                                  required:\n                                    \"iqrfnet.networkManager.messages.autoNetwork.waves\",\n                                  between:\n                                    \"iqrfnet.networkManager.messages.autoNetwork.waves\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var touched = ref.touched\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CInput\", {\n                                          attrs: {\n                                            type: \"number\",\n                                            min: \"1\",\n                                            max: \"127\",\n                                            \"is-valid\": touched ? valid : null,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            ),\n                                            disabled: !_vm.useWaves\n                                          },\n                                          model: {\n                                            value: _vm.stopConditions.waves,\n                                            callback: function($$v) {\n                                              _vm.$set(\n                                                _vm.stopConditions,\n                                                \"waves\",\n                                                _vm._n($$v)\n                                              )\n                                            },\n                                            expression: \"stopConditions.waves\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            })\n                          ],\n                          1\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _c(\"CInputCheckbox\", {\n                              attrs: {\n                                checked: _vm.useEmptyWaves,\n                                label: _vm.$t(\n                                  \"iqrfnet.networkManager.autoNetwork.form.emptyWaves\"\n                                )\n                              },\n                              on: {\n                                \"update:checked\": function($event) {\n                                  _vm.useEmptyWaves = $event\n                                }\n                              }\n                            }),\n                            _vm._v(\" \"),\n                            _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"integer|required|between:1,127\",\n                                \"custom-messages\": {\n                                  integer:\n                                    \"iqrfnet.networkManager.messages.invalid.integer\",\n                                  required:\n                                    \"iqrfnet.networkManager.messages.autoNetwork.emptyWaves\",\n                                  between:\n                                    \"iqrfnet.networkManager.messages.autoNetwork.emptyWaves\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var touched = ref.touched\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CInput\", {\n                                          attrs: {\n                                            type: \"number\",\n                                            min: \"1\",\n                                            max: \"127\",\n                                            \"is-valid\": touched ? valid : null,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            ),\n                                            disabled: !_vm.useEmptyWaves\n                                          },\n                                          model: {\n                                            value:\n                                              _vm.stopConditions.emptyWaves,\n                                            callback: function($$v) {\n                                              _vm.$set(\n                                                _vm.stopConditions,\n                                                \"emptyWaves\",\n                                                _vm._n($$v)\n                                              )\n                                            },\n                                            expression:\n                                              \"stopConditions.emptyWaves\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            })\n                          ],\n                          1\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _c(\"CInputCheckbox\", {\n                              attrs: {\n                                checked: _vm.useNodes,\n                                label: _vm.$t(\n                                  \"iqrfnet.networkManager.autoNetwork.form.nodes\"\n                                )\n                              },\n                              on: {\n                                \"update:checked\": function($event) {\n                                  _vm.useNodes = $event\n                                }\n                              }\n                            }),\n                            _vm._v(\" \"),\n                            _c(\"CSelect\", {\n                              attrs: {\n                                value: _vm.nodeCondition,\n                                options: [\n                                  { value: \"new\", label: \"New\" },\n                                  { value: \"total\", label: \"Total\" }\n                                ],\n                                disabled: !_vm.useNodes\n                              },\n                              on: {\n                                \"update:value\": function($event) {\n                                  _vm.nodeCondition = $event\n                                }\n                              }\n                            }),\n                            _vm._v(\" \"),\n                            _vm.nodeCondition === \"total\"\n                              ? _c(\"ValidationProvider\", {\n                                  attrs: {\n                                    rules: \"integer|required|between:1,239\",\n                                    \"custom-messages\": {\n                                      integer:\n                                        \"iqrfnet.networkManager.messages.invalid.integer\",\n                                      required:\n                                        \"iqrfnet.networkManager.messages.autoNetwork.totalNodes\",\n                                      between:\n                                        \"iqrfnet.networkManager.messages.autoNetwork.totalNodes\"\n                                    }\n                                  },\n                                  scopedSlots: _vm._u(\n                                    [\n                                      {\n                                        key: \"default\",\n                                        fn: function(ref) {\n                                          var errors = ref.errors\n                                          var touched = ref.touched\n                                          var valid = ref.valid\n                                          return [\n                                            _c(\"CInput\", {\n                                              attrs: {\n                                                type: \"number\",\n                                                min: \"1\",\n                                                max: \"239\",\n                                                label: _vm.$t(\n                                                  \"iqrfnet.networkManager.autoNetwork.form.numberOfTotalNodes\"\n                                                ),\n                                                \"is-valid\": touched\n                                                  ? valid\n                                                  : null,\n                                                \"invalid-feedback\": _vm.$t(\n                                                  errors[0]\n                                                ),\n                                                disabled: !_vm.useNodes\n                                              },\n                                              model: {\n                                                value:\n                                                  _vm.stopConditions\n                                                    .numberOfTotalNodes,\n                                                callback: function($$v) {\n                                                  _vm.$set(\n                                                    _vm.stopConditions,\n                                                    \"numberOfTotalNodes\",\n                                                    _vm._n($$v)\n                                                  )\n                                                },\n                                                expression:\n                                                  \"stopConditions.numberOfTotalNodes\"\n                                              }\n                                            })\n                                          ]\n                                        }\n                                      }\n                                    ],\n                                    null,\n                                    true\n                                  )\n                                })\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _vm.nodeCondition === \"new\"\n                              ? _c(\"ValidationProvider\", {\n                                  attrs: {\n                                    rules: \"integer|required|between:1,239\",\n                                    \"custom-messages\": {\n                                      integer:\n                                        \"iqrfnet.networkManager.messages.invalid.integer\",\n                                      required:\n                                        \"iqrfnet.networkManager.messages.autoNetwork.newNodes\",\n                                      between:\n                                        \"iqrfnet.networkManager.messages.autoNetwork.newNodes\"\n                                    }\n                                  },\n                                  scopedSlots: _vm._u(\n                                    [\n                                      {\n                                        key: \"default\",\n                                        fn: function(ref) {\n                                          var errors = ref.errors\n                                          var touched = ref.touched\n                                          var valid = ref.valid\n                                          return [\n                                            _c(\"CInput\", {\n                                              attrs: {\n                                                type: \"number\",\n                                                min: \"1\",\n                                                max: \"239\",\n                                                label: _vm.$t(\n                                                  \"iqrfnet.networkManager.autoNetwork.form.numberOfNewNodes\"\n                                                ),\n                                                \"is-valid\": touched\n                                                  ? valid\n                                                  : null,\n                                                \"invalid-feedback\": _vm.$t(\n                                                  errors[0]\n                                                ),\n                                                disabled: !_vm.useNodes\n                                              },\n                                              model: {\n                                                value:\n                                                  _vm.stopConditions\n                                                    .numberOfNewNodes,\n                                                callback: function($$v) {\n                                                  _vm.$set(\n                                                    _vm.stopConditions,\n                                                    \"numberOfNewNodes\",\n                                                    _vm._n($$v)\n                                                  )\n                                                },\n                                                expression:\n                                                  \"stopConditions.numberOfNewNodes\"\n                                              }\n                                            })\n                                          ]\n                                        }\n                                      }\n                                    ],\n                                    null,\n                                    true\n                                  )\n                                })\n                              : _vm._e()\n                          ],\n                          1\n                        ),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked:\n                              _vm.stopConditions.abortOnTooManyNodesFound,\n                            label: _vm.$t(\n                              \"iqrfnet.networkManager.autoNetwork.form.abortOnTooManyNodesFound\"\n                            ),\n                            disabled: !_vm.useNodes\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              return _vm.$set(\n                                _vm.stopConditions,\n                                \"abortOnTooManyNodesFound\",\n                                $event\n                              )\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              color: \"primary\",\n                              type: \"button\",\n                              disabled: invalid\n                            },\n                            on: { click: _vm.processSubmitAutoNetwork }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.start\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard class='border-0'>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:0,7'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.discovery.txPower\",\n\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.discovery.txPower\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='autoNetwork.discoveryTxPower'\n\t\t\t\t\t\t\trequred='true'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='7'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.discoveryTxPower\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='autoNetwork.discoveryBeforeStart'\n\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.discoveryBeforeStart\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='autoNetwork.skipDiscoveryEachWave'\n\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.skipDiscoveryEachWave\")'\n\t\t\t\t\t/><hr>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:0,3'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.actionRetries\",\n\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.actionRetries\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='autoNetwork.actionRetries'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='3'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.actionRetries\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider><hr>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.autoNetwork.form.bondingControl') }}\n\t\t\t\t\t</h4>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='useOverlappingNetworks'\n\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.overlappingNetworks\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:1,50'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.networks\",\n\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.networks\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='overlappingNetworks.networks'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\tmax='50'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.networks\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t:disabled='!useOverlappingNetworks'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:1,50'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.network\",\n\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.network\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='overlappingNetworks.network'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\tmax='50'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.network\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t:disabled='!useOverlappingNetworks'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider><hr>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.autoNetwork.form.hwpidFiltering') }}\n\t\t\t\t\t</h4>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='useHwpidFiltering'\n\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.hwpidEnable\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='hwpidFilter'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\thwpidFilter: \"iqrfnet.networkManager.messages.invalid.autoNetwork.hwpidFilter\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='hwpidFiltering'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.hwpids\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t:disabled='!useHwpidFiltering'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider><hr>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t{{ $t('iqrfnet.networkManager.autoNetwork.form.stopConditions') }}\n\t\t\t\t\t</h4>\n\t\t\t\t\t<div class='form-group'>\n\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t:checked.sync='useWaves'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.waves\")'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='integer|required|between:1,127'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.waves\",\n\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.waves\"\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model.number='stopConditions.waves'\n\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\t\tmax='127'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t:disabled='!useWaves'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='form-group'>\n\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t:checked.sync='useEmptyWaves'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.emptyWaves\")'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='integer|required|between:1,127'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.emptyWaves\",\n\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.emptyWaves\"\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model.number='stopConditions.emptyWaves'\n\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\t\tmax='127'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t:disabled='!useEmptyWaves'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='form-group'>\n\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t:checked.sync='useNodes'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.nodes\")'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<CSelect\n\t\t\t\t\t\t\t:value.sync='nodeCondition'\n\t\t\t\t\t\t\t:options='[\n\t\t\t\t\t\t\t\t{value: \"new\", label: \"New\"},\n\t\t\t\t\t\t\t\t{value: \"total\", label: \"Total\"}\n\t\t\t\t\t\t\t]'\n\t\t\t\t\t\t\t:disabled='!useNodes'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-if='nodeCondition === \"total\"'\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='integer|required|between:1,239'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.totalNodes\",\n\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.totalNodes\"\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model.number='stopConditions.numberOfTotalNodes'\n\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.numberOfTotalNodes\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t:disabled='!useNodes'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-if='nodeCondition === \"new\"'\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='integer|required|between:1,239'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.newNodes\",\n\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.newNodes\"\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model.number='stopConditions.numberOfNewNodes'\n\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.numberOfNewNodes\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t:disabled='!useNodes'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t</div>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='stopConditions.abortOnTooManyNodesFound'\n\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.abortOnTooManyNodesFound\")'\n\t\t\t\t\t\t:disabled='!useNodes'\n\t\t\t\t\t/>\n\t\t\t\t\t<CButton \n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t:disabled='invalid'\n\t\t\t\t\t\t@click='processSubmitAutoNetwork'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.start') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInput, CInputCheckbox} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {timeout} from '../../helpers/timeout';\nimport {between, integer, required} from 'vee-validate/dist/rules';\nimport IqrfNetService from '../../services/IqrfNetService';\n\nexport default {\n\tname: 'BondingManager',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tautoAddress: false,\n\t\t\tautoNetwork: {\n\t\t\t\tdiscoveryTxPower: 7,\n\t\t\t\tdiscoveryBeforeStart: false,\n\t\t\t\tskipDiscoveryEachWave: false,\n\t\t\t\tactionRetries: 1,\n\t\t\t},\n\t\t\tstopConditions: {\n\t\t\t\twaves: 10,\n\t\t\t\temptyWaves: 2,\n\t\t\t\tnumberOfTotalNodes: 1,\n\t\t\t\tnumberOfNewNodes: 1,\n\t\t\t\tabortOnTooManyNodesFound: false,\n\t\t\t},\n\t\t\toverlappingNetworks: {\n\t\t\t\tnetworks: 1,\n\t\t\t\tnetwork: 1\n\t\t\t},\n\t\t\thwpidFiltering: '',\n\t\t\ttimeout: null,\n\t\t\tuseHwpidFiltering: false,\n\t\t\tuseOverlappingNetworks: false,\n\t\t\tuseEmptyWaves: true,\n\t\t\tuseWaves: false,\n\t\t\tuseNodes: true,\n\t\t\tnodeCondition: 'new',\n\t\t\tmessages: {\n\t\t\t\tnodesTotal: '',\n\t\t\t\tnodesNew: '',\n\t\t\t}\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\textend('hwpidFilter', (val) => {\n\t\t\tconst regex = RegExp('^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[1-9])( (6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[1-9]))*$');\n\t\t\treturn regex.test(val);\n\t\t});\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONSEND' &&\n\t\t\t\tmutation.payload.mType === 'iqmeshNetwork_autoNetwork') {\n\t\t\t\tthis.timeout = timeout('iqrfnet.networkManager.messages.submit.timeout', 30000);\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONMESSAGE') {\n\t\t\t\tif (mutation.payload.mType === 'iqmeshNetwork_AutoNetwork') {\n\t\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\t\tswitch(mutation.payload.data.status) {\n\t\t\t\t\t\tcase -1:\n\t\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\t\tthis.$t('iqrfnet.networkManager.messages.submit.timeout')\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tthis.$store.commit('spinner/UPDATE_TEXT', this.autoNetworkProgress(mutation.payload.data));\n\t\t\t\t\t\t\tif (mutation.payload.data.rsp.lastWave) {\n\t\t\t\t\t\t\t\t//this.$store.commit('spinner/HIDE');\n\t\t\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\t\t\tthis.$t('iqrfnet.networkManager.messages.submit.autoNetwork.success')\n\t\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tthis.$emit('update-devices');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\t\tthis.$t('iqrfnet.networkManager.messages.submit.autoNetwork.failure')\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (mutation.payload.mType === 'messageError') {\n\t\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\tthis.$t('iqrfnet.networkManager.messages.submit.invalidMessage')\n\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\tautoNetworkProgress(response) {\n\t\t\tlet message = '\\nWave ' + response.rsp.wave;\n\t\t\tif (this.autoNetwork.stopConditions.waves) {\n\t\t\t\tmessage += '/ ' + this.autoNetwork.stopConditions.waves;\n\t\t\t}\n\t\t\tmessage += '\\n[' + response.rsp.progress + '%] ';\n\t\t\tif (response.rsp.waveState) {\n\t\t\t\tmessage += response.rsp.waveState;\n\t\t\t}\n\t\t\tif (response.rsp.nodesNr) {\n\t\t\t\tthis.messages.nodesTotal = '\\nTotal number of nodes in network: ' + response.rsp.nodesNr;\n\t\t\t}\n\t\t\tif (response.rsp.newNodesNr) {\n\t\t\t\tthis.messages.nodesNew = '\\nNumber of nodes added in last wave: ' + response.rsp.newNodesNr;\n\t\t\t}\n\t\t\tmessage += this.messages.nodesTotal + this.messages.nodesNew;\n\t\t\treturn message;\n\t\t},\n\t\tprocessSubmitAutoNetwork() {\n\t\t\tthis.messages.nodesTotal = this.messages.nodesNew = '';\n\t\t\tlet submitData = this.autoNetwork;\n\t\t\tlet stopConditions = {};\n\t\t\tif (this.useEmptyWaves) {\n\t\t\t\tstopConditions['emptyWaves'] = this.stopConditions.emptyWaves;\n\t\t\t}\n\t\t\tif (this.useWaves) {\n\t\t\t\tstopConditions['waves'] = this.stopConditions.waves;\n\t\t\t}\n\t\t\tif (this.useNodes) {\n\t\t\t\tstopConditions['abortOnTooManyNodesFound'] = this.stopConditions.abortOnTooManyNodesFound;\n\t\t\t\tif (this.nodeCondition === 'total') {\n\t\t\t\t\tstopConditions['numberOfTotalNodes'] = this.stopConditions.numberOfTotalNodes;\n\t\t\t\t} else {\n\t\t\t\t\tstopConditions['numberOfNewNodes'] = this.stopConditions.numberOfNewNodes;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (Object.keys(stopConditions).length > 0) {\n\t\t\t\tsubmitData['stopConditions'] = stopConditions;\n\t\t\t}\n\t\t\tif (this.useOverlappingNetworks) {\n\t\t\t\tsubmitData['overlappingNetworks'] = this.overlappingNetworks;\n\t\t\t}\n\t\t\tif (this.useHwpidFiltering && this.hwpidFiltering.length > 0) {\n\t\t\t\tsubmitData['hwpidFiltering'] = this.hwpidFiltering.split(', ').map((i) => parseInt(i));\n\t\t\t}\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tIqrfNetService.autoNetwork(submitData);\n\t\t}\n\t}\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AutoNetwork.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AutoNetwork.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./AutoNetwork.vue?vue&type=template&id=54f7b580&\"\nimport script from \"./AutoNetwork.vue?vue&type=script&lang=js&\"\nexport * from \"./AutoNetwork.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('54f7b580')) {\n      api.createRecord('54f7b580', component.options)\n    } else {\n      api.reload('54f7b580', component.options)\n    }\n    module.hot.accept(\"./AutoNetwork.vue?vue&type=template&id=54f7b580&\", function () {\n      api.rerender('54f7b580', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/AutoNetwork.vue\"\nexport default component.exports","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetworkManager.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetworkManager.vue?vue&type=script&lang=js&\"","<template>\n\t<CRow>\n\t\t<CCol lg='6'>\n\t\t\t<CCard>\n\t\t\t\t<CTabs variant='tabs' :active-tab='activeTab'>\n\t\t\t\t\t<CTab title='IQMESH'>\n\t\t\t\t\t\t<BondingManager @update-devices='updateDevices' />\n\t\t\t\t\t\t<DiscoveryManager @update-devices='updateDevices' />\n\t\t\t\t\t</CTab>\n\t\t\t\t\t<CTab title='AutoNetwork'>\n\t\t\t\t\t\t<AutoNetwork @update-devices='updateDevices' />\n\t\t\t\t\t</CTab>\n\t\t\t\t</CTabs>\n\t\t\t</CCard>\n\t\t</CCol>\n\t\t<CCol lg='6'>\n\t\t\t<DevicesInfo ref='devs' />\n\t\t</CCol>\n\t</CRow>\n</template>\n\n<script>\nimport {CCard, CTab, CTabs} from '@coreui/vue/src';\nimport BondingManager from '../../components/IqrfNet/BondingManager';\nimport DevicesInfo from '../../components/IqrfNet/DevicesInfo';\nimport DiscoveryManager from '../../components/IqrfNet/DiscoveryManager';\nimport AutoNetwork from '../../components/IqrfNet/AutoNetwork';\n\nexport default {\n\tname: 'NetworkManager',\n\tcomponents: {\n\t\tCCard,\n\t\tCTab,\n\t\tCTabs,\n\t\tAutoNetwork,\n\t\tBondingManager,\n\t\tDevicesInfo,\n\t\tDiscoveryManager,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tactiveTab: 0,\n\t\t};\n\t},\n\tmethods: {\n\t\tupdateDevices() {\n\t\t\tthis.$refs.devs.getBondedDevices();\n\t\t\tthis.$refs.devs.getDiscoveredDevices();\n\t\t\tthis.$refs.devs.submitFrcPing();\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'iqrfnet.networkManager.title',\n\t},\n};\n</script>\n\n<style scoped>\n.tab {\n\tborder-bottom: 0;\n}\n\n.tabs {\n\tborder-bottom: 0;\n}\n</style>\n","import { render, staticRenderFns } from \"./NetworkManager.vue?vue&type=template&id=9bbbfec0&scoped=true&\"\nimport script from \"./NetworkManager.vue?vue&type=script&lang=js&\"\nexport * from \"./NetworkManager.vue?vue&type=script&lang=js&\"\nimport style0 from \"./NetworkManager.vue?vue&type=style&index=0&id=9bbbfec0&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"9bbbfec0\",\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('9bbbfec0')) {\n      api.createRecord('9bbbfec0', component.options)\n    } else {\n      api.reload('9bbbfec0', component.options)\n    }\n    module.hot.accept(\"./NetworkManager.vue?vue&type=template&id=9bbbfec0&scoped=true&\", function () {\n      api.rerender('9bbbfec0', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/IqrfNet/NetworkManager.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        [\n          _c(\n            \"CCardHeader\",\n            [\n              _c(\n                \"CButton\",\n                {\n                  attrs: {\n                    color: \"primary\",\n                    size: \"sm\",\n                    href: \"https://docs.iqrf.org/iqrf-gateway/api.html\",\n                    target: \"_blank\"\n                  }\n                },\n                [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"iqrfnet.sendJson.documentation\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]\n              )\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\"ValidationObserver\", {\n                scopedSlots: _vm._u([\n                  {\n                    key: \"default\",\n                    fn: function(ref) {\n                      var invalid = ref.invalid\n                      return [\n                        _c(\n                          \"CForm\",\n                          {\n                            on: {\n                              submit: function($event) {\n                                $event.preventDefault()\n                                return _vm.processSubmit($event)\n                              }\n                            }\n                          },\n                          [\n                            _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"required|json|mType\",\n                                \"custom-messages\": {\n                                  required:\n                                    \"iqrfnet.sendJson.form.messages.missing\",\n                                  json:\n                                    \"iqrfnet.sendJson.form.messages.invalid\",\n                                  mType: \"iqrfnet.sendJson.form.messages.mType\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var touched = ref.touched\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CTextarea\", {\n                                          directives: [\n                                            {\n                                              name: \"autogrow\",\n                                              rawName: \"v-autogrow\"\n                                            }\n                                          ],\n                                          attrs: {\n                                            label: _vm.$t(\n                                              \"iqrfnet.sendJson.form.json\"\n                                            ),\n                                            \"is-valid\": touched ? valid : null,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            )\n                                          },\n                                          model: {\n                                            value: _vm.json,\n                                            callback: function($$v) {\n                                              _vm.json = $$v\n                                            },\n                                            expression: \"json\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            }),\n                            _vm._v(\" \"),\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: {\n                                  color: \"primary\",\n                                  type: \"submit\",\n                                  disabled: invalid\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"forms.send\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\"\n                                )\n                              ]\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  }\n                ])\n              })\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CRow\",\n        [\n          _vm.request !== null\n            ? _c(\n                \"CCol\",\n                { attrs: { md: \"6\" } },\n                [\n                  _c(\n                    \"CCard\",\n                    [\n                      _c(\n                        \"CCardHeader\",\n                        { staticClass: \"d-flex\" },\n                        [\n                          _c(\"span\", { staticClass: \"mr-auto\" }, [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"iqrfnet.sendJson.request\")) +\n                                \"\\n\\t\\t\\t\\t\\t\"\n                            )\n                          ]),\n                          _vm._v(\" \"),\n                          _c(\n                            \"CButton\",\n                            {\n                              directives: [\n                                {\n                                  name: \"clipboard\",\n                                  rawName: \"v-clipboard\",\n                                  value: _vm.request,\n                                  expression: \"request\"\n                                },\n                                {\n                                  name: \"clipboard\",\n                                  rawName: \"v-clipboard:success\",\n                                  value: function() {\n                                    return _vm.$toast.success(\n                                      _vm\n                                        .$t(\n                                          \"iqrfnet.sendJson.copy.messages.request\"\n                                        )\n                                        .toString()\n                                    )\n                                  },\n                                  expression:\n                                    '() => $toast.success($t(\"iqrfnet.sendJson.copy.messages.request\").toString())',\n                                  arg: \"success\"\n                                }\n                              ],\n                              attrs: { color: \"primary\", size: \"sm\" }\n                            },\n                            [\n                              _vm._v(\n                                \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                  _vm._s(\n                                    _vm.$t(\"iqrfnet.sendJson.copy.request\")\n                                  ) +\n                                  \"\\n\\t\\t\\t\\t\\t\"\n                              )\n                            ]\n                          )\n                        ],\n                        1\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"CCardBody\",\n                        [\n                          _c(\"prism-editor\", {\n                            attrs: {\n                              highlight: _vm.highlighter,\n                              readonly: true\n                            },\n                            model: {\n                              value: _vm.request,\n                              callback: function($$v) {\n                                _vm.request = $$v\n                              },\n                              expression: \"request\"\n                            }\n                          })\n                        ],\n                        1\n                      )\n                    ],\n                    1\n                  )\n                ],\n                1\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.response !== null\n            ? _c(\n                \"CCol\",\n                { attrs: { md: \"6\" } },\n                [\n                  _c(\n                    \"CCard\",\n                    [\n                      _c(\n                        \"CCardHeader\",\n                        { staticClass: \"d-flex\" },\n                        [\n                          _c(\"span\", { staticClass: \"mr-auto\" }, [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"iqrfnet.sendJson.response\")) +\n                                \"\\n\\t\\t\\t\\t\\t\"\n                            )\n                          ]),\n                          _vm._v(\" \"),\n                          _c(\n                            \"CButton\",\n                            {\n                              directives: [\n                                {\n                                  name: \"clipboard\",\n                                  rawName: \"v-clipboard\",\n                                  value: _vm.response,\n                                  expression: \"response\"\n                                },\n                                {\n                                  name: \"clipboard\",\n                                  rawName: \"v-clipboard:success\",\n                                  value: function() {\n                                    return _vm.$toast.success(\n                                      _vm\n                                        .$t(\n                                          \"iqrfnet.sendJson.copy.messages.response\"\n                                        )\n                                        .toString()\n                                    )\n                                  },\n                                  expression:\n                                    '() => $toast.success($t(\"iqrfnet.sendJson.copy.messages.response\").toString())',\n                                  arg: \"success\"\n                                }\n                              ],\n                              attrs: { color: \"primary\", size: \"sm\" }\n                            },\n                            [\n                              _vm._v(\n                                \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                  _vm._s(\n                                    _vm.$t(\"iqrfnet.sendJson.copy.response\")\n                                  ) +\n                                  \"\\n\\t\\t\\t\\t\\t\"\n                              )\n                            ]\n                          )\n                        ],\n                        1\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"CCardBody\",\n                        [\n                          _c(\"prism-editor\", {\n                            attrs: {\n                              highlight: _vm.highlighter,\n                              readonly: true\n                            },\n                            model: {\n                              value: _vm.response,\n                              callback: function($$v) {\n                                _vm.response = $$v\n                              },\n                              expression: \"response\"\n                            }\n                          })\n                        ],\n                        1\n                      )\n                    ],\n                    1\n                  )\n                ],\n                1\n              )\n            : _vm._e()\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","/**\n * JSON request error status code messages\n */\nexport var StatusMessages;\n(function (StatusMessages) {\n    StatusMessages[StatusMessages[\"iqrfnet.sendJson.form.messages.error.timeout\"] = -1] = \"iqrfnet.sendJson.form.messages.error.timeout\";\n    StatusMessages[StatusMessages[\"iqrfnet.sendJson.form.messages.error.fail\"] = 1] = \"iqrfnet.sendJson.form.messages.error.fail\";\n    StatusMessages[StatusMessages[\"iqrfnet.sendJson.form.messages.error.pcmd\"] = 2] = \"iqrfnet.sendJson.form.messages.error.pcmd\";\n    StatusMessages[StatusMessages[\"iqrfnet.sendJson.form.messages.error.pnum\"] = 3] = \"iqrfnet.sendJson.form.messages.error.pnum\";\n    StatusMessages[StatusMessages[\"iqrfnet.sendJson.form.messages.error.addr\"] = 4] = \"iqrfnet.sendJson.form.messages.error.addr\";\n    StatusMessages[StatusMessages[\"iqrfnet.sendJson.form.messages.error.dataLen\"] = 5] = \"iqrfnet.sendJson.form.messages.error.dataLen\";\n    StatusMessages[StatusMessages[\"iqrfnet.sendJson.form.messages.error.data\"] = 6] = \"iqrfnet.sendJson.form.messages.error.data\";\n    StatusMessages[StatusMessages[\"iqrfnet.sendJson.form.messages.error.hwpid\"] = 7] = \"iqrfnet.sendJson.form.messages.error.hwpid\";\n    StatusMessages[StatusMessages[\"iqrfnet.sendJson.form.messages.error.nadr\"] = 8] = \"iqrfnet.sendJson.form.messages.error.nadr\";\n})(StatusMessages || (StatusMessages = {}));\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SendJsonRequest.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SendJsonRequest.vue?vue&type=script&lang=js&\"","<template>\n\t<div>\n\t\t<CCard>\n\t\t\t<CCardHeader>\n\t\t\t\t<CButton \n\t\t\t\t\tcolor='primary'\n\t\t\t\t\tsize='sm' \n\t\t\t\t\thref='https://docs.iqrf.org/iqrf-gateway/api.html'\n\t\t\t\t\ttarget='_blank'\n\t\t\t\t>\n\t\t\t\t\t{{ $t(\"iqrfnet.sendJson.documentation\") }}\n\t\t\t\t</CButton>\n\t\t\t</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t\t<CForm @submit.prevent='processSubmit'>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='required|json|mType'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\trequired: \"iqrfnet.sendJson.form.messages.missing\",\n\t\t\t\t\t\t\t\tjson: \"iqrfnet.sendJson.form.messages.invalid\",\n\t\t\t\t\t\t\t\tmType: \"iqrfnet.sendJson.form.messages.mType\"\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CTextarea\n\t\t\t\t\t\t\t\tv-model='json'\n\t\t\t\t\t\t\t\tv-autogrow\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.sendJson.form.json\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t\t\t{{ $t('forms.send') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</CForm>\n\t\t\t\t</ValidationObserver>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t\t<CRow>\n\t\t\t<CCol v-if='request !== null' md='6'>\n\t\t\t\t<CCard>\n\t\t\t\t\t<CCardHeader class='d-flex'>\n\t\t\t\t\t\t<span class='mr-auto'>\n\t\t\t\t\t\t\t{{ $t('iqrfnet.sendJson.request') }}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\tv-clipboard='request'\n\t\t\t\t\t\t\tv-clipboard:success='() => $toast.success($t(\"iqrfnet.sendJson.copy.messages.request\").toString())'\n\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ $t('iqrfnet.sendJson.copy.request') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</CCardHeader>\n\t\t\t\t\t<CCardBody>\n\t\t\t\t\t\t<prism-editor\n\t\t\t\t\t\t\tv-model='request'\n\t\t\t\t\t\t\t:highlight='highlighter'\n\t\t\t\t\t\t\t:readonly='true'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</CCardBody>\n\t\t\t\t</CCard>\n\t\t\t</CCol>\n\t\t\t<CCol v-if='response !== null' md='6'>\n\t\t\t\t<CCard>\n\t\t\t\t\t<CCardHeader class='d-flex'>\n\t\t\t\t\t\t<span class='mr-auto'>\n\t\t\t\t\t\t\t{{ $t('iqrfnet.sendJson.response') }}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\tv-clipboard='response'\n\t\t\t\t\t\t\tv-clipboard:success='() => $toast.success($t(\"iqrfnet.sendJson.copy.messages.response\").toString())'\n\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ $t('iqrfnet.sendJson.copy.response') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</CCardHeader>\n\t\t\t\t\t<CCardBody>\n\t\t\t\t\t\t<prism-editor\n\t\t\t\t\t\t\tv-model='response'\n\t\t\t\t\t\t\t:highlight='highlighter'\n\t\t\t\t\t\t\t:readonly='true'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</CCardBody>\n\t\t\t\t</CCard>\n\t\t\t</CCol>\n\t\t</CRow>\n\t</div>\n</template>\n\n<script>\n\nimport {CButton, CCard, CCardBody, CCardHeader, CForm, CTextarea} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {required} from 'vee-validate/dist/rules';\nimport {timeout} from '../../helpers/timeout';\nimport {TextareaAutogrowDirective} from 'vue-textarea-autogrow-directive/src/VueTextareaAutogrowDirective';\nimport {StatusMessages} from '../../iqrfNet/sendJson';\nimport IqrfNetService from '../../services/IqrfNetService';\n\nimport {PrismEditor} from 'vue-prism-editor';\nimport 'vue-prism-editor/dist/prismeditor.min.css';\nimport Prism from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-json';\nimport 'prismjs/themes/prism.css';\n\nexport default {\n\tname: 'SendJsonRequest',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCTextarea,\n\t\tPrismEditor,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tdirectives: {\n\t\t'autogrow': TextareaAutogrowDirective\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tjson: null,\n\t\t\trequest: null,\n\t\t\tresponse: null,\n\t\t\ttimeout: null,\n\t\t\tmType: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('json', (json) => {\n\t\t\ttry {\n\t\t\t\tJSON.parse(json);\n\t\t\t\treturn true;\n\t\t\t} catch (error) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t\textend('mType', (json) => {\n\t\t\tlet object = JSON.parse(json);\n\t\t\treturn {}.hasOwnProperty.call(object, 'mType');\n\t\t});\n\t\textend('required', required);\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONSEND') {\n\t\t\t\tthis.mType = mutation.payload.mType;\n\t\t\t\tthis.timeout = timeout('iqrfnet.sendJson.form.messages.timeout', 30000);\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONMESSAGE') {\n\t\t\t\tif ({}.hasOwnProperty.call(mutation.payload, 'mType')) {\n\t\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (mutation.payload.mType === this.mType) {\n\t\t\t\t\t\tthis.response = JSON.stringify(mutation.payload, null, 4);\n\t\t\t\t\t\tif (mutation.payload.data.status === 0) {\n\t\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\t\tthis.$t('iqrfnet.sendJson.form.messages.success')\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (mutation.payload.data.status in StatusMessages) {\n\t\t\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\t\t\tthis.$t(StatusMessages[mutation.payload.data.status])\n\t\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\t\t\tthis.$t('iqrfnet.sendJson.form.messages.error.fail')\n\t\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (mutation.payload.mType === 'messageError') {\n\t\t\t\t\t\tthis.response = JSON.stringify(mutation.payload, null, 4);\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('iqrfnet.sendJson.form.messages.error.messageError')\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\t/**\n\t\t * JSON highlighter method\n\t\t */\n\t\thighlighter(code) {\n\t\t\treturn Prism.highlight(code, Prism.languages.json, 'json');\n\t\t},\n\t\tprocessSubmit() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tlet json = JSON.parse(this.json);\n\t\t\tthis.request = JSON.stringify(json, null, 4);\n\t\t\tthis.response = null;\n\t\t\tIqrfNetService.sendJson(json);\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'iqrfnet.sendJson.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./SendJsonRequest.vue?vue&type=template&id=39c7ac2e&\"\nimport script from \"./SendJsonRequest.vue?vue&type=script&lang=js&\"\nexport * from \"./SendJsonRequest.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('39c7ac2e')) {\n      api.createRecord('39c7ac2e', component.options)\n    } else {\n      api.reload('39c7ac2e', component.options)\n    }\n    module.hot.accept(\"./SendJsonRequest.vue?vue&type=template&id=39c7ac2e&\", function () {\n      api.rerender('39c7ac2e', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/IqrfNet/SendJsonRequest.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        { attrs: { \"body-wrapper\": \"\" } },\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      {\n                        on: {\n                          submit: function($event) {\n                            $event.preventDefault()\n                            return _vm.handleSubmit($event)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"dpaPacket|required\",\n                            \"custom-messages\": {\n                              required:\n                                \"iqrfnet.sendPacket.form.messages.missing.packet\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var valid = ref.valid\n                                  var touched = ref.touched\n                                  var errors = ref.errors\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"iqrfnet.sendPacket.form.packet\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      on: { input: _vm.setTimeout },\n                                      model: {\n                                        value: _vm.packet,\n                                        callback: function($$v) {\n                                          _vm.packet = $$v\n                                        },\n                                        expression: \"packet\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CRow\",\n                          [\n                            _c(\n                              \"CCol\",\n                              { attrs: { md: \"6\" } },\n                              [\n                                _c(\"CInputCheckbox\", {\n                                  attrs: {\n                                    checked: _vm.addressOverwrite,\n                                    label: _vm.$t(\n                                      \"iqrfnet.sendPacket.form.addressOverwrite\"\n                                    )\n                                  },\n                                  on: {\n                                    \"update:checked\": function($event) {\n                                      _vm.addressOverwrite = $event\n                                    }\n                                  }\n                                }),\n                                _vm._v(\" \"),\n                                _c(\"ValidationProvider\", {\n                                  attrs: {\n                                    disabled: !_vm.addressOverwrite,\n                                    rules: _vm.addressOverwrite\n                                      ? \"integer|between:0,239|required\"\n                                      : \"\",\n                                    \"custom-messages\": {\n                                      between:\n                                        \"iqrfnet.sendPacket.form.messages.invalid.address\",\n                                      integer:\n                                        \"iqrfnet.sendPacket.form.messages.invalid.address\",\n                                      required:\n                                        \"iqrfnet.sendPacket.form.messages.missing.address\"\n                                    }\n                                  },\n                                  scopedSlots: _vm._u(\n                                    [\n                                      {\n                                        key: \"default\",\n                                        fn: function(ref) {\n                                          var valid = ref.valid\n                                          var touched = ref.touched\n                                          var errors = ref.errors\n                                          return [\n                                            _c(\"CInput\", {\n                                              attrs: {\n                                                disabled: !_vm.addressOverwrite,\n                                                label: _vm.$t(\n                                                  \"iqrfnet.sendPacket.form.address\"\n                                                ),\n                                                \"is-valid\":\n                                                  _vm.addressOverwrite &&\n                                                  touched\n                                                    ? valid\n                                                    : null,\n                                                \"invalid-feedback\": _vm.$t(\n                                                  errors[0]\n                                                ),\n                                                type: \"number\",\n                                                min: \"0\",\n                                                max: \"239\"\n                                              },\n                                              model: {\n                                                value: _vm.address,\n                                                callback: function($$v) {\n                                                  _vm.address = _vm._n($$v)\n                                                },\n                                                expression: \"address\"\n                                              }\n                                            })\n                                          ]\n                                        }\n                                      }\n                                    ],\n                                    null,\n                                    true\n                                  )\n                                })\n                              ],\n                              1\n                            ),\n                            _vm._v(\" \"),\n                            _c(\n                              \"CCol\",\n                              { attrs: { md: \"6\" } },\n                              [\n                                _c(\"CInputCheckbox\", {\n                                  attrs: {\n                                    checked: _vm.timeoutOverwrite,\n                                    label: _vm.$t(\n                                      \"iqrfnet.sendPacket.form.timeoutOverwrite\"\n                                    )\n                                  },\n                                  on: {\n                                    \"update:checked\": function($event) {\n                                      _vm.timeoutOverwrite = $event\n                                    }\n                                  }\n                                }),\n                                _vm._v(\" \"),\n                                _c(\"ValidationProvider\", {\n                                  attrs: {\n                                    rules: _vm.timeoutOverwrite\n                                      ? \"integer|min:0|required\"\n                                      : \"\",\n                                    \"custom-messages\": {\n                                      integer:\n                                        \"iqrfnet.sendPacket.form.messages.invalid.timeout\",\n                                      min:\n                                        \"iqrfnet.sendPacket.form.messages.invalid.timeout\",\n                                      required:\n                                        \"iqrfnet.sendPacket.form.messages.missing.timeout\"\n                                    }\n                                  },\n                                  scopedSlots: _vm._u(\n                                    [\n                                      {\n                                        key: \"default\",\n                                        fn: function(ref) {\n                                          var valid = ref.valid\n                                          var touched = ref.touched\n                                          var errors = ref.errors\n                                          return [\n                                            _c(\"CInput\", {\n                                              attrs: {\n                                                disabled: !_vm.timeoutOverwrite,\n                                                label: _vm.$t(\n                                                  \"iqrfnet.sendPacket.form.timeout\"\n                                                ),\n                                                \"is-valid\":\n                                                  _vm.timeoutOverwrite &&\n                                                  touched\n                                                    ? valid\n                                                    : null,\n                                                \"invalid-feedback\": _vm.$t(\n                                                  errors[0]\n                                                ),\n                                                type: \"number\"\n                                              },\n                                              model: {\n                                                value: _vm.timeout,\n                                                callback: function($$v) {\n                                                  _vm.timeout = _vm._n($$v)\n                                                },\n                                                expression: \"timeout\"\n                                              }\n                                            })\n                                          ]\n                                        }\n                                      }\n                                    ],\n                                    null,\n                                    true\n                                  )\n                                })\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              color: \"primary\",\n                              type: \"submit\",\n                              disabled: invalid\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.send\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\"DpaMacros\", {\n        on: {\n          \"set-packet\": function($event) {\n            return _vm.setPacket($event)\n          }\n        }\n      }),\n      _vm._v(\" \"),\n      _c(\n        \"CRow\",\n        [\n          _c(\n            \"CCol\",\n            { attrs: { md: \"6\" } },\n            [\n              _vm.request !== null\n                ? _c(\n                    \"CCard\",\n                    [\n                      _c(\n                        \"CCardHeader\",\n                        { staticClass: \"d-flex\" },\n                        [\n                          _c(\"span\", { staticClass: \"mr-auto\" }, [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"iqrfnet.sendPacket.request\")) +\n                                \"\\n\\t\\t\\t\\t\\t\"\n                            )\n                          ]),\n                          _vm._v(\" \"),\n                          _c(\n                            \"CButton\",\n                            {\n                              directives: [\n                                {\n                                  name: \"clipboard\",\n                                  rawName: \"v-clipboard\",\n                                  value: _vm.request,\n                                  expression: \"request\"\n                                },\n                                {\n                                  name: \"clipboard\",\n                                  rawName: \"v-clipboard:success\",\n                                  value: function() {\n                                    return _vm.$toast.success(\n                                      _vm\n                                        .$t(\n                                          \"iqrfnet.sendPacket.copy.messages.request\"\n                                        )\n                                        .toString()\n                                    )\n                                  },\n                                  expression:\n                                    '() => $toast.success($t(\"iqrfnet.sendPacket.copy.messages.request\").toString())',\n                                  arg: \"success\"\n                                }\n                              ],\n                              attrs: { color: \"primary\", size: \"sm\" }\n                            },\n                            [\n                              _vm._v(\n                                \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                  _vm._s(\n                                    _vm.$t(\"iqrfnet.sendPacket.copy.request\")\n                                  ) +\n                                  \"\\n\\t\\t\\t\\t\\t\"\n                              )\n                            ]\n                          )\n                        ],\n                        1\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"CCardBody\",\n                        [\n                          _c(\"prism-editor\", {\n                            attrs: {\n                              highlight: _vm.highlighter,\n                              readonly: true\n                            },\n                            model: {\n                              value: _vm.request,\n                              callback: function($$v) {\n                                _vm.request = $$v\n                              },\n                              expression: \"request\"\n                            }\n                          })\n                        ],\n                        1\n                      )\n                    ],\n                    1\n                  )\n                : _vm._e()\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CCol\",\n            { attrs: { md: \"6\" } },\n            [\n              _vm.response !== null\n                ? _c(\n                    \"CCard\",\n                    [\n                      _c(\n                        \"CCardHeader\",\n                        { staticClass: \"d-flex\" },\n                        [\n                          _c(\"span\", { staticClass: \"mr-auto\" }, [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"iqrfnet.sendPacket.response\")) +\n                                \"\\n\\t\\t\\t\\t\\t\"\n                            )\n                          ]),\n                          _vm._v(\" \"),\n                          _c(\n                            \"CButton\",\n                            {\n                              directives: [\n                                {\n                                  name: \"clipboard\",\n                                  rawName: \"v-clipboard\",\n                                  value: _vm.response,\n                                  expression: \"response\"\n                                },\n                                {\n                                  name: \"clipboard\",\n                                  rawName: \"v-clipboard:success\",\n                                  value: function() {\n                                    return _vm.$toast.success(\n                                      _vm\n                                        .$t(\n                                          \"iqrfnet.sendPacket.copy.messages.response\"\n                                        )\n                                        .toString()\n                                    )\n                                  },\n                                  expression:\n                                    '() => $toast.success($t(\"iqrfnet.sendPacket.copy.messages.response\").toString())',\n                                  arg: \"success\"\n                                }\n                              ],\n                              attrs: { color: \"primary\", size: \"sm\" }\n                            },\n                            [\n                              _vm._v(\n                                \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                  _vm._s(\n                                    _vm.$t(\"iqrfnet.sendPacket.copy.response\")\n                                  ) +\n                                  \"\\n\\t\\t\\t\\t\\t\"\n                              )\n                            ]\n                          )\n                        ],\n                        1\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"CCardBody\",\n                        [\n                          _c(\"prism-editor\", {\n                            attrs: {\n                              highlight: _vm.highlighter,\n                              readonly: true\n                            },\n                            model: {\n                              value: _vm.response,\n                              callback: function($$v) {\n                                _vm.response = $$v\n                              },\n                              expression: \"response\"\n                            }\n                          })\n                        ],\n                        1\n                      )\n                    ],\n                    1\n                  )\n                : _vm._e()\n            ],\n            1\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.macros\n    ? _c(\n        \"CCard\",\n        [\n          _c(\"CCardHeader\", [\n            _vm._v(\n              \"\\n\\t\\t\" + _vm._s(_vm.$t(\"iqrfnet.sendPacket.macros\")) + \"\\n\\t\"\n            )\n          ]),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\n                \"CButtonGroup\",\n                { staticClass: \"flex-wrap\" },\n                _vm._l(_vm.macros, function(group) {\n                  return _c(\n                    \"CDropdown\",\n                    {\n                      key: group.id,\n                      attrs: {\n                        \"toggler-text\": group.name,\n                        color: \"primary\",\n                        placement: \"top-start\"\n                      }\n                    },\n                    _vm._l(group.macros, function(packet) {\n                      return _c(\n                        \"CDropdownItem\",\n                        {\n                          key: packet.name,\n                          on: {\n                            click: function($event) {\n                              return _vm.$emit(\"set-packet\", packet.request)\n                            }\n                          }\n                        },\n                        [\n                          _vm._v(\n                            \"\\n\\t\\t\\t\\t\\t\" + _vm._s(packet.name) + \"\\n\\t\\t\\t\\t\"\n                          )\n                        ]\n                      )\n                    }),\n                    1\n                  )\n                }),\n                1\n              )\n            ],\n            1\n          )\n        ],\n        1\n      )\n    : _vm._e()\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\n/**\n * IQRF networks service\n */\nvar IqrfService = /** @class */ (function () {\n    function IqrfService() {\n    }\n    /**\n     * Retrieves IQRF interface ports\n     */\n    IqrfService.prototype.getInterfacePorts = function (interfaceType) {\n        return axios.get('iqrf/interfaces/', { headers: authorizationHeader() })\n            .then(function (response) {\n            return response.data[interfaceType];\n        });\n    };\n    /**\n     * Retrieves IQRF IDE Macros\n     */\n    IqrfService.prototype.getMacros = function () {\n        return axios.get('iqrf/macros/', { headers: authorizationHeader() });\n    };\n    return IqrfService;\n}());\nexport default new IqrfService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DpaMacros.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DpaMacros.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard v-if='macros'>\n\t\t<CCardHeader>\n\t\t\t{{ $t('iqrfnet.sendPacket.macros') }}\n\t\t</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<CButtonGroup class='flex-wrap'>\n\t\t\t\t<CDropdown\n\t\t\t\t\tv-for='group of macros'\n\t\t\t\t\t:key='group.id'\n\t\t\t\t\t:toggler-text='group.name'\n\t\t\t\t\tcolor='primary'\n\t\t\t\t\tplacement='top-start'\n\t\t\t\t>\n\t\t\t\t\t<CDropdownItem\n\t\t\t\t\t\tv-for='packet of group.macros'\n\t\t\t\t\t\t:key='packet.name'\n\t\t\t\t\t\t@click='$emit(\"set-packet\", packet.request)'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ packet.name }}\n\t\t\t\t\t</CDropdownItem>\n\t\t\t\t</CDropdown>\n\t\t\t</CButtonGroup>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButtonGroup, CCard, CCardBody, CCardHeader, CDropdown, CDropdownItem} from '@coreui/vue/src';\nimport IqrfService from '../../services/IqrfService';\n\nexport default {\n\tname: 'DpaMacros',\n\tcomponents: {\n\t\tCButtonGroup,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCDropdown,\n\t\tCDropdownItem,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tmacros: null,\n\t\t};\n\t},\n\tcreated() {\n\t\tIqrfService.getMacros()\n\t\t\t.then((response) => {\n\t\t\t\tthis.macros = response.data.filter((group) => {\n\t\t\t\t\tif (!group.enabled) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tgroup.macros = group.macros.filter((packet) => {\n\t\t\t\t\t\tif (packet.enabled) {\n\t\t\t\t\t\t\treturn packet;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\treturn group;\n\t\t\t\t});\n\t\t\t});\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./DpaMacros.vue?vue&type=template&id=676e4146&\"\nimport script from \"./DpaMacros.vue?vue&type=script&lang=js&\"\nexport * from \"./DpaMacros.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('676e4146')) {\n      api.createRecord('676e4146', component.options)\n    } else {\n      api.reload('676e4146', component.options)\n    }\n    module.hot.accept(\"./DpaMacros.vue?vue&type=template&id=676e4146&\", function () {\n      api.rerender('676e4146', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/DpaMacros.vue\"\nexport default component.exports","/**\n * Copyright 2017 MICRORISC s.r.o.\n * Copyright 2017-2019 IQRF Tech s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\n/**\n * DPA packet\n */\nvar Packet = /** @class */ (function () {\n    /**\n     * Constructor\n     * @param nadr NADR\n     * @param pnum PNUM\n     * @param pcmd PCMD\n     * @param hwpid HWPID\n     * @param pdata PDATA\n     */\n    function Packet(nadr, pnum, pcmd, hwpid, pdata) {\n        this.nadr = nadr;\n        this.pnum = pnum;\n        this.pcmd = pcmd;\n        this.hwpid = hwpid;\n        this.pdata = pdata;\n    }\n    /**\n     * Detect timeout from parsed DPA packet\n     * @returns DPA timeout\n     */\n    Packet.prototype.detectTimeout = function () {\n        var timeout = null;\n        if (this.pnum === 0 && this.pcmd === 4) {\n            timeout = 12000;\n        }\n        else if (this.pnum === 0 && this.pcmd === 7) {\n            timeout = 0;\n        }\n        else if (this.pnum === 13 && this.pcmd === 0) {\n            timeout = 6000;\n        }\n        return timeout;\n    };\n    /**\n     * Parses DPA packet\n     * @param {string} packet DPA packet to parse\n     * @returns {Packet} Parsed DPA packet\n     */\n    Packet.parse = function (packet) {\n        var packetArray = packet.split('.');\n        var nadrLo = packetArray.shift();\n        var nadrHi = packetArray.shift();\n        var nadr = parseInt(nadrHi + nadrLo, 16);\n        var pnum = parseInt(packetArray.shift(), 16);\n        var pcmd = parseInt(packetArray.shift(), 16);\n        var hwpidLo = packetArray.shift();\n        var hwpidHi = packetArray.shift();\n        var hwpid = parseInt(hwpidHi + hwpidLo, 16);\n        var pdata = packetArray.map(function (hex) { return parseInt(hex, 16); });\n        return new Packet(nadr, pnum, pcmd, hwpid, pdata);\n    };\n    /**\n     * Returns DPA packet string\n     * @returns {string} DPA packet as string\n     */\n    Packet.prototype.toString = function () {\n        return __spreadArrays([\n            this.nadr & 255, this.nadr >> 8, this.pnum, this.pcmd,\n            this.hwpid & 255, this.hwpid >> 8\n        ], this.pdata).map(function (int) { return int.toString(16).padStart(2, '0'); }).join('.');\n    };\n    return Packet;\n}());\n/**\n * Validate DPA packet\n * @param packet DPA packet to validate\n * @returns Is valid DPA packet?\n */\nfunction validatePacket(packet) {\n    var re = new RegExp('^([0-9a-fA-F]{1,2}\\\\.){4,62}[0-9a-fA-F]{1,2}(\\\\.|)$', 'i');\n    return packet.match(re) !== null;\n}\n/**\n * Updates NADR in DPA packet\n * @param request DPA request to modify\n * @param address New NADR\n * @returns Modified DPA request\n */\nfunction updateNadr(request, address) {\n    var packet = Packet.parse(request);\n    packet.nadr = address;\n    return packet.toString();\n}\nexport default { Packet: Packet, updateNadr: updateNadr, validatePacket: validatePacket };\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SendDpaPacket.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SendDpaPacket.vue?vue&type=script&lang=js&\"","<template>\n\t<div>\n\t\t<CCard body-wrapper>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='handleSubmit'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\trules='dpaPacket|required'\n\t\t\t\t\t\t:custom-messages='{required: \"iqrfnet.sendPacket.form.messages.missing.packet\"}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='packet'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.sendPacket.form.packet\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t@input='setTimeout'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CRow>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='addressOverwrite'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.sendPacket.form.addressOverwrite\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t:disabled='!addressOverwrite'\n\t\t\t\t\t\t\t\t:rules='addressOverwrite ? \"integer|between:0,239|required\" : \"\"'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.sendPacket.form.messages.invalid.address\",\n\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.sendPacket.form.messages.invalid.address\",\n\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.sendPacket.form.messages.missing.address\",\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='address'\n\t\t\t\t\t\t\t\t\t:disabled='!addressOverwrite'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.sendPacket.form.address\")'\n\t\t\t\t\t\t\t\t\t:is-valid='addressOverwrite && touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='timeoutOverwrite'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.sendPacket.form.timeoutOverwrite\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t:rules='timeoutOverwrite ? \"integer|min:0|required\" : \"\"'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.sendPacket.form.messages.invalid.timeout\",\n\t\t\t\t\t\t\t\t\tmin: \"iqrfnet.sendPacket.form.messages.invalid.timeout\",\n\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.sendPacket.form.messages.missing.timeout\",\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='timeout'\n\t\t\t\t\t\t\t\t\t:disabled='!timeoutOverwrite'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.sendPacket.form.timeout\")'\n\t\t\t\t\t\t\t\t\t:is-valid='timeoutOverwrite && touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t</CRow>\n\t\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.send') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCard>\n\t\t<DpaMacros @set-packet='setPacket($event)' />\n\t\t<CRow>\n\t\t\t<CCol md='6'>\n\t\t\t\t<CCard v-if='request !== null'>\n\t\t\t\t\t<CCardHeader class='d-flex'>\n\t\t\t\t\t\t<span class='mr-auto'>\n\t\t\t\t\t\t\t{{ $t('iqrfnet.sendPacket.request') }}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\tv-clipboard='request'\n\t\t\t\t\t\t\tv-clipboard:success='() => $toast.success($t(\"iqrfnet.sendPacket.copy.messages.request\").toString())'\n\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ $t('iqrfnet.sendPacket.copy.request') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</CCardHeader>\n\t\t\t\t\t<CCardBody>\n\t\t\t\t\t\t<prism-editor\n\t\t\t\t\t\t\tv-model='request'\n\t\t\t\t\t\t\t:highlight='highlighter'\n\t\t\t\t\t\t\t:readonly='true'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</CCardBody>\n\t\t\t\t</CCard>\n\t\t\t</CCol>\n\t\t\t<CCol md='6'>\n\t\t\t\t<CCard v-if='response !== null'>\n\t\t\t\t\t<CCardHeader class='d-flex'>\n\t\t\t\t\t\t<span class='mr-auto'>\n\t\t\t\t\t\t\t{{ $t('iqrfnet.sendPacket.response') }}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\tv-clipboard='response'\n\t\t\t\t\t\t\tv-clipboard:success='() => $toast.success($t(\"iqrfnet.sendPacket.copy.messages.response\").toString())'\n\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ $t('iqrfnet.sendPacket.copy.response') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</CCardHeader>\n\t\t\t\t\t<CCardBody>\n\t\t\t\t\t\t<prism-editor\n\t\t\t\t\t\t\tv-model='response'\n\t\t\t\t\t\t\t:highlight='highlighter'\n\t\t\t\t\t\t\t:readonly='true'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</CCardBody>\n\t\t\t\t</CCard>\n\t\t\t</CCol>\n\t\t</CRow>\n\t</div>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CCol, CForm, CInput, CInputCheckbox, CRow} from '@coreui/vue/src';\nimport DpaMacros from '../../components/IqrfNet/DpaMacros';\nimport {between, integer, min_value, required} from 'vee-validate/dist/rules';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport sendPacket from '../../iqrfNet/sendPacket';\n\nimport {PrismEditor} from 'vue-prism-editor';\nimport 'vue-prism-editor/dist/prismeditor.min.css';\nimport Prism from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-json';\nimport 'prismjs/themes/prism.css';\n\nexport default {\n\tname: 'SendDpaPacket',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCCol,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tCRow,\n\t\tDpaMacros,\n\t\tPrismEditor,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tpacket: null,\n\t\t\taddress: 0,\n\t\t\taddressOverwrite: false,\n\t\t\ttimeout: 1000,\n\t\t\ttimeoutOverwrite: false,\n\t\t\trequest: null,\n\t\t\tresponse: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('min', min_value);\n\t\textend('required', required);\n\t\textend('dpaPacket', (packet) => {\n\t\t\treturn sendPacket.validatePacket(packet) ? true : 'iqrfnet.sendPacket.form.messages.invalid.packet';\n\t\t});\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONSEND' &&\n\t\t\t\t\tmutation.payload.mType === 'iqrfRaw') {\n\t\t\t\tthis.request = JSON.stringify(mutation.payload, null, 4);\n\t\t\t\tthis.response = null;\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONMESSAGE' &&\n\t\t\t\t\tmutation.payload.mType === 'iqrfRaw') {\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\tthis.response = JSON.stringify(mutation.payload, null, 4);\n\t\t\t\tswitch (mutation.payload.data.status) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tthis.$toast.success(this.$t('iqrfnet.sendPacket.messages.success').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.sendPacket.messages.incorrect.pcmd').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.sendPacket.messages.incorrect.pnum').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.sendPacket.messages.incorrect.dataLength').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.sendPacket.messages.incorrect.data').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.sendPacket.messages.incorrect.hwpid').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.sendPacket.messages.incorrect.nadr').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.$toast.error(this.$t('iqrfnet.sendPacket.messages.failure').toString());\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\t/**\n\t\t * Handles Send DPA packet form submit event\n\t\t */\n\t\thandleSubmit() {\n\t\t\tif (this.packet === null || this.packet === '') {\n\t\t\t\tthis.$toast.error(this.$t('iqrfnet.sendPacket.form.messages.missing.packet').toString());\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tlet json = {\n\t\t\t\t'mType': 'iqrfRaw',\n\t\t\t\t'data': {\n\t\t\t\t\t'req': {\n\t\t\t\t\t\t'rData': this.packet,\n\t\t\t\t\t},\n\t\t\t\t\t'returnVerbose': true,\n\t\t\t\t},\n\t\t\t};\n\t\t\tif (this.addressOverwrite && this.address !== null) {\n\t\t\t\tjson.data.req.rData = sendPacket.updateNadr(this.packet, this.address);\n\t\t\t}\n\t\t\tif (this.timeoutOverwrite && this.timeout !== null) {\n\t\t\t\tjson.data.timeout = this.timeout;\n\t\t\t}\n\t\t\treturn this.$store.dispatch('sendRequest', json);\n\t\t},\n\t\t/**\n\t\t * JSON highlighter method\n\t\t */\n\t\thighlighter(code) {\n\t\t\treturn Prism.highlight(code, Prism.languages.json, 'json');\n\t\t},\n\t\t/**\n\t\t * Sets new DPA packet\n\t\t * @param {string} newPacket New DPA packet\n\t\t */\n\t\tsetPacket(newPacket) {\n\t\t\tthis.packet = newPacket;\n\t\t\tthis.setTimeout();\n\t\t},\n\t\t/**\n\t\t * Sets DPA timeout\n\t\t */\n\t\tsetTimeout() {\n\t\t\tlet packet = sendPacket.Packet.parse(this.packet);\n\t\t\tlet newTimeout = packet.detectTimeout();\n\t\t\tif (newTimeout === null) {\n\t\t\t\tthis.timeoutOverwrite = false;\n\t\t\t\tthis.timeout = 1000;\n\t\t\t} else {\n\t\t\t\tthis.timeoutOverwrite = true;\n\t\t\t\tthis.timeout = newTimeout;\n\t\t\t}\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'iqrfnet.sendPacket.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./SendDpaPacket.vue?vue&type=template&id=fea8cab8&\"\nimport script from \"./SendDpaPacket.vue?vue&type=script&lang=js&\"\nexport * from \"./SendDpaPacket.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('fea8cab8')) {\n      api.createRecord('fea8cab8', component.options)\n    } else {\n      api.reload('fea8cab8', component.options)\n    }\n    module.hot.accept(\"./SendDpaPacket.vue?vue&type=template&id=fea8cab8&\", function () {\n      api.rerender('fea8cab8', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/IqrfNet/SendDpaPacket.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CRow\",\n    [\n      _c(\n        \"CCol\",\n        { attrs: { md: \"6\" } },\n        [_c(\"BinaryOutputManager\"), _vm._v(\" \"), _c(\"SensorManager\")],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CCol\",\n        { attrs: { md: \"6\" } },\n        [_c(\"LightManager\"), _vm._v(\" \"), _c(\"DaliManager\")],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\"CCardHeader\", [\n        _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.binaryOutput.title\")))\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|between:1,239\",\n                            \"custom-messages\": {\n                              integer: \"forms.messages.integer\",\n                              required:\n                                \"iqrfnet.standard.form.messages.address\",\n                              between: \"iqrfnet.standard.form.messages.address\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"1\",\n                                        max: \"239\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.standard.form.address\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.address,\n                                        callback: function($$v) {\n                                          _vm.address = _vm._n($$v)\n                                        },\n                                        expression: \"address\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|between:0,31\",\n                            \"custom-messages\": {\n                              integer: \"forms.messages.integer\",\n                              required:\n                                \"iqrfnet.standard.binaryOutput.form.messages.index\",\n                              between:\n                                \"iqrfnet.standard.binaryOutput.form.messages.index\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        max: \"31\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.standard.binaryOutput.form.index\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.index,\n                                        callback: function($$v) {\n                                          _vm.index = _vm._n($$v)\n                                        },\n                                        expression: \"index\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _c(\"label\", { attrs: { for: \"formStateSwitch\" } }, [\n                              _vm._v(\n                                \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                  _vm._s(\n                                    _vm.$t(\n                                      \"iqrfnet.standard.binaryOutput.form.state\"\n                                    )\n                                  ) +\n                                  \"\\n\\t\\t\\t\\t\\t\"\n                              )\n                            ]),\n                            _c(\"br\"),\n                            _vm._v(\" \"),\n                            _c(\"CSwitch\", {\n                              attrs: {\n                                id: \"formStateSwitch\",\n                                checked: _vm.state,\n                                color: \"primary\",\n                                size: \"lg\",\n                                shape: \"pill\",\n                                \"label-on\": _vm.$t(\n                                  \"iqrfnet.standard.binaryOutput.form.enabled\"\n                                ),\n                                \"label-off\": _vm.$t(\n                                  \"iqrfnet.standard.binaryOutput.form.disabled\"\n                                )\n                              },\n                              on: {\n                                \"update:checked\": function($event) {\n                                  _vm.state = $event\n                                }\n                              }\n                            })\n                          ],\n                          1\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"primary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitEnumerate($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.enumerate\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitGetStates($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\n                                    \"iqrfnet.standard.binaryOutput.form.getStates\"\n                                  )\n                                ) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitSetState($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\n                                    \"iqrfnet.standard.binaryOutput.form.setState\"\n                                  )\n                                ) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _vm.responseType !== null\n        ? _c(\"CCardFooter\", [\n            _vm.responseType === \"enum\"\n              ? _c(\"table\", { staticClass: \"table\" }, [\n                  _c(\"thead\", [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"iqrfnet.standard.binaryOutput.enum\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"tbody\", [\n                    _c(\"tr\", [\n                      _c(\"th\", [\n                        _vm._v(\n                          _vm._s(\n                            _vm.$t(\"iqrfnet.standard.binaryOutput.outputs\")\n                          )\n                        )\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"td\", [_vm._v(_vm._s(_vm.numOutputs))])\n                    ])\n                  ])\n                ])\n              : _vm._e(),\n            _vm._v(\" \"),\n            _vm.responseType === \"set\"\n              ? _c(\"table\", { staticClass: \"table scroll-table\" }, [\n                  _c(\"thead\", [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"iqrfnet.standard.binaryOutput.prev\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"tbody\", [\n                    _c(\n                      \"tr\",\n                      [\n                        _c(\"th\", [\n                          _vm._v(\n                            _vm._s(\n                              _vm.$t(\"iqrfnet.standard.binaryOutput.index\")\n                            )\n                          )\n                        ]),\n                        _vm._v(\" \"),\n                        _vm._l(Array(32).keys(), function(col) {\n                          return _c(\"td\", { key: col }, [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\\t\" + _vm._s(col) + \"\\n\\t\\t\\t\\t\\t\"\n                            )\n                          ])\n                        })\n                      ],\n                      2\n                    ),\n                    _vm._v(\" \"),\n                    _c(\n                      \"tr\",\n                      [\n                        _c(\"th\", [\n                          _vm._v(\n                            _vm._s(\n                              _vm.$t(\"iqrfnet.standard.binaryOutput.state\")\n                            )\n                          )\n                        ]),\n                        _vm._v(\" \"),\n                        _vm._l(Array(32).keys(), function(ind) {\n                          return _c(\n                            \"td\",\n                            { key: ind },\n                            [\n                              _vm.states[ind] === true\n                                ? _c(\"CIcon\", {\n                                    staticClass: \"text-success\",\n                                    attrs: { content: _vm.$options.icons.on }\n                                  })\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              _vm.states[ind] === false\n                                ? _c(\"CIcon\", {\n                                    staticClass: \"text-danger\",\n                                    attrs: { content: _vm.$options.icons.off }\n                                  })\n                                : _vm._e()\n                            ],\n                            1\n                          )\n                        })\n                      ],\n                      2\n                    )\n                  ])\n                ])\n              : _vm._e()\n          ])\n        : _vm._e()\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import store from '../../store';\nvar StandardBinaryOutput = /** @class */ (function () {\n    /**\n     * Constructor\n     * @param index Index of the binary output\n     * @param state State of the binary output\n     */\n    function StandardBinaryOutput(index, state) {\n        this.index = index;\n        this.state = state;\n    }\n    return StandardBinaryOutput;\n}());\nexport { StandardBinaryOutput };\n/**\n * IQRF Standard binary output service\n */\nvar StandardBinaryOutputService = /** @class */ (function () {\n    function StandardBinaryOutputService() {\n    }\n    /**\n     * Performs Binary Output enumeration on device specified by address.\n     * @param address Node address\n     */\n    StandardBinaryOutputService.prototype.enumerate = function (address) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfBinaryoutput_Enumerate',\n            'data': {\n                'req': {\n                    'nAdr': address,\n                    'param': {},\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Retrieves states of binary outputs.\n     * @param address Node address\n     */\n    StandardBinaryOutputService.prototype.getOutputs = function (address) {\n        return this.setOutputs(address, []);\n    };\n    /**\n     * Sets binary outputs to a specified state.\n     * If no output settings are specified, only previous states of binary outputs are retrieved.\n     * @param address Node address\n     * @param outputs New output setting\n     */\n    StandardBinaryOutputService.prototype.setOutputs = function (address, outputs) {\n        if (outputs === void 0) { outputs = []; }\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfBinaryoutput_SetOutput',\n            'data': {\n                'req': {\n                    'nAdr': address,\n                    'param': {\n                        'binOuts': outputs,\n                    },\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    return StandardBinaryOutputService;\n}());\nexport default new StandardBinaryOutputService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BinaryOutputManager.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BinaryOutputManager.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard>\n\t\t<CCardHeader>{{ $t('iqrfnet.standard.binaryOutput.title') }}</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:1,239'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.standard.form.messages.address\",\n\t\t\t\t\t\t\tbetween: \"iqrfnet.standard.form.messages.address\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='address'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.standard.form.address\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:0,31'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.standard.binaryOutput.form.messages.index\",\n\t\t\t\t\t\t\tbetween: \"iqrfnet.standard.binaryOutput.form.messages.index\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='index'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='31'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.standard.binaryOutput.form.index\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<div class='form-group'>\n\t\t\t\t\t\t<label for='formStateSwitch'>\n\t\t\t\t\t\t\t{{ $t('iqrfnet.standard.binaryOutput.form.state') }}\n\t\t\t\t\t\t</label><br>\n\t\t\t\t\t\t<CSwitch\n\t\t\t\t\t\t\tid='formStateSwitch'\n\t\t\t\t\t\t\t:checked.sync='state'\n\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\tsize='lg'\n\t\t\t\t\t\t\tshape='pill'\n\t\t\t\t\t\t\t:label-on='$t(\"iqrfnet.standard.binaryOutput.form.enabled\")'\n\t\t\t\t\t\t\t:label-off='$t(\"iqrfnet.standard.binaryOutput.form.disabled\")'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t:disabled='invalid'\n\t\t\t\t\t\t@click.prevent='submitEnumerate'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.enumerate') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='secondary'\n\t\t\t\t\t\t:disabled='invalid'\n\t\t\t\t\t\t@click.prevent='submitGetStates'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.binaryOutput.form.getStates') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='secondary'\n\t\t\t\t\t\t:disabled='invalid'\n\t\t\t\t\t\t@click.prevent='submitSetState'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.binaryOutput.form.setState') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t\t<CCardFooter v-if='responseType !== null'>\n\t\t\t<table v-if='responseType === \"enum\"' class='table'>\n\t\t\t\t<thead>\n\t\t\t\t\t{{ $t('iqrfnet.standard.binaryOutput.enum') }}\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.binaryOutput.outputs') }}</th>\n\t\t\t\t\t\t<td>{{ numOutputs }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<table v-if='responseType === \"set\"' class='table scroll-table'>\n\t\t\t\t<thead>\n\t\t\t\t\t{{ $t('iqrfnet.standard.binaryOutput.prev') }}\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.binaryOutput.index') }}</th>\n\t\t\t\t\t\t<td v-for='col of Array(32).keys()' :key='col'>\n\t\t\t\t\t\t\t{{ col }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.binaryOutput.state') }}</th>\n\t\t\t\t\t\t<td v-for='ind of Array(32).keys()' :key='ind'>\n\t\t\t\t\t\t\t<CIcon\n\t\t\t\t\t\t\t\tv-if='states[ind] === true'\n\t\t\t\t\t\t\t\tclass='text-success'\n\t\t\t\t\t\t\t\t:content='$options.icons.on'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<CIcon\n\t\t\t\t\t\t\t\tv-if='states[ind] === false'\n\t\t\t\t\t\t\t\tclass='text-danger'\n\t\t\t\t\t\t\t\t:content='$options.icons.off'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</CCardFooter>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CForm, CIcon, CInput, CSwitch} from '@coreui/vue/src';\nimport {cilCheckAlt, cilX} from '@coreui/icons';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {timeout} from '../../helpers/timeout';\nimport {between, integer, required} from 'vee-validate/dist/rules';\nimport StandardBinaryOutputService, {StandardBinaryOutput} from '../../services/DaemonApi/StandardBinaryOutputService';\n\nexport default {\n\tname: 'BinaryOutputManager',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCIcon,\n\t\tCInput,\n\t\tCSwitch,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\taddress: 1,\n\t\t\tallowedMTypes: [\n\t\t\t\t'iqrfBinaryoutput_Enumerate',\n\t\t\t\t'iqrfBinaryoutput_SetOutput'\n\t\t\t],\n\t\t\tindex: 0,\n\t\t\tnumOutputs: 0,\n\t\t\tresponseType: null,\n\t\t\tstate: false,\n\t\t\tstates: null,\n\t\t\ttimeout: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\textend('between', between);\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONSEND') {\n\t\t\t\tif (!this.allowedMTypes.includes(mutation.payload.mType)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.responseType = null;\n\t\t\t\tthis.timeout = timeout('iqrfnet.networkManager.messages.submit.timeout', 30000);\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONMESSAGE') {\n\t\t\t\tif (!this.allowedMTypes.includes(mutation.payload.mType)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\tswitch(mutation.payload.data.status) {\n\t\t\t\t\tcase -1:\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('iqrfnet.standard.binaryOutput.messages.timeout')\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('iqrfnet.standard.binaryOutput.messages.success')\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (mutation.payload.mType === 'iqrfBinaryoutput_Enumerate') {\n\t\t\t\t\t\t\tthis.numOutputs = mutation.payload.data.rsp.result.binOuts;\n\t\t\t\t\t\t\tthis.responseType = 'enum';\n\t\t\t\t\t\t} else if (mutation.payload.mType === 'iqrfBinaryoutput_SetOutput') {\n\t\t\t\t\t\t\tthis.parseSetOutput(mutation.payload.data.rsp.result.prevVals);\n\t\t\t\t\t\t\tthis.responseType = 'set';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('iqrfnet.standard.binaryOutput.messages.fail')\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('iqrfnet.standard.binaryOutput.messages.pnum')\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\t\t});\n\t\tthis.generateStates();\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\tgenerateStates() {\n\t\t\tthis.states = new Array(60).fill(false);\n\t\t},\n\t\tparseSetOutput(states) {\n\t\t\tfor(let i = 0; i < states.length; ++i) {\n\t\t\t\tthis.states[i] = states[i];\n\t\t\t}\n\t\t},\n\t\tsubmitEnumerate() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardBinaryOutputService.enumerate(this.address);\n\t\t},\n\t\tsubmitGetStates() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardBinaryOutputService.getOutputs(this.address);\n\t\t},\n\t\tsubmitSetState() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tconst output = new StandardBinaryOutput(this.index, this.state);\n\t\t\tStandardBinaryOutputService.setOutputs(this.address, [output]);\n\t\t},\n\t},\n\ticons: {\n\t\ton: cilCheckAlt,\n\t\toff: cilX,\n\t},\n};\n</script>\n\n<style scoped>\n.scroll-table {\n    display: block;\n    overflow-x: auto;\n    white-space: nowrap;\n}\n</style>\n","import { render, staticRenderFns } from \"./BinaryOutputManager.vue?vue&type=template&id=1e7284a8&scoped=true&\"\nimport script from \"./BinaryOutputManager.vue?vue&type=script&lang=js&\"\nexport * from \"./BinaryOutputManager.vue?vue&type=script&lang=js&\"\nimport style0 from \"./BinaryOutputManager.vue?vue&type=style&index=0&id=1e7284a8&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"1e7284a8\",\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('1e7284a8')) {\n      api.createRecord('1e7284a8', component.options)\n    } else {\n      api.reload('1e7284a8', component.options)\n    }\n    module.hot.accept(\"./BinaryOutputManager.vue?vue&type=template&id=1e7284a8&scoped=true&\", function () {\n      api.rerender('1e7284a8', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/BinaryOutputManager.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\"CCardHeader\", [\n        _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.dali.title\")))\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|between:1,239\",\n                            \"custom-messages\": {\n                              between: \"iqrfnet.standard.form.messages.address\",\n                              integer: \"forms.messages.integer\",\n                              required: \"iqrfnet.standard.form.messages.address\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"1\",\n                                        max: \"239\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.standard.form.address\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.address,\n                                        callback: function($$v) {\n                                          _vm.address = _vm._n($$v)\n                                        },\n                                        expression: \"address\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _vm._l(_vm.commands.length, function(i) {\n                          return _c(\n                            \"div\",\n                            { key: i, staticClass: \"form-group\" },\n                            [\n                              _c(\"ValidationProvider\", {\n                                attrs: {\n                                  rules: \"integer|required|between:0,65535\",\n                                  \"custom-messages\": {\n                                    between:\n                                      \"iqrfnet.standard.dali.form.messages.command\",\n                                    integer: \"forms.messages.integer\",\n                                    required:\n                                      \"iqrfnet.standard.dali.form.messages.command\"\n                                  }\n                                },\n                                scopedSlots: _vm._u(\n                                  [\n                                    {\n                                      key: \"default\",\n                                      fn: function(ref) {\n                                        var errors = ref.errors\n                                        var touched = ref.touched\n                                        var valid = ref.valid\n                                        return [\n                                          _c(\"CInput\", {\n                                            attrs: {\n                                              type: \"number\",\n                                              min: \"0\",\n                                              max: \"65535\",\n                                              label: _vm.$t(\n                                                \"iqrfnet.standard.dali.form.command\"\n                                              ),\n                                              \"is-valid\": touched\n                                                ? valid\n                                                : null,\n                                              \"invalid-feedback\": _vm.$t(\n                                                errors[0]\n                                              )\n                                            },\n                                            model: {\n                                              value: _vm.commands[i - 1],\n                                              callback: function($$v) {\n                                                _vm.$set(\n                                                  _vm.commands,\n                                                  i - 1,\n                                                  _vm._n($$v)\n                                                )\n                                              },\n                                              expression: \"commands[i-1]\"\n                                            }\n                                          })\n                                        ]\n                                      }\n                                    }\n                                  ],\n                                  null,\n                                  true\n                                )\n                              }),\n                              _vm._v(\" \"),\n                              _vm.commands.length > 1\n                                ? _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: { color: \"danger\" },\n                                      on: {\n                                        click: function($event) {\n                                          $event.preventDefault()\n                                          return _vm.removeDaliCommand(i - 1)\n                                        }\n                                      }\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"iqrfnet.standard.dali.form.removeCommand\"\n                                            )\n                                          ) +\n                                          \"\\n\\t\\t\\t\\t\\t\"\n                                      )\n                                    ]\n                                  )\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              i === _vm.commands.length\n                                ? _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: {\n                                        color: \"success\",\n                                        disabled: invalid\n                                      },\n                                      on: {\n                                        click: function($event) {\n                                          $event.preventDefault()\n                                          return _vm.addDaliCommand($event)\n                                        }\n                                      }\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"iqrfnet.standard.dali.form.addCommand\"\n                                            )\n                                          ) +\n                                          \"\\n\\t\\t\\t\\t\\t\"\n                                      )\n                                    ]\n                                  )\n                                : _vm._e()\n                            ],\n                            1\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"primary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.sendDali($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\n                                    \"iqrfnet.standard.dali.form.sendCommand\"\n                                  )\n                                ) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      2\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _vm.responseReceived\n        ? _c(\"CCardFooter\", [\n            _c(\"table\", { staticClass: \"table table-striped\" }, [\n              _c(\"thead\", [\n                _vm._v(\n                  \"\\n\\t\\t\\t\\t\" +\n                    _vm._s(_vm.$t(\"iqrfnet.standard.dali.answers\")) +\n                    \"\\n\\t\\t\\t\"\n                )\n              ]),\n              _vm._v(\" \"),\n              _c(\n                \"tbody\",\n                { staticClass: \"text-center\" },\n                [\n                  _c(\"tr\", [\n                    _c(\"th\", [\n                      _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.dali.status\")))\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"th\", [\n                      _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.dali.value\")))\n                    ])\n                  ]),\n                  _vm._v(\" \"),\n                  _vm._l(_vm.answers, function(answer, i) {\n                    return _c(\"tr\", { key: i }, [\n                      _c(\"td\", [_vm._v(_vm._s(answer.status))]),\n                      _vm._v(\" \"),\n                      _c(\"td\", [_vm._v(_vm._s(answer.value))])\n                    ])\n                  })\n                ],\n                2\n              )\n            ])\n          ])\n        : _vm._e()\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import store from '../../store';\n/**\n * IQRF Standard DALI service\n */\nvar StandardDaliService = /** @class */ (function () {\n    function StandardDaliService() {\n    }\n    /**\n     * Sends DALI commands to device specified by address.\n     * @param address Node address\n     * @param commands Array of DALI commands\n     */\n    StandardDaliService.prototype.send = function (address, commands) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfDali_SendCommands',\n            'data': {\n                'req': {\n                    'nAdr': address,\n                    'param': {\n                        'commands': commands,\n                    },\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    return StandardDaliService;\n}());\nexport default new StandardDaliService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DaliManager.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DaliManager.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard>\n\t\t<CCardHeader>{{ $t('iqrfnet.standard.dali.title') }}</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:1,239'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tbetween: \"iqrfnet.standard.form.messages.address\",\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.standard.form.messages.address\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='address'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.standard.form.address\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<div v-for='i of commands.length' :key='i' class='form-group'>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='integer|required|between:0,65535'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tbetween: \"iqrfnet.standard.dali.form.messages.command\",\n\t\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\t\trequired: \"iqrfnet.standard.dali.form.messages.command\"\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model.number='commands[i-1]'\n\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\tmax='65535'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.standard.dali.form.command\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\tv-if='commands.length > 1'\n\t\t\t\t\t\t\tcolor='danger'\n\t\t\t\t\t\t\t@click.prevent='removeDaliCommand(i-1)'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ $t('iqrfnet.standard.dali.form.removeCommand') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\tv-if='i === commands.length' \n\t\t\t\t\t\t\tcolor='success' \n\t\t\t\t\t\t\t:disabled='invalid' \n\t\t\t\t\t\t\t@click.prevent='addDaliCommand'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ $t('iqrfnet.standard.dali.form.addCommand') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</div>\n\t\t\t\t\t<CButton color='primary' :disabled='invalid' @click.prevent='sendDali'>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.dali.form.sendCommand') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t\t<CCardFooter v-if='responseReceived'>\n\t\t\t<table class='table table-striped'>\n\t\t\t\t<thead>\n\t\t\t\t\t{{ $t('iqrfnet.standard.dali.answers') }}\n\t\t\t\t</thead>\n\t\t\t\t<tbody class='text-center'>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.dali.status') }}</th>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.dali.value') }}</th>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr v-for='(answer, i) of answers' :key='i'>\n\t\t\t\t\t\t<td>{{ answer.status }}</td>\n\t\t\t\t\t\t<td>{{ answer.value }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</CCardFooter>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardFooter, CCardHeader, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {timeout} from '../../helpers/timeout';\nimport {between, integer, required} from 'vee-validate/dist/rules';\nimport StandardDaliService from '../../services/DaemonApi/StandardDaliService';\n\nexport default {\n\tname: 'DaliManager',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardFooter,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\taddress: 1,\n\t\t\tanswers: null,\n\t\t\tcommands: [null],\n\t\t\tresponseReceived: false,\n\t\t\ttimeout: null\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONSEND') {\n\t\t\t\tif (mutation.payload.mType === 'iqrfDali_SendCommands') {\n\t\t\t\t\tthis.timeout = timeout('iqrfnet.networkManager.messages.submit.timeout', 30000);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONMESSAGE') {\n\t\t\t\tif (mutation.payload.mType === 'iqrfDali_SendCommands') {\n\t\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tswitch(mutation.payload.data.status) {\n\t\t\t\t\t\tcase -1:\n\t\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\t\tthis.$t('iqrfnet.standard.dali.messages.timeout').toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\t\tthis.$t('iqrfnet.standard.dali.messages.success').toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.answers = mutation.payload.data.rsp.result.answers;\n\t\t\t\t\t\t\tthis.responseReceived = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\t\tthis.$t('iqrfnet.standard.dali.messages.pnum').toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\t\tthis.$t('iqrfnet.standard.dali.messages.failure').toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\taddDaliCommand() {\n\t\t\tthis.commands.push(null);\n\t\t},\n\t\tremoveDaliCommand(index) {\n\t\t\tthis.commands.splice(index, 1);\n\t\t},\n\t\tsendDali() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardDaliService.send(this.address, this.commands);\n\t\t},\n\t}\n};\n</script>\n","import { render, staticRenderFns } from \"./DaliManager.vue?vue&type=template&id=11836d54&\"\nimport script from \"./DaliManager.vue?vue&type=script&lang=js&\"\nexport * from \"./DaliManager.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('11836d54')) {\n      api.createRecord('11836d54', component.options)\n    } else {\n      api.reload('11836d54', component.options)\n    }\n    module.hot.accept(\"./DaliManager.vue?vue&type=template&id=11836d54&\", function () {\n      api.rerender('11836d54', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/DaliManager.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\"CCardHeader\", [\n        _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.light.title\")))\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required|integer|between:1,239\",\n                            \"custom-messages\": {\n                              between: \"iqrfnet.standard.form.messages.address\",\n                              integer: \"forms.messages.integer\",\n                              required: \"iqrfnet.standard.form.messages.address\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"1\",\n                                        max: \"239\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.standard.form.address\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.address,\n                                        callback: function($$v) {\n                                          _vm.address = _vm._n($$v)\n                                        },\n                                        expression: \"address\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required|integer|between:0,31\",\n                            \"custom-messages\": {\n                              between:\n                                \"iqrfnet.standard.light.form.messages.index\",\n                              integer: \"forms.messages.integer\",\n                              required:\n                                \"iqrfnet.standard.light.form.messages.index\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        max: \"31\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.standard.light.form.index\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.index,\n                                        callback: function($$v) {\n                                          _vm.index = _vm._n($$v)\n                                        },\n                                        expression: \"index\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required|integer|between:0,100\",\n                            \"custom-messages\": {\n                              between:\n                                \"iqrfnet.standard.light.form.messages.power\",\n                              integer: \"forms.messages.integer\",\n                              required:\n                                \"iqrfnet.standard.light.form.messages.power\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        max: \"100\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.standard.light.form.power\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.power,\n                                        callback: function($$v) {\n                                          _vm.power = _vm._n($$v)\n                                        },\n                                        expression: \"power\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"primary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitEnumerate($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.enumerate\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitGetPower($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\"iqrfnet.standard.light.form.getPower\")\n                                ) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitSetPower($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\"iqrfnet.standard.light.form.setPower\")\n                                ) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitIncrementPower($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\n                                    \"iqrfnet.standard.light.form.increment\"\n                                  )\n                                ) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitDecrementPower($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\n                                    \"iqrfnet.standard.light.form.decrement\"\n                                  )\n                                ) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _vm.responseType !== null\n        ? _c(\"CCardFooter\", [\n            _c(\"table\", { staticClass: \"table\" }, [\n              _c(\"thead\", [\n                _vm.responseType === \"enum\"\n                  ? _c(\"th\", { attrs: { colspan: \"2\" } }, [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\\t\" +\n                          _vm._s(_vm.$t(\"iqrfnet.standard.light.enum\")) +\n                          \"\\n\\t\\t\\t\\t\"\n                      )\n                    ])\n                  : _c(\"th\", { attrs: { colspan: \"2\" } }, [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\\t\" +\n                          _vm._s(_vm.$t(\"iqrfnet.standard.light.powerInfo\")) +\n                          \"\\n\\t\\t\\t\\t\"\n                      )\n                    ])\n              ]),\n              _vm._v(\" \"),\n              _vm.responseType === \"enum\"\n                ? _c(\"tbody\", [\n                    _c(\"tr\", [\n                      _c(\"th\", [\n                        _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.light.lights\")))\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"td\", [_vm._v(_vm._s(_vm.numLights))])\n                    ])\n                  ])\n                : _c(\"tbody\", [\n                    _c(\"tr\", [\n                      _c(\"th\", [\n                        _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.light.index\")))\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"td\", [_vm._v(_vm._s(_vm.index))])\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"tr\", [\n                      _c(\"th\", [\n                        _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.light.power\")))\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"td\", [_vm._v(_vm._s(_vm.prevPower))])\n                    ])\n                  ])\n            ])\n          ])\n        : _vm._e()\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import store from '../../store';\nvar StandardLight = /** @class */ (function () {\n    /**\n     * Constructor\n     * @param index Index of the light\n     * @param power Power level of the light from range <0;100>\n     */\n    function StandardLight(index, power) {\n        this.index = index;\n        this.power = power;\n    }\n    return StandardLight;\n}());\nexport { StandardLight };\n/**\n * IQRF Standard light service\n */\nvar StandardLightService = /** @class */ (function () {\n    function StandardLightService() {\n    }\n    /**\n     * Performs Light enumeration on device specified by address.\n     * @param address Node address\n     */\n    StandardLightService.prototype.enumerate = function (address) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfLight_Enumerate',\n            'data': {\n                'req': {\n                    'nAdr': address,\n                    'param': {},\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Decrements power of light at a device specified by address.\n     * @param address Node address\n     * @param lights Object containing light settings\n     */\n    StandardLightService.prototype.decrementPower = function (address, lights) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfLight_DecrementPower',\n            'data': {\n                'req': {\n                    'nAdr': address,\n                    'param': {\n                        'lights': lights,\n                    },\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Increments power of light at a device specified by address.\n     * @param address Node address\n     * @param lights Object containing light settings\n     */\n    StandardLightService.prototype.incrementPower = function (address, lights) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfLight_IncrementPower',\n            'data': {\n                'req': {\n                    'nAdr': address,\n                    'param': {\n                        'lights': lights,\n                    },\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Retrieves current power of a light specified by index.\n     * @param address Node address\n     * @param light Light index\n     */\n    StandardLightService.prototype.getPower = function (address, light) {\n        return this.setPower(address, [new StandardLight(light, 127)]);\n    };\n    /**\n     * Sets power of lights at a device specified by address.\n     * @param address Node address\n     * @param lights Object containing light settings\n     */\n    StandardLightService.prototype.setPower = function (address, lights) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfLight_SetPower',\n            'data': {\n                'req': {\n                    'nAdr': address,\n                    'param': {\n                        'lights': lights,\n                    },\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    return StandardLightService;\n}());\nexport default new StandardLightService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LightManager.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LightManager.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard>\n\t\t<CCardHeader>{{ $t('iqrfnet.standard.light.title') }}</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required|integer|between:1,239'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tbetween: \"iqrfnet.standard.form.messages.address\",\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.standard.form.messages.address\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='address'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.standard.form.address\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required|integer|between:0,31'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tbetween: \"iqrfnet.standard.light.form.messages.index\",\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.standard.light.form.messages.index\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='index'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='31'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.standard.light.form.index\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required|integer|between:0,100'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tbetween: \"iqrfnet.standard.light.form.messages.power\",\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.standard.light.form.messages.power\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='power'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='100'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.standard.light.form.power\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t:disabled='invalid'\n\t\t\t\t\t\t@click.prevent='submitEnumerate'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.enumerate') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='secondary'\n\t\t\t\t\t\t:disabled='invalid'\n\t\t\t\t\t\t@click.prevent='submitGetPower'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.light.form.getPower') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='secondary'\n\t\t\t\t\t\t:disabled='invalid'\n\t\t\t\t\t\t@click.prevent='submitSetPower'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.light.form.setPower') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='secondary'\n\t\t\t\t\t\t:disabled='invalid'\n\t\t\t\t\t\t@click.prevent='submitIncrementPower'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.light.form.increment') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='secondary'\n\t\t\t\t\t\t:disabled='invalid'\n\t\t\t\t\t\t@click.prevent='submitDecrementPower'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.light.form.decrement') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t\t<CCardFooter v-if='responseType !== null'>\n\t\t\t<table class='table'>\n\t\t\t\t<thead>\n\t\t\t\t\t<th v-if='responseType === \"enum\"' colspan='2'>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.light.enum') }}\n\t\t\t\t\t</th>\n\t\t\t\t\t<th v-else colspan='2'>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.light.powerInfo') }}\n\t\t\t\t\t</th>\n\t\t\t\t</thead>\n\t\t\t\t<tbody v-if='responseType === \"enum\"'>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.light.lights') }}</th>\n\t\t\t\t\t\t<td>{{ numLights }}</td>\n\t\t\t\t\t</tr>\t\n\t\t\t\t</tbody>\n\t\t\t\t<tbody v-else>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.light.index') }}</th>\n\t\t\t\t\t\t<td>{{ index }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.light.power') }}</th>\n\t\t\t\t\t\t<td>{{ prevPower }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</CCardFooter>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardFooter, CCardHeader, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {between, integer, required} from 'vee-validate/dist/rules';\nimport {timeout} from '../../helpers/timeout';\nimport StandardLightService, {StandardLight} from '../../services/DaemonApi/StandardLightService';\n\nexport default {\n\tname: 'LightManager',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardFooter,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\taddress: 1,\n\t\t\tallowedMTypes: [\n\t\t\t\t'iqrfLight_Enumerate',\n\t\t\t\t'iqrfLight_SetPower',\n\t\t\t\t'iqrfLight_IncrementPower',\n\t\t\t\t'iqrfLight_DecrementPower'\n\t\t\t],\n\t\t\tindex: 0,\n\t\t\tlights: null,\n\t\t\tnumLights: 0,\n\t\t\tpower: 0,\n\t\t\tprevPower: 0,\n\t\t\tresponseType: null,\n\t\t\ttimeout: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONSEND') {\n\t\t\t\tif (!this.allowedMTypes.includes(mutation.payload.mType)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.responseType = null;\n\t\t\t\tthis.timeout = timeout('iqrfnet.networkManager.messages.submit.timeout', 30000);\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONMESSAGE') {\n\t\t\t\tif (!this.allowedMTypes.includes(mutation.payload.mType)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\tswitch(mutation.payload.data.status) {\n\t\t\t\t\tcase -1:\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('iqrfnet.standard.light.messages.timeout').toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('iqrfnet.standard.light.messages.success').toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (mutation.payload.mType === 'iqrfLight_Enumerate') {\n\t\t\t\t\t\t\tthis.numLights = mutation.payload.data.rsp.result.lights;\n\t\t\t\t\t\t\tthis.responseType = 'enum';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.prevPower = mutation.payload.data.rsp.result.prevVals[0];\n\t\t\t\t\t\t\tthis.responseType = 'power';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('iqrfnet.standard.light.messages.pnum').toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('iqrfnet.standard.light.messages.failure').toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\tsubmitEnumerate() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardLightService.enumerate(this.address);\n\t\t},\n\t\tsubmitGetPower() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardLightService.getPower(this.address, this.index);\n\t\t},\n\t\tsubmitSetPower() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardLightService.setPower(this.address, [new StandardLight(this.index, this.power)]);\n\t\t},\n\t\tsubmitIncrementPower() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardLightService.incrementPower(this.address, [new StandardLight(this.index, this.power)]);\n\t\t},\n\t\tsubmitDecrementPower() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardLightService.decrementPower(this.address, [new StandardLight(this.index, this.power)]);\n\t\t},\n\t}\n};\n</script>\n","import { render, staticRenderFns } from \"./LightManager.vue?vue&type=template&id=34619946&\"\nimport script from \"./LightManager.vue?vue&type=script&lang=js&\"\nexport * from \"./LightManager.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('34619946')) {\n      api.createRecord('34619946', component.options)\n    } else {\n      api.reload('34619946', component.options)\n    }\n    module.hot.accept(\"./LightManager.vue?vue&type=template&id=34619946&\", function () {\n      api.rerender('34619946', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/LightManager.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\"CCardHeader\", [\n        _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.sensor.title\")))\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|between:1,239\",\n                            \"custom-messages\": {\n                              integer: \"forms.messages.integer\",\n                              required:\n                                \"iqrfnet.standard.form.messages.address\",\n                              between: \"iqrfnet.standard.form.messages.address\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"1\",\n                                        max: \"239\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.standard.form.address\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.address,\n                                        callback: function($$v) {\n                                          _vm.address = _vm._n($$v)\n                                        },\n                                        expression: \"address\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"primary\", disabled: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitEnumerate($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.enumerate\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: { color: \"secondary\", disabeld: invalid },\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.submitReadAll($event)\n                              }\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.$t(\"iqrfnet.standard.sensor.readAll\")\n                                ) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _vm.responseType != null\n        ? _c(\"CCardFooter\", [\n            _c(\"table\", { staticClass: \"table\" }, [\n              _c(\"thead\", [\n                _vm._v(\n                  \"\\n\\t\\t\\t\\t\" +\n                    _vm._s(_vm.$t(\"iqrfnet.standard.sensor.sensors\")) +\n                    \"\\n\\t\\t\\t\"\n                )\n              ]),\n              _vm._v(\" \"),\n              _c(\"tbody\", [\n                _c(\n                  \"tr\",\n                  [\n                    _c(\"th\", [\n                      _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.sensor.type\")))\n                    ]),\n                    _vm._v(\" \"),\n                    _vm._l(_vm.sensors.length, function(i) {\n                      return _c(\"td\", { key: i }, [\n                        _vm._v(\n                          \"\\n\\t\\t\\t\\t\\t\\t\" +\n                            _vm._s(_vm.sensors[i - 1].type) +\n                            \"\\n\\t\\t\\t\\t\\t\"\n                        )\n                      ])\n                    })\n                  ],\n                  2\n                ),\n                _vm._v(\" \"),\n                _vm.responseType === \"enum\"\n                  ? _c(\n                      \"tr\",\n                      [\n                        _c(\"th\", [\n                          _vm._v(_vm._s(_vm.$t(\"iqrfnet.standard.sensor.unit\")))\n                        ]),\n                        _vm._v(\" \"),\n                        _vm._l(_vm.sensors.length, function(j) {\n                          return _c(\"td\", { key: j }, [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.sensors[j - 1].unit) +\n                                \"\\n\\t\\t\\t\\t\\t\"\n                            )\n                          ])\n                        })\n                      ],\n                      2\n                    )\n                  : _vm.responseType === \"read\"\n                  ? _c(\n                      \"tr\",\n                      [\n                        _c(\"th\", [\n                          _vm._v(\n                            _vm._s(_vm.$t(\"iqrfnet.standard.sensor.value\"))\n                          )\n                        ]),\n                        _vm._v(\" \"),\n                        _vm._l(_vm.sensors.length, function(k) {\n                          return _c(\"td\", { key: k }, [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                _vm._s(\n                                  _vm.sensors[k - 1].value +\n                                    \" \" +\n                                    _vm.sensors[k - 1].unit\n                                ) +\n                                \"\\n\\t\\t\\t\\t\\t\"\n                            )\n                          ])\n                        })\n                      ],\n                      2\n                    )\n                  : _vm._e()\n              ])\n            ])\n          ])\n        : _vm._e()\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import store from '../../store';\n/**\n * IQRF Standard Sensor service\n */\nvar StandardSensorService = /** @class */ (function () {\n    function StandardSensorService() {\n    }\n    /**\n     * Performs Sensor enumeration on device specified by address.\n     * @param address Node address\n     */\n    StandardSensorService.prototype.enumerate = function (address) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfSensor_Enumerate',\n            'data': {\n                'req': {\n                    'nAdr': address,\n                    'param': {},\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Reads information from all sensors implemented by a device.\n     * @param address Node address\n     */\n    StandardSensorService.prototype.readAll = function (address) {\n        return store.dispatch('sendRequest', {\n            'mType': 'iqrfSensor_ReadSensorsWithTypes',\n            'data': {\n                'req': {\n                    'nAdr': address,\n                    'param': {\n                        'sensorIndexes': -1,\n                    },\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    return StandardSensorService;\n}());\nexport default new StandardSensorService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SensorManager.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SensorManager.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard>\n\t\t<CCardHeader>{{ $t('iqrfnet.standard.sensor.title') }}</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:1,239'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.standard.form.messages.address\",\n\t\t\t\t\t\t\tbetween: \"iqrfnet.standard.form.messages.address\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='address'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.standard.form.address\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t:disabled='invalid'\n\t\t\t\t\t\t@click.prevent='submitEnumerate'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('forms.enumerate') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='secondary'\n\t\t\t\t\t\t:disabeld='invalid'\n\t\t\t\t\t\t@click.prevent='submitReadAll'\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $t('iqrfnet.standard.sensor.readAll') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t\t<CCardFooter v-if='responseType != null'>\n\t\t\t<table class='table'>\n\t\t\t\t<thead>\n\t\t\t\t\t{{ $t('iqrfnet.standard.sensor.sensors') }}\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.sensor.type') }}</th>\n\t\t\t\t\t\t<td v-for='i of sensors.length' :key='i'>\n\t\t\t\t\t\t\t{{ sensors[i-1].type }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr v-if='responseType === \"enum\"'>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.sensor.unit') }}</th>\n\t\t\t\t\t\t<td v-for='j of sensors.length' :key='j'>\n\t\t\t\t\t\t\t{{ sensors[j-1].unit }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr v-else-if='responseType === \"read\"'>\n\t\t\t\t\t\t<th>{{ $t('iqrfnet.standard.sensor.value') }}</th>\n\t\t\t\t\t\t<td v-for='k of sensors.length' :key='k'>\n\t\t\t\t\t\t\t{{ sensors[k-1].value + ' ' + sensors[k-1].unit }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</CCardFooter>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardFooter, CCardHeader, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {between, integer, required} from 'vee-validate/dist/rules';\nimport {timeout} from '../../helpers/timeout';\nimport StandardSensorService from '../../services/DaemonApi/StandardSensorService';\n\nexport default {\n\tname: 'SensorManager',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardFooter,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\taddress: 1,\n\t\t\tallowedMTypes: [\n\t\t\t\t'iqrfSensor_Enumerate',\n\t\t\t\t'iqrfSensor_ReadSensorsWithTypes'\n\t\t\t],\n\t\t\tresponseType: null,\n\t\t\tsensors: null,\n\t\t\ttimeout: null\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONSEND') {\n\t\t\t\tif (!this.allowedMTypes.includes(mutation.payload.mType)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.responseType = null;\n\t\t\t\tthis.timeout = timeout('iqrfnet.networkManager.messages.submit.timeout', 30000);\n\t\t\t}\n\t\t\tif (mutation.type === 'SOCKET_ONMESSAGE') {\n\t\t\t\tif (!this.allowedMTypes.includes(mutation.payload.mType)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\tswitch(mutation.payload.data.status) {\n\t\t\t\t\tcase -1:\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('iqrfnet.standard.sensor.messages.timeout').toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('iqrfnet.standard.sensor.messages.success').toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (mutation.payload.mType === 'iqrfSensor_Enumerate') {\n\t\t\t\t\t\t\tthis.parseEnumerate(mutation.payload.data.rsp.result.sensors);\n\t\t\t\t\t\t\tthis.responseType = 'enum';\n\t\t\t\t\t\t} else if (mutation.payload.mType === 'iqrfSensor_ReadSensorsWithTypes') {\n\t\t\t\t\t\t\tthis.parseReadAll(mutation.payload.data.rsp.result.sensors);\n\t\t\t\t\t\t\tthis.responseType = 'read';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('iqrfnet.standard.sensor.messages.pnum').toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('iqrfnet.standard.sensor.messages.failure').toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\tparseEnumerate(sensors) {\n\t\t\tthis.sensors = [];\n\t\t\tsensors.forEach(item => {\n\t\t\t\tif (item.id === 'BINARYDATA7') {\n\t\t\t\t\titem = item.breakdown[0];\n\t\t\t\t}\n\t\t\t\tthis.sensors.push({'type': item.name, 'unit': item.unit});\n\t\t\t});\n\t\t},\n\t\tparseReadAll(sensors) {\n\t\t\tthis.sensors = [];\n\t\t\tsensors.forEach(item => {\n\t\t\t\tif (item.id === 'BINARYDATA7') {\n\t\t\t\t\titem = item.breakdown[0];\n\t\t\t\t}\n\t\t\t\tthis.sensors.push({'type': item.name, 'value': item.value, 'unit': item.unit});\n\t\t\t});\n\t\t},\n\t\tsubmitReadAll() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardSensorService.readAll(this.address);\n\t\t},\n\t\tsubmitEnumerate() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tStandardSensorService.enumerate(this.address);\n\t\t},\n\t}\n};\n</script>\n\n<style scoped>\n.scroll-table {\n    display: block;\n    overflow-x: auto;\n    white-space: nowrap;\n}\n\ntd {\n\ttext-align: center;\n}\n</style>\n","import { render, staticRenderFns } from \"./SensorManager.vue?vue&type=template&id=09a96214&scoped=true&\"\nimport script from \"./SensorManager.vue?vue&type=script&lang=js&\"\nexport * from \"./SensorManager.vue?vue&type=script&lang=js&\"\nimport style0 from \"./SensorManager.vue?vue&type=style&index=0&id=09a96214&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"09a96214\",\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('09a96214')) {\n      api.createRecord('09a96214', component.options)\n    } else {\n      api.reload('09a96214', component.options)\n    }\n    module.hot.accept(\"./SensorManager.vue?vue&type=template&id=09a96214&scoped=true&\", function () {\n      api.rerender('09a96214', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/SensorManager.vue\"\nexport default component.exports","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./StandardManager.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./StandardManager.vue?vue&type=script&lang=js&\"","<template>\n\t<CRow>\n\t\t<CCol md='6'>\n\t\t\t<BinaryOutputManager />\n\t\t\t<SensorManager />\n\t\t</CCol>\n\t\t<CCol md='6'>\n\t\t\t<LightManager />\n\t\t\t<DaliManager />\n\t\t</CCol>\n\t</CRow>\n</template>\n\n<script>\nimport BinaryOutputManager from '../../components/IqrfNet/BinaryOutputManager';\nimport DaliManager from '../../components/IqrfNet/DaliManager';\nimport LightManager from '../../components/IqrfNet/LightManager';\nimport SensorManager from '../../components/IqrfNet/SensorManager';\n\nexport default {\n\tname: 'StandardManager',\n\tcomponents: {\n\t\tBinaryOutputManager,\n\t\tDaliManager,\n\t\tLightManager,\n\t\tSensorManager,\n\t},\n\tmetaInfo: {\n\t\ttitle: 'iqrfnet.standard.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./StandardManager.vue?vue&type=template&id=1f0c2c02&\"\nimport script from \"./StandardManager.vue?vue&type=script&lang=js&\"\nexport * from \"./StandardManager.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('1f0c2c02')) {\n      api.createRecord('1f0c2c02', component.options)\n    } else {\n      api.reload('1f0c2c02', component.options)\n    }\n    module.hot.accept(\"./StandardManager.vue?vue&type=template&id=1f0c2c02&\", function () {\n      api.rerender('1f0c2c02', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/IqrfNet/StandardManager.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\n        \"CListGroup\",\n        [\n          _vm.$store.getters[\"user/getRole\"] === \"power\"\n            ? _c(\"CListGroupItem\", { attrs: { to: \"/config/main/\" } }, [\n                _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"config.main.title\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"config.main.description\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ])\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"user/getRole\"] === \"power\"\n            ? _c(\"CListGroupItem\", { attrs: { to: \"/config/component/\" } }, [\n                _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"config.components.title\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"config.components.description\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ])\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"user/getRole\"] === \"normal\"\n            ? _c(\"CListGroupItem\", { attrs: { to: \"/config/component/\" } }, [\n                _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"config.selectedComponents.title\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"config.selectedComponents.description\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ])\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/config/iqrf-spi/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.iqrfSpi.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.iqrfSpi.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/config/iqrf-cdc/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.iqrfCdc.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.iqrfCdc.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/config/iqrf-uart/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.iqrfUart.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.iqrfUart.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/config/iqrf-dpa/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.iqrfDpa.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.iqrfDpa.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/config/iqrf-repository/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.iqrfRepository.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.iqrfRepository.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/config/iqrf-info/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.iqrfInfo.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.iqrfInfo.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"user/getRole\"] === \"power\"\n            ? _c(\"CListGroupItem\", { attrs: { to: \"/config/iqmesh/\" } }, [\n                _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"config.iqmesh.title\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"config.iqmesh.description\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ])\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/config/mqtt/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"config.mqtt.title\")) + \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.mqtt.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/config/websocket/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.websocket.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.websocket.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/config/mq/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"config.mq.title\")) + \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.mq.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/config/udp/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"config.udp.title\")) + \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.udp.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"user/getRole\"] === \"power\"\n            ? _c(\"CListGroupItem\", { attrs: { to: \"/config/json-raw-api/\" } }, [\n                _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"config.jsonRawApi.title\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"config.jsonRawApi.description\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ])\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\n            \"CListGroupItem\",\n            { attrs: { to: \"/config/json-mng-meta-data-api/\" } },\n            [\n              _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                _vm._v(\n                  \"\\n\\t\\t\\t\\t\" +\n                    _vm._s(_vm.$t(\"config.jsonMngMetaDataApi.title\")) +\n                    \"\\n\\t\\t\\t\"\n                )\n              ]),\n              _vm._v(\" \"),\n              _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                _vm._v(\n                  \"\\n\\t\\t\\t\\t\" +\n                    _vm._s(_vm.$t(\"config.jsonMngMetaDataApi.description\")) +\n                    \"\\n\\t\\t\\t\"\n                )\n              ])\n            ]\n          ),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"user/getRole\"] === \"power\"\n            ? _c(\n                \"CListGroupItem\",\n                { attrs: { to: \"/config/json-splitter/\" } },\n                [\n                  _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"config.jsonSplitter.title\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"config.jsonSplitter.description\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/config/scheduler/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.scheduler.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.scheduler.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/config/tracer/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.tracer.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.tracer.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/config/monitor/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.monitor.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.monitor.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/config/migration/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.migration.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.migration.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"networkManager\")\n            ? _c(\"CListGroupItem\", { attrs: { to: \"/network/\" } }, [\n                _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"translatorConfig.title\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"translatorConfig.description\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ])\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"iqrfGatewayController\")\n            ? _c(\"CListGroupItem\", { attrs: { to: \"/config/controller/\" } }, [\n                _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"controllerConfig.title\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"controllerConfig.description\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ])\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"mender\")\n            ? _c(\"CListGroupItem\", { attrs: { to: \"/config/mender/\" } }, [\n                _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"config.mender.title\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"config.mender.description\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ])\n              ])\n            : _vm._e()\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<CListGroup>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"user/getRole\"] === \"power\"'\n\t\t\t\tto='/config/main/'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.main.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.main.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"user/getRole\"] === \"power\"'\n\t\t\t\tto='/config/component/'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.components.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.components.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"user/getRole\"] === \"normal\"'\n\t\t\t\tto='/config/component/'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.selectedComponents.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.selectedComponents.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/config/iqrf-spi/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.iqrfSpi.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.iqrfSpi.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/config/iqrf-cdc/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.iqrfCdc.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.iqrfCdc.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/config/iqrf-uart/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.iqrfUart.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.iqrfUart.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/config/iqrf-dpa/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.iqrfDpa.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.iqrfDpa.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/config/iqrf-repository/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.iqrfRepository.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.iqrfRepository.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/config/iqrf-info/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.iqrfInfo.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.iqrfInfo.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"user/getRole\"] === \"power\"'\n\t\t\t\tto='/config/iqmesh/'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.iqmesh.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.iqmesh.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/config/mqtt/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.mqtt.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.mqtt.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/config/websocket/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.websocket.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.websocket.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/config/mq/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.mq.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.mq.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/config/udp/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.udp.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.udp.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"user/getRole\"] === \"power\"'\n\t\t\t\tto='/config/json-raw-api/'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.jsonRawApi.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.jsonRawApi.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/config/json-mng-meta-data-api/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.jsonMngMetaDataApi.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.jsonMngMetaDataApi.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"user/getRole\"] === \"power\"'\n\t\t\t\tto='/config/json-splitter/'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.jsonSplitter.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.jsonSplitter.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/config/scheduler/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.scheduler.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.scheduler.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/config/tracer/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.tracer.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.tracer.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/config/monitor/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.monitor.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.monitor.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/config/migration/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.migration.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.migration.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"networkManager\")'\n\t\t\t\tto='/network/'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('translatorConfig.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('translatorConfig.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"iqrfGatewayController\")'\n\t\t\t\tto='/config/controller/'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('controllerConfig.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('controllerConfig.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"mender\")'\n\t\t\t\tto='/config/mender/'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.mender.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.mender.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t</CListGroup>\n\t</CCard>\n</template>\n\n<script>\nimport {CCard, CListGroup, CListGroupItem} from '@coreui/vue/src';\n\nexport default {\n\tname: 'ConfigDisambiguation',\n\tcomponents: {\n\t\tCCard,\n\t\tCListGroup,\n\t\tCListGroupItem\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ConfigDisambiguation.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ConfigDisambiguation.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ConfigDisambiguation.vue?vue&type=template&id=3bd66e9c&\"\nimport script from \"./ConfigDisambiguation.vue?vue&type=script&lang=js&\"\nexport * from \"./ConfigDisambiguation.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('3bd66e9c')) {\n      api.createRecord('3bd66e9c', component.options)\n    } else {\n      api.reload('3bd66e9c', component.options)\n    }\n    module.hot.accept(\"./ConfigDisambiguation.vue?vue&type=template&id=3bd66e9c&\", function () {\n      api.rerender('3bd66e9c', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/ConfigDisambiguation.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\n            \"CForm\",\n            [\n              _c(\n                \"div\",\n                { staticClass: \"form-group\" },\n                [\n                  _c(\"CInputFile\", {\n                    ref: \"configZip\",\n                    attrs: {\n                      label: _vm.$t(\"config.migration.form.importButton\")\n                    },\n                    on: { click: _vm.isEmpty, input: _vm.isEmpty }\n                  }),\n                  _vm._v(\" \"),\n                  _vm.configEmpty && !_vm.firstConfig\n                    ? _c(\"p\", { staticClass: \"text-danger\" }, [\n                        _vm._v(\n                          \"\\n\\t\\t\\t\\t\\t\" +\n                            _vm._s(\n                              _vm.$t(\"config.migration.messages.importButton\")\n                            ) +\n                            \"\\n\\t\\t\\t\\t\"\n                        )\n                      ])\n                    : _vm._e()\n                ],\n                1\n              ),\n              _vm._v(\" \"),\n              _c(\n                \"CButton\",\n                {\n                  attrs: { color: \"primary\", disabled: _vm.configEmpty },\n                  on: {\n                    click: function($event) {\n                      $event.preventDefault()\n                      return _vm.importConfig($event)\n                    }\n                  }\n                },\n                [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"config.migration.form.import\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]\n              ),\n              _vm._v(\" \"),\n              _c(\n                \"CButton\",\n                {\n                  attrs: { color: \"secondary\" },\n                  on: {\n                    click: function($event) {\n                      $event.preventDefault()\n                      return _vm.exportConfig($event)\n                    }\n                  }\n                },\n                [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"config.migration.form.export\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ]\n              )\n            ],\n            1\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\n/**\n * Daemon configuration service\n */\nvar DaemonConfigurationService = /** @class */ (function () {\n    function DaemonConfigurationService() {\n    }\n    /**\n     * Creates a new component\n     * @param configuration Daemon component configuration\n     */\n    DaemonConfigurationService.prototype.createComponent = function (configuration) {\n        var url = 'config/daemon/';\n        return axios.post(url, configuration, { headers: authorizationHeader() });\n    };\n    /**\n     * Creates a new component instance\n     * @param component Daemon component name\n     * @param configuration Daemon component instance configuration\n     */\n    DaemonConfigurationService.prototype.createInstance = function (component, configuration) {\n        var url = 'config/daemon/' + encodeURIComponent(component);\n        return axios.post(url, configuration, { headers: authorizationHeader() });\n    };\n    /**\n     * Retrieves the component configuration and instances\n     * @param component Daemon component name\n     */\n    DaemonConfigurationService.prototype.getComponent = function (component) {\n        var url = 'config/daemon/' + encodeURIComponent(component);\n        return axios.get(url, { headers: authorizationHeader() });\n    };\n    /**\n     * Retrieves the component instance configuration and instances\n     * @param component Daemon component name\n     * @param instance Daemon component instance name\n     */\n    DaemonConfigurationService.prototype.getInstance = function (component, instance) {\n        var url = 'config/daemon/' + encodeURIComponent(component) + '/' + encodeURIComponent(instance);\n        return axios.get(url, { headers: authorizationHeader() });\n    };\n    /**\n     * Deletes the component\n     * @param component Daemon component name\n     */\n    DaemonConfigurationService.prototype.deleteComponent = function (component) {\n        var url = 'config/daemon/' + encodeURIComponent(component);\n        return axios.delete(url, { headers: authorizationHeader() });\n    };\n    /**\n     * Deletes the component instance\n     * @param component Daemon component name\n     * @param instance Daemon component instance name\n     */\n    DaemonConfigurationService.prototype.deleteInstance = function (component, instance) {\n        var url = 'config/daemon/' + encodeURIComponent(component) + '/' + encodeURIComponent(instance);\n        return axios.delete(url, { headers: authorizationHeader() });\n    };\n    /**\n     * Exports daemon configuration\n     */\n    DaemonConfigurationService.prototype.export = function () {\n        var url = 'config/daemon/migration/export';\n        return axios.get(url, { headers: authorizationHeader(), responseType: 'arraybuffer' });\n    };\n    /**\n     * Imports daemon configuration\n     * @param config daemon configuration\n     */\n    DaemonConfigurationService.prototype.import = function (config) {\n        var url = 'config/daemon/migration/import';\n        return axios.post(url, config, { headers: authorizationHeader() });\n    };\n    /**\n     * Updates the component configuration\n     * @param component Daemon component name\n     * @param configuration Daemon component configuration\n     */\n    DaemonConfigurationService.prototype.updateComponent = function (component, configuration) {\n        var url = 'config/daemon/' + encodeURIComponent(component);\n        return axios.put(url, configuration, { headers: authorizationHeader() });\n    };\n    /**\n     * Updates the component instance configuration\n     * @param component Daemon component name\n     * @param instance Daemon component instance name\n     * @param configuration Daemon component instance configuration\n     */\n    DaemonConfigurationService.prototype.updateInstance = function (component, instance, configuration) {\n        var url = 'config/daemon/' + encodeURIComponent(component) + '/' + encodeURIComponent(instance);\n        return axios.put(url, configuration, { headers: authorizationHeader() });\n    };\n    return DaemonConfigurationService;\n}());\nexport default new DaemonConfigurationService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ConfigMigration.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ConfigMigration.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard>\n\t\t<CCardBody>\n\t\t\t<CForm>\n\t\t\t\t<div class='form-group'>\n\t\t\t\t\t<CInputFile\n\t\t\t\t\t\tref='configZip'\n\t\t\t\t\t\t:label='$t(\"config.migration.form.importButton\")'\n\t\t\t\t\t\t@click='isEmpty'\n\t\t\t\t\t\t@input='isEmpty'\n\t\t\t\t\t/>\n\t\t\t\t\t<p v-if='configEmpty && !firstConfig' class='text-danger'>\n\t\t\t\t\t\t{{ $t(\"config.migration.messages.importButton\") }}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<CButton\n\t\t\t\t\tcolor='primary'\n\t\t\t\t\t:disabled='configEmpty'\n\t\t\t\t\t@click.prevent='importConfig'\n\t\t\t\t>\n\t\t\t\t\t{{ $t('config.migration.form.import') }}\n\t\t\t\t</CButton>\n\t\t\t\t<CButton color='secondary' @click.prevent='exportConfig'>\n\t\t\t\t\t{{ $t('config.migration.form.export') }}\n\t\t\t\t</CButton>\n\t\t\t</CForm>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInputFile} from '@coreui/vue/src';\nimport DaemonConfigurationService\tfrom '../../services/DaemonConfigurationService';\nimport {fileDownloader} from '../../helpers/fileDownloader';\n\nexport default {\n\tname: 'ConfigMigration',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInputFile\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tconfigEmpty: true,\n\t\t\tfirstConfig: true,\n\t\t};\n\t},\n\tmethods: {\n\t\texportConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.export()\n\t\t\t\t.then((response) => {\n\t\t\t\t\tconst fileName = 'iqrf-gateway-configuration_' + new Date().toISOString();\n\t\t\t\t\tconst file = fileDownloader(response, 'application/zip', fileName);\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tfile.click();\n\t\t\t\t});\n\t\t},\n\t\timportConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.import(this.$refs.configZip.$el.children[1].files[0])\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\tthis.$t('config.migration.messages.imported').toString()\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (error.response === undefined) {\n\t\t\t\t\t\tconsole.error(error);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (error.response.status === 400) {\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('config.migration.messages.invalidConfig').toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (error.response.status === 415) {\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('config.migration.messages.invalidFormat').toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n\t\tisEmpty() {\n\t\t\tif (this.firstConfig) {\n\t\t\t\tthis.firstConfig = false;\n\t\t\t}\n\t\t\tthis.configEmpty = this.$refs.configZip.$el.children[1].files.length === 0;\n\t\t}\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.migration.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./ConfigMigration.vue?vue&type=template&id=1dafdb1c&\"\nimport script from \"./ConfigMigration.vue?vue&type=script&lang=js&\"\nexport * from \"./ConfigMigration.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('1dafdb1c')) {\n      api.createRecord('1dafdb1c', component.options)\n    } else {\n      api.reload('1dafdb1c', component.options)\n    }\n    module.hot.accept(\"./ConfigMigration.vue?vue&type=template&id=1dafdb1c&\", function () {\n      api.rerender('1dafdb1c', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/ConfigMigration.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        { attrs: { \"body-wrapper\": \"\" } },\n        [\n          _vm.config !== null\n            ? _c(\"ValidationObserver\", {\n                scopedSlots: _vm._u(\n                  [\n                    {\n                      key: \"default\",\n                      fn: function(ref) {\n                        var invalid = ref.invalid\n                        return [\n                          _c(\n                            \"CForm\",\n                            {\n                              on: {\n                                submit: function($event) {\n                                  $event.preventDefault()\n                                  return _vm.processSubmit($event)\n                                }\n                              }\n                            },\n                            [\n                              _c(\n                                \"CRow\",\n                                [\n                                  _c(\n                                    \"CCol\",\n                                    { attrs: { md: \"6\" } },\n                                    [\n                                      _c(\"h3\", [\n                                        _vm._v(\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"translatorConfig.form.mqtt.title\"\n                                            )\n                                          )\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"required\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"translatorConfig.form.messages.missing.maddr\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      label: _vm.$t(\n                                                        \"translatorConfig.form.mqtt.addr\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.mqtt.addr,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.mqtt,\n                                                          \"addr\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.mqtt.addr\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules:\n                                            \"required|integer|between:1,49151\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"translatorConfig.form.messages.integer\",\n                                            required:\n                                              \"translatorConfig.form.messages.port\",\n                                            between:\n                                              \"translatorConfig.form.messages.port\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"1\",\n                                                      max: \"49151\",\n                                                      label: _vm.$t(\n                                                        \"translatorConfig.form.mqtt.port\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.mqtt.port,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.mqtt,\n                                                          \"port\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.mqtt.port\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"required|client_id\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"translatorConfig.form.messages.missing.mcid\",\n                                            client_id:\n                                              \"translatorConfig.form.messages.invalid.mcid\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      label: _vm.$t(\n                                                        \"translatorConfig.form.mqtt.cid\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.mqtt.cid,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.mqtt,\n                                                          \"cid\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.mqtt.cid\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"topic|required\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"translatorConfig.form.messages.missing.mtopic\",\n                                            topic:\n                                              \"translatorConfig.form.messages.invalid.mtopic\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      label: _vm.$t(\n                                                        \"translatorConfig.form.mqtt.topic\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.mqtt.topic,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.mqtt,\n                                                          \"topic\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.mqtt.topic\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"required\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"translatorConfig.form.messages.missing.muser\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      autocomplete: \"off\",\n                                                      label: _vm.$t(\n                                                        \"translatorConfig.form.mqtt.user\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.mqtt.user,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.mqtt,\n                                                          \"user\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.mqtt.user\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"required\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"translatorConfig.form.messages.missing.mpw\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      autocomplete: \"off\",\n                                                      label: _vm.$t(\n                                                        \"translatorConfig.form.mqtt.pw\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      ),\n                                                      type: _vm.visibility\n                                                    },\n                                                    scopedSlots: _vm._u(\n                                                      [\n                                                        {\n                                                          key: \"append-content\",\n                                                          fn: function() {\n                                                            return [\n                                                              _c(\n                                                                \"span\",\n                                                                {\n                                                                  on: {\n                                                                    click:\n                                                                      _vm.changeVisibility\n                                                                  }\n                                                                },\n                                                                [\n                                                                  _vm.visibility ===\n                                                                  \"password\"\n                                                                    ? _c(\n                                                                        \"CIcon\",\n                                                                        {\n                                                                          attrs: {\n                                                                            content:\n                                                                              _vm\n                                                                                .$options\n                                                                                .icons\n                                                                                .hidden\n                                                                          }\n                                                                        }\n                                                                      )\n                                                                    : _c(\n                                                                        \"CIcon\",\n                                                                        {\n                                                                          attrs: {\n                                                                            content:\n                                                                              _vm\n                                                                                .$options\n                                                                                .icons\n                                                                                .shown\n                                                                          }\n                                                                        }\n                                                                      )\n                                                                ],\n                                                                1\n                                                              )\n                                                            ]\n                                                          },\n                                                          proxy: true\n                                                        }\n                                                      ],\n                                                      null,\n                                                      true\n                                                    ),\n                                                    model: {\n                                                      value: _vm.config.mqtt.pw,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.mqtt,\n                                                          \"pw\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.mqtt.pw\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      })\n                                    ],\n                                    1\n                                  ),\n                                  _vm._v(\" \"),\n                                  _c(\n                                    \"CCol\",\n                                    { attrs: { md: \"6\" } },\n                                    [\n                                      _c(\"h3\", [\n                                        _vm._v(\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"translatorConfig.form.rest.title\"\n                                            )\n                                          )\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"required\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"translatorConfig.form.messages.missing.raddr\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      label: _vm.$t(\n                                                        \"translatorConfig.form.rest.addr\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.rest.addr,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.rest,\n                                                          \"addr\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.rest.addr\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules:\n                                            \"required|integer|between:1,49151\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"translatorConfig.form.messages.integer\",\n                                            required:\n                                              \"translatorConfig.form.messages.port\",\n                                            between:\n                                              \"translatorConfig.form.messages.port\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"1\",\n                                                      max: \"49151\",\n                                                      label: _vm.$t(\n                                                        \"translatorConfig.form.rest.port\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.rest.port,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.rest,\n                                                          \"port\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.rest.port\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"api_key_r|required\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"translatorConfig.form.messages.missing.rapi_key\",\n                                            api_key_r:\n                                              \"translatorConfig.form.messages.invalid.api_key\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      label: _vm.$t(\n                                                        \"translatorConfig.form.rest.api_key\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.rest.api_key,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.rest,\n                                                          \"api_key\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.rest.api_key\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      })\n                                    ],\n                                    1\n                                  )\n                                ],\n                                1\n                              ),\n                              _vm._v(\" \"),\n                              _c(\n                                \"CButton\",\n                                {\n                                  attrs: {\n                                    color: \"primary\",\n                                    type: \"submit\",\n                                    disabled: invalid\n                                  }\n                                },\n                                [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t\\t\\t\" +\n                                      _vm._s(_vm.$t(\"forms.save\")) +\n                                      \"\\n\\t\\t\\t\\t\"\n                                  )\n                                ]\n                              )\n                            ],\n                            1\n                          )\n                        ]\n                      }\n                    }\n                  ],\n                  null,\n                  false,\n                  603611300\n                )\n              })\n            : _vm._e()\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\n/**\n * Feature configuration service\n */\nvar FeatureConfigService = /** @class */ (function () {\n    function FeatureConfigService() {\n    }\n    /**\n     * Retrieves feature configuration\n     * @param featureName feature name\n     */\n    FeatureConfigService.prototype.getConfig = function (featureName) {\n        return axios.get('config/' + featureName, { headers: authorizationHeader() });\n    };\n    /**\n     * Saves new feature configuration\n     * @param featureName feature name\n     * @param config new feature configuration\n     */\n    FeatureConfigService.prototype.saveConfig = function (featureName, config) {\n        return axios.put('config/' + featureName, config, { headers: authorizationHeader() });\n    };\n    return FeatureConfigService;\n}());\nexport default new FeatureConfigService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TranslatorConfig.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TranslatorConfig.vue?vue&type=script&lang=js&\"","<template>\n\t<div>\n\t\t<CCard body-wrapper>\n\t\t\t<ValidationObserver v-if='config !== null' v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='processSubmit'>\n\t\t\t\t\t<CRow>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<h3>{{ $t(\"translatorConfig.form.mqtt.title\") }}</h3>\n\t\t\t\t\t\t\t<ValidationProvider \n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }' \n\t\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t\t:custom-messages='{required: \"translatorConfig.form.messages.missing.maddr\"}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.mqtt.addr'\n\t\t\t\t\t\t\t\t\t:label='$t(\"translatorConfig.form.mqtt.addr\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider \n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }' \n\t\t\t\t\t\t\t\trules='required|integer|between:1,49151'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"translatorConfig.form.messages.integer\",\n\t\t\t\t\t\t\t\t\trequired: \"translatorConfig.form.messages.port\",\n\t\t\t\t\t\t\t\t\tbetween: \"translatorConfig.form.messages.port\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.mqtt.port'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\t\t\tmax='49151'\n\t\t\t\t\t\t\t\t\t:label='$t(\"translatorConfig.form.mqtt.port\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider \n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }' \n\t\t\t\t\t\t\t\trules='required|client_id'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\trequired: \"translatorConfig.form.messages.missing.mcid\",\n\t\t\t\t\t\t\t\t\tclient_id: \"translatorConfig.form.messages.invalid.mcid\",\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.mqtt.cid'\n\t\t\t\t\t\t\t\t\t:label='$t(\"translatorConfig.form.mqtt.cid\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider \n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }' \n\t\t\t\t\t\t\t\trules='topic|required'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\trequired: \"translatorConfig.form.messages.missing.mtopic\",\n\t\t\t\t\t\t\t\t\ttopic: \"translatorConfig.form.messages.invalid.mtopic\",\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.mqtt.topic'\n\t\t\t\t\t\t\t\t\t:label='$t(\"translatorConfig.form.mqtt.topic\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider \n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }' \n\t\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t\t:custom-messages='{required: \"translatorConfig.form.messages.missing.muser\"}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.mqtt.user'\n\t\t\t\t\t\t\t\t\tautocomplete='off'\n\t\t\t\t\t\t\t\t\t:label='$t(\"translatorConfig.form.mqtt.user\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider \n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }' \n\t\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t\t:custom-messages='{required: \"translatorConfig.form.messages.missing.mpw\"}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.mqtt.pw'\n\t\t\t\t\t\t\t\t\tautocomplete='off'\n\t\t\t\t\t\t\t\t\t:label='$t(\"translatorConfig.form.mqtt.pw\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t:type='visibility'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<template #append-content>\n\t\t\t\t\t\t\t\t\t\t<span @click='changeVisibility'>\n\t\t\t\t\t\t\t\t\t\t\t<CIcon\n\t\t\t\t\t\t\t\t\t\t\t\tv-if='visibility ===\"password\"'\n\t\t\t\t\t\t\t\t\t\t\t\t:content='$options.icons.hidden'\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<CIcon v-else :content='$options.icons.shown' />\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t</CInput>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<h3>{{ $t(\"translatorConfig.form.rest.title\") }}</h3>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t\t:custom-messages='{required: \"translatorConfig.form.messages.missing.raddr\"}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.rest.addr' \n\t\t\t\t\t\t\t\t\t:label='$t(\"translatorConfig.form.rest.addr\")' \n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider \n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='required|integer|between:1,49151'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"translatorConfig.form.messages.integer\",\n\t\t\t\t\t\t\t\t\trequired: \"translatorConfig.form.messages.port\",\n\t\t\t\t\t\t\t\t\tbetween: \"translatorConfig.form.messages.port\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.rest.port'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\t\t\tmax='49151'\n\t\t\t\t\t\t\t\t\t:label='$t(\"translatorConfig.form.rest.port\")' \n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider \n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }' \n\t\t\t\t\t\t\t\trules='api_key_r|required'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\trequired: \"translatorConfig.form.messages.missing.rapi_key\",\n\t\t\t\t\t\t\t\t\tapi_key_r: \"translatorConfig.form.messages.invalid.api_key\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.rest.api_key' \n\t\t\t\t\t\t\t\t\t:label='$t(\"translatorConfig.form.rest.api_key\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t</CRow>\n\t\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCard>\n\t</div>\n</template>\n\n<script>\n\nimport {CButton, CCard, CForm, CIcon, CInput} from '@coreui/vue/src';\nimport {cilLockLocked, cilLockUnlocked} from '@coreui/icons';\nimport {between, integer, required} from 'vee-validate/dist/rules';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport FeatureConfigService from '../../services/FeatureConfigService';\n\nexport default {\n\tname: 'TranslatorConfig',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCForm,\n\t\tCIcon,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tname: 'translator',\n\t\t\tvisibility: 'password',\n\t\t\tconfig: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\textend('api_key_r', (key) => {\n\t\t\tconst regex = RegExp('^[./A-Za-z0-9]{22}\\\\.[A-Za-z0-9+/=]{44}$');\n\t\t\treturn regex.test(key);\n\t\t});\n\t\textend('client_id', (id) => {\n\t\t\tconst regex = RegExp('^[a-f0-9]{16}$');\n\t\t\treturn regex.test(id);\n\t\t});\n\t\textend('topic', (topic) => {\n\t\t\tconst regex = RegExp('^gateway\\\\/[a-f0-9]{16}\\\\/rest\\\\/requests\\\\/\\\\+\\\\/#$');\n\t\t\treturn regex.test(topic);\n\t\t});\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tFeatureConfigService.getConfig(this.name)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.config = response.data;\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t\tprocessSubmit() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tFeatureConfigService.saveConfig(this.name, this.config)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(this.$t('forms.messages.saveSuccess').toString());\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t\tchangeVisibility() {\n\t\t\tthis.visibility = this.visibility === 'password' ? 'text' : 'password';\n\t\t},\n\t},\n\tbeforeRouteEnter(to, from, next) {\n\t\tnext(vm => {\n\t\t\tif (!vm.$store.getters['features/isEnabled']('iqrfGatewayTranslator')) {\n\t\t\t\tvm.$toast.error(\n\t\t\t\t\tvm.$t('translatorConfig.messages.disabled').toString()\n\t\t\t\t);\n\t\t\t\tvm.$router.push(from.path);\n\t\t\t}\n\t\t});\n\t},\n\ticons: {\n\t\thidden: cilLockLocked,\n\t\tshown: cilLockUnlocked\n\t},\n\tmetaInfo: {\n\t\ttitle: 'translatorConfig.description',\n\t},\n};\n\n</script>\n","import { render, staticRenderFns } from \"./TranslatorConfig.vue?vue&type=template&id=4858a5b4&\"\nimport script from \"./TranslatorConfig.vue?vue&type=script&lang=js&\"\nexport * from \"./TranslatorConfig.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('4858a5b4')) {\n      api.createRecord('4858a5b4', component.options)\n    } else {\n      api.reload('4858a5b4', component.options)\n    }\n    module.hot.accept(\"./TranslatorConfig.vue?vue&type=template&id=4858a5b4&\", function () {\n      api.rerender('4858a5b4', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/TranslatorConfig.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        { attrs: { \"body-wrapper\": \"\" } },\n        [\n          _vm.config !== null\n            ? _c(\"ValidationObserver\", {\n                scopedSlots: _vm._u(\n                  [\n                    {\n                      key: \"default\",\n                      fn: function(ref) {\n                        var invalid = ref.invalid\n                        return [\n                          _c(\n                            \"CForm\",\n                            {\n                              on: {\n                                submit: function($event) {\n                                  $event.preventDefault()\n                                  return _vm.processSubmit($event)\n                                }\n                              }\n                            },\n                            [\n                              _c(\n                                \"CRow\",\n                                [\n                                  _c(\n                                    \"CCol\",\n                                    { attrs: { md: \"6\" } },\n                                    [\n                                      _c(\"h3\", [\n                                        _vm._v(\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"controllerConfig.form.wsServers.title\"\n                                            )\n                                          )\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"required|ws_addr\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"controllerConfig.form.messages.missing.ws_api\",\n                                            ws_addr:\n                                              \"controllerConfig.form.messages.invalid.ws_format\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      label: _vm.$t(\n                                                        \"controllerConfig.form.wsServers.api\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.wsServers\n                                                          .api,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.wsServers,\n                                                          \"api\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.wsServers.api\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"required|ws_addr\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"controllerConfig.form.messages.missing.ws_monitor\",\n                                            ws_addr:\n                                              \"controllerConfig.form.messages.invalid.ws_format\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      label: _vm.$t(\n                                                        \"controllerConfig.form.wsServers.monitor\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.wsServers\n                                                          .monitor,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.wsServers,\n                                                          \"monitor\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.wsServers.monitor\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      })\n                                    ],\n                                    1\n                                  ),\n                                  _vm._v(\" \"),\n                                  _c(\n                                    \"CCol\",\n                                    { attrs: { md: \"6\" } },\n                                    [\n                                      _c(\"h3\", [\n                                        _vm._v(\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"controllerConfig.form.logger.title\"\n                                            )\n                                          )\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"required\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"controllerConfig.form.messages.missing.l_file\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      label: _vm.$t(\n                                                        \"controllerConfig.form.logger.filePath\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.logger\n                                                          .filePath,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.logger,\n                                                          \"filePath\",\n                                                          $$v\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.logger.filePath\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"required\",\n                                          \"custom-messages\": {\n                                            required:\n                                              \"controllerConfig.form.messages.missing.l_severity\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var valid = ref.valid\n                                                var touched = ref.touched\n                                                var errors = ref.errors\n                                                return [\n                                                  _c(\"CSelect\", {\n                                                    attrs: {\n                                                      value:\n                                                        _vm.config.logger\n                                                          .severity,\n                                                      options: [\n                                                        {\n                                                          value: \"trace\",\n                                                          label: \"Trace\"\n                                                        },\n                                                        {\n                                                          value: \"debug\",\n                                                          label: \"Debug\"\n                                                        },\n                                                        {\n                                                          value: \"info\",\n                                                          label: \"Info\"\n                                                        },\n                                                        {\n                                                          value: \"warning\",\n                                                          label: \"Warning\"\n                                                        },\n                                                        {\n                                                          value: \"error\",\n                                                          label: \"Error\"\n                                                        }\n                                                      ],\n                                                      label: _vm.$t(\n                                                        \"controllerConfig.form.logger.severity\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      ),\n                                                      placeholder: _vm.$t(\n                                                        \"controllerConfig.form.messages.missing.l_severity\"\n                                                      )\n                                                    },\n                                                    on: {\n                                                      \"update:value\": function(\n                                                        $event\n                                                      ) {\n                                                        return _vm.$set(\n                                                          _vm.config.logger,\n                                                          \"severity\",\n                                                          $event\n                                                        )\n                                                      }\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      })\n                                    ],\n                                    1\n                                  )\n                                ],\n                                1\n                              ),\n                              _c(\"hr\"),\n                              _vm._v(\" \"),\n                              _c(\n                                \"CRow\",\n                                [\n                                  _c(\n                                    \"CCol\",\n                                    { attrs: { md: \"6\" } },\n                                    [\n                                      _c(\"h3\", [\n                                        _vm._v(\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"controllerConfig.form.resetButton.title\"\n                                            )\n                                          )\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked: _vm.apiCallSetCustom,\n                                          label: _vm.$t(\n                                            \"controllerConfig.form.resetButton.setCustom\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            _vm.apiCallSetCustom = $event\n                                          },\n                                          change: _vm.updateApiCall\n                                        }\n                                      }),\n                                      _vm._v(\" \"),\n                                      !_vm.apiCallSetCustom\n                                        ? _c(\"CSelect\", {\n                                            attrs: {\n                                              value: _vm.config.resetButton.api,\n                                              options: [\n                                                {\n                                                  value: \"autoNetwork\",\n                                                  label: \"AutoNetwork\"\n                                                },\n                                                {\n                                                  value: \"discovery\",\n                                                  label: \"Discovery\"\n                                                }\n                                              ],\n                                              label: _vm.$t(\n                                                \"controllerConfig.form.resetButton.api\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:value\": function($event) {\n                                                return _vm.$set(\n                                                  _vm.config.resetButton,\n                                                  \"api\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          })\n                                        : _c(\"ValidationProvider\", {\n                                            attrs: {\n                                              rules: \"required\",\n                                              \"custom-messages\": {\n                                                required:\n                                                  \"controllerConfig.form.messages.missing.rb_custom\"\n                                              }\n                                            },\n                                            scopedSlots: _vm._u(\n                                              [\n                                                {\n                                                  key: \"default\",\n                                                  fn: function(ref) {\n                                                    var errors = ref.errors\n                                                    var touched = ref.touched\n                                                    var valid = ref.valid\n                                                    return [\n                                                      _c(\"CInput\", {\n                                                        attrs: {\n                                                          label: _vm.$t(\n                                                            \"controllerConfig.form.resetButton.custom\"\n                                                          ),\n                                                          \"is-valid\": touched\n                                                            ? valid\n                                                            : null,\n                                                          \"invalid-feedback\": _vm.$t(\n                                                            errors[0]\n                                                          )\n                                                        },\n                                                        model: {\n                                                          value:\n                                                            _vm.config\n                                                              .resetButton.api,\n                                                          callback: function(\n                                                            $$v\n                                                          ) {\n                                                            _vm.$set(\n                                                              _vm.config\n                                                                .resetButton,\n                                                              \"api\",\n                                                              $$v\n                                                            )\n                                                          },\n                                                          expression:\n                                                            \"config.resetButton.api\"\n                                                        }\n                                                      })\n                                                    ]\n                                                  }\n                                                }\n                                              ],\n                                              null,\n                                              true\n                                            )\n                                          }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"integer|required\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"controllerConfig.form.messages.invalid.rb_pin\",\n                                            required:\n                                              \"controllerConfig.form.messages.missing.rb_pin\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"0\",\n                                                      label: _vm.$t(\n                                                        \"controllerConfig.form.resetButton.pin\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.resetButton\n                                                          .button,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config\n                                                            .resetButton,\n                                                          \"button\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.resetButton.button\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      })\n                                    ],\n                                    1\n                                  ),\n                                  _vm._v(\" \"),\n                                  _c(\n                                    \"CCol\",\n                                    { attrs: { md: \"6\" } },\n                                    [\n                                      _c(\"h3\", [\n                                        _vm._v(\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"controllerConfig.form.statusLed.title\"\n                                            )\n                                          )\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"integer|required\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"controllerConfig.form.messages.invalid.gpio\",\n                                            required:\n                                              \"controllerConfig.form.messages.missing.sl_green\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"0\",\n                                                      label: _vm.$t(\n                                                        \"controllerConfig.form.statusLed.green\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.statusLed\n                                                          .greenLed,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.statusLed,\n                                                          \"greenLed\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.statusLed.greenLed\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"integer|required\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"controllerConfig.form.messages.invalid.gpio\",\n                                            required:\n                                              \"controllerConfig.form.messages.missing.sl_red\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"0\",\n                                                      label: _vm.$t(\n                                                        \"controllerConfig.form.statusLed.red\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.statusLed\n                                                          .redLed,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.statusLed,\n                                                          \"redLed\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.statusLed.redLed\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      })\n                                    ],\n                                    1\n                                  )\n                                ],\n                                1\n                              ),\n                              _c(\"hr\"),\n                              _vm._v(\" \"),\n                              _c(\n                                \"CRow\",\n                                [\n                                  _c(\n                                    \"CCol\",\n                                    { attrs: { md: \"6\" } },\n                                    [\n                                      _c(\"h3\", [\n                                        _vm._v(\n                                          \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                            _vm._s(\n                                              _vm.$t(\n                                                \"controllerConfig.form.daemonApi.autoNetwork.title\"\n                                              )\n                                            ) +\n                                            \"\\n\\t\\t\\t\\t\\t\\t\"\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"required|integer|between:0,3\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"iqrfnet.networkManager.messages.invalid.integer\",\n                                            required:\n                                              \"iqrfnet.networkManager.messages.autoNetwork.actionRetries\",\n                                            between:\n                                              \"iqrfnet.networkManager.messages.autoNetwork.actionRetries\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"0\",\n                                                      max: \"3\",\n                                                      label: _vm.$t(\n                                                        \"iqrfnet.networkManager.autoNetwork.form.actionRetries\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.daemonApi\n                                                          .autoNetwork\n                                                          .actionRetries,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.daemonApi\n                                                            .autoNetwork,\n                                                          \"actionRetries\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.daemonApi.autoNetwork.actionRetries\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked:\n                                            _vm.config.daemonApi.autoNetwork\n                                              .discoveryBeforeStart,\n                                          label: _vm.$t(\n                                            \"iqrfnet.networkManager.autoNetwork.form.discoveryBeforeStart\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            return _vm.$set(\n                                              _vm.config.daemonApi.autoNetwork,\n                                              \"discoveryBeforeStart\",\n                                              $event\n                                            )\n                                          }\n                                        }\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"integer|required|between:0,7\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"iqrfnet.networkManager.messages.invalid.integer\",\n                                            required:\n                                              \"iqrfnet.networkManager.messages.discovery.txPower\",\n                                            between:\n                                              \"iqrfnet.networkManager.messages.discovery.txPower\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"0\",\n                                                      max: \"7\",\n                                                      label: _vm.$t(\n                                                        \"iqrfnet.networkManager.autoNetwork.form.discoveryTxPower\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.daemonApi\n                                                          .autoNetwork\n                                                          .discoveryTxPower,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.daemonApi\n                                                            .autoNetwork,\n                                                          \"discoveryTxPower\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.daemonApi.autoNetwork.discoveryTxPower\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked:\n                                            _vm.config.daemonApi.autoNetwork\n                                              .skipDiscoveryEachWave,\n                                          label: _vm.$t(\n                                            \"iqrfnet.networkManager.autoNetwork.form.skipDiscoveryEachWave\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            return _vm.$set(\n                                              _vm.config.daemonApi.autoNetwork,\n                                              \"skipDiscoveryEachWave\",\n                                              $event\n                                            )\n                                          }\n                                        }\n                                      }),\n                                      _c(\"hr\"),\n                                      _vm._v(\" \"),\n                                      _c(\"h4\", [\n                                        _vm._v(\n                                          \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                            _vm._s(\n                                              _vm.$t(\n                                                \"iqrfnet.networkManager.autoNetwork.form.stopConditions\"\n                                              )\n                                            ) +\n                                            \"\\n\\t\\t\\t\\t\\t\\t\"\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked:\n                                            _vm.config.daemonApi.autoNetwork\n                                              .stopConditions\n                                              .abortOnTooManyNodesFound,\n                                          label: _vm.$t(\n                                            \"iqrfnet.networkManager.autoNetwork.form.abortOnTooManyNodesFound\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            return _vm.$set(\n                                              _vm.config.daemonApi.autoNetwork\n                                                .stopConditions,\n                                              \"abortOnTooManyNodesFound\",\n                                              $event\n                                            )\n                                          }\n                                        }\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules:\n                                            \"integer|required|between:1,127\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"iqrfnet.networkManager.messages.invalid.integer\",\n                                            required:\n                                              \"iqrfnet.networkManager.messages.autoNetwork.emptyWaves\",\n                                            between:\n                                              \"iqrfnet.networkManager.messages.autoNetwork.emptyWaves\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"1\",\n                                                      max: \"127\",\n                                                      label: _vm.$t(\n                                                        \"iqrfnet.networkManager.autoNetwork.form.emptyWaves\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.daemonApi\n                                                          .autoNetwork\n                                                          .stopConditions\n                                                          .emptyWaves,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.daemonApi\n                                                            .autoNetwork\n                                                            .stopConditions,\n                                                          \"emptyWaves\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.daemonApi.autoNetwork.stopConditions.emptyWaves\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules:\n                                            \"integer|required|between:1,127\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"iqrfnet.networkManager.messages.invalid.integer\",\n                                            required:\n                                              \"iqrfnet.networkManager.messages.autoNetwork.waves\",\n                                            between:\n                                              \"iqrfnet.networkManager.messages.autoNetwork.waves\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"1\",\n                                                      max: \"127\",\n                                                      label: _vm.$t(\n                                                        \"iqrfnet.networkManager.autoNetwork.form.waves\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.daemonApi\n                                                          .autoNetwork\n                                                          .stopConditions.waves,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.daemonApi\n                                                            .autoNetwork\n                                                            .stopConditions,\n                                                          \"waves\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.daemonApi.autoNetwork.stopConditions.waves\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _c(\"hr\"),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked:\n                                            _vm.config.daemonApi.autoNetwork\n                                              .returnVerbose,\n                                          label: _vm.$t(\n                                            \"controllerConfig.form.daemonApi.autoNetwork.verbose\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            return _vm.$set(\n                                              _vm.config.daemonApi.autoNetwork,\n                                              \"returnVerbose\",\n                                              $event\n                                            )\n                                          }\n                                        }\n                                      })\n                                    ],\n                                    1\n                                  ),\n                                  _vm._v(\" \"),\n                                  _c(\n                                    \"CCol\",\n                                    { attrs: { md: \"6\" } },\n                                    [\n                                      _c(\"h3\", [\n                                        _vm._v(\n                                          \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                            _vm._s(\n                                              _vm.$t(\n                                                \"controllerConfig.form.daemonApi.discovery.title\"\n                                              )\n                                            ) +\n                                            \"\\n\\t\\t\\t\\t\\t\\t\"\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules:\n                                            \"integer|required|between:0,239\",\n                                          \"custom-messages\": {\n                                            between:\n                                              \"iqrfnet.networkManager.messages.discovery.maxAddr\",\n                                            integer:\n                                              \"iqrfnet.networkManager.messages.invalid.integer\",\n                                            required:\n                                              \"iqrfnet.networkManager.messages.discovery.maxAddr\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"0\",\n                                                      max: \"239\",\n                                                      label: _vm.$t(\n                                                        \"iqrfnet.networkManager.discovery.form.maxAddr\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.daemonApi\n                                                          .discovery.maxAddr,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.daemonApi\n                                                            .discovery,\n                                                          \"maxAddr\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.daemonApi.discovery.maxAddr\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"ValidationProvider\", {\n                                        attrs: {\n                                          rules: \"integer|required|between:0,7\",\n                                          \"custom-messages\": {\n                                            integer:\n                                              \"iqrfnet.networkManager.messages.invalid.integer\",\n                                            required:\n                                              \"iqrfnet.networkManager.messages.discovery.txPower\",\n                                            between:\n                                              \"iqrfnet.networkManager.messages.discovery.txPower\"\n                                          }\n                                        },\n                                        scopedSlots: _vm._u(\n                                          [\n                                            {\n                                              key: \"default\",\n                                              fn: function(ref) {\n                                                var errors = ref.errors\n                                                var touched = ref.touched\n                                                var valid = ref.valid\n                                                return [\n                                                  _c(\"CInput\", {\n                                                    attrs: {\n                                                      type: \"number\",\n                                                      min: \"0\",\n                                                      max: \"7\",\n                                                      label: _vm.$t(\n                                                        \"iqrfnet.networkManager.discovery.form.txPower\"\n                                                      ),\n                                                      \"is-valid\": touched\n                                                        ? valid\n                                                        : null,\n                                                      \"invalid-feedback\": _vm.$t(\n                                                        errors[0]\n                                                      )\n                                                    },\n                                                    model: {\n                                                      value:\n                                                        _vm.config.daemonApi\n                                                          .discovery.txPower,\n                                                      callback: function($$v) {\n                                                        _vm.$set(\n                                                          _vm.config.daemonApi\n                                                            .discovery,\n                                                          \"txPower\",\n                                                          _vm._n($$v)\n                                                        )\n                                                      },\n                                                      expression:\n                                                        \"config.daemonApi.discovery.txPower\"\n                                                    }\n                                                  })\n                                                ]\n                                              }\n                                            }\n                                          ],\n                                          null,\n                                          true\n                                        )\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked:\n                                            _vm.config.daemonApi.discovery\n                                              .returnVerbose,\n                                          label: _vm.$t(\n                                            \"controllerConfig.form.daemonApi.discovery.verbose\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            return _vm.$set(\n                                              _vm.config.daemonApi.discovery,\n                                              \"returnVerbose\",\n                                              $event\n                                            )\n                                          }\n                                        }\n                                      })\n                                    ],\n                                    1\n                                  )\n                                ],\n                                1\n                              ),\n                              _c(\"hr\"),\n                              _vm._v(\" \"),\n                              _c(\n                                \"CRow\",\n                                [\n                                  _c(\n                                    \"CCol\",\n                                    { attrs: { md: \"6\" } },\n                                    [\n                                      _c(\"h3\", [\n                                        _vm._v(\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"controllerConfig.form.factoryReset.title\"\n                                            )\n                                          )\n                                        )\n                                      ]),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked:\n                                            _vm.config.factoryReset.coordinator,\n                                          label: _vm.$t(\n                                            \"controllerConfig.form.factoryReset.coordinator\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            return _vm.$set(\n                                              _vm.config.factoryReset,\n                                              \"coordinator\",\n                                              $event\n                                            )\n                                          }\n                                        }\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked:\n                                            _vm.config.factoryReset.daemon,\n                                          label: _vm.$t(\n                                            \"controllerConfig.form.factoryReset.daemon\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            return _vm.$set(\n                                              _vm.config.factoryReset,\n                                              \"daemon\",\n                                              $event\n                                            )\n                                          }\n                                        }\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked:\n                                            _vm.config.factoryReset.network,\n                                          label: _vm.$t(\n                                            \"controllerConfig.form.factoryReset.network\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            return _vm.$set(\n                                              _vm.config.factoryReset,\n                                              \"network\",\n                                              $event\n                                            )\n                                          }\n                                        }\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"CInputCheckbox\", {\n                                        attrs: {\n                                          checked:\n                                            _vm.config.factoryReset.webapp,\n                                          label: _vm.$t(\n                                            \"controllerConfig.form.factoryReset.webapp\"\n                                          )\n                                        },\n                                        on: {\n                                          \"update:checked\": function($event) {\n                                            return _vm.$set(\n                                              _vm.config.factoryReset,\n                                              \"webapp\",\n                                              $event\n                                            )\n                                          }\n                                        }\n                                      })\n                                    ],\n                                    1\n                                  )\n                                ],\n                                1\n                              ),\n                              _vm._v(\" \"),\n                              _c(\n                                \"CButton\",\n                                {\n                                  attrs: {\n                                    color: \"primary\",\n                                    type: \"submit\",\n                                    disabled: invalid\n                                  }\n                                },\n                                [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t\\t\\t\" +\n                                      _vm._s(_vm.$t(\"forms.save\")) +\n                                      \"\\n\\t\\t\\t\\t\"\n                                  )\n                                ]\n                              )\n                            ],\n                            1\n                          )\n                        ]\n                      }\n                    }\n                  ],\n                  null,\n                  false,\n                  446347274\n                )\n              })\n            : _vm._e()\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<div>\n\t\t<CCard body-wrapper>\n\t\t\t<ValidationObserver v-if='config !== null' v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='processSubmit'>\n\t\t\t\t\t<CRow>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<h3>{{ $t(\"controllerConfig.form.wsServers.title\") }}</h3>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='required|ws_addr'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\trequired: \"controllerConfig.form.messages.missing.ws_api\",\n\t\t\t\t\t\t\t\t\tws_addr: \"controllerConfig.form.messages.invalid.ws_format\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.wsServers.api'\n\t\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.wsServers.api\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='required|ws_addr'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\trequired: \"controllerConfig.form.messages.missing.ws_monitor\",\n\t\t\t\t\t\t\t\t\tws_addr: \"controllerConfig.form.messages.invalid.ws_format\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.wsServers.monitor'\n\t\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.wsServers.monitor\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<h3>{{ $t(\"controllerConfig.form.logger.title\") }}</h3>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t\t:custom-messages='{required: \"controllerConfig.form.messages.missing.l_file\"}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model='config.logger.filePath'\n\t\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.logger.filePath\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\trequired: \"controllerConfig.form.messages.missing.l_severity\",\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CSelect\n\t\t\t\t\t\t\t\t\t:value.sync='config.logger.severity'\n\t\t\t\t\t\t\t\t\t:options='[\n\t\t\t\t\t\t\t\t\t\t{value: \"trace\", label: \"Trace\"},\n\t\t\t\t\t\t\t\t\t\t{value: \"debug\", label: \"Debug\"},\n\t\t\t\t\t\t\t\t\t\t{value: \"info\", label: \"Info\"},\n\t\t\t\t\t\t\t\t\t\t{value: \"warning\", label: \"Warning\"},\n\t\t\t\t\t\t\t\t\t\t{value: \"error\", label: \"Error\"}\n\t\t\t\t\t\t\t\t\t]'\n\t\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.logger.severity\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t:placeholder='$t(\"controllerConfig.form.messages.missing.l_severity\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t</CRow><hr>\n\t\t\t\t\t<CRow>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<h3>{{ $t(\"controllerConfig.form.resetButton.title\") }}</h3>\n\t\t\t\t\t\t\t<CInputCheckbox \n\t\t\t\t\t\t\t\t:checked.sync='apiCallSetCustom'\n\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.resetButton.setCustom\")'\n\t\t\t\t\t\t\t\t@change='updateApiCall'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<CSelect \n\t\t\t\t\t\t\t\tv-if='!apiCallSetCustom'\n\t\t\t\t\t\t\t\t:value.sync='config.resetButton.api'\n\t\t\t\t\t\t\t\t:options='[\n\t\t\t\t\t\t\t\t\t{value: \"autoNetwork\", label: \"AutoNetwork\"},\n\t\t\t\t\t\t\t\t\t{value: \"discovery\", label: \"Discovery\"},\n\t\t\t\t\t\t\t\t]'\n\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.resetButton.api\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<ValidationProvider \n\t\t\t\t\t\t\t\tv-else\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t\t:custom-messages='{required: \"controllerConfig.form.messages.missing.rb_custom\"}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput \n\t\t\t\t\t\t\t\t\tv-model='config.resetButton.api'\n\t\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.resetButton.custom\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='integer|required'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"controllerConfig.form.messages.invalid.rb_pin\",\n\t\t\t\t\t\t\t\t\trequired: \"controllerConfig.form.messages.missing.rb_pin\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.resetButton.button'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.resetButton.pin\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<h3>{{ $t(\"controllerConfig.form.statusLed.title\") }}</h3>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='integer|required'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"controllerConfig.form.messages.invalid.gpio\",\n\t\t\t\t\t\t\t\t\trequired: \"controllerConfig.form.messages.missing.sl_green\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.statusLed.greenLed'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.statusLed.green\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='integer|required'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"controllerConfig.form.messages.invalid.gpio\",\n\t\t\t\t\t\t\t\t\trequired: \"controllerConfig.form.messages.missing.sl_red\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.statusLed.redLed'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.statusLed.red\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t</CRow><hr>\n\t\t\t\t\t<CRow>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\t\t{{ $t(\"controllerConfig.form.daemonApi.autoNetwork.title\") }}\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='required|integer|between:0,3'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.actionRetries\",\n\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.actionRetries\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.daemonApi.autoNetwork.actionRetries'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\tmax='3'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.actionRetries\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='config.daemonApi.autoNetwork.discoveryBeforeStart'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.discoveryBeforeStart\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='integer|required|between:0,7'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.discovery.txPower\",\n\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.discovery.txPower\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.daemonApi.autoNetwork.discoveryTxPower'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\tmax='7'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.discoveryTxPower\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='config.daemonApi.autoNetwork.skipDiscoveryEachWave'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.skipDiscoveryEachWave\")'\n\t\t\t\t\t\t\t/><hr>\n\t\t\t\t\t\t\t<h4>\n\t\t\t\t\t\t\t\t{{ $t(\"iqrfnet.networkManager.autoNetwork.form.stopConditions\") }}\n\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='config.daemonApi.autoNetwork.stopConditions.abortOnTooManyNodesFound'\n\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.abortOnTooManyNodesFound\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='integer|required|between:1,127'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.emptyWaves\",\n\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.emptyWaves\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.daemonApi.autoNetwork.stopConditions.emptyWaves'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\t\t\tmax='127'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.emptyWaves\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='integer|required|between:1,127'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.autoNetwork.waves\",\n\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.autoNetwork.waves\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.daemonApi.autoNetwork.stopConditions.waves'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\t\t\tmax='127'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.autoNetwork.form.waves\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider><hr>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='config.daemonApi.autoNetwork.returnVerbose'\n\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.daemonApi.autoNetwork.verbose\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\t\t{{ $t(\"controllerConfig.form.daemonApi.discovery.title\") }}\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='integer|required|between:0,239'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.discovery.maxAddr\",\n\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.discovery.maxAddr\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.daemonApi.discovery.maxAddr'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.discovery.form.maxAddr\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\t\trules='integer|required|between:0,7'\n\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.networkManager.messages.invalid.integer\",\n\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.networkManager.messages.discovery.txPower\",\n\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.networkManager.messages.discovery.txPower\"\n\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\tv-model.number='config.daemonApi.discovery.txPower'\n\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\tmax='7'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.networkManager.discovery.form.txPower\")'\n\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='config.daemonApi.discovery.returnVerbose'\n\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.daemonApi.discovery.verbose\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t</CRow><hr>\n\t\t\t\t\t<CRow>\n\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t<h3>{{ $t(\"controllerConfig.form.factoryReset.title\") }}</h3>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='config.factoryReset.coordinator'\n\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.factoryReset.coordinator\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='config.factoryReset.daemon'\n\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.factoryReset.daemon\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='config.factoryReset.network'\n\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.factoryReset.network\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t:checked.sync='config.factoryReset.webapp'\n\t\t\t\t\t\t\t\t:label='$t(\"controllerConfig.form.factoryReset.webapp\")'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</CCol>\n\t\t\t\t\t</CRow>\n\t\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCard>\n\t</div>\n</template>\n\n<script>\nimport {CButton, CCard , CForm, CInput, CInputCheckbox, CSelect} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {between, integer, required} from 'vee-validate/dist/rules';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport FeatureConfigService from '../../services/FeatureConfigService';\n\nexport default {\n\tname: 'ControllerConfig',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tCSelect,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tname: 'controller',\n\t\t\tapiCallCustom: null,\n\t\t\tapiCallSetCustom: false,\n\t\t\tconfig: null,\n\t\t\tpreviousApiCall: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\textend('ws_addr', (addr) => {\n\t\t\tconst regex = RegExp('^ws:\\\\/\\\\/.+:([1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-9][0-9]{3}|[1-4][0-9][0-1][0-5][0-1])$');\n\t\t\treturn regex.test(addr);\n\t\t});\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tFeatureConfigService.getConfig(this.name)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.config = response.data;\n\t\t\t\t\tif (this.config.resetButton.api !== ('autoNetwork' || 'discovery')) {\n\t\t\t\t\t\tthis.apiCallCustom = this.config.resetButton.api;\n\t\t\t\t\t\tthis.apiCallSetCustom = true;\n\t\t\t\t\t\tthis.previousApiCall = 'autoNetwork';\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t\tprocessSubmit() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tFeatureConfigService.saveConfig(this.name, this.config)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(this.$t('forms.messages.saveSuccess').toString());\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t\tupdateApiCall() {\n\t\t\tif (this.apiCallSetCustom) {\n\t\t\t\tthis.previousApiCall = this.config.resetButton.api;\n\t\t\t\tthis.config.resetButton.api = this.apiCallCustom;\n\t\t\t} else {\n\t\t\t\tthis.config.resetButton.api = this.previousApiCall;\n\t\t\t}\n\t\t},\n\t},\n\tbeforeRouteEnter(to, from, next) {\n\t\tnext(vm => {\n\t\t\tif (!vm.$store.getters['features/isEnabled']('iqrfGatewayController')) {\n\t\t\t\tvm.$toast.error(\n\t\t\t\t\tvm.$t('controllerConfig.messages.disabled').toString()\n\t\t\t\t);\n\t\t\t\tvm.$router.push(from.path);\n\t\t\t}\n\t\t});\n\t},\n\tmetaInfo: {\n\t\ttitle: 'controllerConfig.description',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ControllerConfig.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ControllerConfig.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ControllerConfig.vue?vue&type=template&id=0ff85c28&\"\nimport script from \"./ControllerConfig.vue?vue&type=script&lang=js&\"\nexport * from \"./ControllerConfig.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('0ff85c28')) {\n      api.createRecord('0ff85c28', component.options)\n    } else {\n      api.reload('0ff85c28', component.options)\n    }\n    module.hot.accept(\"./ControllerConfig.vue?vue&type=template&id=0ff85c28&\", function () {\n      api.rerender('0ff85c28', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/ControllerConfig.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _vm.config !== null\n        ? _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u(\n              [\n                {\n                  key: \"default\",\n                  fn: function(ref) {\n                    var invalid = ref.invalid\n                    return [\n                      _c(\n                        \"CForm\",\n                        {\n                          on: {\n                            submit: function($event) {\n                              $event.preventDefault()\n                              return _vm.processSubmit($event)\n                            }\n                          }\n                        },\n                        [\n                          _c(\"ValidationProvider\", {\n                            attrs: {\n                              rules: \"addr|required\",\n                              \"custom-messages\": {\n                                addr:\n                                  \"config.mender.form.messages.invalid.server\",\n                                required:\n                                  \"config.mender.form.messages.missing.server\"\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"default\",\n                                  fn: function(ref) {\n                                    var errors = ref.errors\n                                    var touched = ref.touched\n                                    var valid = ref.valid\n                                    return [\n                                      _c(\"CInput\", {\n                                        attrs: {\n                                          label: _vm.$t(\n                                            \"config.mender.form.server\"\n                                          ),\n                                          \"is-valid\": touched ? valid : null,\n                                          \"invalid-feedback\": _vm.$t(errors[0])\n                                        },\n                                        model: {\n                                          value: _vm.config.ServerURL,\n                                          callback: function($$v) {\n                                            _vm.$set(\n                                              _vm.config,\n                                              \"ServerURL\",\n                                              $$v\n                                            )\n                                          },\n                                          expression: \"config.ServerURL\"\n                                        }\n                                      })\n                                    ]\n                                  }\n                                }\n                              ],\n                              null,\n                              true\n                            )\n                          }),\n                          _vm._v(\" \"),\n                          _c(\"ValidationProvider\", {\n                            attrs: {\n                              rules: \"required\",\n                              \"custom-messages\": {\n                                required:\n                                  \"config.mender.form.messages.missing.tenantToken\"\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"default\",\n                                  fn: function(ref) {\n                                    var errors = ref.errors\n                                    var touched = ref.touched\n                                    var valid = ref.valid\n                                    return [\n                                      _c(\"CInput\", {\n                                        attrs: {\n                                          label: _vm.$t(\n                                            \"config.mender.form.tenantToken\"\n                                          ),\n                                          \"is-valid\": touched ? valid : null,\n                                          \"invalid-feedback\": _vm.$t(errors[0])\n                                        },\n                                        model: {\n                                          value: _vm.config.TenantToken,\n                                          callback: function($$v) {\n                                            _vm.$set(\n                                              _vm.config,\n                                              \"TenantToken\",\n                                              $$v\n                                            )\n                                          },\n                                          expression: \"config.TenantToken\"\n                                        }\n                                      })\n                                    ]\n                                  }\n                                }\n                              ],\n                              null,\n                              true\n                            )\n                          }),\n                          _vm._v(\" \"),\n                          _c(\"ValidationProvider\", {\n                            attrs: {\n                              rules: \"min:0|required|integer\",\n                              \"custom-messages\": {\n                                integer: \"forms.messages.integer\",\n                                min:\n                                  \"config.mender.form.messages.inventoryPollInterval\",\n                                required:\n                                  \"config.mender.form.messages.inventoryPollInterval\"\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"default\",\n                                  fn: function(ref) {\n                                    var errors = ref.errors\n                                    var touched = ref.touched\n                                    var valid = ref.valid\n                                    return [\n                                      _c(\"CInput\", {\n                                        attrs: {\n                                          type: \"number\",\n                                          min: \"0\",\n                                          label: _vm.$t(\n                                            \"config.mender.form.inventoryPollInterval\"\n                                          ),\n                                          \"is-valid\": touched ? valid : null,\n                                          \"invalid-feedback\": _vm.$t(errors[0])\n                                        },\n                                        model: {\n                                          value:\n                                            _vm.config\n                                              .InventoryPollIntervalSeconds,\n                                          callback: function($$v) {\n                                            _vm.$set(\n                                              _vm.config,\n                                              \"InventoryPollIntervalSeconds\",\n                                              _vm._n($$v)\n                                            )\n                                          },\n                                          expression:\n                                            \"config.InventoryPollIntervalSeconds\"\n                                        }\n                                      })\n                                    ]\n                                  }\n                                }\n                              ],\n                              null,\n                              true\n                            )\n                          }),\n                          _vm._v(\" \"),\n                          _c(\"ValidationProvider\", {\n                            attrs: {\n                              rules: \"min:0|required|integer\",\n                              \"custom-messages\": {\n                                integer: \"forms.messages.integer\",\n                                min:\n                                  \"config.mender.form.messages.retryPollInterval\",\n                                required:\n                                  \"config.mender.form.messages.retryPollInterval\"\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"default\",\n                                  fn: function(ref) {\n                                    var errors = ref.errors\n                                    var touched = ref.touched\n                                    var valid = ref.valid\n                                    return [\n                                      _c(\"CInput\", {\n                                        attrs: {\n                                          type: \"number\",\n                                          min: \"0\",\n                                          label: _vm.$t(\n                                            \"config.mender.form.retryPollInterval\"\n                                          ),\n                                          \"is-valid\": touched ? valid : null,\n                                          \"invalid-feedback\": _vm.$t(errors[0])\n                                        },\n                                        model: {\n                                          value:\n                                            _vm.config.RetryPollIntervalSeconds,\n                                          callback: function($$v) {\n                                            _vm.$set(\n                                              _vm.config,\n                                              \"RetryPollIntervalSeconds\",\n                                              _vm._n($$v)\n                                            )\n                                          },\n                                          expression:\n                                            \"config.RetryPollIntervalSeconds\"\n                                        }\n                                      })\n                                    ]\n                                  }\n                                }\n                              ],\n                              null,\n                              true\n                            )\n                          }),\n                          _vm._v(\" \"),\n                          _c(\"ValidationProvider\", {\n                            attrs: {\n                              rules: \"min:0|required|integer\",\n                              \"custom-messages\": {\n                                integer: \"forms.messages.integer\",\n                                min:\n                                  \"config.mender.form.messages.updatePollInterval\",\n                                required:\n                                  \"config.mender.form.messages.updatePollInterval\"\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"default\",\n                                  fn: function(ref) {\n                                    var errors = ref.errors\n                                    var touched = ref.touched\n                                    var valid = ref.valid\n                                    return [\n                                      _c(\"CInput\", {\n                                        attrs: {\n                                          type: \"number\",\n                                          min: \"0\",\n                                          label: _vm.$t(\n                                            \"config.mender.form.updatePollInterval\"\n                                          ),\n                                          \"is-valid\": touched ? valid : null,\n                                          \"invalid-feedback\": _vm.$t(errors[0])\n                                        },\n                                        model: {\n                                          value:\n                                            _vm.config\n                                              .UpdatePollIntervalSeconds,\n                                          callback: function($$v) {\n                                            _vm.$set(\n                                              _vm.config,\n                                              \"UpdatePollIntervalSeconds\",\n                                              _vm._n($$v)\n                                            )\n                                          },\n                                          expression:\n                                            \"config.UpdatePollIntervalSeconds\"\n                                        }\n                                      })\n                                    ]\n                                  }\n                                }\n                              ],\n                              null,\n                              true\n                            )\n                          }),\n                          _vm._v(\" \"),\n                          _c(\n                            \"CButton\",\n                            {\n                              attrs: {\n                                color: \"primary\",\n                                type: \"submit\",\n                                disabled: invalid\n                              }\n                            },\n                            [\n                              _vm._v(\n                                \"\\n\\t\\t\\t\\t\" +\n                                  _vm._s(_vm.$t(\"forms.save\")) +\n                                  \"\\n\\t\\t\\t\"\n                              )\n                            ]\n                          )\n                        ],\n                        1\n                      )\n                    ]\n                  }\n                }\n              ],\n              null,\n              false,\n              366184783\n            )\n          })\n        : _vm._e()\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<ValidationObserver v-if='config !== null' v-slot='{ invalid }'>\n\t\t\t<CForm @submit.prevent='processSubmit'>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='addr|required'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\taddr: \"config.mender.form.messages.invalid.server\",\n\t\t\t\t\t\trequired: \"config.mender.form.messages.missing.server\"\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='config.ServerURL'\n\t\t\t\t\t\t:label='$t(\"config.mender.form.server\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\trequired: \"config.mender.form.messages.missing.tenantToken\"\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='config.TenantToken'\n\t\t\t\t\t\t:label='$t(\"config.mender.form.tenantToken\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='min:0|required|integer'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\tmin: \"config.mender.form.messages.inventoryPollInterval\",\n\t\t\t\t\t\trequired: \"config.mender.form.messages.inventoryPollInterval\"\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model.number='config.InventoryPollIntervalSeconds'\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t:label='$t(\"config.mender.form.inventoryPollInterval\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='min:0|required|integer'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\tmin: \"config.mender.form.messages.retryPollInterval\",\n\t\t\t\t\t\trequired: \"config.mender.form.messages.retryPollInterval\"\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model.number='config.RetryPollIntervalSeconds'\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t:label='$t(\"config.mender.form.retryPollInterval\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid}'\n\t\t\t\t\trules='min:0|required|integer'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\tmin: \"config.mender.form.messages.updatePollInterval\",\n\t\t\t\t\t\trequired: \"config.mender.form.messages.updatePollInterval\"\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model.number='config.UpdatePollIntervalSeconds'\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t:label='$t(\"config.mender.form.updatePollInterval\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t</CButton>\n\t\t\t</CForm>\n\t\t</ValidationObserver>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CForm, CInput} from '@coreui/vue/src';\nimport {integer, min_value, required} from 'vee-validate/dist/rules';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport FeatureConfigService from '../../services/FeatureConfigService';\n\nexport default {\n\tname: 'MenderConfig',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tname: 'mender',\n\t\t\tconfig: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\textend('min', min_value);\n\t\textend('addr', (addr) => {\n\t\t\tconst regex = RegExp('(http|https):\\\\/\\\\/.*');\n\t\t\treturn regex.test(addr);\n\t\t});\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tFeatureConfigService.getConfig(this.name)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.config = response.data;\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t\tprocessSubmit() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tFeatureConfigService.saveConfig(this.name, this.config)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(this.$t('forms.messages.saveSuccess').toString());\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t},\n\tbeforeRouteEnter(to, from, next) {\n\t\tnext(vm => {\n\t\t\tif (!vm.$store.getters['features/isEnabled']('pixla')) {\n\t\t\t\tvm.$toast.error(\n\t\t\t\t\tvm.$t('config.mender.messages.disabled').toString()\n\t\t\t\t);\n\t\t\t\tvm.$router.push(from.path);\n\t\t\t}\n\t\t});\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.mender.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MenderConfig.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MenderConfig.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./MenderConfig.vue?vue&type=template&id=d23b6572&\"\nimport script from \"./MenderConfig.vue?vue&type=script&lang=js&\"\nexport * from \"./MenderConfig.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('d23b6572')) {\n      api.createRecord('d23b6572', component.options)\n    } else {\n      api.reload('d23b6572', component.options)\n    }\n    module.hot.accept(\"./MenderConfig.vue?vue&type=template&id=d23b6572&\", function () {\n      api.rerender('d23b6572', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/MenderConfig.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      {\n                        on: {\n                          submit: function($event) {\n                            $event.preventDefault()\n                            return _vm.saveConfig($event)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"config.iqrfInfo.messages.instance\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"config.iqrfInfo.form.instance\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.instance,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"instance\",\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"configuration.instance\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.configuration.enumAtStartUp,\n                            label: _vm.$t(\"config.iqrfInfo.form.enumAtStartUp\")\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              return _vm.$set(\n                                _vm.configuration,\n                                \"enumAtStartUp\",\n                                $event\n                              )\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: _vm.configuration.enumAtStartUp\n                              ? \"integer|min:0|required\"\n                              : \"\",\n                            \"custom-messages\": {\n                              required: \"config.iqrfInfo.messages.enumPeriod\",\n                              min: \"config.iqrfInfo.messages.enumPeriod\",\n                              integer: \"forms.messages.integer\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        label: _vm.$t(\n                                          \"config.iqrfInfo.form.enumPeriod\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.enumPeriod,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"enumPeriod\",\n                                            _vm._n($$v)\n                                          )\n                                        },\n                                        expression: \"configuration.enumPeriod\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.configuration.enumUniformDpaVer,\n                            label: _vm.$t(\n                              \"config.iqrfInfo.form.enumUniformDpaVer\"\n                            )\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              return _vm.$set(\n                                _vm.configuration,\n                                \"enumUniformDpaVer\",\n                                $event\n                              )\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              type: \"submit\",\n                              color: \"primary\",\n                              disabled: invalid\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='saveConfig'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{required: \"config.iqrfInfo.messages.instance\"}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='configuration.instance'\n\t\t\t\t\t\t\t:label='$t(\"config.iqrfInfo.form.instance\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='configuration.enumAtStartUp'\n\t\t\t\t\t\t:label='$t(\"config.iqrfInfo.form.enumAtStartUp\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t:rules='configuration.enumAtStartUp ? \"integer|min:0|required\": \"\"'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"config.iqrfInfo.messages.enumPeriod\",\n\t\t\t\t\t\t\tmin: \"config.iqrfInfo.messages.enumPeriod\",\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='configuration.enumPeriod'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t:label='$t(\"config.iqrfInfo.form.enumPeriod\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='configuration.enumUniformDpaVer'\n\t\t\t\t\t\t:label='$t(\"config.iqrfInfo.form.enumUniformDpaVer\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInput, CInputCheckbox} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {integer, min_value, required} from 'vee-validate/dist/rules';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\n\nexport default {\n\tname: 'IqrfInfo',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'iqrf::IqrfInfo',\n\t\t\tinstance: null,\n\t\t\tconfiguration: {\n\t\t\t\tinstance: '',\n\t\t\t\tenumAtStartUp: false,\n\t\t\t\tenumPeriod: 0,\n\t\t\t\tenumUniformDpaVer: false,\n\t\t\t},\n\t\t};\n\t},\n\tcreated() {\n\t\textend('integer', integer);\n\t\textend('min', min_value);\n\t\textend('required', required);\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getComponent(this.componentName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (response.data.instances.length > 0) {\n\t\t\t\t\t\tthis.configuration = response.data.instances[0];\n\t\t\t\t\t\tthis.instance = this.configuration.instance;\n\t\t\t\t\t}\t\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t\tsaveConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.instance !== null) {\n\t\t\t\tDaemonConfigurationService.updateInstance(this.componentName, this.instance, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t} else {\n\t\t\t\tDaemonConfigurationService.createInstance(this.componentName, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tthis.$toast.success(this.$t('config.success').toString());\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.iqrfInfo.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqrfInfo.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqrfInfo.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./IqrfInfo.vue?vue&type=template&id=b124b358&\"\nimport script from \"./IqrfInfo.vue?vue&type=script&lang=js&\"\nexport * from \"./IqrfInfo.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('b124b358')) {\n      api.createRecord('b124b358', component.options)\n    } else {\n      api.reload('b124b358', component.options)\n    }\n    module.hot.accept(\"./IqrfInfo.vue?vue&type=template&id=b124b358&\", function () {\n      api.rerender('b124b358', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/IqrfInfo.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      {\n                        on: {\n                          submit: function($event) {\n                            $event.preventDefault()\n                            return _vm.saveConfig($event)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"config.iqrfRepository.form.messages.instance\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"config.iqrfRepository.form.instance\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.instance,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"instance\",\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"configuration.instance\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"config.iqrfRepository.form.messages.urlRepo\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"config.iqrfRepository.form.urlRepo\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.urlRepo,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"urlRepo\",\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"configuration.urlRepo\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|min:0\",\n                            \"custom-messages\": {\n                              integer: \"forms.messages.integer\",\n                              required:\n                                \"config.iqrfRepository.form.messages.checkPeriod\",\n                              min:\n                                \"config.iqrfRepository.form.messages.checkPeriod\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        label: _vm.$t(\n                                          \"config.iqrfRepository.form.checkPeriod\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.checkPeriod,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"checkPeriod\",\n                                            _vm._n($$v)\n                                          )\n                                        },\n                                        expression: \"configuration.checkPeriod\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.configuration.downloadIfRepoCacheEmpty,\n                            label: _vm.$t(\n                              \"config.iqrfRepository.form.downloadIfEmpty\"\n                            )\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              return _vm.$set(\n                                _vm.configuration,\n                                \"downloadIfRepoCacheEmpty\",\n                                $event\n                              )\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              type: \"submit\",\n                              color: \"primary\",\n                              disabled: invalid\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='saveConfig'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{required: \"config.iqrfRepository.form.messages.instance\"}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='configuration.instance'\n\t\t\t\t\t\t\t:label='$t(\"config.iqrfRepository.form.instance\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{required: \"config.iqrfRepository.form.messages.urlRepo\"}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='configuration.urlRepo'\n\t\t\t\t\t\t\t:label='$t(\"config.iqrfRepository.form.urlRepo\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|min:0'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\trequired: \"config.iqrfRepository.form.messages.checkPeriod\",\n\t\t\t\t\t\t\tmin: \"config.iqrfRepository.form.messages.checkPeriod\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='configuration.checkPeriod'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t:label='$t(\"config.iqrfRepository.form.checkPeriod\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='configuration.downloadIfRepoCacheEmpty'\n\t\t\t\t\t\t:label='$t(\"config.iqrfRepository.form.downloadIfEmpty\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInput, CInputCheckbox} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {integer, min_value, required} from 'vee-validate/dist/rules';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport DaemonConfigurationService\tfrom '../../services/DaemonConfigurationService';\n\nexport default {\n\tname: 'IqrfRepository',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'iqrf::JsCache',\n\t\t\tinstance: null,\n\t\t\tconfiguration: {\n\t\t\t\tinstance: null,\n\t\t\t\turlRepo: null,\n\t\t\t\tcheckPeriod: 0,\n\t\t\t\tdownloadIfRepoCacheEmpty: true,\n\t\t\t},\n\t\t};\n\t},\n\tcreated() {\n\t\textend('integer', integer);\n\t\textend('min', min_value);\n\t\textend('required', required);\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getComponent(this.componentName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (response.data.instances.length > 0) {\n\t\t\t\t\t\tthis.configuration = response.data.instances[0];\n\t\t\t\t\t\tthis.instance = this.configuration.instance;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t\tsaveConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.instance !== null) {\n\t\t\t\tDaemonConfigurationService.updateInstance(this.componentName, this.instance, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t} else {\n\t\t\t\tDaemonConfigurationService.createInstance(this.componentName, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tthis.$toast.success(this.$t('config.success').toString());\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.iqrfRepository.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqrfRepository.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqrfRepository.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./IqrfRepository.vue?vue&type=template&id=3505a720&\"\nimport script from \"./IqrfRepository.vue?vue&type=script&lang=js&\"\nexport * from \"./IqrfRepository.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('3505a720')) {\n      api.createRecord('3505a720', component.options)\n    } else {\n      api.reload('3505a720', component.options)\n    }\n    module.hot.accept(\"./IqrfRepository.vue?vue&type=template&id=3505a720&\", function () {\n      api.rerender('3505a720', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/IqrfRepository.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        [\n          _c(\n            \"CCardBody\",\n            [\n              _c(\"ValidationObserver\", {\n                scopedSlots: _vm._u([\n                  {\n                    key: \"default\",\n                    fn: function(ref) {\n                      var invalid = ref.invalid\n                      return [\n                        _c(\n                          \"CForm\",\n                          {\n                            on: {\n                              submit: function($event) {\n                                $event.preventDefault()\n                                return _vm.saveConfig($event)\n                              }\n                            }\n                          },\n                          [\n                            _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"required\",\n                                \"custom-messages\": {\n                                  required:\n                                    \"config.iqrfCdc.form.messages.instance\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var touched = ref.touched\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CInput\", {\n                                          attrs: {\n                                            label: _vm.$t(\n                                              \"config.iqrfCdc.form.instance\"\n                                            ),\n                                            \"is-valid\": touched ? valid : null,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            )\n                                          },\n                                          model: {\n                                            value: _vm.configuration.instance,\n                                            callback: function($$v) {\n                                              _vm.$set(\n                                                _vm.configuration,\n                                                \"instance\",\n                                                $$v\n                                              )\n                                            },\n                                            expression: \"configuration.instance\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            }),\n                            _vm._v(\" \"),\n                            _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"required\",\n                                \"custom-messages\": {\n                                  required:\n                                    \"config.iqrfCdc.form.messages.interface\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var touched = ref.touched\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CInput\", {\n                                          attrs: {\n                                            label: _vm.$t(\n                                              \"config.iqrfCdc.form.interface\"\n                                            ),\n                                            \"is-valid\": touched ? valid : null,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            )\n                                          },\n                                          model: {\n                                            value:\n                                              _vm.configuration.IqrfInterface,\n                                            callback: function($$v) {\n                                              _vm.$set(\n                                                _vm.configuration,\n                                                \"IqrfInterface\",\n                                                $$v\n                                              )\n                                            },\n                                            expression:\n                                              \"configuration.IqrfInterface\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            }),\n                            _vm._v(\" \"),\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: {\n                                  type: \"submit\",\n                                  color: \"primary\",\n                                  disabled: invalid\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"forms.save\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\"\n                                )\n                              ]\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  }\n                ])\n              })\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CCard\",\n        [\n          _c(\"CCardHeader\", [\n            _vm._v(_vm._s(_vm.$t(\"config.iqrfCdc.mappings\")))\n          ]),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\"InterfacePorts\", {\n                attrs: { \"interface-type\": \"cdc\" },\n                on: { updatePort: _vm.updatePort }\n              })\n            ],\n            1\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.ports !== []\n    ? _c(\n        \"div\",\n        [\n          _c(\"h4\", [\n            _vm._v(_vm._s(_vm.$t(\"config.interfaceMapping.interfaces\")))\n          ]),\n          _vm._v(\" \"),\n          _c(\n            \"CButtonGroup\",\n            _vm._l(_vm.ports, function(port) {\n              return _c(\n                \"CButton\",\n                {\n                  key: port,\n                  attrs: { color: \"primary\" },\n                  on: {\n                    click: function($event) {\n                      return _vm.setPort(port)\n                    }\n                  }\n                },\n                [_vm._v(\"\\n\\t\\t\\t\" + _vm._s(port) + \"\\n\\t\\t\")]\n              )\n            }),\n            1\n          )\n        ],\n        1\n      )\n    : _vm._e()\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<div v-if='ports !== []'>\n\t\t<h4>{{ $t('config.interfaceMapping.interfaces') }}</h4>\n\t\t<CButtonGroup>\n\t\t\t<CButton\n\t\t\t\tv-for='port of ports'\n\t\t\t\t:key='port'\n\t\t\t\tcolor='primary'\n\t\t\t\t@click='setPort(port)'\n\t\t\t>\n\t\t\t\t{{ port }}\n\t\t\t</CButton>\n\t\t</CButtonGroup>\n\t</div>\n</template>\n\n<script>\nimport {CButton, CButtonGroup} from '@coreui/vue/src';\nimport IqrfService from '../../services/IqrfService';\n\nexport default {\n\tname: 'InterfacePorts',\n\tcomponents: {\n\t\tCButton,\n\t\tCButtonGroup,\n\t},\n\tprops: {\n\t\tinterfaceType: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tports: [],\n\t\t};\n\t},\n\tcreated() {\n\t\tIqrfService.getInterfacePorts(this.interfaceType)\n\t\t\t.then((ports) => (this.ports = ports))\n\t\t\t.catch(() => (this.ports = []));\n\t},\n\tmethods: {\n\t\tsetPort(port) {\n\t\t\tthis.$emit('updatePort', port);\n\t\t},\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./InterfacePorts.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./InterfacePorts.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./InterfacePorts.vue?vue&type=template&id=e1b25216&\"\nimport script from \"./InterfacePorts.vue?vue&type=script&lang=js&\"\nexport * from \"./InterfacePorts.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('e1b25216')) {\n      api.createRecord('e1b25216', component.options)\n    } else {\n      api.reload('e1b25216', component.options)\n    }\n    module.hot.accept(\"./InterfacePorts.vue?vue&type=template&id=e1b25216&\", function () {\n      api.rerender('e1b25216', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/Config/InterfacePorts.vue\"\nexport default component.exports","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqrfCdc.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqrfCdc.vue?vue&type=script&lang=js&\"","<template>\n\t<div>\n\t\t<CCard>\n\t\t\t<CCardBody>\n\t\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t\t<CForm @submit.prevent='saveConfig'>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t:custom-messages='{required: \"config.iqrfCdc.form.messages.instance\"}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model='configuration.instance'\n\t\t\t\t\t\t\t\t:label='$t(\"config.iqrfCdc.form.instance\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t:custom-messages='{required: \"config.iqrfCdc.form.messages.interface\"}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model='configuration.IqrfInterface'\n\t\t\t\t\t\t\t\t:label='$t(\"config.iqrfCdc.form.interface\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</CForm>\n\t\t\t\t</ValidationObserver>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t\t<CCard>\n\t\t\t<CCardHeader>{{ $t('config.iqrfCdc.mappings' ) }}</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<InterfacePorts interface-type='cdc' @updatePort='updatePort' />\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t</div>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {required} from 'vee-validate/dist/rules';\nimport InterfacePorts from '../../components/Config/InterfacePorts';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\n\nexport default {\n\tname: 'IqrfCdc',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tInterfacePorts,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'iqrf::IqrfCdc',\n\t\t\tconfiguration: {\n\t\t\t\tinstance: null,\n\t\t\t\tIqrfInterface: null,\n\t\t\t},\n\t\t\tinstance: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getComponent(this.componentName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (response.data.instances.length > 0) {\n\t\t\t\t\t\tthis.configuration = response.data.instances[0];\n\t\t\t\t\t\tthis.instance = this.configuration.instance;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t\tsaveConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.instance !== null) {\n\t\t\t\tDaemonConfigurationService.updateInstance(this.componentName, this.instance, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t} else {\n\t\t\t\tDaemonConfigurationService.createInstance(this.componentName, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tthis.$toast.success(this.$t('config.success').toString());\n\t\t},\n\t\tupdatePort(port) {\n\t\t\tthis.configuration.IqrfInterface = port;\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.iqrfCdc.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./IqrfCdc.vue?vue&type=template&id=d4bc7c28&\"\nimport script from \"./IqrfCdc.vue?vue&type=script&lang=js&\"\nexport * from \"./IqrfCdc.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('d4bc7c28')) {\n      api.createRecord('d4bc7c28', component.options)\n    } else {\n      api.reload('d4bc7c28', component.options)\n    }\n    module.hot.accept(\"./IqrfCdc.vue?vue&type=template&id=d4bc7c28&\", function () {\n      api.rerender('d4bc7c28', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/IqrfCdc.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      {\n                        on: {\n                          submit: function($event) {\n                            $event.preventDefault()\n                            return _vm.saveConfig($event)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"config.iqrfDpa.form.messages.instance\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"config.iqrfDpa.form.instance\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.instance,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"instance\",\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"configuration.instance\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|min:0\",\n                            \"custom-messages\": {\n                              integer: \"forms.messages.integer\",\n                              min:\n                                \"config.iqrfDpa.form.messages.DpaHandlerTimeout\",\n                              required:\n                                \"config.iqrfDpa.form.messages.DpaHandlerTimeout\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        label: _vm.$t(\n                                          \"config.iqrfDpa.form.DpaHandlerTimeout\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value:\n                                          _vm.configuration.DpaHandlerTimeout,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"DpaHandlerTimeout\",\n                                            _vm._n($$v)\n                                          )\n                                        },\n                                        expression:\n                                          \"configuration.DpaHandlerTimeout\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              type: \"submit\",\n                              color: \"primary\",\n                              disabled: invalid\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='saveConfig'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{required: \"config.iqrfDpa.form.messages.instance\"}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='configuration.instance'\n\t\t\t\t\t\t\t:label='$t(\"config.iqrfDpa.form.instance\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|min:0'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\tmin: \"config.iqrfDpa.form.messages.DpaHandlerTimeout\",\n\t\t\t\t\t\t\trequired: \"config.iqrfDpa.form.messages.DpaHandlerTimeout\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='configuration.DpaHandlerTimeout'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t:label='$t(\"config.iqrfDpa.form.DpaHandlerTimeout\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {integer, min_value, required} from 'vee-validate/dist/rules';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\n\nexport default {\n\tname: 'IqrfDpa',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'iqrf::IqrfDpa',\n\t\t\tconfiguration: {\n\t\t\t\tinstance: null,\n\t\t\t\tDpaHandlerTimeout: 500,\n\t\t\t},\n\t\t\tinstance: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('integer', integer);\n\t\textend('min', min_value);\n\t\textend('required', required);\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getComponent(this.componentName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (response.data.instances.length > 0) {\n\t\t\t\t\t\tthis.configuration = response.data.instances[0];\n\t\t\t\t\t\tthis.instance = this.configuration.instance;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t\tsaveConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.instance !== null) {\n\t\t\t\tDaemonConfigurationService.updateInstance(this.componentName, this.instance, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t} else {\n\t\t\t\tDaemonConfigurationService.createInstance(this.componentName, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tthis.$toast.success(this.$t('config.success').toString());\n\t\t}\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.iqrfDpa.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqrfDpa.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqrfDpa.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./IqrfDpa.vue?vue&type=template&id=423414c2&\"\nimport script from \"./IqrfDpa.vue?vue&type=script&lang=js&\"\nexport * from \"./IqrfDpa.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('423414c2')) {\n      api.createRecord('423414c2', component.options)\n    } else {\n      api.reload('423414c2', component.options)\n    }\n    module.hot.accept(\"./IqrfDpa.vue?vue&type=template&id=423414c2&\", function () {\n      api.rerender('423414c2', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/IqrfDpa.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        [\n          _c(\n            \"CCardBody\",\n            [\n              _c(\"ValidationObserver\", {\n                scopedSlots: _vm._u([\n                  {\n                    key: \"default\",\n                    fn: function(ref) {\n                      var invalid = ref.invalid\n                      return [\n                        _c(\n                          \"CForm\",\n                          {\n                            on: {\n                              submit: function($event) {\n                                $event.preventDefault()\n                                return _vm.saveConfig($event)\n                              }\n                            }\n                          },\n                          [\n                            _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"required\",\n                                \"custom-messages\": {\n                                  required:\n                                    \"config.iqrfSpi.form.messages.instance\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var touched = ref.touched\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CInput\", {\n                                          attrs: {\n                                            label: _vm.$t(\n                                              \"config.iqrfSpi.form.instance\"\n                                            ),\n                                            \"is-valid\": touched ? valid : null,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            )\n                                          },\n                                          model: {\n                                            value: _vm.configuration.instance,\n                                            callback: function($$v) {\n                                              _vm.$set(\n                                                _vm.configuration,\n                                                \"instance\",\n                                                $$v\n                                              )\n                                            },\n                                            expression: \"configuration.instance\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            }),\n                            _vm._v(\" \"),\n                            _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"required\",\n                                \"custom-messages\": {\n                                  required:\n                                    \"config.iqrfSpi.form.messages.interface\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var touched = ref.touched\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CInput\", {\n                                          attrs: {\n                                            label: _vm.$t(\n                                              \"config.iqrfSpi.form.IqrfInterface\"\n                                            ),\n                                            \"is-valid\": touched ? valid : null,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            )\n                                          },\n                                          model: {\n                                            value:\n                                              _vm.configuration.IqrfInterface,\n                                            callback: function($$v) {\n                                              _vm.$set(\n                                                _vm.configuration,\n                                                \"IqrfInterface\",\n                                                $$v\n                                              )\n                                            },\n                                            expression:\n                                              \"configuration.IqrfInterface\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            }),\n                            _vm._v(\" \"),\n                            _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"required|integer\",\n                                \"custom-messages\": {\n                                  integer:\n                                    \"config.iqrfSpi.form.messages.powerEnableGpioPin\",\n                                  required:\n                                    \"config.iqrfSpi.form.messages.powerEnableGpioPin\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var touched = ref.touched\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CInput\", {\n                                          attrs: {\n                                            label: _vm.$t(\n                                              \"config.iqrfSpi.form.powerEnableGpioPin\"\n                                            ),\n                                            \"is-valid\": touched ? valid : null,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            )\n                                          },\n                                          model: {\n                                            value:\n                                              _vm.configuration\n                                                .powerEnableGpioPin,\n                                            callback: function($$v) {\n                                              _vm.$set(\n                                                _vm.configuration,\n                                                \"powerEnableGpioPin\",\n                                                $$v\n                                              )\n                                            },\n                                            expression:\n                                              \"configuration.powerEnableGpioPin\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            }),\n                            _vm._v(\" \"),\n                            _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"required|integer\",\n                                \"custom-messages\": {\n                                  integer:\n                                    \"config.iqrfSpi.form.messages.busEnableGpioPin\",\n                                  required:\n                                    \"config.iqrfSpi.form.messages.busEnableGpioPin\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var touched = ref.touched\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CInput\", {\n                                          attrs: {\n                                            label: _vm.$t(\n                                              \"config.iqrfSpi.form.busEnableGpioPin\"\n                                            ),\n                                            \"is-valid\": touched ? valid : null,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            )\n                                          },\n                                          model: {\n                                            value:\n                                              _vm.configuration\n                                                .busEnableGpioPin,\n                                            callback: function($$v) {\n                                              _vm.$set(\n                                                _vm.configuration,\n                                                \"busEnableGpioPin\",\n                                                $$v\n                                              )\n                                            },\n                                            expression:\n                                              \"configuration.busEnableGpioPin\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            }),\n                            _vm._v(\" \"),\n                            _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"required|integer\",\n                                \"custom-messages\": {\n                                  integer:\n                                    \"config.iqrfSpi.form.messages.pgmSwitchGpioPin\",\n                                  required:\n                                    \"config.iqrfSpi.form.messages.pgmSwitchGpioPin\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var touched = ref.touched\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CInput\", {\n                                          attrs: {\n                                            label: _vm.$t(\n                                              \"config.iqrfSpi.form.pgmSwitchGpioPin\"\n                                            ),\n                                            \"is-valid\": touched ? valid : null,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            )\n                                          },\n                                          model: {\n                                            value:\n                                              _vm.configuration\n                                                .pgmSwitchGpioPin,\n                                            callback: function($$v) {\n                                              _vm.$set(\n                                                _vm.configuration,\n                                                \"pgmSwitchGpioPin\",\n                                                $$v\n                                              )\n                                            },\n                                            expression:\n                                              \"configuration.pgmSwitchGpioPin\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            }),\n                            _vm._v(\" \"),\n                            _c(\"CInputCheckbox\", {\n                              attrs: {\n                                checked: _vm.configuration.spiReset,\n                                label: _vm.$t(\"config.iqrfSpi.form.spiReset\")\n                              },\n                              on: {\n                                \"update:checked\": function($event) {\n                                  return _vm.$set(\n                                    _vm.configuration,\n                                    \"spiReset\",\n                                    $event\n                                  )\n                                }\n                              }\n                            }),\n                            _vm._v(\" \"),\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: {\n                                  type: \"submit\",\n                                  color: \"primary\",\n                                  disabled: invalid\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"forms.save\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\"\n                                )\n                              ]\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  }\n                ])\n              })\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CCard\",\n        [\n          _c(\"CCardHeader\", [\n            _vm._v(_vm._s(_vm.$t(\"config.iqrfSpi.mappings\")))\n          ]),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\n                \"CRow\",\n                [\n                  _c(\n                    \"CCol\",\n                    { attrs: { md: \"6\" } },\n                    [\n                      _c(\"InterfaceMappings\", {\n                        attrs: { \"interface-type\": \"spi\" },\n                        on: { updateMapping: _vm.updateMapping }\n                      })\n                    ],\n                    1\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"CCol\",\n                    { attrs: { md: \"6\" } },\n                    [\n                      _c(\"InterfacePorts\", {\n                        attrs: { \"interface-type\": \"spi\" },\n                        on: { updatePort: _vm.updatePort }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              )\n            ],\n            1\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\"h4\", [_vm._v(_vm._s(_vm.$t(\"config.interfaceMapping.boards\")))]),\n      _vm._v(\" \"),\n      _c(\n        \"CButtonGroup\",\n        _vm._l(Object.keys(_vm.mappings[_vm.interfaceType]), function(board) {\n          return _c(\n            \"CButton\",\n            {\n              key: board,\n              attrs: { color: \"primary\" },\n              on: {\n                click: function($event) {\n                  return _vm.setMapping(board)\n                }\n              }\n            },\n            [_vm._v(\"\\n\\t\\t\\t\" + _vm._s(board) + \"\\n\\t\\t\")]\n          )\n        }),\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./InterfaceMappings.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./InterfaceMappings.vue?vue&type=script&lang=js&\"","<template>\n\t<div>\n\t\t<h4>{{ $t('config.interfaceMapping.boards') }}</h4>\n\t\t<CButtonGroup>\n\t\t\t<CButton\n\t\t\t\tv-for='board in Object.keys(mappings[interfaceType])'\n\t\t\t\t:key='board'\n\t\t\t\tcolor='primary'\n\t\t\t\t@click='setMapping(board)'\n\t\t\t>\n\t\t\t\t{{ board }}\n\t\t\t</CButton>\n\t\t</CButtonGroup>\n\t</div>\n</template>\n\n<script>\nimport {CButton, CButtonGroup} from '@coreui/vue';\n\nexport default {\n\tname: 'InterfaceMappings',\n\tcomponents: {\n\t\tCButton,\n\t\tCButtonGroup,\n\t},\n\tprops: {\n\t\tinterfaceType: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tmappings: {\n\t\t\t\t'spi': require('../../../app/ConfigModule/json/SpiPins.json'),\n\t\t\t\t'uart': require('../../../app/ConfigModule/json/UartPins.json'),\n\t\t\t},\n\t\t};\n\t},\n\tmethods: {\n\t\tsetMapping(board) {\n\t\t\tconst mapping = this.mappings[this.interfaceType][board];\n\t\t\tthis.$emit('updateMapping', mapping);\n\t\t},\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./InterfaceMappings.vue?vue&type=template&id=548c6c52&\"\nimport script from \"./InterfaceMappings.vue?vue&type=script&lang=js&\"\nexport * from \"./InterfaceMappings.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('548c6c52')) {\n      api.createRecord('548c6c52', component.options)\n    } else {\n      api.reload('548c6c52', component.options)\n    }\n    module.hot.accept(\"./InterfaceMappings.vue?vue&type=template&id=548c6c52&\", function () {\n      api.rerender('548c6c52', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/Config/InterfaceMappings.vue\"\nexport default component.exports","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqrfSpi.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqrfSpi.vue?vue&type=script&lang=js&\"","<template>\n\t<div>\n\t\t<CCard>\n\t\t\t<CCardBody>\n\t\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t\t<CForm @submit.prevent='saveConfig'>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t:custom-messages='{required: \"config.iqrfSpi.form.messages.instance\"}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model='configuration.instance'\n\t\t\t\t\t\t\t\t:label='$t(\"config.iqrfSpi.form.instance\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t:custom-messages='{required: \"config.iqrfSpi.form.messages.interface\"}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model='configuration.IqrfInterface'\n\t\t\t\t\t\t\t\t:label='$t(\"config.iqrfSpi.form.IqrfInterface\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='required|integer'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tinteger: \"config.iqrfSpi.form.messages.powerEnableGpioPin\",\n\t\t\t\t\t\t\t\trequired: \"config.iqrfSpi.form.messages.powerEnableGpioPin\",\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model='configuration.powerEnableGpioPin'\n\t\t\t\t\t\t\t\t:label='$t(\"config.iqrfSpi.form.powerEnableGpioPin\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='required|integer'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tinteger: \"config.iqrfSpi.form.messages.busEnableGpioPin\",\n\t\t\t\t\t\t\t\trequired: \"config.iqrfSpi.form.messages.busEnableGpioPin\",\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model='configuration.busEnableGpioPin'\n\t\t\t\t\t\t\t\t:label='$t(\"config.iqrfSpi.form.busEnableGpioPin\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='required|integer'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tinteger: \"config.iqrfSpi.form.messages.pgmSwitchGpioPin\",\n\t\t\t\t\t\t\t\trequired: \"config.iqrfSpi.form.messages.pgmSwitchGpioPin\",\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model='configuration.pgmSwitchGpioPin'\n\t\t\t\t\t\t\t\t:label='$t(\"config.iqrfSpi.form.pgmSwitchGpioPin\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t:checked.sync='configuration.spiReset'\n\t\t\t\t\t\t\t:label='$t(\"config.iqrfSpi.form.spiReset\")'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</CForm>\n\t\t\t\t</ValidationObserver>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t\t<CCard>\n\t\t\t<CCardHeader>{{ $t('config.iqrfSpi.mappings' ) }}</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<CRow>\n\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t<InterfaceMappings interface-type='spi' @updateMapping='updateMapping' />\n\t\t\t\t\t</CCol>\n\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t<InterfacePorts interface-type='spi' @updatePort='updatePort' />\n\t\t\t\t\t</CCol>\n\t\t\t\t</CRow>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t</div>\n</template>\n\n<script>\nimport {\n\tCButton,\n\tCCard,\n\tCCardBody,\n\tCCardHeader,\n\tCCol,\n\tCForm,\n\tCInput,\n\tCInputCheckbox,\n\tCRow\n} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {integer, required} from 'vee-validate/dist/rules';\nimport InterfaceMappings from '../../components/Config/InterfaceMappings';\nimport InterfacePorts from '../../components/Config/InterfacePorts';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\n\nexport default {\n\tname: 'IqrfSpi',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCCol,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tCRow,\n\t\tInterfaceMappings,\n\t\tInterfacePorts,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'iqrf::IqrfSpi',\n\t\t\tconfiguration: {\n\t\t\t\tinstance: null,\n\t\t\t\tIqrfInterface: null,\n\t\t\t\tpowerEnableGpioPin: null,\n\t\t\t\tbusEnableGpioPin: null,\n\t\t\t\tpgmSwitchGpioPin: null,\n\t\t\t\tspiReset: null,\n\t\t\t},\n\t\t\tinstance: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getComponent(this.componentName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (response.data.instances.length > 0) {\n\t\t\t\t\t\tthis.configuration = response.data.instances[0];\n\t\t\t\t\t\tthis.instance = this.configuration.instance;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t\tsaveConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.instance !== null) {\n\t\t\t\tDaemonConfigurationService.updateInstance(this.componentName, this.instance, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t} else {\n\t\t\t\tDaemonConfigurationService.createInstance(this.componentName, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tthis.$toast.success(this.$t('config.success').toString());\n\t\t},\n\t\tupdateMapping(mapping) {\n\t\t\tObject.assign(this.configuration, mapping);\n\t\t},\n\t\tupdatePort(port) {\n\t\t\tthis.configuration.IqrfInterface = port;\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.iqrfSpi.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./IqrfSpi.vue?vue&type=template&id=0e57ab14&\"\nimport script from \"./IqrfSpi.vue?vue&type=script&lang=js&\"\nexport * from \"./IqrfSpi.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('0e57ab14')) {\n      api.createRecord('0e57ab14', component.options)\n    } else {\n      api.reload('0e57ab14', component.options)\n    }\n    module.hot.accept(\"./IqrfSpi.vue?vue&type=template&id=0e57ab14&\", function () {\n      api.rerender('0e57ab14', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/IqrfSpi.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        [\n          _c(\n            \"CCardBody\",\n            [\n              _c(\"ValidationObserver\", {\n                scopedSlots: _vm._u([\n                  {\n                    key: \"default\",\n                    fn: function(ref) {\n                      var invalid = ref.invalid\n                      return [\n                        _c(\n                          \"CForm\",\n                          {\n                            on: {\n                              submit: function($event) {\n                                $event.preventDefault()\n                                return _vm.saveConfig($event)\n                              }\n                            }\n                          },\n                          [\n                            _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"required\",\n                                \"custom-messages\": {\n                                  required:\n                                    \"config.iqrfUart.form.messages.instance\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var touched = ref.touched\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CInput\", {\n                                          attrs: {\n                                            label: _vm.$t(\n                                              \"config.iqrfUart.form.instance\"\n                                            ),\n                                            \"is-valid\": touched ? valid : null,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            )\n                                          },\n                                          model: {\n                                            value: _vm.configuration.instance,\n                                            callback: function($$v) {\n                                              _vm.$set(\n                                                _vm.configuration,\n                                                \"instance\",\n                                                $$v\n                                              )\n                                            },\n                                            expression: \"configuration.instance\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            }),\n                            _vm._v(\" \"),\n                            _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"required\",\n                                \"custom-messages\": {\n                                  required:\n                                    \"config.iqrfUart.form.messages.interface\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var touched = ref.touched\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CInput\", {\n                                          attrs: {\n                                            label: _vm.$t(\n                                              \"config.iqrfUart.form.IqrfInterface\"\n                                            ),\n                                            \"is-valid\": touched ? valid : null,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            )\n                                          },\n                                          model: {\n                                            value:\n                                              _vm.configuration.IqrfInterface,\n                                            callback: function($$v) {\n                                              _vm.$set(\n                                                _vm.configuration,\n                                                \"IqrfInterface\",\n                                                $$v\n                                              )\n                                            },\n                                            expression:\n                                              \"configuration.IqrfInterface\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            }),\n                            _vm._v(\" \"),\n                            _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"required\",\n                                \"custom-messages\": {\n                                  required:\n                                    \"config.iqrfUart.form.messages.baudRate\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var valid = ref.valid\n                                      var touched = ref.touched\n                                      var errors = ref.errors\n                                      return [\n                                        _c(\"CSelect\", {\n                                          attrs: {\n                                            value: _vm.configuration.baudRate,\n                                            label: _vm.$t(\n                                              \"config.iqrfUart.form.baudRate\"\n                                            ),\n                                            \"is-valid\": touched ? valid : null,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            ),\n                                            placeholder: _vm.$t(\n                                              \"config.iqrfUart.form.messages.baudRate\"\n                                            ),\n                                            options: _vm.baudRates\n                                          },\n                                          on: {\n                                            \"update:value\": function($event) {\n                                              return _vm.$set(\n                                                _vm.configuration,\n                                                \"baudRate\",\n                                                $event\n                                              )\n                                            }\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            }),\n                            _vm._v(\" \"),\n                            _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"required|integer\",\n                                \"custom-messages\": {\n                                  integer:\n                                    \"config.iqrfUart.form.messages.powerEnableGpioPin\",\n                                  required:\n                                    \"config.iqrfUart.form.messages.powerEnableGpioPin\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var touched = ref.touched\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CInput\", {\n                                          attrs: {\n                                            label: _vm.$t(\n                                              \"config.iqrfUart.form.powerEnableGpioPin\"\n                                            ),\n                                            \"is-valid\": touched ? valid : null,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            )\n                                          },\n                                          model: {\n                                            value:\n                                              _vm.configuration\n                                                .powerEnableGpioPin,\n                                            callback: function($$v) {\n                                              _vm.$set(\n                                                _vm.configuration,\n                                                \"powerEnableGpioPin\",\n                                                $$v\n                                              )\n                                            },\n                                            expression:\n                                              \"configuration.powerEnableGpioPin\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            }),\n                            _vm._v(\" \"),\n                            _c(\"ValidationProvider\", {\n                              attrs: {\n                                rules: \"required|integer\",\n                                \"custom-messages\": {\n                                  integer:\n                                    \"config.iqrfUart.form.messages.busEnableGpioPin\",\n                                  required:\n                                    \"config.iqrfUart.form.messages.busEnableGpioPin\"\n                                }\n                              },\n                              scopedSlots: _vm._u(\n                                [\n                                  {\n                                    key: \"default\",\n                                    fn: function(ref) {\n                                      var errors = ref.errors\n                                      var touched = ref.touched\n                                      var valid = ref.valid\n                                      return [\n                                        _c(\"CInput\", {\n                                          attrs: {\n                                            label: _vm.$t(\n                                              \"config.iqrfUart.form.busEnableGpioPin\"\n                                            ),\n                                            \"is-valid\": touched ? valid : null,\n                                            \"invalid-feedback\": _vm.$t(\n                                              errors[0]\n                                            )\n                                          },\n                                          model: {\n                                            value:\n                                              _vm.configuration\n                                                .busEnableGpioPin,\n                                            callback: function($$v) {\n                                              _vm.$set(\n                                                _vm.configuration,\n                                                \"busEnableGpioPin\",\n                                                $$v\n                                              )\n                                            },\n                                            expression:\n                                              \"configuration.busEnableGpioPin\"\n                                          }\n                                        })\n                                      ]\n                                    }\n                                  }\n                                ],\n                                null,\n                                true\n                              )\n                            }),\n                            _vm._v(\" \"),\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: {\n                                  type: \"submit\",\n                                  color: \"primary\",\n                                  disabled: invalid\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"forms.save\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\"\n                                )\n                              ]\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  }\n                ])\n              })\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CCard\",\n        [\n          _c(\"CCardHeader\", [\n            _vm._v(_vm._s(_vm.$t(\"config.iqrfUart.mappings\")))\n          ]),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\n                \"CRow\",\n                [\n                  _c(\n                    \"CCol\",\n                    { attrs: { md: \"6\" } },\n                    [\n                      _c(\"InterfaceMappings\", {\n                        attrs: { \"interface-type\": \"spi\" },\n                        on: { updateMapping: _vm.updateMapping }\n                      })\n                    ],\n                    1\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"CCol\",\n                    { attrs: { md: \"6\" } },\n                    [\n                      _c(\"InterfacePorts\", {\n                        attrs: { \"interface-type\": \"spi\" },\n                        on: { updatePort: _vm.updatePort }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              )\n            ],\n            1\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<div>\n\t\t<CCard>\n\t\t\t<CCardBody>\n\t\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t\t<CForm @submit.prevent='saveConfig'>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t:custom-messages='{required: \"config.iqrfUart.form.messages.instance\"}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model='configuration.instance'\n\t\t\t\t\t\t\t\t:label='$t(\"config.iqrfUart.form.instance\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t:custom-messages='{required: \"config.iqrfUart.form.messages.interface\"}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model='configuration.IqrfInterface'\n\t\t\t\t\t\t\t\t:label='$t(\"config.iqrfUart.form.IqrfInterface\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\trequired: \"config.iqrfUart.form.messages.baudRate\",\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CSelect\n\t\t\t\t\t\t\t\t:value.sync='configuration.baudRate'\n\t\t\t\t\t\t\t\t:label='$t(\"config.iqrfUart.form.baudRate\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t:placeholder='$t(\"config.iqrfUart.form.messages.baudRate\")'\n\t\t\t\t\t\t\t\t:options='baudRates'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='required|integer'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tinteger: \"config.iqrfUart.form.messages.powerEnableGpioPin\",\n\t\t\t\t\t\t\t\trequired: \"config.iqrfUart.form.messages.powerEnableGpioPin\",\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model='configuration.powerEnableGpioPin'\n\t\t\t\t\t\t\t\t:label='$t(\"config.iqrfUart.form.powerEnableGpioPin\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='required|integer'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tinteger: \"config.iqrfUart.form.messages.busEnableGpioPin\",\n\t\t\t\t\t\t\t\trequired: \"config.iqrfUart.form.messages.busEnableGpioPin\",\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model='configuration.busEnableGpioPin'\n\t\t\t\t\t\t\t\t:label='$t(\"config.iqrfUart.form.busEnableGpioPin\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</CForm>\n\t\t\t\t</ValidationObserver>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t\t<CCard>\n\t\t\t<CCardHeader>{{ $t('config.iqrfUart.mappings' ) }}</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<CRow>\n\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t<InterfaceMappings interface-type='spi' @updateMapping='updateMapping' />\n\t\t\t\t\t</CCol>\n\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t<InterfacePorts interface-type='spi' @updatePort='updatePort' />\n\t\t\t\t\t</CCol>\n\t\t\t\t</CRow>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t</div>\n</template>\n\n<script>\nimport {\n\tCButton,\n\tCCard,\n\tCCardBody,\n\tCCardHeader,\n\tCCol,\n\tCForm,\n\tCInput,\n\tCRow,\n\tCSelect,\n} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {integer, required} from 'vee-validate/dist/rules';\nimport InterfaceMappings from '../../components/Config/InterfaceMappings';\nimport InterfacePorts from '../../components/Config/InterfacePorts';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\n\nexport default {\n\tname: 'IqrfUart',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCCol,\n\t\tCForm,\n\t\tCInput,\n\t\tCRow,\n\t\tCSelect,\n\t\tInterfaceMappings,\n\t\tInterfacePorts,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'iqrf::IqrfUart',\n\t\t\tconfiguration: {\n\t\t\t\tinstance: null,\n\t\t\t\tIqrfInterface: null,\n\t\t\t\tbaudRate: null,\n\t\t\t\tpowerEnableGpioPin: null,\n\t\t\t\tbusEnableGpioPin: null,\n\t\t\t},\n\t\t\tinstance: null,\n\t\t};\n\t},\n\tcomputed: {\n\t\tbaudRates() {\n\t\t\tconst baudRates = [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200, 230400];\n\t\t\treturn baudRates.map((baudRate) => ({value: baudRate, label: baudRate + ' Bd'}));\n\t\t}\n\t},\n\tcreated() {\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getComponent(this.componentName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (response.data.instances.length > 0) {\n\t\t\t\t\t\tthis.configuration = response.data.instances[0];\n\t\t\t\t\t\tthis.instance = this.configuration.instance;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t\tsaveConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.instance !== null) {\n\t\t\t\tDaemonConfigurationService.updateInstance(this.componentName, this.instance, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t} else {\n\t\t\t\tDaemonConfigurationService.createInstance(this.componentName, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tthis.$toast.success(this.$t('config.success').toString());\n\t\t},\n\t\tupdateMapping(mapping) {\n\t\t\tObject.assign(this.configuration, mapping);\n\t\t},\n\t\tupdatePort(port) {\n\t\t\tthis.configuration.IqrfInterface = port;\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.iqrfUart.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqrfUart.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqrfUart.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./IqrfUart.vue?vue&type=template&id=29e94918&\"\nimport script from \"./IqrfUart.vue?vue&type=script&lang=js&\"\nexport * from \"./IqrfUart.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('29e94918')) {\n      api.createRecord('29e94918', component.options)\n    } else {\n      api.reload('29e94918', component.options)\n    }\n    module.hot.accept(\"./IqrfUart.vue?vue&type=template&id=29e94918&\", function () {\n      api.rerender('29e94918', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/IqrfUart.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      {\n                        on: {\n                          submit: function($event) {\n                            $event.preventDefault()\n                            return _vm.saveConfig($event)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"config.jsonMngMetaDataApi.form.messages.instance\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"config.jsonMngMetaDataApi.form.instance\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.instance,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"instance\",\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"configuration.instance\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.configuration.metaDataToMessages,\n                            label: _vm.$t(\n                              \"config.jsonMngMetaDataApi.form.metaDataToMessages\"\n                            )\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              return _vm.$set(\n                                _vm.configuration,\n                                \"metaDataToMessages\",\n                                $event\n                              )\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              type: \"submit\",\n                              color: \"primary\",\n                              disabled: invalid\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='saveConfig'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{required: \"config.jsonMngMetaDataApi.form.messages.instance\"}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='configuration.instance'\n\t\t\t\t\t\t\t:label='$t(\"config.jsonMngMetaDataApi.form.instance\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CInputCheckbox \n\t\t\t\t\t\t:checked.sync='configuration.metaDataToMessages'\n\t\t\t\t\t\t:label='$t(\"config.jsonMngMetaDataApi.form.metaDataToMessages\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInput, CInputCheckbox} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {required} from 'vee-validate/dist/rules';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\n\nexport default {\n\tname: 'JsonMngMetaDataApi',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'iqrf::JsonMngMetaDataApi',\n\t\t\tconfiguration: {\n\t\t\t\tinstance: null,\n\t\t\t\tmetaDataToMessages: false,\n\t\t\t},\n\t\t\tinstance: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getComponent(this.componentName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (response.data.instances.length > 0) {\n\t\t\t\t\t\tthis.configuration = response.data.instances[0];\n\t\t\t\t\t\tthis.instance = this.configuration.instance;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t\tsaveConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.instance !== null) {\n\t\t\t\tDaemonConfigurationService.updateInstance(this.componentName, this.instance, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t} else {\n\t\t\t\tDaemonConfigurationService.createInstance(this.componentName, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tthis.$toast.success(this.$t('config.success').toString());\n\t\t}\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.jsonMngMetaDataApi.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./JsonMngMetaDataApi.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./JsonMngMetaDataApi.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./JsonMngMetaDataApi.vue?vue&type=template&id=9c4c3292&\"\nimport script from \"./JsonMngMetaDataApi.vue?vue&type=script&lang=js&\"\nexport * from \"./JsonMngMetaDataApi.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('9c4c3292')) {\n      api.createRecord('9c4c3292', component.options)\n    } else {\n      api.reload('9c4c3292', component.options)\n    }\n    module.hot.accept(\"./JsonMngMetaDataApi.vue?vue&type=template&id=9c4c3292&\", function () {\n      api.rerender('9c4c3292', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/JsonMngMetaDataApi.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      {\n                        on: {\n                          submit: function($event) {\n                            $event.preventDefault()\n                            return _vm.saveConfig($event)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"config.jsonRawApi.form.messages.instance\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"config.jsonRawApi.form.instance\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.instance,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"instance\",\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"configuration.instance\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.configuration.asyncDpaMessage,\n                            label: _vm.$t(\n                              \"config.jsonRawApi.form.asyncDpaMessage\"\n                            )\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              return _vm.$set(\n                                _vm.configuration,\n                                \"asyncDpaMessage\",\n                                $event\n                              )\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              type: \"submit\",\n                              color: \"primary\",\n                              disabled: invalid\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='saveConfig'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{required: \"config.jsonRawApi.form.messages.instance\"}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='configuration.instance'\n\t\t\t\t\t\t\t:label='$t(\"config.jsonRawApi.form.instance\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='configuration.asyncDpaMessage'\n\t\t\t\t\t\t:label='$t(\"config.jsonRawApi.form.asyncDpaMessage\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInput, CInputCheckbox} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {required} from 'vee-validate/dist/rules';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\n\nexport default {\n\tname: 'JsonRawApi',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'iqrf::JsonDpaApiRaw',\n\t\t\tconfiguration: {\n\t\t\t\tinstance: null,\n\t\t\t\tasyncDpaMessage: false,\n\t\t\t},\n\t\t\tinstance: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getComponent(this.componentName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (response.data.instances.length > 0) {\n\t\t\t\t\t\tthis.configuration = response.data.instances[0];\n\t\t\t\t\t\tthis.instance = this.configuration.instance;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t\tsaveConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.instance !== null) {\n\t\t\t\tDaemonConfigurationService.updateInstance(this.componentName, this.instance, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t} else {\n\t\t\t\tDaemonConfigurationService.createInstance(this.componentName, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tthis.$toast.success(this.$t('config.success'));\n\t\t}\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.jsonRawApi.title'\n\t}\n};\n</script>","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./JsonRawApi.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./JsonRawApi.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./JsonRawApi.vue?vue&type=template&id=95e98cf8&\"\nimport script from \"./JsonRawApi.vue?vue&type=script&lang=js&\"\nexport * from \"./JsonRawApi.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('95e98cf8')) {\n      api.createRecord('95e98cf8', component.options)\n    } else {\n      api.reload('95e98cf8', component.options)\n    }\n    module.hot.accept(\"./JsonRawApi.vue?vue&type=template&id=95e98cf8&\", function () {\n      api.rerender('95e98cf8', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/JsonRawApi.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      {\n                        on: {\n                          submit: function($event) {\n                            $event.preventDefault()\n                            return _vm.saveConfig($event)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"config.jsonSplitter.form.messages.instance\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"config.jsonSplitter.form.instance\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.instance,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"instance\",\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"configuration.instance\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.configuration.validateJsonResponse,\n                            label: _vm.$t(\n                              \"config.jsonSplitter.form.validateJsonResponse\"\n                            )\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              return _vm.$set(\n                                _vm.configuration,\n                                \"validateJsonResponse\",\n                                $event\n                              )\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              type: \"submit\",\n                              color: \"primary\",\n                              disabled: invalid\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='saveConfig'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{required: \"config.jsonSplitter.form.messages.instance\"}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='configuration.instance'\n\t\t\t\t\t\t\t:label='$t(\"config.jsonSplitter.form.instance\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='configuration.validateJsonResponse'\n\t\t\t\t\t\t:label='$t(\"config.jsonSplitter.form.validateJsonResponse\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInput, CInputCheckbox} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {required} from 'vee-validate/dist/rules';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\n\nexport default {\n\tname: 'JsonSplitter',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'iqrf::JsonSplitter',\n\t\t\tconfiguration: {\n\t\t\t\tinstance: null,\n\t\t\t\tvalidateJsonResponse: false,\n\t\t\t},\n\t\t\tinstance: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getComponent(this.componentName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (response.data.instances.length > 0) {\n\t\t\t\t\t\tthis.configuration = response.data.instances[0];\n\t\t\t\t\t\tthis.instance = this.configuration.instance;\n\t\t\t\t\t}\t\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t\tsaveConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.instance !== null) {\n\t\t\t\tDaemonConfigurationService.updateInstance(this.componentName, this.instance, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t} else {\n\t\t\t\tDaemonConfigurationService.createInstance(this.componentName, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tthis.$toast.success(this.$t('config.success').toString());\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.jsonSplitter.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./JsonSplitter.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./JsonSplitter.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./JsonSplitter.vue?vue&type=template&id=4eaff679&\"\nimport script from \"./JsonSplitter.vue?vue&type=script&lang=js&\"\nexport * from \"./JsonSplitter.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('4eaff679')) {\n      api.createRecord('4eaff679', component.options)\n    } else {\n      api.reload('4eaff679', component.options)\n    }\n    module.hot.accept(\"./JsonSplitter.vue?vue&type=template&id=4eaff679&\", function () {\n      api.rerender('4eaff679', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/JsonSplitter.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\"ValidationObserver\", {\n        scopedSlots: _vm._u([\n          {\n            key: \"default\",\n            fn: function(ref) {\n              var invalid = ref.invalid\n              return [\n                _c(\n                  \"CForm\",\n                  {\n                    on: {\n                      submit: function($event) {\n                        $event.preventDefault()\n                        return _vm.saveConfig($event)\n                      }\n                    }\n                  },\n                  [\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required\",\n                        \"custom-messages\": {\n                          required: \"config.mq.form.messages.instance\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\n                                      \"config.monitor.form.instance\"\n                                    ),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0])\n                                  },\n                                  model: {\n                                    value: _vm.monitor.instance,\n                                    callback: function($$v) {\n                                      _vm.$set(_vm.monitor, \"instance\", $$v)\n                                    },\n                                    expression: \"monitor.instance\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"integer|required\",\n                        \"custom-messages\": {\n                          required: \"config.monitor.form.messages.reportPeriod\",\n                          integer: \"forms.messages.integer\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    type: \"number\",\n                                    label: _vm.$t(\n                                      \"config.monitor.form.reportPeriod\"\n                                    ),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0])\n                                  },\n                                  model: {\n                                    value: _vm.monitor.reportPeriod,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.monitor,\n                                        \"reportPeriod\",\n                                        _vm._n($$v)\n                                      )\n                                    },\n                                    expression: \"monitor.reportPeriod\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"integer|required\",\n                        \"custom-messages\": {\n                          required:\n                            \"config.monitor.form.messages.WebsocketPort\",\n                          integer: \"forms.messages.integer\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    type: \"number\",\n                                    label: _vm.$t(\n                                      \"config.monitor.form.WebsocketPort\"\n                                    ),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0])\n                                  },\n                                  model: {\n                                    value: _vm.webSocket.WebsocketPort,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.webSocket,\n                                        \"WebsocketPort\",\n                                        _vm._n($$v)\n                                      )\n                                    },\n                                    expression: \"webSocket.WebsocketPort\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"CInputCheckbox\", {\n                      attrs: {\n                        checked: _vm.webSocket.acceptOnlyLocalhost,\n                        label: _vm.$t(\"config.monitor.form.acceptOnlyLocalhost\")\n                      },\n                      on: {\n                        \"update:checked\": function($event) {\n                          return _vm.$set(\n                            _vm.webSocket,\n                            \"acceptOnlyLocalhost\",\n                            $event\n                          )\n                        }\n                      }\n                    }),\n                    _vm._v(\" \"),\n                    _c(\n                      \"CButton\",\n                      {\n                        attrs: {\n                          type: \"submit\",\n                          color: \"primary\",\n                          disabled: invalid\n                        }\n                      },\n                      [\n                        _vm._v(\n                          \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.submitButton) + \"\\n\\t\\t\\t\"\n                        )\n                      ]\n                    )\n                  ],\n                  1\n                )\n              ]\n            }\n          }\n        ])\n      })\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t<CForm @submit.prevent='saveConfig'>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{required: \"config.mq.form.messages.instance\"}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='monitor.instance'\n\t\t\t\t\t\t:label='$t(\"config.monitor.form.instance\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='integer|required'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\trequired: \"config.monitor.form.messages.reportPeriod\",\n\t\t\t\t\t\tinteger: \"forms.messages.integer\"\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model.number='monitor.reportPeriod'\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t:label='$t(\"config.monitor.form.reportPeriod\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='integer|required'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\trequired: \"config.monitor.form.messages.WebsocketPort\",\n\t\t\t\t\t\tinteger: \"forms.messages.integer\"\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model.number='webSocket.WebsocketPort'\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t:label='$t(\"config.monitor.form.WebsocketPort\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<CInputCheckbox\n\t\t\t\t\t:checked.sync='webSocket.acceptOnlyLocalhost'\n\t\t\t\t\t:label='$t(\"config.monitor.form.acceptOnlyLocalhost\")'\n\t\t\t\t/>\n\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t{{ submitButton }}\n\t\t\t\t</CButton>\n\t\t\t</CForm>\n\t\t</ValidationObserver>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CForm, CInput, CInputCheckbox} from '@coreui/vue';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport {integer, required} from 'vee-validate/dist/rules';\n\nexport default {\n\tname: 'MonitorForm',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tprops: {\n\t\tinstance: {\n\t\t\ttype: String,\n\t\t\trequired: false,\n\t\t\tdefault: null,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentNames: {\n\t\t\t\tmonitor: 'iqrf::MonitorService',\n\t\t\t\twebSocket: 'shape::WebsocketCppService',\n\t\t\t},\n\t\t\tinstances: {\n\t\t\t\tmonitor: null,\n\t\t\t\twebSocket: null,\n\t\t\t},\n\t\t\tmonitor: {\n\t\t\t\tinstance: null,\n\t\t\t\treportPeriod: null,\n\t\t\t\tRequiredInterfaces: []\n\t\t\t},\n\t\t\twebSocket: {\n\t\t\t\tinstance: null,\n\t\t\t\tWebsocketPort: null,\n\t\t\t\tacceptOnlyLocalhost: false,\n\t\t\t},\n\t\t};\n\t},\n\tcomputed: {\n\t\tsubmitButton() {\n\t\t\treturn this.$route.path === '/config/mq/add' ?\n\t\t\t\tthis.$t('forms.add') :\n\t\t\t\tthis.$t('forms.save');\n\t\t},\n\t},\n\tcreated() {\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\tif (this.instance !== null) {\n\t\t\tthis.getConfig();\n\t\t}\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getInstance(this.componentNames.monitor, this.instance)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.monitor = response.data;\n\t\t\t\t\tthis.instances.monitor = this.instance;\n\t\t\t\t\tthis.instances.webSocket = this.monitor.RequiredInterfaces[0].target.instance;\n\t\t\t\t\tDaemonConfigurationService.getInstance(this.componentNames.webSocket, this.instances.webSocket)\n\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\tthis.webSocket = response.data;\n\t\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthis.$router.push('/config/monitor/');\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t\tsaveConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tthis.webSocket.instance = this.monitor.instance;\n\t\t\tif (this.monitor.RequiredInterfaces.length === 0) {\n\t\t\t\tthis.monitor.RequiredInterfaces[0] = {\n\t\t\t\t\tname: 'shape::IWebsocketService',\n\t\t\t\t\ttarget: {\n\t\t\t\t\t\tinstance: this.webSocket.instance,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tthis.monitor.RequiredInterfaces[0].target.instance = this.monitor.instance;\n\t\t\t}\n\t\t\tif (this.instance === null) {\n\t\t\t\tPromise.all([\n\t\t\t\t\tDaemonConfigurationService.createInstance(this.componentNames.webSocket, this.webSocket),\n\t\t\t\t\tDaemonConfigurationService.createInstance(this.componentNames.monitor, this.monitor),\n\t\t\t\t])\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t} else {\n\t\t\t\tPromise.all([\n\t\t\t\t\tDaemonConfigurationService.updateInstance(this.componentNames.webSocket, this.instances.webSocket, this.webSocket),\n\t\t\t\t\tDaemonConfigurationService.updateInstance(this.componentNames.monitor, this.instances.monitor, this.monitor),\n\t\t\t\t])\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$router.push('/config/monitor/');\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tif (this.$route.path === '/config/monitor/add') {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('config.monitor.messages.add.success', {instance: this.monitor.instance})\n\t\t\t\t\t\t.toString()\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('config.monitor.messages.edit.success', {instance: this.monitor.instance})\n\t\t\t\t\t\t.toString()\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t},\n\tmetaInfo() {\n\t\treturn {\n\t\t\ttitle: this.$route.path === '/config/monitor/add' ?\n\t\t\t\t'config.monitor.add' :\n\t\t\t\t'config.monitor.edit',\n\t\t};\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MonitorForm.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MonitorForm.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./MonitorForm.vue?vue&type=template&id=7fbbe704&\"\nimport script from \"./MonitorForm.vue?vue&type=script&lang=js&\"\nexport * from \"./MonitorForm.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('7fbbe704')) {\n      api.createRecord('7fbbe704', component.options)\n    } else {\n      api.reload('7fbbe704', component.options)\n    }\n    module.hot.accept(\"./MonitorForm.vue?vue&type=template&id=7fbbe704&\", function () {\n      api.rerender('7fbbe704', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/MonitorForm.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        [\n          _c(\n            \"CCardHeader\",\n            [\n              _c(\n                \"CButton\",\n                {\n                  staticClass: \"float-right\",\n                  attrs: {\n                    color: \"success\",\n                    size: \"sm\",\n                    to: \"/config/monitor/add\"\n                  }\n                },\n                [\n                  _c(\"CIcon\", { attrs: { content: _vm.$options.icons.add } }),\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"table.actions.add\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ],\n                1\n              )\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\"CDataTable\", {\n                attrs: {\n                  fields: _vm.fields,\n                  items: _vm.instances,\n                  \"column-filter\": true,\n                  \"items-per-page\": 20,\n                  pagination: true,\n                  striped: true,\n                  sorter: { external: false, resetable: true }\n                },\n                scopedSlots: _vm._u([\n                  {\n                    key: \"acceptOnlyLocalhost\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          [\n                            _c(\n                              \"CDropdown\",\n                              {\n                                attrs: {\n                                  color: item.acceptOnlyLocalhost\n                                    ? \"success\"\n                                    : \"danger\",\n                                  \"toggler-text\": _vm.$t(\n                                    \"table.enabled.\" + item.acceptOnlyLocalhost\n                                  ),\n                                  size: \"sm\"\n                                }\n                              },\n                              [\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeAcceptOnlyLocalhost(\n                                          item.webSocket,\n                                          true\n                                        )\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(_vm.$t(\"table.enabled.true\")) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                ),\n                                _vm._v(\" \"),\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeAcceptOnlyLocalhost(\n                                          item.webSocket,\n                                          false\n                                        )\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(_vm.$t(\"table.enabled.false\")) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  },\n                  {\n                    key: \"actions\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          { staticClass: \"col-actions\" },\n                          [\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: {\n                                  color: \"info\",\n                                  size: \"sm\",\n                                  to:\n                                    \"/config/monitor/edit/\" +\n                                    item.monitor.instance\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.edit }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.edit\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            ),\n                            _vm._v(\" \"),\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: { color: \"danger\", size: \"sm\" },\n                                on: {\n                                  click: function($event) {\n                                    _vm.modals.instances = {\n                                      monitor: item.monitor.instance,\n                                      webSocket: item.webSocket.instance\n                                    }\n                                  }\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.remove }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.delete\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  }\n                ])\n              })\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CModal\",\n        {\n          attrs: { color: \"danger\", show: _vm.modals.instances !== null },\n          on: {\n            \"update:show\": function($event) {\n              return _vm.$set(_vm.modals, \"instances !== null\", $event)\n            }\n          },\n          scopedSlots: _vm._u([\n            {\n              key: \"header\",\n              fn: function() {\n                return [\n                  _c(\"h5\", { staticClass: \"modal-title\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\"config.monitor.messages.delete.confirmTitle\")\n                        ) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              },\n              proxy: true\n            },\n            {\n              key: \"footer\",\n              fn: function() {\n                return [\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"danger\" },\n                      on: {\n                        click: function($event) {\n                          _vm.modals.instances = null\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.no\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"success\" },\n                      on: {\n                        click: function($event) {\n                          return _vm.removeInterface()\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.yes\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  )\n                ]\n              },\n              proxy: true\n            }\n          ])\n        },\n        [\n          _vm._v(\" \"),\n          _vm.modals.instances !== null\n            ? _c(\"div\", [\n                _vm._v(\n                  \"\\n\\t\\t\\t\" +\n                    _vm._s(\n                      _vm.$t(\"config.monitor.messages.delete.confirm\", {\n                        instance: _vm.modals.instances.monitor\n                      })\n                    ) +\n                    \"\\n\\t\\t\"\n                )\n              ])\n            : _vm._e()\n        ]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<div>\n\t\t<CCard>\n\t\t\t<CCardHeader>\n\t\t\t\t<CButton\n\t\t\t\t\tcolor='success'\n\t\t\t\t\tsize='sm'\n\t\t\t\t\tclass='float-right'\n\t\t\t\t\tto='/config/monitor/add'\n\t\t\t\t>\n\t\t\t\t\t<CIcon :content='$options.icons.add' />\n\t\t\t\t\t{{ $t('table.actions.add') }}\n\t\t\t\t</CButton>\n\t\t\t</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<CDataTable\n\t\t\t\t\t:fields='fields'\n\t\t\t\t\t:items='instances'\n\t\t\t\t\t:column-filter='true'\n\t\t\t\t\t:items-per-page='20'\n\t\t\t\t\t:pagination='true'\n\t\t\t\t\t:striped='true'\n\t\t\t\t\t:sorter='{ external: false, resetable: true }'\n\t\t\t\t>\n\t\t\t\t\t<template #acceptOnlyLocalhost='{item}'>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CDropdown\n\t\t\t\t\t\t\t\t:color='item.acceptOnlyLocalhost ? \"success\": \"danger\"'\n\t\t\t\t\t\t\t\t:toggler-text='$t(\"table.enabled.\" + item.acceptOnlyLocalhost)'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeAcceptOnlyLocalhost(item.webSocket, true)'>\n\t\t\t\t\t\t\t\t\t{{ $t('table.enabled.true') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeAcceptOnlyLocalhost(item.webSocket, false)'>\n\t\t\t\t\t\t\t\t\t{{ $t('table.enabled.false') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t</CDropdown>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template #actions='{item}'>\n\t\t\t\t\t\t<td class='col-actions'>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tcolor='info'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t\t:to='\"/config/monitor/edit/\" + item.monitor.instance'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.edit' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.edit') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tcolor='danger'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t\t@click='modals.instances = {monitor: item.monitor.instance, webSocket: item.webSocket.instance}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.remove' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.delete') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t</CDataTable>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t\t<CModal\n\t\t\tcolor='danger'\n\t\t\t:show.sync='modals.instances !== null'\n\t\t>\n\t\t\t<template #header>\n\t\t\t\t<h5 class='modal-title'>\n\t\t\t\t\t{{ $t('config.monitor.messages.delete.confirmTitle') }}\n\t\t\t\t</h5>\n\t\t\t</template>\n\t\t\t<div v-if='modals.instances !== null'>\n\t\t\t\t{{ $t('config.monitor.messages.delete.confirm', {instance: modals.instances.monitor}) }}\n\t\t\t</div>\n\t\t\t<template #footer>\n\t\t\t\t<CButton color='danger' @click='modals.instances = null'>\n\t\t\t\t\t{{ $t('forms.no') }}\n\t\t\t\t</CButton>\n\t\t\t\t<CButton color='success' @click='removeInterface()'>\n\t\t\t\t\t{{ $t('forms.yes') }}\n\t\t\t\t</CButton>\n\t\t\t</template>\n\t\t</CModal>\n\t</div>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CDataTable, CDropdown, CDropdownItem, CIcon, CModal} from '@coreui/vue/src';\nimport {cilPencil, cilPlus, cilTrash} from '@coreui/icons';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\n\nexport default {\n\tname: 'MonitorList',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCDataTable,\n\t\tCDropdown,\n\t\tCDropdownItem,\n\t\tCIcon,\n\t\tCModal,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentNames: {\n\t\t\t\tmonitor: 'iqrf::MonitorService',\n\t\t\t\twebSocket: 'shape::WebsocketCppService',\n\t\t\t},\n\t\t\tfields: [\n\t\t\t\t{\n\t\t\t\t\tkey: 'instance',\n\t\t\t\t\tlabel: this.$t('config.monitor.form.instance'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'reportPeriod',\n\t\t\t\t\tlabel: this.$t('config.monitor.form.reportPeriod'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'port',\n\t\t\t\t\tlabel: this.$t('config.monitor.form.WebsocketPort'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'acceptOnlyLocalhost',\n\t\t\t\t\tlabel: this.$t('config.monitor.form.acceptOnlyLocalhost'),\n\t\t\t\t\tfilter: false,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'actions',\n\t\t\t\t\tlabel: this.$t('table.actions.title'),\n\t\t\t\t\tfilter: false,\n\t\t\t\t\tsorter: false,\n\t\t\t\t},\n\t\t\t],\n\t\t\tinstances: [],\n\t\t\tmodals: {\n\t\t\t\tinstances: null,\n\t\t\t},\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.$store.commit('spinner/SHOW');\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.instances = [];\n\t\t\treturn Promise.all([\n\t\t\t\tDaemonConfigurationService.getComponent(this.componentNames.monitor),\n\t\t\t\tDaemonConfigurationService.getComponent(this.componentNames.webSocket),\n\t\t\t])\n\t\t\t\t.then((responses) => {\n\t\t\t\t\tconst monitors = responses[0].data.instances;\n\t\t\t\t\tconst webSockets = responses[1].data.instances;\n\t\t\t\t\tconsole.error(monitors);\n\t\t\t\t\tfor (const monitor of monitors) {\n\t\t\t\t\t\tif (monitor.RequiredInterfaces === undefined ||\n\t\t\t\t\t\t\t\tmonitor.RequiredInterfaces === [] ||\n\t\t\t\t\t\t\t\tmonitor.RequiredInterfaces[0].name !== 'shape::IWebsocketService' ||\n\t\t\t\t\t\t\t\tmonitor.RequiredInterfaces[0].target.instance === undefined) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst webSocketInstance = monitor.RequiredInterfaces[0].target.instance;\n\t\t\t\t\t\tfor (const webSocket of webSockets) {\n\t\t\t\t\t\t\tif (webSocket.instance !== webSocketInstance) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.instances.push({\n\t\t\t\t\t\t\t\tmonitor: monitor,\n\t\t\t\t\t\t\t\twebSocket: webSocket,\n\t\t\t\t\t\t\t\tinstance: monitor.instance,\n\t\t\t\t\t\t\t\treportPeriod: monitor.reportPeriod,\n\t\t\t\t\t\t\t\tacceptAsyncMsg: monitor.acceptAsyncMsg,\n\t\t\t\t\t\t\t\tport: webSocket.WebsocketPort,\n\t\t\t\t\t\t\t\tacceptOnlyLocalhost: webSocket.acceptOnlyLocalhost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t});\n\t\t\t// TODO: add error message\n\t\t},\n\t\tchangeAcceptOnlyLocalhost(service, setting) {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tservice.acceptOnlyLocalhost = setting;\n\t\t\tDaemonConfigurationService.updateInstance(this.componentNames.webSocket, service.instance, service)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getConfig().then(() => {\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('config.monitor.service.messages.editSuccess', {service: service.instance})\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t\tremoveInterface() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tPromise.all([\n\t\t\t\tDaemonConfigurationService.deleteInstance(this.componentNames.monitor, this.modals.instances.monitor),\n\t\t\t\tDaemonConfigurationService.deleteInstance(this.componentNames.webSocket, this.modals.instances.webSocket),\n\t\t\t])\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.modals.instances = null;\n\t\t\t\t\tthis.getConfig()\n\t\t\t\t\t\t.then(() => this.$toast.success(\n\t\t\t\t\t\t\tthis.$t('config.monitor.messages.delete.success', {instance: this.modals.instances.monitor})\n\t\t\t\t\t\t\t\t.toString())\n\t\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t// TODO: add error message\n\t\t},\n\t},\n\ticons: {\n\t\tadd: cilPlus,\n\t\tedit: cilPencil,\n\t\tremove: cilTrash,\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.monitor.title'\n\t}\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MonitorList.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MonitorList.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./MonitorList.vue?vue&type=template&id=9895e444&\"\nimport script from \"./MonitorList.vue?vue&type=script&lang=js&\"\nexport * from \"./MonitorList.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('9895e444')) {\n      api.createRecord('9895e444', component.options)\n    } else {\n      api.reload('9895e444', component.options)\n    }\n    module.hot.accept(\"./MonitorList.vue?vue&type=template&id=9895e444&\", function () {\n      api.rerender('9895e444', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/MonitorList.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\"ValidationObserver\", {\n        scopedSlots: _vm._u([\n          {\n            key: \"default\",\n            fn: function(ref) {\n              var invalid = ref.invalid\n              return [\n                _c(\n                  \"CForm\",\n                  {\n                    on: {\n                      submit: function($event) {\n                        $event.preventDefault()\n                        return _vm.saveConfig($event)\n                      }\n                    }\n                  },\n                  [\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required\",\n                        \"custom-messages\": {\n                          required: \"config.mq.form.messages.instance\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\"config.mq.form.instance\"),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0])\n                                  },\n                                  model: {\n                                    value: _vm.configuration.instance,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.configuration,\n                                        \"instance\",\n                                        $$v\n                                      )\n                                    },\n                                    expression: \"configuration.instance\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required\",\n                        \"custom-messages\": {\n                          required: \"config.mq.form.messages.LocalMqName\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\"config.mq.form.LocalMqName\"),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0])\n                                  },\n                                  model: {\n                                    value: _vm.configuration.LocalMqName,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.configuration,\n                                        \"LocalMqName\",\n                                        $$v\n                                      )\n                                    },\n                                    expression: \"configuration.LocalMqName\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required\",\n                        \"custom-messages\": {\n                          required: \"config.mq.form.messages.RemoteMqName\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\n                                      \"config.mq.form.RemoteMqName\"\n                                    ),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0])\n                                  },\n                                  model: {\n                                    value: _vm.configuration.RemoteMqName,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.configuration,\n                                        \"RemoteMqName\",\n                                        $$v\n                                      )\n                                    },\n                                    expression: \"configuration.RemoteMqName\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"CInputCheckbox\", {\n                      attrs: {\n                        checked: _vm.configuration.acceptAsyncMsg,\n                        label: _vm.$t(\"config.mq.form.acceptAsyncMsg\")\n                      },\n                      on: {\n                        \"update:checked\": function($event) {\n                          return _vm.$set(\n                            _vm.configuration,\n                            \"acceptAsyncMsg\",\n                            $event\n                          )\n                        }\n                      }\n                    }),\n                    _vm._v(\" \"),\n                    _c(\n                      \"CButton\",\n                      {\n                        attrs: {\n                          type: \"submit\",\n                          color: \"primary\",\n                          disabled: invalid\n                        }\n                      },\n                      [\n                        _vm._v(\n                          \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.submitButton) + \"\\n\\t\\t\\t\"\n                        )\n                      ]\n                    )\n                  ],\n                  1\n                )\n              ]\n            }\n          }\n        ])\n      })\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t<CForm @submit.prevent='saveConfig'>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{required: \"config.mq.form.messages.instance\"}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='configuration.instance'\n\t\t\t\t\t\t:label='$t(\"config.mq.form.instance\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{required: \"config.mq.form.messages.LocalMqName\"}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='configuration.LocalMqName'\n\t\t\t\t\t\t:label='$t(\"config.mq.form.LocalMqName\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{required: \"config.mq.form.messages.RemoteMqName\"}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='configuration.RemoteMqName'\n\t\t\t\t\t\t:label='$t(\"config.mq.form.RemoteMqName\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<CInputCheckbox\n\t\t\t\t\t:checked.sync='configuration.acceptAsyncMsg'\n\t\t\t\t\t:label='$t(\"config.mq.form.acceptAsyncMsg\")'\n\t\t\t\t/>\n\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t{{ submitButton }}\n\t\t\t\t</CButton>\n\t\t\t</CForm>\n\t\t</ValidationObserver>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CForm, CInput, CInputCheckbox} from '@coreui/vue';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport {required} from 'vee-validate/dist/rules';\n\nexport default {\n\tname: 'MqMessagingForm',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tprops: {\n\t\tinstance: {\n\t\t\ttype: String,\n\t\t\trequired: false,\n\t\t\tdefault: null,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'iqrf::MqMessaging',\n\t\t\tconfiguration: {\n\t\t\t\tinstance: null,\n\t\t\t\tLocalMqName: null,\n\t\t\t\tRemoteMqName: null,\n\t\t\t\tacceptAsyncMsg: false,\n\t\t\t}\n\t\t};\n\t},\n\tcomputed: {\n\t\tsubmitButton() {\n\t\t\treturn this.$route.path === '/config/mq/add' ?\n\t\t\t\tthis.$t('forms.add') : this.$t('forms.save');\n\t\t},\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t\tif (this.instance !== null) {\n\t\t\tthis.getConfig();\n\t\t}\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getInstance(this.componentName, this.instance)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.configuration = response.data;\n\t\t\t\t\tthis.instance = this.configuration.instance;\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthis.$router.push('/config/mq/');\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t\tsaveConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.instance !== null) {\n\t\t\t\tDaemonConfigurationService.updateInstance(this.componentName, this.instance, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t} else {\n\t\t\t\tDaemonConfigurationService.createInstance(this.componentName, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$router.push('/config/mq/');\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tif (this.$route.path === '/config/mq/add') {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('config.mq.messages.add.success', {instance: this.configuration.instance})\n\t\t\t\t\t\t.toString()\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('config.mq.messages.edit.success', {instance: this.configuration.instance})\n\t\t\t\t\t\t.toString()\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t},\n\tmetaInfo() {\n\t\treturn {\n\t\t\ttitle: this.$route.path === '/config/mq/add' ?\n\t\t\t\t'config.mq.add' : 'config.mq.edit',\n\t\t};\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MqMessagingForm.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MqMessagingForm.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./MqMessagingForm.vue?vue&type=template&id=518afe6a&\"\nimport script from \"./MqMessagingForm.vue?vue&type=script&lang=js&\"\nexport * from \"./MqMessagingForm.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('518afe6a')) {\n      api.createRecord('518afe6a', component.options)\n    } else {\n      api.reload('518afe6a', component.options)\n    }\n    module.hot.accept(\"./MqMessagingForm.vue?vue&type=template&id=518afe6a&\", function () {\n      api.rerender('518afe6a', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/MqMessagingForm.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        [\n          _c(\n            \"CCardHeader\",\n            [\n              _c(\n                \"CButton\",\n                {\n                  staticClass: \"float-right\",\n                  attrs: { color: \"success\", to: \"/config/mq/add\", size: \"sm\" }\n                },\n                [\n                  _c(\"CIcon\", { attrs: { content: _vm.$options.icons.add } }),\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"table.actions.add\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ],\n                1\n              )\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\"CDataTable\", {\n                attrs: {\n                  items: _vm.instances,\n                  fields: _vm.fields,\n                  \"column-filter\": true,\n                  \"items-per-page\": 20,\n                  pagination: true,\n                  striped: true,\n                  sorter: { external: false, resetable: true }\n                },\n                scopedSlots: _vm._u([\n                  {\n                    key: \"acceptAsyncMsg\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          [\n                            _c(\n                              \"CDropdown\",\n                              {\n                                attrs: {\n                                  color: item.acceptAsyncMsg\n                                    ? \"success\"\n                                    : \"danger\",\n                                  \"toggler-text\": _vm.$t(\n                                    \"table.enabled.\" + item.acceptAsyncMsg\n                                  ),\n                                  placement: \"top-start\",\n                                  size: \"sm\"\n                                }\n                              },\n                              [\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeAcceptAsyncMsg(\n                                          item,\n                                          true\n                                        )\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(_vm.$t(\"table.enabled.true\")) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                ),\n                                _vm._v(\" \"),\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeAcceptAsyncMsg(\n                                          item,\n                                          false\n                                        )\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(_vm.$t(\"table.enabled.false\")) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  },\n                  {\n                    key: \"actions\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          { staticClass: \"col-actions\" },\n                          [\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: {\n                                  color: \"primary\",\n                                  to: \"/config/mq/edit/\" + item.instance,\n                                  size: \"sm\"\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.edit }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.edit\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            ),\n                            _vm._v(\" \"),\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: { color: \"danger\", size: \"sm\" },\n                                on: {\n                                  click: function($event) {\n                                    return _vm.confirmDelete(item)\n                                  }\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.delete }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.delete\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  }\n                ])\n              })\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CModal\",\n        {\n          attrs: { color: \"danger\", show: _vm.modals.delete.instance !== null },\n          on: {\n            \"update:show\": function($event) {\n              return _vm.$set(_vm.modals.delete, \"instance !== null\", $event)\n            }\n          },\n          scopedSlots: _vm._u([\n            {\n              key: \"header\",\n              fn: function() {\n                return [\n                  _c(\"h5\", { staticClass: \"modal-title\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\"config.mq.messages.delete.confirmTitle\")\n                        ) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"CButtonClose\", {\n                    staticClass: \"text-white\",\n                    on: {\n                      click: function($event) {\n                        _vm.modals.delete.instance = null\n                      }\n                    }\n                  })\n                ]\n              },\n              proxy: true\n            },\n            {\n              key: \"footer\",\n              fn: function() {\n                return [\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"danger\" },\n                      on: {\n                        click: function($event) {\n                          _vm.modals.delete.instance = null\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.no\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"success\" },\n                      on: { click: _vm.performDelete }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.yes\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  )\n                ]\n              },\n              proxy: true\n            }\n          ])\n        },\n        [\n          _vm._v(\" \"),\n          _vm.modals.delete.instance !== null\n            ? _c(\"span\", [\n                _vm._v(\n                  \"\\n\\t\\t\\t\" +\n                    _vm._s(\n                      _vm.$t(\"config.mq.messages.delete.confirm\", {\n                        instance: _vm.modals.delete.instance\n                      })\n                    ) +\n                    \"\\n\\t\\t\"\n                )\n              ])\n            : _vm._e()\n        ]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MqMessagingTable.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MqMessagingTable.vue?vue&type=script&lang=js&\"","<template>\n\t<div>\n\t\t<CCard>\n\t\t\t<CCardHeader>\n\t\t\t\t<CButton\n\t\t\t\t\tcolor='success'\n\t\t\t\t\tto='/config/mq/add'\n\t\t\t\t\tsize='sm'\n\t\t\t\t\tclass='float-right'\n\t\t\t\t>\n\t\t\t\t\t<CIcon :content='$options.icons.add' />\n\t\t\t\t\t{{ $t('table.actions.add') }}\n\t\t\t\t</CButton>\n\t\t\t</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<CDataTable\n\t\t\t\t\t:items='instances'\n\t\t\t\t\t:fields='fields'\n\t\t\t\t\t:column-filter='true'\n\t\t\t\t\t:items-per-page='20'\n\t\t\t\t\t:pagination='true'\n\t\t\t\t\t:striped='true'\n\t\t\t\t\t:sorter='{ external: false, resetable: true }'\n\t\t\t\t>\n\t\t\t\t\t<template #acceptAsyncMsg='{item}'>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CDropdown\n\t\t\t\t\t\t\t\t:color='item.acceptAsyncMsg ? \"success\" : \"danger\"'\n\t\t\t\t\t\t\t\t:toggler-text='$t(\"table.enabled.\" + item.acceptAsyncMsg)'\n\t\t\t\t\t\t\t\tplacement='top-start'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeAcceptAsyncMsg(item, true)'>\n\t\t\t\t\t\t\t\t\t{{ $t('table.enabled.true') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeAcceptAsyncMsg(item, false)'>\n\t\t\t\t\t\t\t\t\t{{ $t('table.enabled.false') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t</CDropdown>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template #actions='{item}'>\n\t\t\t\t\t\t<td class='col-actions'>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\t\t:to='\"/config/mq/edit/\" + item.instance'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.edit' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.edit') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton color='danger' size='sm' @click='confirmDelete(item)'>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.delete' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.delete') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t</CDataTable>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t\t<CModal\n\t\t\tcolor='danger'\n\t\t\t:show.sync='modals.delete.instance !== null'\n\t\t>\n\t\t\t<template #header>\n\t\t\t\t<h5 class='modal-title'>\n\t\t\t\t\t{{ $t('config.mq.messages.delete.confirmTitle') }}\n\t\t\t\t</h5>\n\t\t\t\t<CButtonClose class='text-white' @click='modals.delete.instance = null' />\n\t\t\t</template>\n\t\t\t<span v-if='modals.delete.instance !== null'>\n\t\t\t\t{{ $t('config.mq.messages.delete.confirm', {instance: modals.delete.instance}) }}\n\t\t\t</span>\n\t\t\t<template #footer>\n\t\t\t\t<CButton color='danger' @click='modals.delete.instance = null'>\n\t\t\t\t\t{{ $t('forms.no') }}\n\t\t\t\t</CButton>\n\t\t\t\t<CButton color='success' @click='performDelete'>\n\t\t\t\t\t{{ $t('forms.yes') }}\n\t\t\t\t</CButton>\n\t\t\t</template>\n\t\t</CModal>\n\t</div>\n</template>\n\n<script>\nimport {\n\tCButton,\n\tCButtonClose,\n\tCCard,\n\tCCardBody,\n\tCCardHeader,\n\tCDataTable,\n\tCDropdown,\n\tCDropdownItem,\n\tCIcon,\n\tCModal\n} from '@coreui/vue/src';\nimport {cilPencil, cilPlus, cilTrash} from '@coreui/icons';\nimport DaemonConfigurationService\n\tfrom '../../services/DaemonConfigurationService';\n\nexport default {\n\tname: 'MqMessagingTable',\n\tcomponents: {\n\t\tCButton,\n\t\tCButtonClose,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCDataTable,\n\t\tCDropdown,\n\t\tCDropdownItem,\n\t\tCIcon,\n\t\tCModal,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'iqrf::MqMessaging',\n\t\t\tfields: [\n\t\t\t\t{\n\t\t\t\t\tkey: 'instance',\n\t\t\t\t\tlabel: this.$t('config.mq.form.instance'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'LocalMqName',\n\t\t\t\t\tlabel: this.$t('config.mq.form.LocalMqName'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'RemoteMqName',\n\t\t\t\t\tlabel: this.$t('config.mq.form.RemoteMqName'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'acceptAsyncMsg',\n\t\t\t\t\tlabel: this.$t('config.mq.form.acceptAsyncMsg'),\n\t\t\t\t\tfilter: false,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'actions',\n\t\t\t\t\tlabel: this.$t('table.actions.title'),\n\t\t\t\t\tsorter: false,\n\t\t\t\t\tfilter: false,\n\t\t\t\t},\n\t\t\t],\n\t\t\tinstances: [],\n\t\t\tmodals: {\n\t\t\t\tdelete: {\n\t\t\t\t\tinstance: null,\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.$store.commit('spinner/SHOW');\n\t\tthis.getInstances();\n\t},\n\tmethods: {\n\t\tconfirmDelete(instance) {\n\t\t\tthis.modals.delete.instance = instance.instance;\n\t\t},\n\t\tchangeAcceptAsyncMsg(instance, acceptAsyncMsg) {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tinstance.acceptAsyncMsg = acceptAsyncMsg;\n\t\t\treturn DaemonConfigurationService.updateInstance(this.componentName, instance.instance, instance)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getInstances().then(() => {\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('config.mq.messages.edit.success', {instance: instance.instance})\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t},\n\t\tgetInstances() {\n\t\t\treturn DaemonConfigurationService.getComponent(this.componentName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.instances = response.data.instances;\n\t\t\t\t})\n\t\t\t\t.catch(() => this.$store.commit('spinner/HIDE'));\n\t\t},\n\t\tperformDelete() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tconst instance = this.modals.delete.instance;\n\t\t\tthis.modals.delete.instance = null;\n\t\t\tDaemonConfigurationService.deleteInstance(this.componentName, instance)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getInstances().then(() => {\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('config.mq.messages.delete.success', {instance: instance})\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => this.$store.commit('spinner/HIDE'));\n\t\t},\n\t},\n\ticons: {\n\t\tadd: cilPlus,\n\t\tdelete: cilTrash,\n\t\tedit: cilPencil,\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.mq.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./MqMessagingTable.vue?vue&type=template&id=00103818&\"\nimport script from \"./MqMessagingTable.vue?vue&type=script&lang=js&\"\nexport * from \"./MqMessagingTable.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('00103818')) {\n      api.createRecord('00103818', component.options)\n    } else {\n      api.reload('00103818', component.options)\n    }\n    module.hot.accept(\"./MqMessagingTable.vue?vue&type=template&id=00103818&\", function () {\n      api.rerender('00103818', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/MqMessagingTable.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\"ValidationObserver\", {\n        scopedSlots: _vm._u([\n          {\n            key: \"default\",\n            fn: function(ref) {\n              var invalid = ref.invalid\n              return [\n                _c(\n                  \"CForm\",\n                  {\n                    on: {\n                      submit: function($event) {\n                        $event.preventDefault()\n                        return _vm.saveConfig($event)\n                      }\n                    }\n                  },\n                  [\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required\",\n                        \"custom-messages\": {\n                          required: \"config.mqtt.form.messages.instance\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\"config.mqtt.form.instance\"),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0])\n                                  },\n                                  model: {\n                                    value: _vm.configuration.instance,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.configuration,\n                                        \"instance\",\n                                        $$v\n                                      )\n                                    },\n                                    expression: \"configuration.instance\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required\",\n                        \"custom-messages\": {\n                          required: \"config.mqtt.form.messages.BrokerAddr\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\n                                      \"config.mqtt.form.BrokerAddr\"\n                                    ),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0])\n                                  },\n                                  model: {\n                                    value: _vm.configuration.BrokerAddr,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.configuration,\n                                        \"BrokerAddr\",\n                                        $$v\n                                      )\n                                    },\n                                    expression: \"configuration.BrokerAddr\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required\",\n                        \"custom-messages\": {\n                          required: \"config.mqtt.form.messages.ClientId\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\"config.mqtt.form.ClientId\"),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0])\n                                  },\n                                  model: {\n                                    value: _vm.configuration.ClientId,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.configuration,\n                                        \"ClientId\",\n                                        $$v\n                                      )\n                                    },\n                                    expression: \"configuration.ClientId\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"integer|required\",\n                        \"custom-messages\": {\n                          integer: \"config.mqtt.form.messages.Persistence\",\n                          required: \"config.mqtt.form.messages.Persistence\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\n                                      \"config.mqtt.form.Persistence\"\n                                    ),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0]),\n                                    type: \"number\"\n                                  },\n                                  model: {\n                                    value: _vm.configuration.Persistence,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.configuration,\n                                        \"Persistence\",\n                                        _vm._n($$v)\n                                      )\n                                    },\n                                    expression: \"configuration.Persistence\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required\",\n                        \"custom-messages\": {\n                          required: \"config.mqtt.form.messages.QoS\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var valid = ref.valid\n                              var touched = ref.touched\n                              var errors = ref.errors\n                              return [\n                                _c(\"CSelect\", {\n                                  attrs: {\n                                    value: _vm.configuration.Qos,\n                                    label: _vm.$t(\"config.mqtt.form.QoS\"),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0]),\n                                    placeholder: _vm.$t(\n                                      \"config.mqtt.form.messages.QoS\"\n                                    ),\n                                    options: _vm.qosOptions\n                                  },\n                                  on: {\n                                    \"update:value\": function($event) {\n                                      return _vm.$set(\n                                        _vm.configuration,\n                                        \"Qos\",\n                                        $event\n                                      )\n                                    }\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required\",\n                        \"custom-messages\": {\n                          required: \"config.mqtt.form.messages.TopicRequest\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\n                                      \"config.mqtt.form.TopicRequest\"\n                                    ),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0])\n                                  },\n                                  model: {\n                                    value: _vm.configuration.TopicRequest,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.configuration,\n                                        \"TopicRequest\",\n                                        $$v\n                                      )\n                                    },\n                                    expression: \"configuration.TopicRequest\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required\",\n                        \"custom-messages\": {\n                          required: \"config.mqtt.form.messages.TopicResponse\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\n                                      \"config.mqtt.form.TopicResponse\"\n                                    ),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0])\n                                  },\n                                  model: {\n                                    value: _vm.configuration.TopicResponse,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.configuration,\n                                        \"TopicResponse\",\n                                        $$v\n                                      )\n                                    },\n                                    expression: \"configuration.TopicResponse\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"CInput\", {\n                      attrs: { label: _vm.$t(\"config.mqtt.form.User\") },\n                      model: {\n                        value: _vm.configuration.User,\n                        callback: function($$v) {\n                          _vm.$set(_vm.configuration, \"User\", $$v)\n                        },\n                        expression: \"configuration.User\"\n                      }\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"CInput\", {\n                      attrs: { label: _vm.$t(\"config.mqtt.form.Password\") },\n                      model: {\n                        value: _vm.configuration.Password,\n                        callback: function($$v) {\n                          _vm.$set(_vm.configuration, \"Password\", $$v)\n                        },\n                        expression: \"configuration.Password\"\n                      }\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"CInputCheckbox\", {\n                      attrs: {\n                        checked: _vm.configuration.EnabledSSL,\n                        label: _vm.$t(\"config.mqtt.form.EnabledSSL\")\n                      },\n                      on: {\n                        \"update:checked\": function($event) {\n                          return _vm.$set(\n                            _vm.configuration,\n                            \"EnabledSSL\",\n                            $event\n                          )\n                        }\n                      }\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"integer|min:0\",\n                        \"custom-messages\": {\n                          integer:\n                            \"config.mqtt.form.messages.KeepAliveInterval\",\n                          min: \"config.mqtt.form.messages.KeepAliveInterval\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\n                                      \"config.mqtt.form.KeepAliveInterval\"\n                                    ),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0]),\n                                    type: \"number\",\n                                    min: \"0\"\n                                  },\n                                  model: {\n                                    value: _vm.configuration.KeepAliveInterval,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.configuration,\n                                        \"KeepAliveInterval\",\n                                        _vm._n($$v)\n                                      )\n                                    },\n                                    expression:\n                                      \"configuration.KeepAliveInterval\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"integer|min:0\",\n                        \"custom-messages\": {\n                          integer: \"config.mqtt.form.messages.ConnectTimeout\",\n                          min: \"config.mqtt.form.messages.ConnectTimeout\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\n                                      \"config.mqtt.form.ConnectTimeout\"\n                                    ),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0]),\n                                    type: \"number\",\n                                    min: \"0\"\n                                  },\n                                  model: {\n                                    value: _vm.configuration.ConnectTimeout,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.configuration,\n                                        \"ConnectTimeout\",\n                                        _vm._n($$v)\n                                      )\n                                    },\n                                    expression: \"configuration.ConnectTimeout\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules:\n                          \"integer|between:0,\" + _vm.configuration.MaxReconnect,\n                        \"custom-messages\": {\n                          between: \"config.mqtt.form.messages.MinReconnect\",\n                          integer: \"config.mqtt.form.messages.MinReconnect\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\n                                      \"config.mqtt.form.MinReconnect\"\n                                    ),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0]),\n                                    type: \"number\",\n                                    max: _vm.configuration.MaxReconnect,\n                                    min: \"0\"\n                                  },\n                                  model: {\n                                    value: _vm.configuration.MinReconnect,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.configuration,\n                                        \"MinReconnect\",\n                                        _vm._n($$v)\n                                      )\n                                    },\n                                    expression: \"configuration.MinReconnect\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"integer|min:\" + _vm.configuration.MinReconnect,\n                        \"custom-messages\": {\n                          integer: \"config.mqtt.form.messages.MaxReconnect\",\n                          min: \"config.mqtt.form.messages.MaxReconnect\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\n                                      \"config.mqtt.form.MaxReconnect\"\n                                    ),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0]),\n                                    type: \"number\",\n                                    min: _vm.configuration.MinReconnect\n                                  },\n                                  model: {\n                                    value: _vm.configuration.MaxReconnect,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.configuration,\n                                        \"MaxReconnect\",\n                                        _vm._n($$v)\n                                      )\n                                    },\n                                    expression: \"configuration.MaxReconnect\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"CInput\", {\n                      attrs: { label: _vm.$t(\"config.mqtt.form.TrustStore\") },\n                      model: {\n                        value: _vm.configuration.TrustStore,\n                        callback: function($$v) {\n                          _vm.$set(_vm.configuration, \"TrustStore\", $$v)\n                        },\n                        expression: \"configuration.TrustStore\"\n                      }\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"CInput\", {\n                      attrs: { label: _vm.$t(\"config.mqtt.form.KeyStore\") },\n                      model: {\n                        value: _vm.configuration.KeyStore,\n                        callback: function($$v) {\n                          _vm.$set(_vm.configuration, \"KeyStore\", $$v)\n                        },\n                        expression: \"configuration.KeyStore\"\n                      }\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"CInput\", {\n                      attrs: { label: _vm.$t(\"config.mqtt.form.PrivateKey\") },\n                      model: {\n                        value: _vm.configuration.PrivateKey,\n                        callback: function($$v) {\n                          _vm.$set(_vm.configuration, \"PrivateKey\", $$v)\n                        },\n                        expression: \"configuration.PrivateKey\"\n                      }\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"CInput\", {\n                      attrs: {\n                        label: _vm.$t(\"config.mqtt.form.PrivateKeyPassword\")\n                      },\n                      model: {\n                        value: _vm.configuration.PrivateKeyPassword,\n                        callback: function($$v) {\n                          _vm.$set(_vm.configuration, \"PrivateKeyPassword\", $$v)\n                        },\n                        expression: \"configuration.PrivateKeyPassword\"\n                      }\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"CInput\", {\n                      attrs: {\n                        label: _vm.$t(\"config.mqtt.form.EnabledCipherSuites\")\n                      },\n                      model: {\n                        value: _vm.configuration.EnabledCipherSuites,\n                        callback: function($$v) {\n                          _vm.$set(\n                            _vm.configuration,\n                            \"EnabledCipherSuites\",\n                            $$v\n                          )\n                        },\n                        expression: \"configuration.EnabledCipherSuites\"\n                      }\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"CInputCheckbox\", {\n                      attrs: {\n                        checked: _vm.configuration.EnableServerCertAuth,\n                        label: _vm.$t(\"config.mqtt.form.EnableServerCertAuth\")\n                      },\n                      on: {\n                        \"update:checked\": function($event) {\n                          return _vm.$set(\n                            _vm.configuration,\n                            \"EnableServerCertAuth\",\n                            $event\n                          )\n                        }\n                      }\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"CInputCheckbox\", {\n                      attrs: {\n                        checked: _vm.configuration.acceptAsyncMsg,\n                        label: _vm.$t(\"config.mqtt.form.acceptAsyncMsg\")\n                      },\n                      on: {\n                        \"update:checked\": function($event) {\n                          return _vm.$set(\n                            _vm.configuration,\n                            \"acceptAsyncMsg\",\n                            $event\n                          )\n                        }\n                      }\n                    }),\n                    _vm._v(\" \"),\n                    _c(\n                      \"CButton\",\n                      {\n                        attrs: {\n                          type: \"submit\",\n                          color: \"primary\",\n                          disabled: invalid\n                        }\n                      },\n                      [\n                        _vm._v(\n                          \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.submitButton) + \"\\n\\t\\t\\t\"\n                        )\n                      ]\n                    )\n                  ],\n                  1\n                )\n              ]\n            }\n          }\n        ])\n      })\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t<CForm @submit.prevent='saveConfig'>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{required: \"config.mqtt.form.messages.instance\"}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='configuration.instance'\n\t\t\t\t\t\t:label='$t(\"config.mqtt.form.instance\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{required: \"config.mqtt.form.messages.BrokerAddr\"}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='configuration.BrokerAddr'\n\t\t\t\t\t\t:label='$t(\"config.mqtt.form.BrokerAddr\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{required: \"config.mqtt.form.messages.ClientId\"}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='configuration.ClientId'\n\t\t\t\t\t\t:label='$t(\"config.mqtt.form.ClientId\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='integer|required'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\tinteger: \"config.mqtt.form.messages.Persistence\",\n\t\t\t\t\t\trequired: \"config.mqtt.form.messages.Persistence\",\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model.number='configuration.Persistence'\n\t\t\t\t\t\t:label='$t(\"config.mqtt.form.Persistence\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\trequired: \"config.mqtt.form.messages.QoS\",\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CSelect\n\t\t\t\t\t\t:value.sync='configuration.Qos'\n\t\t\t\t\t\t:label='$t(\"config.mqtt.form.QoS\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t:placeholder='$t(\"config.mqtt.form.messages.QoS\")'\n\t\t\t\t\t\t:options='qosOptions'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{required: \"config.mqtt.form.messages.TopicRequest\"}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='configuration.TopicRequest'\n\t\t\t\t\t\t:label='$t(\"config.mqtt.form.TopicRequest\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{required: \"config.mqtt.form.messages.TopicResponse\"}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='configuration.TopicResponse'\n\t\t\t\t\t\t:label='$t(\"config.mqtt.form.TopicResponse\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<CInput\n\t\t\t\t\tv-model='configuration.User'\n\t\t\t\t\t:label='$t(\"config.mqtt.form.User\")'\n\t\t\t\t/>\n\t\t\t\t<CInput\n\t\t\t\t\tv-model='configuration.Password'\n\t\t\t\t\t:label='$t(\"config.mqtt.form.Password\")'\n\t\t\t\t/>\n\t\t\t\t<CInputCheckbox\n\t\t\t\t\t:checked.sync='configuration.EnabledSSL'\n\t\t\t\t\t:label='$t(\"config.mqtt.form.EnabledSSL\")'\n\t\t\t\t/>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='integer|min:0'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\tinteger: \"config.mqtt.form.messages.KeepAliveInterval\",\n\t\t\t\t\t\tmin: \"config.mqtt.form.messages.KeepAliveInterval\",\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model.number='configuration.KeepAliveInterval'\n\t\t\t\t\t\t:label='$t(\"config.mqtt.form.KeepAliveInterval\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tmin='0'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='integer|min:0'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\tinteger: \"config.mqtt.form.messages.ConnectTimeout\",\n\t\t\t\t\t\tmin: \"config.mqtt.form.messages.ConnectTimeout\",\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model.number='configuration.ConnectTimeout'\n\t\t\t\t\t\t:label='$t(\"config.mqtt.form.ConnectTimeout\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tmin='0'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t:rules='\"integer|between:0,\" + configuration.MaxReconnect'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\tbetween: \"config.mqtt.form.messages.MinReconnect\",\n\t\t\t\t\t\tinteger: \"config.mqtt.form.messages.MinReconnect\",\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model.number='configuration.MinReconnect'\n\t\t\t\t\t\t:label='$t(\"config.mqtt.form.MinReconnect\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t:max='configuration.MaxReconnect'\n\t\t\t\t\t\tmin='0'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t:rules='\"integer|min:\" + configuration.MinReconnect'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\tinteger: \"config.mqtt.form.messages.MaxReconnect\",\n\t\t\t\t\t\tmin: \"config.mqtt.form.messages.MaxReconnect\",\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model.number='configuration.MaxReconnect'\n\t\t\t\t\t\t:label='$t(\"config.mqtt.form.MaxReconnect\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t:min='configuration.MinReconnect'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<CInput\n\t\t\t\t\tv-model='configuration.TrustStore'\n\t\t\t\t\t:label='$t(\"config.mqtt.form.TrustStore\")'\n\t\t\t\t/>\n\t\t\t\t<CInput\n\t\t\t\t\tv-model='configuration.KeyStore'\n\t\t\t\t\t:label='$t(\"config.mqtt.form.KeyStore\")'\n\t\t\t\t/>\n\t\t\t\t<CInput\n\t\t\t\t\tv-model='configuration.PrivateKey'\n\t\t\t\t\t:label='$t(\"config.mqtt.form.PrivateKey\")'\n\t\t\t\t/>\n\t\t\t\t<CInput\n\t\t\t\t\tv-model='configuration.PrivateKeyPassword'\n\t\t\t\t\t:label='$t(\"config.mqtt.form.PrivateKeyPassword\")'\n\t\t\t\t/>\n\t\t\t\t<CInput\n\t\t\t\t\tv-model='configuration.EnabledCipherSuites'\n\t\t\t\t\t:label='$t(\"config.mqtt.form.EnabledCipherSuites\")'\n\t\t\t\t/>\n\t\t\t\t<CInputCheckbox\n\t\t\t\t\t:checked.sync='configuration.EnableServerCertAuth'\n\t\t\t\t\t:label='$t(\"config.mqtt.form.EnableServerCertAuth\")'\n\t\t\t\t/>\n\t\t\t\t<CInputCheckbox\n\t\t\t\t\t:checked.sync='configuration.acceptAsyncMsg'\n\t\t\t\t\t:label='$t(\"config.mqtt.form.acceptAsyncMsg\")'\n\t\t\t\t/>\n\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t{{ submitButton }}\n\t\t\t\t</CButton>\n\t\t\t</CForm>\n\t\t</ValidationObserver>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CForm, CInput, CInputCheckbox} from '@coreui/vue';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport {between, integer, min_value, required} from 'vee-validate/dist/rules';\n\nexport default {\n\tname: 'MqttMessagingForm',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tprops: {\n\t\tinstance: {\n\t\t\ttype: String,\n\t\t\trequired: false,\n\t\t\tdefault: null,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'iqrf::MqttMessaging',\n\t\t\tconfiguration: {\n\t\t\t\tinstance: null,\n\t\t\t\tBrokerAddr: null,\n\t\t\t\tClientId: null,\n\t\t\t\tPersistence: 1,\n\t\t\t\tQos: 1,\n\t\t\t\tTopicRequest: null,\n\t\t\t\tTopicResponse: null,\n\t\t\t\tUser: null,\n\t\t\t\tPassword: null,\n\t\t\t\tEnabledSSL: false,\n\t\t\t\tKeepAliveInterval: 20,\n\t\t\t\tConnectTimeout: 5,\n\t\t\t\tMinReconnect: 1,\n\t\t\t\tMaxReconnect: 64,\n\t\t\t\tTrustStore: null,\n\t\t\t\tKeyStore: null,\n\t\t\t\tPrivateKey: null,\n\t\t\t\tPrivateKeyPassword: null,\n\t\t\t\tEnabledCipherSuites: null,\n\t\t\t\tEnableServerCertAuth: false,\n\t\t\t\tacceptAsyncMsg: false,\n\t\t\t}\n\t\t};\n\t},\n\tcomputed: {\n\t\tqosOptions() {\n\t\t\tconst options = [0, 1, 2];\n\t\t\treturn options.map((option) => {\n\t\t\t\treturn {\n\t\t\t\t\tvalue: option,\n\t\t\t\t\tlabel: this.$t('config.mqtt.form.QoSes.' + option).toString(),\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\t\tsubmitButton() {\n\t\t\treturn this.$route.path === '/config/mqtt/add' ?\n\t\t\t\tthis.$t('forms.add') : this.$t('forms.save');\n\t\t},\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('min', min_value);\n\t\textend('required', required);\n\t\tif (this.instance !== null) {\n\t\t\tthis.getConfig();\n\t\t}\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getInstance(this.componentName, this.instance)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.configuration = response.data;\n\t\t\t\t\tthis.instance = this.configuration.instance;\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$router.push('/config/mqtt/');\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t\tsaveConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.instance !== null) {\n\t\t\t\tDaemonConfigurationService.updateInstance(this.componentName, this.instance, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t} else {\n\t\t\t\tDaemonConfigurationService.createInstance(this.componentName, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$router.push('/config/mqtt/');\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tif (this.$route.path === '/config/mqtt/add') {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('config.mqtt.messages.add.success', {instance: this.configuration.instance})\n\t\t\t\t\t\t.toString()\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('config.mqtt.messages.edit.success', {instance: this.configuration.instance})\n\t\t\t\t\t\t.toString()\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t},\n\tmetaInfo() {\n\t\treturn {\n\t\t\ttitle: this.$route.path === '/config/mqtt/add' ?\n\t\t\t\t'config.mqtt.add' : 'config.mqtt.edit',\n\t\t};\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MqttMessagingForm.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MqttMessagingForm.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./MqttMessagingForm.vue?vue&type=template&id=ced1352c&\"\nimport script from \"./MqttMessagingForm.vue?vue&type=script&lang=js&\"\nexport * from \"./MqttMessagingForm.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('ced1352c')) {\n      api.createRecord('ced1352c', component.options)\n    } else {\n      api.reload('ced1352c', component.options)\n    }\n    module.hot.accept(\"./MqttMessagingForm.vue?vue&type=template&id=ced1352c&\", function () {\n      api.rerender('ced1352c', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/MqttMessagingForm.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        [\n          _c(\n            \"CCardHeader\",\n            [\n              _c(\n                \"CButton\",\n                {\n                  staticClass: \"float-right\",\n                  attrs: {\n                    color: \"success\",\n                    to: \"/config/mqtt/add\",\n                    size: \"sm\"\n                  }\n                },\n                [\n                  _c(\"CIcon\", { attrs: { content: _vm.$options.icons.add } }),\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"table.actions.add\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ],\n                1\n              )\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\"CDataTable\", {\n                attrs: {\n                  items: _vm.instances,\n                  fields: _vm.fields,\n                  \"column-filter\": true,\n                  \"items-per-page\": 20,\n                  pagination: true,\n                  striped: true,\n                  sorter: { external: false, resetable: true }\n                },\n                scopedSlots: _vm._u([\n                  {\n                    key: \"EnabledSSL\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          [\n                            _c(\n                              \"CDropdown\",\n                              {\n                                attrs: {\n                                  color: item.EnabledSSL ? \"success\" : \"danger\",\n                                  \"toggler-text\": _vm.$t(\n                                    \"table.enabled.\" + item.EnabledSSL\n                                  ),\n                                  placement: \"top-start\",\n                                  size: \"sm\"\n                                }\n                              },\n                              [\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeEnabledSSL(item, true)\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(_vm.$t(\"table.enabled.true\")) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                ),\n                                _vm._v(\" \"),\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeEnabledSSL(item, false)\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(_vm.$t(\"table.enabled.false\")) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  },\n                  {\n                    key: \"acceptAsyncMsg\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          [\n                            _c(\n                              \"CDropdown\",\n                              {\n                                attrs: {\n                                  color: item.acceptAsyncMsg\n                                    ? \"success\"\n                                    : \"danger\",\n                                  \"toggler-text\": _vm.$t(\n                                    \"table.enabled.\" + item.acceptAsyncMsg\n                                  ),\n                                  placement: \"top-start\",\n                                  size: \"sm\"\n                                }\n                              },\n                              [\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeAcceptAsyncMsg(\n                                          item,\n                                          true\n                                        )\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(_vm.$t(\"table.enabled.true\")) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                ),\n                                _vm._v(\" \"),\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeAcceptAsyncMsg(\n                                          item,\n                                          false\n                                        )\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(_vm.$t(\"table.enabled.false\")) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  },\n                  {\n                    key: \"actions\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          { staticClass: \"col-actions\" },\n                          [\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: {\n                                  color: \"primary\",\n                                  to: \"/config/mqtt/edit/\" + item.instance,\n                                  size: \"sm\"\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.edit }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.edit\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            ),\n                            _vm._v(\" \"),\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: { color: \"danger\", size: \"sm\" },\n                                on: {\n                                  click: function($event) {\n                                    return _vm.confirmDelete(item)\n                                  }\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.delete }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.delete\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  }\n                ])\n              })\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CModal\",\n        {\n          attrs: { color: \"danger\", show: _vm.modals.delete.instance !== null },\n          on: {\n            \"update:show\": function($event) {\n              return _vm.$set(_vm.modals.delete, \"instance !== null\", $event)\n            }\n          },\n          scopedSlots: _vm._u([\n            {\n              key: \"header\",\n              fn: function() {\n                return [\n                  _c(\"h5\", { staticClass: \"modal-title\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\"config.mqtt.messages.delete.confirmTitle\")\n                        ) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"CButtonClose\", {\n                    staticClass: \"text-white\",\n                    on: {\n                      click: function($event) {\n                        _vm.modals.delete.instance = null\n                      }\n                    }\n                  })\n                ]\n              },\n              proxy: true\n            },\n            {\n              key: \"footer\",\n              fn: function() {\n                return [\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"danger\" },\n                      on: {\n                        click: function($event) {\n                          _vm.modals.delete.instance = null\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.no\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"success\" },\n                      on: { click: _vm.performDelete }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.yes\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  )\n                ]\n              },\n              proxy: true\n            }\n          ])\n        },\n        [\n          _vm._v(\" \"),\n          _vm.modals.delete.instance !== null\n            ? _c(\"span\", [\n                _vm._v(\n                  \"\\n\\t\\t\\t\" +\n                    _vm._s(\n                      _vm.$t(\"config.mqtt.messages.delete.confirm\", {\n                        instance: _vm.modals.delete.instance\n                      })\n                    ) +\n                    \"\\n\\t\\t\"\n                )\n              ])\n            : _vm._e()\n        ]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<div>\n\t\t<CCard>\n\t\t\t<CCardHeader>\n\t\t\t\t<CButton\n\t\t\t\t\tcolor='success'\n\t\t\t\t\tto='/config/mqtt/add'\n\t\t\t\t\tsize='sm'\n\t\t\t\t\tclass='float-right'\n\t\t\t\t>\n\t\t\t\t\t<CIcon :content='$options.icons.add' />\n\t\t\t\t\t{{ $t('table.actions.add') }}\n\t\t\t\t</CButton>\n\t\t\t</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<CDataTable\n\t\t\t\t\t:items='instances'\n\t\t\t\t\t:fields='fields'\n\t\t\t\t\t:column-filter='true'\n\t\t\t\t\t:items-per-page='20'\n\t\t\t\t\t:pagination='true'\n\t\t\t\t\t:striped='true'\n\t\t\t\t\t:sorter='{ external: false, resetable: true }'\n\t\t\t\t>\n\t\t\t\t\t<template #EnabledSSL='{item}'>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CDropdown\n\t\t\t\t\t\t\t\t:color='item.EnabledSSL ? \"success\" : \"danger\"'\n\t\t\t\t\t\t\t\t:toggler-text='$t(\"table.enabled.\" + item.EnabledSSL)'\n\t\t\t\t\t\t\t\tplacement='top-start'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeEnabledSSL(item, true)'>\n\t\t\t\t\t\t\t\t\t{{ $t('table.enabled.true') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeEnabledSSL(item, false)'>\n\t\t\t\t\t\t\t\t\t{{ $t('table.enabled.false') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t</CDropdown>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template #acceptAsyncMsg='{item}'>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CDropdown\n\t\t\t\t\t\t\t\t:color='item.acceptAsyncMsg ? \"success\" : \"danger\"'\n\t\t\t\t\t\t\t\t:toggler-text='$t(\"table.enabled.\" + item.acceptAsyncMsg)'\n\t\t\t\t\t\t\t\tplacement='top-start'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeAcceptAsyncMsg(item, true)'>\n\t\t\t\t\t\t\t\t\t{{ $t('table.enabled.true') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeAcceptAsyncMsg(item, false)'>\n\t\t\t\t\t\t\t\t\t{{ $t('table.enabled.false') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t</CDropdown>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template #actions='{item}'>\n\t\t\t\t\t\t<td class='col-actions'>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\t\t:to='\"/config/mqtt/edit/\" + item.instance'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.edit' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.edit') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton color='danger' size='sm' @click='confirmDelete(item)'>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.delete' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.delete') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t</CDataTable>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t\t<CModal\n\t\t\tcolor='danger'\n\t\t\t:show.sync='modals.delete.instance !== null'\n\t\t>\n\t\t\t<template #header>\n\t\t\t\t<h5 class='modal-title'>\n\t\t\t\t\t{{ $t('config.mqtt.messages.delete.confirmTitle') }}\n\t\t\t\t</h5>\n\t\t\t\t<CButtonClose class='text-white' @click='modals.delete.instance = null' />\n\t\t\t</template>\n\t\t\t<span v-if='modals.delete.instance !== null'>\n\t\t\t\t{{ $t('config.mqtt.messages.delete.confirm', {instance: modals.delete.instance}) }}\n\t\t\t</span>\n\t\t\t<template #footer>\n\t\t\t\t<CButton color='danger' @click='modals.delete.instance = null'>\n\t\t\t\t\t{{ $t('forms.no') }}\n\t\t\t\t</CButton>\n\t\t\t\t<CButton color='success' @click='performDelete'>\n\t\t\t\t\t{{ $t('forms.yes') }}\n\t\t\t\t</CButton>\n\t\t\t</template>\n\t\t</CModal>\n\t</div>\n</template>\n\n<script>\nimport {\n\tCButton,\n\tCButtonClose,\n\tCCard,\n\tCCardBody,\n\tCCardHeader,\n\tCDataTable,\n\tCDropdown,\n\tCDropdownItem,\n\tCIcon,\n\tCModal\n} from '@coreui/vue/src';\nimport {cilPencil, cilPlus, cilTrash} from '@coreui/icons';\nimport DaemonConfigurationService\n\tfrom '../../services/DaemonConfigurationService';\n\nexport default {\n\tname: 'MqttMessagingTable',\n\tcomponents: {\n\t\tCButton,\n\t\tCButtonClose,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCDataTable,\n\t\tCDropdown,\n\t\tCDropdownItem,\n\t\tCIcon,\n\t\tCModal,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'iqrf::MqttMessaging',\n\t\t\tfields: [\n\t\t\t\t{\n\t\t\t\t\tkey: 'instance',\n\t\t\t\t\tlabel: this.$t('config.mqtt.form.instance'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'BrokerAddr',\n\t\t\t\t\tlabel: this.$t('config.mqtt.form.BrokerAddr'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'ClientId',\n\t\t\t\t\tlabel: this.$t('config.mqtt.form.ClientId'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'TopicRequest',\n\t\t\t\t\tlabel: this.$t('config.mqtt.form.TopicRequest'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'TopicResponse',\n\t\t\t\t\tlabel: this.$t('config.mqtt.form.TopicResponse'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'EnabledSSL',\n\t\t\t\t\tlabel: this.$t('config.mqtt.form.EnabledSSL'),\n\t\t\t\t\tfilter: false,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'acceptAsyncMsg',\n\t\t\t\t\tlabel: this.$t('config.mqtt.form.acceptAsyncMsg'),\n\t\t\t\t\tfilter: false,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'actions',\n\t\t\t\t\tlabel: this.$t('table.actions.title'),\n\t\t\t\t\tsorter: false,\n\t\t\t\t\tfilter: false,\n\t\t\t\t},\n\t\t\t],\n\t\t\tinstances: [],\n\t\t\tmodals: {\n\t\t\t\tdelete: {\n\t\t\t\t\tinstance: null,\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.$store.commit('spinner/SHOW');\n\t\tthis.getInstances();\n\t},\n\tmethods: {\n\t\tconfirmDelete(instance) {\n\t\t\tthis.modals.delete.instance = instance.instance;\n\t\t},\n\t\tchangeAcceptAsyncMsg(instance, acceptAsyncMsg) {\n\t\t\tthis.edit(instance, {acceptAsyncMsg: acceptAsyncMsg});\n\t\t},\n\t\tchangeEnabledSSL(instance, enabledSsl) {\n\t\t\tthis.edit(instance, {EnabledSSL: enabledSsl});\n\t\t},\n\t\tedit(instance, newSettings) {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tlet settings = {\n\t\t\t\t...instance,\n\t\t\t\t...newSettings,\n\t\t\t};\n\t\t\treturn DaemonConfigurationService.updateInstance(this.componentName, settings.instance, settings)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getInstances().then(() => {\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('config.mqtt.messages.edit.success', {instance: settings.instance})\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t},\n\t\tgetInstances() {\n\t\t\treturn DaemonConfigurationService.getComponent(this.componentName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.instances = response.data.instances;\n\t\t\t\t})\n\t\t\t\t.catch(() => this.$store.commit('spinner/HIDE'));\n\t\t},\n\t\tperformDelete() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tconst instance = this.modals.delete.instance;\n\t\t\tthis.modals.delete.instance = null;\n\t\t\tDaemonConfigurationService.deleteInstance(this.componentName, instance)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getInstances().then(() => {\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('config.mqtt.messages.delete.success', {instance: instance})\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => this.$store.commit('spinner/HIDE'));\n\t\t},\n\t},\n\ticons: {\n\t\tadd: cilPlus,\n\t\tdelete: cilTrash,\n\t\tedit: cilPencil,\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.mqtt.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MqttMessagingTable.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MqttMessagingTable.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./MqttMessagingTable.vue?vue&type=template&id=cade9dd0&\"\nimport script from \"./MqttMessagingTable.vue?vue&type=script&lang=js&\"\nexport * from \"./MqttMessagingTable.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('cade9dd0')) {\n      api.createRecord('cade9dd0', component.options)\n    } else {\n      api.reload('cade9dd0', component.options)\n    }\n    module.hot.accept(\"./MqttMessagingTable.vue?vue&type=template&id=cade9dd0&\", function () {\n      api.rerender('cade9dd0', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/MqttMessagingTable.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\"ValidationObserver\", {\n        scopedSlots: _vm._u([\n          {\n            key: \"default\",\n            fn: function(ref) {\n              var invalid = ref.invalid\n              return [\n                _c(\n                  \"CForm\",\n                  {\n                    on: {\n                      submit: function($event) {\n                        $event.preventDefault()\n                        return _vm.saveConfig($event)\n                      }\n                    }\n                  },\n                  [\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required\",\n                        \"custom-messages\": {\n                          required: \"config.udp.form.messages.instance\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\"config.udp.form.instance\"),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0])\n                                  },\n                                  model: {\n                                    value: _vm.configuration.instance,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.configuration,\n                                        \"instance\",\n                                        $$v\n                                      )\n                                    },\n                                    expression: \"configuration.instance\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required|between:1,65535\",\n                        \"custom-messages\": {\n                          between: \"config.udp.form.messages.RemotePort\",\n                          required: \"config.udp.form.messages.RemotePort\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\"config.udp.form.RemotePort\"),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0]),\n                                    type: \"number\",\n                                    min: \"1\",\n                                    max: \"65535\"\n                                  },\n                                  model: {\n                                    value: _vm.configuration.RemotePort,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.configuration,\n                                        \"RemotePort\",\n                                        _vm._n($$v)\n                                      )\n                                    },\n                                    expression: \"configuration.RemotePort\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required|between:1,65535\",\n                        \"custom-messages\": {\n                          between: \"config.udp.form.messages.LocalPort\",\n                          required: \"config.udp.form.messages.LocalPort\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\"config.udp.form.LocalPort\"),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0]),\n                                    type: \"number\",\n                                    min: \"1\",\n                                    max: \"65535\"\n                                  },\n                                  model: {\n                                    value: _vm.configuration.LocalPort,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.configuration,\n                                        \"LocalPort\",\n                                        _vm._n($$v)\n                                      )\n                                    },\n                                    expression: \"configuration.LocalPort\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\n                      \"CButton\",\n                      {\n                        attrs: {\n                          type: \"submit\",\n                          color: \"primary\",\n                          disabled: invalid\n                        }\n                      },\n                      [\n                        _vm._v(\n                          \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.submitButton) + \"\\n\\t\\t\\t\"\n                        )\n                      ]\n                    )\n                  ],\n                  1\n                )\n              ]\n            }\n          }\n        ])\n      })\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t<CForm @submit.prevent='saveConfig'>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{required: \"config.udp.form.messages.instance\"}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='configuration.instance'\n\t\t\t\t\t\t:label='$t(\"config.udp.form.instance\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='required|between:1,65535'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\tbetween: \"config.udp.form.messages.RemotePort\",\n\t\t\t\t\t\trequired: \"config.udp.form.messages.RemotePort\",\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model.number='configuration.RemotePort'\n\t\t\t\t\t\t:label='$t(\"config.udp.form.RemotePort\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\tmax='65535'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='required|between:1,65535'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\tbetween: \"config.udp.form.messages.LocalPort\",\n\t\t\t\t\t\trequired: \"config.udp.form.messages.LocalPort\",\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model.number='configuration.LocalPort'\n\t\t\t\t\t\t:label='$t(\"config.udp.form.LocalPort\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\tmax='65535'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t{{ submitButton }}\n\t\t\t\t</CButton>\n\t\t\t</CForm>\n\t\t</ValidationObserver>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CForm, CInput} from '@coreui/vue';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport {between, required} from 'vee-validate/dist/rules';\n\nexport default {\n\tname: 'UdpMessagingForm',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tprops: {\n\t\tinstance: {\n\t\t\ttype: String,\n\t\t\trequired: false,\n\t\t\tdefault: null,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'iqrf::UdpMessaging',\n\t\t\tconfiguration: {\n\t\t\t\tinstance: null,\n\t\t\t\tRemotePort: null,\n\t\t\t\tLocalPort: null,\n\t\t\t}\n\t\t};\n\t},\n\tcomputed: {\n\t\tsubmitButton() {\n\t\t\treturn this.$route.path === '/config/udp/add' ?\n\t\t\t\tthis.$t('forms.add') : this.$t('forms.save');\n\t\t},\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('required', required);\n\t\tif (this.instance !== null) {\n\t\t\tthis.getConfig();\n\t\t}\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getInstance(this.componentName, this.instance)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.configuration = response.data;\n\t\t\t\t\tthis.instance = this.configuration.instance;\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthis.$router.push('/config/udp/');\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t\tsaveConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.instance !== null) {\n\t\t\t\tDaemonConfigurationService.updateInstance(this.componentName, this.instance, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t} else {\n\t\t\t\tDaemonConfigurationService.createInstance(this.componentName, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$router.push('/config/udp/');\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tif (this.$route.path === '/config/udp/add') {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('config.udp.messages.add.success', {instance: this.configuration.instance})\n\t\t\t\t\t\t.toString());\n\t\t\t} else {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('config.udp.messages.edit.success', {instance: this.configuration.instance})\n\t\t\t\t\t\t.toString()\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t},\n\tmetaInfo() {\n\t\treturn {\n\t\t\ttitle: this.$route.path === '/config/udp/add' ?\n\t\t\t\t'config.udp.add' : 'config.udp.edit',\n\t\t};\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./UdpMessagingForm.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./UdpMessagingForm.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./UdpMessagingForm.vue?vue&type=template&id=e638d55e&\"\nimport script from \"./UdpMessagingForm.vue?vue&type=script&lang=js&\"\nexport * from \"./UdpMessagingForm.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('e638d55e')) {\n      api.createRecord('e638d55e', component.options)\n    } else {\n      api.reload('e638d55e', component.options)\n    }\n    module.hot.accept(\"./UdpMessagingForm.vue?vue&type=template&id=e638d55e&\", function () {\n      api.rerender('e638d55e', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/UdpMessagingForm.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        [\n          _vm.instances.length < 1\n            ? _c(\n                \"CCardHeader\",\n                [\n                  _c(\n                    \"CButton\",\n                    {\n                      staticClass: \"float-right\",\n                      attrs: {\n                        color: \"success\",\n                        to: \"/config/udp/add\",\n                        size: \"sm\"\n                      }\n                    },\n                    [\n                      _c(\"CIcon\", {\n                        attrs: { content: _vm.$options.icons.add }\n                      }),\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" +\n                          _vm._s(_vm.$t(\"table.actions.add\")) +\n                          \"\\n\\t\\t\\t\"\n                      )\n                    ],\n                    1\n                  )\n                ],\n                1\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\"CDataTable\", {\n                attrs: {\n                  items: _vm.instances,\n                  fields: _vm.fields,\n                  \"column-filter\": true,\n                  \"items-per-page\": 20,\n                  pagination: true,\n                  striped: true,\n                  sorter: { external: false, resetable: true }\n                },\n                scopedSlots: _vm._u([\n                  {\n                    key: \"actions\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          { staticClass: \"col-actions\" },\n                          [\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: {\n                                  color: \"primary\",\n                                  to: \"/config/udp/edit/\" + item.instance,\n                                  size: \"sm\"\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.edit }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.edit\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            ),\n                            _vm._v(\" \"),\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: { color: \"danger\", size: \"sm\" },\n                                on: {\n                                  click: function($event) {\n                                    return _vm.confirmDelete(item)\n                                  }\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.delete }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.delete\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  }\n                ])\n              })\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CModal\",\n        {\n          attrs: { color: \"danger\", show: _vm.modals.delete.instance !== null },\n          on: {\n            \"update:show\": function($event) {\n              return _vm.$set(_vm.modals.delete, \"instance !== null\", $event)\n            }\n          },\n          scopedSlots: _vm._u([\n            {\n              key: \"header\",\n              fn: function() {\n                return [\n                  _c(\"h5\", { staticClass: \"modal-title\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\"config.udp.messages.delete.confirmTitle\")\n                        ) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"CButtonClose\", {\n                    staticClass: \"text-white\",\n                    on: {\n                      click: function($event) {\n                        _vm.modals.delete.instance = null\n                      }\n                    }\n                  })\n                ]\n              },\n              proxy: true\n            },\n            {\n              key: \"footer\",\n              fn: function() {\n                return [\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"danger\" },\n                      on: {\n                        click: function($event) {\n                          _vm.modals.delete.instance = null\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.no\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"success\" },\n                      on: { click: _vm.performDelete }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.yes\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  )\n                ]\n              },\n              proxy: true\n            }\n          ])\n        },\n        [\n          _vm._v(\" \"),\n          _vm.modals.delete.instance !== null\n            ? _c(\"span\", [\n                _vm._v(\n                  \"\\n\\t\\t\\t\" +\n                    _vm._s(\n                      _vm.$t(\"config.udp.messages.delete.confirm\", {\n                        instance: _vm.modals.delete.instance\n                      })\n                    ) +\n                    \"\\n\\t\\t\"\n                )\n              ])\n            : _vm._e()\n        ]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<div>\n\t\t<CCard>\n\t\t\t<CCardHeader v-if='instances.length < 1'>\n\t\t\t\t<CButton\n\t\t\t\t\tcolor='success'\n\t\t\t\t\tto='/config/udp/add'\n\t\t\t\t\tsize='sm'\n\t\t\t\t\tclass='float-right'\n\t\t\t\t>\n\t\t\t\t\t<CIcon :content='$options.icons.add' />\n\t\t\t\t\t{{ $t('table.actions.add') }}\n\t\t\t\t</CButton>\n\t\t\t</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<CDataTable\n\t\t\t\t\t:items='instances'\n\t\t\t\t\t:fields='fields'\n\t\t\t\t\t:column-filter='true'\n\t\t\t\t\t:items-per-page='20'\n\t\t\t\t\t:pagination='true'\n\t\t\t\t\t:striped='true'\n\t\t\t\t\t:sorter='{ external: false, resetable: true }'\n\t\t\t\t>\n\t\t\t\t\t<template #actions='{item}'>\n\t\t\t\t\t\t<td class='col-actions'>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\t\t:to='\"/config/udp/edit/\" + item.instance'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.edit' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.edit') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton color='danger' size='sm' @click='confirmDelete(item)'>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.delete' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.delete') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t</CDataTable>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t\t<CModal\n\t\t\tcolor='danger'\n\t\t\t:show.sync='modals.delete.instance !== null'\n\t\t>\n\t\t\t<template #header>\n\t\t\t\t<h5 class='modal-title'>\n\t\t\t\t\t{{ $t('config.udp.messages.delete.confirmTitle') }}\n\t\t\t\t</h5>\n\t\t\t\t<CButtonClose\n\t\t\t\t\tclass='text-white'\n\t\t\t\t\t@click='modals.delete.instance = null'\n\t\t\t\t/>\n\t\t\t</template>\n\t\t\t<span v-if='modals.delete.instance !== null'>\n\t\t\t\t{{ $t('config.udp.messages.delete.confirm', {instance: modals.delete.instance}) }}\n\t\t\t</span>\n\t\t\t<template #footer>\n\t\t\t\t<CButton color='danger' @click='modals.delete.instance = null'>\n\t\t\t\t\t{{ $t('forms.no') }}\n\t\t\t\t</CButton>\n\t\t\t\t<CButton color='success' @click='performDelete'>\n\t\t\t\t\t{{ $t('forms.yes') }}\n\t\t\t\t</CButton>\n\t\t\t</template>\n\t\t</CModal>\n\t</div>\n</template>\n\n<script>\nimport {\n\tCButton,\n\tCButtonClose,\n\tCCard,\n\tCCardBody,\n\tCCardHeader,\n\tCDataTable,\n\tCIcon,\n\tCModal\n} from '@coreui/vue/src';\nimport {cilPencil, cilPlus, cilTrash} from '@coreui/icons';\nimport DaemonConfigurationService\n\tfrom '../../services/DaemonConfigurationService';\n\nexport default {\n\tname: 'UdpMessagingTable',\n\tcomponents: {\n\t\tCButton,\n\t\tCButtonClose,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCDataTable,\n\t\tCIcon,\n\t\tCModal,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'iqrf::UdpMessaging',\n\t\t\tfields: [\n\t\t\t\t{\n\t\t\t\t\tkey: 'instance',\n\t\t\t\t\tlabel: this.$t('config.udp.form.instance'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'RemotePort',\n\t\t\t\t\tlabel: this.$t('config.udp.form.RemotePort'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'LocalPort',\n\t\t\t\t\tlabel: this.$t('config.udp.form.LocalPort'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'actions',\n\t\t\t\t\tlabel: this.$t('table.actions.title'),\n\t\t\t\t\tsorter: false,\n\t\t\t\t\tfilter: false,\n\t\t\t\t},\n\t\t\t],\n\t\t\tinstances: [],\n\t\t\tmodals: {\n\t\t\t\tdelete: {\n\t\t\t\t\tinstance: null,\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.$store.commit('spinner/SHOW');\n\t\tthis.getInstances();\n\t},\n\tmethods: {\n\t\tconfirmDelete(instance) {\n\t\t\tthis.modals.delete.instance = instance.instance;\n\t\t},\n\t\tchangeAcceptAsyncMsg(instance, acceptAsyncMsg) {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tinstance.acceptAsyncMsg = acceptAsyncMsg;\n\t\t\treturn DaemonConfigurationService.updateInstance(this.componentName, instance.instance, instance)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getInstances().then(() => {\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('config.udp.messages.edit.success', {instance: instance.instance})\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t},\n\t\tgetInstances() {\n\t\t\treturn DaemonConfigurationService.getComponent(this.componentName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.instances = response.data.instances;\n\t\t\t\t})\n\t\t\t\t.catch(() => this.$store.commit('spinner/HIDE'));\n\t\t},\n\t\tperformDelete() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tconst instance = this.modals.delete.instance;\n\t\t\tthis.modals.delete.instance = null;\n\t\t\tDaemonConfigurationService.deleteInstance(this.componentName, instance)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getInstances().then(() => {\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('config.udp.messages.delete.success', {instance: instance})\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => this.$store.commit('spinner/HIDE'));\n\t\t},\n\t},\n\ticons: {\n\t\tadd: cilPlus,\n\t\tdelete: cilTrash,\n\t\tedit: cilPencil,\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.udp.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./UdpMessagingTable.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./UdpMessagingTable.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./UdpMessagingTable.vue?vue&type=template&id=2fca7e11&\"\nimport script from \"./UdpMessagingTable.vue?vue&type=script&lang=js&\"\nexport * from \"./UdpMessagingTable.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('2fca7e11')) {\n      api.createRecord('2fca7e11', component.options)\n    } else {\n      api.reload('2fca7e11', component.options)\n    }\n    module.hot.accept(\"./UdpMessagingTable.vue?vue&type=template&id=2fca7e11&\", function () {\n      api.rerender('2fca7e11', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/UdpMessagingTable.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        [\n          _c(\n            \"CCardHeader\",\n            [\n              _c(\n                \"CButton\",\n                {\n                  staticClass: \"float-right\",\n                  attrs: {\n                    color: \"success\",\n                    size: \"sm\",\n                    to: \"/config/tracer/add\"\n                  }\n                },\n                [\n                  _c(\"CIcon\", { attrs: { content: _vm.$options.icons.add } }),\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"table.actions.add\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ],\n                1\n              )\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\"CDataTable\", {\n                attrs: {\n                  fields: _vm.fields,\n                  items: _vm.instances,\n                  \"column-filter\": true,\n                  \"items-per-page\": 20,\n                  pagination: true,\n                  striped: true,\n                  sorter: { external: false, resetable: true }\n                },\n                scopedSlots: _vm._u([\n                  {\n                    key: \"actions\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          { staticClass: \"col-actions\" },\n                          [\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: {\n                                  color: \"info\",\n                                  size: \"sm\",\n                                  to: \"/config/tracer/edit/\" + item.instance\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.edit }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.edit\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            ),\n                            _vm._v(\" \"),\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: { color: \"danger\", size: \"sm\" },\n                                on: {\n                                  click: function($event) {\n                                    _vm.modals.currentInstance = item.instance\n                                  }\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.remove }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.delete\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  }\n                ])\n              })\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CModal\",\n        {\n          attrs: { color: \"danger\", show: _vm.modals.currentInstance !== null },\n          on: {\n            \"update:show\": function($event) {\n              return _vm.$set(_vm.modals, \"currentInstance !== null\", $event)\n            }\n          },\n          scopedSlots: _vm._u([\n            {\n              key: \"header\",\n              fn: function() {\n                return [\n                  _c(\"h5\", { staticClass: \"modal-title\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"config.tracer.messages.removeTitle\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              },\n              proxy: true\n            },\n            {\n              key: \"footer\",\n              fn: function() {\n                return [\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"danger\" },\n                      on: {\n                        click: function($event) {\n                          _vm.modals.currentInstance = null\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.no\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"success\" },\n                      on: { click: _vm.removeInstance }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.yes\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  )\n                ]\n              },\n              proxy: true\n            }\n          ])\n        },\n        [\n          _vm._v(\n            \"\\n\\t\\t\" +\n              _vm._s(\n                _vm.$t(\"config.tracer.messages.removeItem\", {\n                  instance: _vm.modals.currentInstance\n                })\n              ) +\n              \"\\n\\t\\t\"\n          )\n        ]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<div>\n\t\t<CCard>\n\t\t\t<CCardHeader>\n\t\t\t\t<CButton\n\t\t\t\t\tcolor='success'\n\t\t\t\t\tsize='sm'\n\t\t\t\t\tto='/config/tracer/add'\n\t\t\t\t\tclass='float-right'\n\t\t\t\t>\n\t\t\t\t\t<CIcon :content='$options.icons.add' />\n\t\t\t\t\t{{ $t('table.actions.add') }}\n\t\t\t\t</CButton>\n\t\t\t</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<CDataTable\n\t\t\t\t\t:fields='fields'\n\t\t\t\t\t:items='instances'\n\t\t\t\t\t:column-filter='true'\n\t\t\t\t\t:items-per-page='20'\n\t\t\t\t\t:pagination='true'\n\t\t\t\t\t:striped='true'\n\t\t\t\t\t:sorter='{ external: false, resetable: true }'\n\t\t\t\t>\n\t\t\t\t\t<template #actions='{item}'>\n\t\t\t\t\t\t<td class='col-actions'>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tcolor='info'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t\t:to='\"/config/tracer/edit/\" + item.instance'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.edit' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.edit') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tcolor='danger'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t\t@click='modals.currentInstance = item.instance'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.remove' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.delete') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t</CDataTable>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t\t<CModal\n\t\t\tcolor='danger'\n\t\t\t:show.sync='modals.currentInstance !== null'\n\t\t>\n\t\t\t<template #header>\n\t\t\t\t<h5 class='modal-title'>\n\t\t\t\t\t{{ $t('config.tracer.messages.removeTitle') }}\n\t\t\t\t</h5>\n\t\t\t</template>\n\t\t\t{{ $t('config.tracer.messages.removeItem', {instance: modals.currentInstance}) }}\n\t\t\t<template #footer>\n\t\t\t\t<CButton color='danger' @click='modals.currentInstance = null'>\n\t\t\t\t\t{{ $t('forms.no') }}\n\t\t\t\t</CButton>\n\t\t\t\t<CButton color='success' @click='removeInstance'>\n\t\t\t\t\t{{ $t('forms.yes') }}\n\t\t\t\t</CButton>\n\t\t\t</template>\n\t\t</CModal>\n\t</div>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CDataTable, CIcon, CModal} from '@coreui/vue/src';\nimport {cilPencil, cilPlus, cilTrash} from '@coreui/icons';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\n\nexport default {\n\tname: 'TracerList',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCDataTable,\n\t\tCIcon,\n\t\tCModal,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'shape::TraceFileService',\n\t\t\tfields: [\n\t\t\t\t{key: 'instance', label: this.$t('config.tracer.form.instance')},\n\t\t\t\t{key: 'path', label: this.$t('config.tracer.form.path')},\n\t\t\t\t{key: 'filename', label: this.$t('config.tracer.form.filename')},\n\t\t\t\t{\n\t\t\t\t\tkey: 'actions',\n\t\t\t\t\tlabel: this.$t('table.actions.title'),\n\t\t\t\t\tfilter: false,\n\t\t\t\t\tsorter: false,\n\t\t\t\t},\n\t\t\t],\n\t\t\tinstances: [],\n\t\t\tmodals: {\n\t\t\t\tcurrentInstance: null,\n\t\t\t},\n\t\t\taddModal: false,\n\t\t\teditModal: false,\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\treturn DaemonConfigurationService.getComponent(this.componentName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.instances = response.data.instances;\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t\tremoveInstance() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tconst instance = this.modals.currentInstance;\n\t\t\tthis.modals.currentInstance = null;\n\t\t\tDaemonConfigurationService.deleteInstance(this.componentName, instance)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getConfig().then(() => {\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('config.tracer.messages.removeSuccess', {instance: instance})\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t},\n\ticons: {\n\t\tadd: cilPlus,\n\t\tedit: cilPencil,\n\t\tremove: cilTrash,\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.tracer.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TracerList.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TracerList.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TracerList.vue?vue&type=template&id=cef33996&\"\nimport script from \"./TracerList.vue?vue&type=script&lang=js&\"\nexport * from \"./TracerList.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('cef33996')) {\n      api.createRecord('cef33996', component.options)\n    } else {\n      api.reload('cef33996', component.options)\n    }\n    module.hot.accept(\"./TracerList.vue?vue&type=template&id=cef33996&\", function () {\n      api.rerender('cef33996', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/TracerList.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      {\n                        on: {\n                          submit: function($event) {\n                            $event.preventDefault()\n                            return _vm.saveInstance($event)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"config.tracer.form.messages.instance\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"config.tracer.form.instance\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.instance,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"instance\",\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"configuration.instance\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"CInput\", {\n                          attrs: { label: _vm.$t(\"config.tracer.form.path\") },\n                          model: {\n                            value: _vm.configuration.path,\n                            callback: function($$v) {\n                              _vm.$set(_vm.configuration, \"path\", $$v)\n                            },\n                            expression: \"configuration.path\"\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"config.tracer.form.messages.filename\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"config.tracer.form.filename\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.filename,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"filename\",\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"configuration.filename\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|min:1\",\n                            \"custom-messages\": {\n                              required: \"config.tracer.form.messages.maxSizeMb\",\n                              min: \"config.tracer.form.messages.maxSizeMb\",\n                              integer: \"forms.messages.integer\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        label: _vm.$t(\n                                          \"config.tracer.form.maxSizeMb\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.maxSizeMB,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"maxSizeMB\",\n                                            _vm._n($$v)\n                                          )\n                                        },\n                                        expression: \"configuration.maxSizeMB\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.configuration.timestampFiles,\n                            label: _vm.$t(\"config.tracer.form.timestampFiles\")\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              return _vm.$set(\n                                _vm.configuration,\n                                \"timestampFiles\",\n                                $event\n                              )\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"h4\", [\n                          _vm._v(\n                            _vm._s(\n                              _vm.$t(\"config.tracer.form.verbosityLevels.title\")\n                            )\n                          )\n                        ]),\n                        _vm._v(\" \"),\n                        _vm._l(_vm.configuration.VerbosityLevels, function(\n                          level,\n                          i\n                        ) {\n                          return _c(\n                            \"div\",\n                            { key: i, staticClass: \"form-group\" },\n                            [\n                              _c(\"ValidationProvider\", {\n                                attrs: {\n                                  rules: \"integer|required\",\n                                  \"custom-messages\": {\n                                    integer: \"forms.messages.integer\",\n                                    required:\n                                      \"config.tracer.form.messages.verbosityLevels.channel\"\n                                  }\n                                },\n                                scopedSlots: _vm._u(\n                                  [\n                                    {\n                                      key: \"default\",\n                                      fn: function(ref) {\n                                        var errors = ref.errors\n                                        var touched = ref.touched\n                                        var valid = ref.valid\n                                        return [\n                                          _c(\"CInput\", {\n                                            attrs: {\n                                              type: \"number\",\n                                              label: _vm.$t(\n                                                \"config.tracer.form.channel\"\n                                              ),\n                                              \"is-valid\": touched\n                                                ? valid\n                                                : null,\n                                              \"invalid-feedback\": _vm.$t(\n                                                errors[0]\n                                              )\n                                            },\n                                            model: {\n                                              value: level.channel,\n                                              callback: function($$v) {\n                                                _vm.$set(\n                                                  level,\n                                                  \"channel\",\n                                                  _vm._n($$v)\n                                                )\n                                              },\n                                              expression: \"level.channel\"\n                                            }\n                                          })\n                                        ]\n                                      }\n                                    }\n                                  ],\n                                  null,\n                                  true\n                                )\n                              }),\n                              _vm._v(\" \"),\n                              _c(\"ValidationProvider\", {\n                                attrs: {\n                                  rules: \"required\",\n                                  \"custom-messages\": {\n                                    required:\n                                      \"config.tracer.form.messages.verbosityLevels.level\"\n                                  }\n                                },\n                                scopedSlots: _vm._u(\n                                  [\n                                    {\n                                      key: \"default\",\n                                      fn: function(ref) {\n                                        var errors = ref.errors\n                                        var touched = ref.touched\n                                        var valid = ref.valid\n                                        return [\n                                          _c(\"CSelect\", {\n                                            attrs: {\n                                              value: level.level,\n                                              label: _vm.$t(\n                                                \"config.tracer.form.level\"\n                                              ),\n                                              placeholder: _vm.$t(\n                                                \"config.tracer.form.messages.verbosityLevels.level\"\n                                              ),\n                                              options: [\n                                                {\n                                                  value: \"ERR\",\n                                                  label: _vm.$t(\n                                                    \"config.tracer.form.levels.error\"\n                                                  )\n                                                },\n                                                {\n                                                  value: \"WAR\",\n                                                  label: _vm.$t(\n                                                    \"config.tracer.form.levels.warning\"\n                                                  )\n                                                },\n                                                {\n                                                  value: \"INF\",\n                                                  label: _vm.$t(\n                                                    \"config.tracer.form.levels.info\"\n                                                  )\n                                                },\n                                                {\n                                                  value: \"DBG\",\n                                                  label: _vm.$t(\n                                                    \"config.tracer.form.levels.debug\"\n                                                  )\n                                                }\n                                              ],\n                                              \"is-valid\": touched\n                                                ? valid\n                                                : null,\n                                              \"invalid-feedback\": _vm.$t(\n                                                errors[0]\n                                              )\n                                            },\n                                            on: {\n                                              \"update:value\": function($event) {\n                                                return _vm.$set(\n                                                  level,\n                                                  \"level\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          })\n                                        ]\n                                      }\n                                    }\n                                  ],\n                                  null,\n                                  true\n                                )\n                              }),\n                              _vm._v(\" \"),\n                              _vm.configuration.VerbosityLevels.length > 1\n                                ? _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: { color: \"danger\" },\n                                      on: {\n                                        click: function($event) {\n                                          return _vm.removeLevel(i)\n                                        }\n                                      }\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"config.tracer.form.verbosityLevels.remove\"\n                                            )\n                                          ) +\n                                          \"\\n\\t\\t\\t\\t\\t\"\n                                      )\n                                    ]\n                                  )\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              i === _vm.configuration.VerbosityLevels.length - 1\n                                ? _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: {\n                                        color: \"success\",\n                                        disabled:\n                                          level.channel === undefined ||\n                                          level.level === undefined\n                                      },\n                                      on: { click: _vm.addLevel }\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"config.tracer.form.verbosityLevels.add\"\n                                            )\n                                          ) +\n                                          \"\\n\\t\\t\\t\\t\\t\"\n                                      )\n                                    ]\n                                  )\n                                : _vm._e()\n                            ],\n                            1\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              type: \"submit\",\n                              color: \"primary\",\n                              disabled: invalid\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      2\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='saveInstance'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{required: \"config.tracer.form.messages.instance\"}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='configuration.instance'\n\t\t\t\t\t\t\t:label='$t(\"config.tracer.form.instance\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='configuration.path'\n\t\t\t\t\t\t:label='$t(\"config.tracer.form.path\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{required: \"config.tracer.form.messages.filename\"}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='configuration.filename'\n\t\t\t\t\t\t\t:label='$t(\"config.tracer.form.filename\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|min:1'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"config.tracer.form.messages.maxSizeMb\",\n\t\t\t\t\t\t\tmin: \"config.tracer.form.messages.maxSizeMb\",\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='configuration.maxSizeMB'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t:label='$t(\"config.tracer.form.maxSizeMb\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='configuration.timestampFiles'\n\t\t\t\t\t\t:label='$t(\"config.tracer.form.timestampFiles\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<h4>{{ $t(\"config.tracer.form.verbosityLevels.title\") }}</h4>\n\t\t\t\t\t<div\n\t\t\t\t\t\tv-for='(level, i) of configuration.VerbosityLevels'\n\t\t\t\t\t\t:key='i'\n\t\t\t\t\t\tclass='form-group'\n\t\t\t\t\t>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='integer|required'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\t\trequired: \"config.tracer.form.messages.verbosityLevels.channel\"\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model.number='level.channel'\n\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t:label='$t(\"config.tracer.form.channel\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t:custom-messages='{required: \"config.tracer.form.messages.verbosityLevels.level\"}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CSelect\n\t\t\t\t\t\t\t\t:value.sync='level.level'\n\t\t\t\t\t\t\t\t:label='$t(\"config.tracer.form.level\")'\n\t\t\t\t\t\t\t\t:placeholder='$t(\"config.tracer.form.messages.verbosityLevels.level\")'\n\t\t\t\t\t\t\t\t:options='[\n\t\t\t\t\t\t\t\t\t{value: \"ERR\", label: $t(\"config.tracer.form.levels.error\")},\n\t\t\t\t\t\t\t\t\t{value: \"WAR\", label: $t(\"config.tracer.form.levels.warning\")},\n\t\t\t\t\t\t\t\t\t{value: \"INF\", label: $t(\"config.tracer.form.levels.info\")},\n\t\t\t\t\t\t\t\t\t{value: \"DBG\", label: $t(\"config.tracer.form.levels.debug\")}\n\t\t\t\t\t\t\t\t]'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\tv-if='configuration.VerbosityLevels.length > 1'\n\t\t\t\t\t\t\tcolor='danger'\n\t\t\t\t\t\t\t@click='removeLevel(i)'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ $t('config.tracer.form.verbosityLevels.remove') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\tv-if='i === (configuration.VerbosityLevels.length - 1)'\n\t\t\t\t\t\t\tcolor='success'\n\t\t\t\t\t\t\t:disabled='level.channel === undefined || level.level === undefined'\n\t\t\t\t\t\t\t@click='addLevel'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ $t('config.tracer.form.verbosityLevels.add') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</div>\n\t\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInput, CInputCheckbox, CSelect} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport {integer, min_value, required} from 'vee-validate/dist/rules';\n\nexport default {\n\tname: 'TracerForm',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tCSelect,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tprops: {\n\t\tinstance: {\n\t\t\ttype: String,\n\t\t\trequired: false,\n\t\t\tdefault: null,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'shape::TraceFileService',\n\t\t\tconfiguration: {\n\t\t\t\tinstance: null,\n\t\t\t\tpath: null,\n\t\t\t\tfilename: null,\n\t\t\t\tmaxSizeMB: null,\n\t\t\t\ttimestampFiles: false,\n\t\t\t\tVerbosityLevels: [{}],\n\t\t\t},\n\t\t};\n\t},\n\tcomputed: {\n\t\tsubmitButton() {\n\t\t\treturn this.$route.path === '/config/tracer/add' ?\n\t\t\t\tthis.$t('forms.add') : this.$t('forms.edit');\n\t\t},\n\t},\n\tcreated() {\n\t\textend('integer', integer);\n\t\textend('min', min_value);\n\t\textend('required', required);\n\t\tif (this.instance) {\n\t\t\tthis.getInstance();\n\t\t}\n\t},\n\tmethods: {\n\t\taddLevel() {\n\t\t\tthis.configuration.VerbosityLevels.push({});\n\t\t},\n\t\tremoveLevel(index) {\n\t\t\tthis.configuration.VerbosityLevels.splice(index, 1);\n\t\t},\n\t\tgetInstance() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getInstance(this.componentName, this.instance)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.configuration = response.data;\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthis.$router.push('/config/tracer/');\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t\tsaveInstance() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.instance !== null) {\n\t\t\t\tDaemonConfigurationService.updateInstance(this.componentName, this.instance, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t} else {\n\t\t\t\tDaemonConfigurationService.createInstance(this.componentName, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$router.push('/config/tracer/');\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tif (this.$route.path === '/config/tracer/add') {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('config.tracer.messages.addSuccess', {instance: this.configuration.instance})\n\t\t\t\t\t\t.toString()\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('config.tracer.messages.editSuccess', {instance: this.instance})\n\t\t\t\t\t\t.toString()\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t},\n\tmetaInfo() {\n\t\treturn {\n\t\t\ttitle: this.$route.path === '/config/tracer/add' ?\n\t\t\t\tthis.$t('config.tracer.add') : this.$t('config.tracer.edit')\n\t\t};\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TracerForm.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TracerForm.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TracerForm.vue?vue&type=template&id=648d3c5b&\"\nimport script from \"./TracerForm.vue?vue&type=script&lang=js&\"\nexport * from \"./TracerForm.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('648d3c5b')) {\n      api.createRecord('648d3c5b', component.options)\n    } else {\n      api.reload('648d3c5b', component.options)\n    }\n    module.hot.accept(\"./TracerForm.vue?vue&type=template&id=648d3c5b&\", function () {\n      api.rerender('648d3c5b', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/TracerForm.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\n            \"CForm\",\n            {\n              on: {\n                submit: function($event) {\n                  $event.preventDefault()\n                  return _vm.saveConfig($event)\n                }\n              }\n            },\n            [\n              _c(\"CInput\", {\n                attrs: { label: _vm.$t(\"config.main.form.applicationName\") },\n                model: {\n                  value: _vm.configuration.applicationName,\n                  callback: function($$v) {\n                    _vm.$set(_vm.configuration, \"applicationName\", $$v)\n                  },\n                  expression: \"configuration.applicationName\"\n                }\n              }),\n              _vm._v(\" \"),\n              _c(\"CInput\", {\n                attrs: { label: _vm.$t(\"config.main.form.resourceDir\") },\n                model: {\n                  value: _vm.configuration.resourceDir,\n                  callback: function($$v) {\n                    _vm.$set(_vm.configuration, \"resourceDir\", $$v)\n                  },\n                  expression: \"configuration.resourceDir\"\n                }\n              }),\n              _vm._v(\" \"),\n              _c(\"CInput\", {\n                attrs: { label: _vm.$t(\"config.main.form.dataDir\") },\n                model: {\n                  value: _vm.configuration.dataDir,\n                  callback: function($$v) {\n                    _vm.$set(_vm.configuration, \"dataDir\", $$v)\n                  },\n                  expression: \"configuration.dataDir\"\n                }\n              }),\n              _vm._v(\" \"),\n              _c(\"CInput\", {\n                attrs: { label: _vm.$t(\"config.main.form.cacheDir\") },\n                model: {\n                  value: _vm.configuration.cacheDir,\n                  callback: function($$v) {\n                    _vm.$set(_vm.configuration, \"cacheDir\", $$v)\n                  },\n                  expression: \"configuration.cacheDir\"\n                }\n              }),\n              _vm._v(\" \"),\n              _c(\"CInput\", {\n                attrs: { label: _vm.$t(\"config.main.form.userDir\") },\n                model: {\n                  value: _vm.configuration.userDir,\n                  callback: function($$v) {\n                    _vm.$set(_vm.configuration, \"userDir\", $$v)\n                  },\n                  expression: \"configuration.userDir\"\n                }\n              }),\n              _vm._v(\" \"),\n              _c(\"CInput\", {\n                attrs: { label: _vm.$t(\"config.main.form.configurationDir\") },\n                model: {\n                  value: _vm.configuration.configurationDir,\n                  callback: function($$v) {\n                    _vm.$set(_vm.configuration, \"configurationDir\", $$v)\n                  },\n                  expression: \"configuration.configurationDir\"\n                }\n              }),\n              _vm._v(\" \"),\n              _c(\"CInput\", {\n                attrs: { label: _vm.$t(\"config.main.form.deploymentDir\") },\n                model: {\n                  value: _vm.configuration.deploymentDir,\n                  callback: function($$v) {\n                    _vm.$set(_vm.configuration, \"deploymentDir\", $$v)\n                  },\n                  expression: \"configuration.deploymentDir\"\n                }\n              }),\n              _vm._v(\" \"),\n              _c(\"CButton\", { attrs: { type: \"submit\", color: \"primary\" } }, [\n                _vm._v(\"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.save\")) + \"\\n\\t\\t\\t\")\n              ])\n            ],\n            1\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardBody>\n\t\t\t<CForm @submit.prevent='saveConfig'>\n\t\t\t\t<CInput\n\t\t\t\t\tv-model='configuration.applicationName'\n\t\t\t\t\t:label='$t(\"config.main.form.applicationName\")'\n\t\t\t\t/>\n\t\t\t\t<CInput\n\t\t\t\t\tv-model='configuration.resourceDir'\n\t\t\t\t\t:label='$t(\"config.main.form.resourceDir\")'\n\t\t\t\t/>\n\t\t\t\t<CInput\n\t\t\t\t\tv-model='configuration.dataDir'\n\t\t\t\t\t:label='$t(\"config.main.form.dataDir\")'\n\t\t\t\t/>\n\t\t\t\t<CInput\n\t\t\t\t\tv-model='configuration.cacheDir'\n\t\t\t\t\t:label='$t(\"config.main.form.cacheDir\")'\n\t\t\t\t/>\n\t\t\t\t<CInput\n\t\t\t\t\tv-model='configuration.userDir'\n\t\t\t\t\t:label='$t(\"config.main.form.userDir\")'\n\t\t\t\t/>\n\t\t\t\t<CInput\n\t\t\t\t\tv-model='configuration.configurationDir'\n\t\t\t\t\t:label='$t(\"config.main.form.configurationDir\")'\n\t\t\t\t/>\n\t\t\t\t<CInput\n\t\t\t\t\tv-model='configuration.deploymentDir'\n\t\t\t\t\t:label='$t(\"config.main.form.deploymentDir\")'\n\t\t\t\t/>\n\t\t\t\t<CButton type='submit' color='primary'>\n\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t</CButton>\n\t\t\t</CForm>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInput} from '@coreui/vue/src';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\n\nexport default {\n\tname: 'MainConfiguration',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInput,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tconfiguration: {\n\t\t\t\tapplicationName: null,\n\t\t\t\tresourceDir: null,\n\t\t\t\tdataDir: null,\n\t\t\t\tcacheDir: null,\n\t\t\t\tuserDir: null,\n\t\t\t\tconfigurationDir: null,\n\t\t\t\tdeploymentDir: null,\n\t\t\t},\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getComponent('')\n\t\t\t\t.then((response) =>  {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.configuration = response.data;\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t\tsaveConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.updateComponent('', this.configuration)\n\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tthis.$toast.success(this.$t('config.success'));\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.main.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MainConfiguration.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MainConfiguration.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./MainConfiguration.vue?vue&type=template&id=4a9c2783&\"\nimport script from \"./MainConfiguration.vue?vue&type=script&lang=js&\"\nexport * from \"./MainConfiguration.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('4a9c2783')) {\n      api.createRecord('4a9c2783', component.options)\n    } else {\n      api.reload('4a9c2783', component.options)\n    }\n    module.hot.accept(\"./MainConfiguration.vue?vue&type=template&id=4a9c2783&\", function () {\n      api.rerender('4a9c2783', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/MainConfiguration.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        [\n          _c(\n            \"CCardHeader\",\n            [\n              _c(\n                \"CButton\",\n                {\n                  staticClass: \"float-right\",\n                  attrs: {\n                    color: \"success\",\n                    size: \"sm\",\n                    to: \"/config/component/add\"\n                  }\n                },\n                [\n                  _c(\"CIcon\", { attrs: { content: _vm.$options.icons.add } }),\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"table.actions.add\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ],\n                1\n              )\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\"CDataTable\", {\n                attrs: {\n                  fields: _vm.fields,\n                  items: _vm.components,\n                  \"column-filter\": true,\n                  \"items-per-page\": 20,\n                  pagination: true,\n                  striped: true,\n                  sorter: { external: false, resetable: true }\n                },\n                scopedSlots: _vm._u([\n                  {\n                    key: \"enabled\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          [\n                            _c(\n                              \"CDropdown\",\n                              {\n                                attrs: {\n                                  color: item.enabled ? \"success\" : \"danger\",\n                                  \"toggler-text\": item.enabled\n                                    ? _vm.$t(\"config.components.form.enabled\")\n                                    : _vm.$t(\"config.components.form.disabled\"),\n                                  size: \"sm\"\n                                }\n                              },\n                              [\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeEnabled(item, true)\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(\n                                          _vm.$t(\n                                            \"config.components.form.enabled\"\n                                          )\n                                        ) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                ),\n                                _vm._v(\" \"),\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeEnabled(item, false)\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(\n                                          _vm.$t(\n                                            \"config.components.form.disabled\"\n                                          )\n                                        ) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  },\n                  {\n                    key: \"actions\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          { staticClass: \"col-actions\" },\n                          [\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: {\n                                  color: \"info\",\n                                  size: \"sm\",\n                                  to: \"/config/component/edit/\" + item.name\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.edit }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.edit\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            ),\n                            _vm._v(\" \"),\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: { color: \"danger\", size: \"sm\" },\n                                on: {\n                                  click: function($event) {\n                                    _vm.modals.component = item.name\n                                  }\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.remove }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.delete\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  }\n                ])\n              })\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CModal\",\n        {\n          attrs: { color: \"danger\", show: _vm.modals.component !== null },\n          on: {\n            \"update:show\": function($event) {\n              return _vm.$set(_vm.modals, \"component !== null\", $event)\n            }\n          },\n          scopedSlots: _vm._u([\n            {\n              key: \"header\",\n              fn: function() {\n                return [\n                  _c(\"h5\", { staticClass: \"modal-title\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\"config.components.form.messages.deleteTitle\")\n                        ) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              },\n              proxy: true\n            },\n            {\n              key: \"footer\",\n              fn: function() {\n                return [\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"danger\" },\n                      on: {\n                        click: function($event) {\n                          _vm.modals.component = null\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.no\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"success\" },\n                      on: { click: _vm.removeComponent }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.yes\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  )\n                ]\n              },\n              proxy: true\n            }\n          ])\n        },\n        [\n          _vm._v(\n            \"\\n\\t\\t\" +\n              _vm._s(\n                _vm.$t(\"config.components.form.messages.deletePrompt\", {\n                  component: _vm.modals.component\n                })\n              ) +\n              \"\\n\\t\\t\"\n          )\n        ]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<div>\n\t\t<CCard>\n\t\t\t<CCardHeader>\n\t\t\t\t<CButton\n\t\t\t\t\tcolor='success'\n\t\t\t\t\tsize='sm'\n\t\t\t\t\tclass='float-right'\n\t\t\t\t\tto='/config/component/add'\n\t\t\t\t>\n\t\t\t\t\t<CIcon :content='$options.icons.add' />\n\t\t\t\t\t{{ $t('table.actions.add') }}\n\t\t\t\t</CButton>\n\t\t\t</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<CDataTable\n\t\t\t\t\t:fields='fields'\n\t\t\t\t\t:items='components'\n\t\t\t\t\t:column-filter='true'\n\t\t\t\t\t:items-per-page='20'\n\t\t\t\t\t:pagination='true'\n\t\t\t\t\t:striped='true'\n\t\t\t\t\t:sorter='{ external: false, resetable: true }'\n\t\t\t\t>\n\t\t\t\t\t<template #enabled='{item}'>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CDropdown\n\t\t\t\t\t\t\t\t:color='item.enabled ? \"success\" : \"danger\"'\n\t\t\t\t\t\t\t\t:toggler-text='item.enabled ? $t(\"config.components.form.enabled\") : $t(\"config.components.form.disabled\")'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeEnabled(item, true)'>\n\t\t\t\t\t\t\t\t\t{{ $t('config.components.form.enabled') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeEnabled(item, false)'>\n\t\t\t\t\t\t\t\t\t{{ $t('config.components.form.disabled') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t</CDropdown>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template #actions='{item}'>\n\t\t\t\t\t\t<td class='col-actions'>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tcolor='info'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t\t:to='\"/config/component/edit/\" + item.name'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.edit' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.edit') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tcolor='danger'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t\t@click='modals.component = item.name'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.remove' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.delete') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t</CDataTable>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t\t<CModal\n\t\t\tcolor='danger'\n\t\t\t:show.sync='modals.component !== null'\n\t\t>\n\t\t\t<template #header>\n\t\t\t\t<h5 class='modal-title'>\n\t\t\t\t\t{{ $t('config.components.form.messages.deleteTitle') }}\n\t\t\t\t</h5>\n\t\t\t</template>\n\t\t\t{{ $t('config.components.form.messages.deletePrompt', {component: modals.component}) }}\n\t\t\t<template #footer>\n\t\t\t\t<CButton color='danger' @click='modals.component = null'>\n\t\t\t\t\t{{ $t('forms.no') }}\n\t\t\t\t</CButton>\n\t\t\t\t<CButton color='success' @click='removeComponent'>\n\t\t\t\t\t{{ $t('forms.yes') }}\n\t\t\t\t</CButton>\n\t\t\t</template>\n\t\t</CModal>\n\t</div>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CDataTable, CDropdown, CDropdownItem, CIcon, CModal} from '@coreui/vue/src';\nimport {cilPencil, cilPlus, cilTrash} from '@coreui/icons';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\n\nexport default {\n\tname: 'ComponentList',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCDataTable,\n\t\tCDropdown,\n\t\tCDropdownItem,\n\t\tCIcon,\n\t\tCModal,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponents: null,\n\t\t\tfields: [\n\t\t\t\t{\n\t\t\t\t\tkey: 'name',\n\t\t\t\t\tlabel: this.$t('config.components.form.name'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'startlevel',\n\t\t\t\t\tlabel: this.$t('config.components.form.startLevel'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'libraryPath',\n\t\t\t\t\tlabel: this.$t('config.components.form.libraryPath'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'libraryName',\n\t\t\t\t\tlabel: this.$t('config.components.form.libraryName'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'enabled',\n\t\t\t\t\tlabel: this.$t('config.components.form.enabled'),\n\t\t\t\t\tfilter: false,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'actions',\n\t\t\t\t\tlabel: this.$t('table.actions.title'),\n\t\t\t\t\tfilter: false,\n\t\t\t\t\tsorter: false,\n\t\t\t\t},\n\t\t\t],\n\t\t\tmodals: {\n\t\t\t\tcomponent: null,\n\t\t\t},\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.getConfig();\n\t},\n\tmounted() {\n\t\tconst titleEl = document.getElementById('title');\n\t\tif (titleEl !== null) {\n\t\t\ttitleEl.innerText = this.$t(this.$metaInfo.title).toString();\n\t\t}\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\treturn DaemonConfigurationService.getComponent('')\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (this.$store.getters['user/getRole'] === 'power') {\n\t\t\t\t\t\tthis.components = response.data.components;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst whitelistedComponents = ['iqrf::IqrfCdc', 'iqrf::IqrfSpi', 'iqrf::IqrfUart'];\n\t\t\t\t\t\tthis.components = response.data.components.filter((component) => {\n\t\t\t\t\t\t\tif (whitelistedComponents.includes(component.name)) {\n\t\t\t\t\t\t\t\treturn component;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t\tchangeEnabled(component, enabled) {\n\t\t\tif (component.enabled !== enabled) {\n\t\t\t\tcomponent.enabled = enabled;\n\t\t\t\tDaemonConfigurationService.updateComponent(component.name, component)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tthis.getConfig().then(() => {\n\t\t\t\t\t\t\tthis.$toast.success(this.$t('config.components.form.messages.editSuccess', {component: component.name}).toString());\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tremoveComponent() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tconst component = this.modals.component;\n\t\t\tthis.modals.component = null;\n\t\t\tDaemonConfigurationService.deleteComponent(component)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getConfig().then(() => {\n\t\t\t\t\t\tthis.$toast.success(this.$t('config.components.form.messages.deleteSuccess', {component: component}).toString());\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t},\n\ticons: {\n\t\tadd: cilPlus,\n\t\tedit: cilPencil,\n\t\tremove: cilTrash\n\t},\n\tmetaInfo() {\n\t\treturn {\n\t\t\ttitle: this.$store.getters['user/getRole'] === 'power' ?\n\t\t\t\t'config.components.title' :\n\t\t\t\t'config.selectedComponents.title',\n\t\t};\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ComponentList.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ComponentList.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ComponentList.vue?vue&type=template&id=345f4701&\"\nimport script from \"./ComponentList.vue?vue&type=script&lang=js&\"\nexport * from \"./ComponentList.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('345f4701')) {\n      api.createRecord('345f4701', component.options)\n    } else {\n      api.reload('345f4701', component.options)\n    }\n    module.hot.accept(\"./ComponentList.vue?vue&type=template&id=345f4701&\", function () {\n      api.rerender('345f4701', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/ComponentList.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      {\n                        on: {\n                          submit: function($event) {\n                            $event.preventDefault()\n                            return _vm.saveComponent($event)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"config.components.form.messages.name\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"config.components.form.name\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.name,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"name\",\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"configuration.name\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"CInput\", {\n                          attrs: {\n                            label: _vm.$t(\"config.components.form.libraryPath\")\n                          },\n                          model: {\n                            value: _vm.configuration.libraryPath,\n                            callback: function($$v) {\n                              _vm.$set(_vm.configuration, \"libraryPath\", $$v)\n                            },\n                            expression: \"configuration.libraryPath\"\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"config.components.form.messages.libraryName\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"config.components.form.libraryName\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.libraryName,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"libraryName\",\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"configuration.libraryName\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.configuration.enabled,\n                            label: _vm.$t(\"config.components.form.enabled\")\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              return _vm.$set(\n                                _vm.configuration,\n                                \"enabled\",\n                                $event\n                              )\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required\",\n                            \"custom-messages\": {\n                              integer: \"forms.messages.integer\",\n                              required:\n                                \"config.components.form.messages.startLevel\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        label: _vm.$t(\n                                          \"config.components.form.startLevel\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.startlevel,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"startlevel\",\n                                            _vm._n($$v)\n                                          )\n                                        },\n                                        expression: \"configuration.startlevel\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              type: \"submit\",\n                              color: \"primary\",\n                              disabled: invalid\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.submitButton) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='saveComponent'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{required: \"config.components.form.messages.name\"}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='configuration.name'\n\t\t\t\t\t\t\t:label='$t(\"config.components.form.name\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='configuration.libraryPath'\n\t\t\t\t\t\t:label='$t(\"config.components.form.libraryPath\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{required: \"config.components.form.messages.libraryName\"}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='configuration.libraryName'\n\t\t\t\t\t\t\t:label='$t(\"config.components.form.libraryName\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='configuration.enabled'\n\t\t\t\t\t\t:label='$t(\"config.components.form.enabled\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\",\n\t\t\t\t\t\t\trequired: \"config.components.form.messages.startLevel\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='configuration.startlevel'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t:label='$t(\"config.components.form.startLevel\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t\t{{ submitButton }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInput, CInputCheckbox} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {integer, required} from 'vee-validate/dist/rules';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\n\nexport default {\n\tname: 'ComponentForm',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tprops: {\n\t\tcomponent: {\n\t\t\ttype: String,\n\t\t\trequired: false,\n\t\t\tdefault: null,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tconfiguration: {\n\t\t\t\tname: null,\n\t\t\t\tlibraryPath: null,\n\t\t\t\tlibraryName: null,\n\t\t\t\tenabled: false,\n\t\t\t\tstartlevel: null,\n\t\t\t},\n\t\t};\n\t},\n\tcomputed: {\n\t\tsubmitButton() {\n\t\t\treturn this.$route.path === '/config/component/add' ?\n\t\t\t\tthis.$t('forms.add') : this.$t('forms.edit');\n\t\t},\n\t},\n\tcreated() {\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\tif (this.component) {\n\t\t\tthis.getComponent();\n\t\t}\n\t},\n\tmethods: {\n\t\tgetComponent() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getComponent(this.component)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.configuration = response.data.configuration;\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthis.$router.push('/config/component/');\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t\tsaveComponent() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.component !== null) {\n\t\t\t\tDaemonConfigurationService.updateComponent(this.component, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t} else {\n\t\t\t\tDaemonConfigurationService.createComponent(this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$router.push('/config/component');\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tif (this.$route.path === '/config/component/add') {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('config.components.form.messages.addSuccess', {component: this.configuration.name})\n\t\t\t\t\t\t.toString()\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('config.components.form.messages.editSuccess', {component: this.component})\n\t\t\t\t\t\t.toString()\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t},\n\tmetaInfo() {\n\t\treturn {\n\t\t\ttitle: this.$route.path === '/config/component/add' ?\n\t\t\t\tthis.$t('config.components.add') :\n\t\t\t\tthis.$t('config.components.edit')\n\t\t};\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ComponentForm.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ComponentForm.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ComponentForm.vue?vue&type=template&id=00662027&\"\nimport script from \"./ComponentForm.vue?vue&type=script&lang=js&\"\nexport * from \"./ComponentForm.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('00662027')) {\n      api.createRecord('00662027', component.options)\n    } else {\n      api.reload('00662027', component.options)\n    }\n    module.hot.accept(\"./ComponentForm.vue?vue&type=template&id=00662027&\", function () {\n      api.rerender('00662027', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/ComponentForm.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", [_c(\"OtaUpload\")], 1)\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\"CCardHeader\", [\n        _vm._v(_vm._s(_vm.$t(\"config.iqmesh.otaUpload.title\")))\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      {\n                        on: {\n                          submit: function($event) {\n                            $event.preventDefault()\n                            return _vm.saveInstance($event)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"config.iqmesh.otaUpload.form.messages.instance\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"config.iqmesh.otaUpload.form.instance\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.instance,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"instance\",\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"configuration.instance\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"config.iqmesh.otaUpload.form.messages.uploadPath\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"config.iqmesh.otaUpload.form.uploadPath\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.uploadPath,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"uploadPath\",\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"configuration.uploadPath\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              type: \"submit\",\n                              color: \"primary\",\n                              disabled: invalid\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardHeader>{{ $t(\"config.iqmesh.otaUpload.title\") }}</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='saveInstance'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{required: \"config.iqmesh.otaUpload.form.messages.instance\"}'\n\t\t\t\t\t>\t\t\t\t\t\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='configuration.instance'\n\t\t\t\t\t\t\t:label='$t(\"config.iqmesh.otaUpload.form.instance\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{required: \"config.iqmesh.otaUpload.form.messages.uploadPath\"}'\n\t\t\t\t\t>\t\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='configuration.uploadPath'\n\t\t\t\t\t\t\t:label='$t(\"config.iqmesh.otaUpload.form.uploadPath\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {required} from 'vee-validate/dist/rules';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\n\nexport default {\n\tname: 'OtaUpload',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'iqrf::OtaUploadService',\n\t\t\tconfiguration: {\n\t\t\t\tinstance: null,\n\t\t\t\tuploadPath: null,\n\t\t\t\tuploadPathSuffix: null,\n\t\t\t},\n\t\t\tinstance: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t\tthis.getInstance();\n\t},\n\tmethods: {\n\t\tgetInstance() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getComponent(this.componentName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (response.data.instances.length > 0) {\n\t\t\t\t\t\tthis.configuration = response.data.instances[0];\n\t\t\t\t\t\tthis.instance = this.configuration.instance;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t\tsaveInstance() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.instance !== null) {\n\t\t\t\tDaemonConfigurationService.updateInstance(this.componentName, this.instance, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t} else {\n\t\t\t\tDaemonConfigurationService.createInstance(this.componentName, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tthis.$toast.success(this.$t('config.success').toString());\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.iqmesh.otaUpload.title'\n\t}\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./OtaUpload.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./OtaUpload.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./OtaUpload.vue?vue&type=template&id=3005a95e&\"\nimport script from \"./OtaUpload.vue?vue&type=script&lang=js&\"\nexport * from \"./OtaUpload.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('3005a95e')) {\n      api.createRecord('3005a95e', component.options)\n    } else {\n      api.reload('3005a95e', component.options)\n    }\n    module.hot.accept(\"./OtaUpload.vue?vue&type=template&id=3005a95e&\", function () {\n      api.rerender('3005a95e', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/Config/OtaUpload.vue\"\nexport default component.exports","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqmeshServices.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IqmeshServices.vue?vue&type=script&lang=js&\"","<template>\n\t<div>\n\t\t<OtaUpload />\n\t</div>\n</template>\n\n<script>\nimport OtaUpload from '../../components/Config/OtaUpload';\nexport default {\n\tname: 'IqmeshServices',\n\tcomponents: {\n\t\tOtaUpload,\n\t}\n};\n</script>\n","import { render, staticRenderFns } from \"./IqmeshServices.vue?vue&type=template&id=2fe29286&\"\nimport script from \"./IqmeshServices.vue?vue&type=script&lang=js&\"\nexport * from \"./IqmeshServices.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('2fe29286')) {\n      api.createRecord('2fe29286', component.options)\n    } else {\n      api.reload('2fe29286', component.options)\n    }\n    module.hot.accept(\"./IqmeshServices.vue?vue&type=template&id=2fe29286&\", function () {\n      api.rerender('2fe29286', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/IqmeshServices.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\"ValidationObserver\", {\n        scopedSlots: _vm._u([\n          {\n            key: \"default\",\n            fn: function(ref) {\n              var invalid = ref.invalid\n              return [\n                _c(\n                  \"CForm\",\n                  {\n                    on: {\n                      submit: function($event) {\n                        $event.preventDefault()\n                        return _vm.saveConfig($event)\n                      }\n                    }\n                  },\n                  [\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required\",\n                        \"custom-messages\": {\n                          required: \"config.mq.form.messages.instance\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\n                                      \"config.websocket.form.instance\"\n                                    ),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0])\n                                  },\n                                  model: {\n                                    value: _vm.messaging.instance,\n                                    callback: function($$v) {\n                                      _vm.$set(_vm.messaging, \"instance\", $$v)\n                                    },\n                                    expression: \"messaging.instance\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"integer|required\",\n                        \"custom-messages\": {\n                          required:\n                            \"config.websocket.form.messages.WebsocketPort\",\n                          integer: \"forms.messages.integer\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    type: \"number\",\n                                    label: _vm.$t(\n                                      \"config.websocket.form.WebsocketPort\"\n                                    ),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0])\n                                  },\n                                  model: {\n                                    value: _vm.service.WebsocketPort,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        _vm.service,\n                                        \"WebsocketPort\",\n                                        _vm._n($$v)\n                                      )\n                                    },\n                                    expression: \"service.WebsocketPort\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"CInputCheckbox\", {\n                      attrs: {\n                        checked: _vm.service.acceptOnlyLocalhost,\n                        label: _vm.$t(\n                          \"config.websocket.form.acceptOnlyLocalhost\"\n                        )\n                      },\n                      on: {\n                        \"update:checked\": function($event) {\n                          return _vm.$set(\n                            _vm.service,\n                            \"acceptOnlyLocalhost\",\n                            $event\n                          )\n                        }\n                      }\n                    }),\n                    _vm._v(\" \"),\n                    _c(\n                      \"CButton\",\n                      {\n                        attrs: {\n                          type: \"submit\",\n                          color: \"primary\",\n                          disabled: invalid\n                        }\n                      },\n                      [\n                        _vm._v(\n                          \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.submitButton) + \"\\n\\t\\t\\t\"\n                        )\n                      ]\n                    )\n                  ],\n                  1\n                )\n              ]\n            }\n          }\n        ])\n      })\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t<CForm @submit.prevent='saveConfig'>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{required: \"config.mq.form.messages.instance\"}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='messaging.instance'\n\t\t\t\t\t\t:label='$t(\"config.websocket.form.instance\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='integer|required'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\trequired: \"config.websocket.form.messages.WebsocketPort\",\n\t\t\t\t\t\tinteger: \"forms.messages.integer\"\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model.number='service.WebsocketPort'\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t:label='$t(\"config.websocket.form.WebsocketPort\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<CInputCheckbox\n\t\t\t\t\t:checked.sync='service.acceptOnlyLocalhost'\n\t\t\t\t\t:label='$t(\"config.websocket.form.acceptOnlyLocalhost\")'\n\t\t\t\t/>\n\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t{{ submitButton }}\n\t\t\t\t</CButton>\n\t\t\t</CForm>\n\t\t</ValidationObserver>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CForm, CInput, CInputCheckbox} from '@coreui/vue';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport {integer, required} from 'vee-validate/dist/rules';\n\nexport default {\n\tname: 'MonitorForm',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tprops: {\n\t\tinstance: {\n\t\t\ttype: String,\n\t\t\trequired: false,\n\t\t\tdefault: null,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentNames: {\n\t\t\t\tmessaging: 'iqrf::WebsocketMessaging',\n\t\t\t\tservice: 'shape::WebsocketCppService',\n\t\t\t},\n\t\t\tinstances: {\n\t\t\t\tmessaging: null,\n\t\t\t\tservice: null,\n\t\t\t},\n\t\t\tmessaging: {\n\t\t\t\tinstance: null,\n\t\t\t\tacceptAsyncMsg: false,\n\t\t\t\tRequiredInterfaces: [],\n\t\t\t},\n\t\t\tservice: {\n\t\t\t\tinstance: null,\n\t\t\t\tWebsocketPort: null,\n\t\t\t\tacceptOnlyLocalhost: false,\n\t\t\t},\n\t\t};\n\t},\n\tcomputed: {\n\t\tsubmitButton() {\n\t\t\treturn this.$route.path === '/config/mq/add' ?\n\t\t\t\tthis.$t('forms.add') :\n\t\t\t\tthis.$t('forms.save');\n\t\t},\n\t},\n\tcreated() {\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\tif (this.instance !== null) {\n\t\t\tthis.getConfig();\n\t\t}\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getInstance(this.componentNames.messaging, this.instance)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.messaging = response.data;\n\t\t\t\t\tthis.instances.messaging = this.instance;\n\t\t\t\t\tthis.instances.service = this.messaging.RequiredInterfaces[0].target.instance;\n\t\t\t\t\tDaemonConfigurationService.getInstance(this.componentNames.service, this.instances.service)\n\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\tthis.service = response.data;\n\t\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthis.$router.push('/config/websocket/');\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t\tsaveConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tthis.service.instance = this.messaging.instance;\n\t\t\tif (this.messaging.RequiredInterfaces.length === 0) {\n\t\t\t\tthis.messaging.RequiredInterfaces[0] = {\n\t\t\t\t\tname: 'shape::IWebsocketService',\n\t\t\t\t\ttarget: {\n\t\t\t\t\t\tinstance: this.service.instance,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tthis.messaging.RequiredInterfaces[0].target.instance = this.messaging.instance;\n\t\t\t}\n\t\t\tif (this.instance === null) {\n\t\t\t\tPromise.all([\n\t\t\t\t\tDaemonConfigurationService.createInstance(this.componentNames.service, this.service),\n\t\t\t\t\tDaemonConfigurationService.createInstance(this.componentNames.messaging, this.messaging),\n\t\t\t\t])\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t} else {\n\t\t\t\tPromise.all([\n\t\t\t\t\tDaemonConfigurationService.updateInstance(this.componentNames.service, this.instances.service, this.service),\n\t\t\t\t\tDaemonConfigurationService.updateInstance(this.componentNames.messaging, this.instances.messaging, this.messaging),\n\t\t\t\t])\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$router.push('/config/websocket/');\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tif (this.$route.path === '/config/websocket/add') {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('config.websocket.messages.add.success', {instance: this.messaging.instance})\n\t\t\t\t\t\t.toString()\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('config.websocket.messages.edit.success', {instance: this.messaging.instance})\n\t\t\t\t\t\t.toString()\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t},\n\tmetaInfo() {\n\t\treturn {\n\t\t\ttitle: this.$route.path === '/config/websocket/add' ?\n\t\t\t\t'config.websocket.interface.add' :\n\t\t\t\t'config.websocket.interface.edit',\n\t\t};\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./WebsocketInterfaceForm.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./WebsocketInterfaceForm.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./WebsocketInterfaceForm.vue?vue&type=template&id=61fff480&\"\nimport script from \"./WebsocketInterfaceForm.vue?vue&type=script&lang=js&\"\nexport * from \"./WebsocketInterfaceForm.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('61fff480')) {\n      api.createRecord('61fff480', component.options)\n    } else {\n      api.reload('61fff480', component.options)\n    }\n    module.hot.accept(\"./WebsocketInterfaceForm.vue?vue&type=template&id=61fff480&\", function () {\n      api.rerender('61fff480', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/WebsocketInterfaceForm.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      {\n                        on: {\n                          submit: function($event) {\n                            $event.preventDefault()\n                            return _vm.saveInstance($event)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"config.websocket.form.messages.messagingInstance\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"config.websocket.form.instance\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.instance,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"instance\",\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"configuration.instance\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.configuration.acceptAsyncMsg,\n                            label: _vm.$t(\n                              \"config.websocket.form.acceptAsyncMsg\"\n                            )\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              return _vm.$set(\n                                _vm.configuration,\n                                \"acceptAsyncMsg\",\n                                $event\n                              )\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"h4\", [\n                          _vm._v(\n                            _vm._s(\n                              _vm.$t(\"config.websocket.form.requiredInterfaces\")\n                            )\n                          )\n                        ]),\n                        _vm._v(\" \"),\n                        _vm._l(_vm.configuration.RequiredInterfaces, function(\n                          iface,\n                          i\n                        ) {\n                          return _c(\n                            \"div\",\n                            { key: i, staticClass: \"form-group\" },\n                            [\n                              _c(\"ValidationProvider\", {\n                                attrs: {\n                                  rules: \"required\",\n                                  \"custom-messages\": {\n                                    required:\n                                      \"config.websocket.form.messages.interfaceName\"\n                                  }\n                                },\n                                scopedSlots: _vm._u(\n                                  [\n                                    {\n                                      key: \"default\",\n                                      fn: function(ref) {\n                                        var errors = ref.errors\n                                        var touched = ref.touched\n                                        var valid = ref.valid\n                                        return [\n                                          _c(\"CSelect\", {\n                                            attrs: {\n                                              value: iface.name,\n                                              label: _vm.$t(\n                                                \"config.websocket.form.requiredInterface.name\"\n                                              ),\n                                              placeholder: _vm.$t(\n                                                \"config.websocket.form.messages.interfaceName\"\n                                              ),\n                                              options: [\n                                                {\n                                                  value:\n                                                    \"shape::IWebsocketService\",\n                                                  label:\n                                                    \"shape::IWebsocketService\"\n                                                }\n                                              ],\n                                              \"is-valid\": touched\n                                                ? valid\n                                                : null,\n                                              \"invalid-feedback\": _vm.$t(\n                                                errors[0]\n                                              )\n                                            },\n                                            on: {\n                                              \"update:value\": function($event) {\n                                                return _vm.$set(\n                                                  iface,\n                                                  \"name\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          })\n                                        ]\n                                      }\n                                    }\n                                  ],\n                                  null,\n                                  true\n                                )\n                              }),\n                              _vm._v(\" \"),\n                              _c(\"ValidationProvider\", {\n                                attrs: {\n                                  rules: \"required\",\n                                  \"custom-messages\": {\n                                    required:\n                                      \"config.websocket.form.messages.interfaceName\"\n                                  }\n                                },\n                                scopedSlots: _vm._u(\n                                  [\n                                    {\n                                      key: \"default\",\n                                      fn: function(ref) {\n                                        var errors = ref.errors\n                                        var touched = ref.touched\n                                        var valid = ref.valid\n                                        return [\n                                          _c(\"CSelect\", {\n                                            attrs: {\n                                              value: iface.instance,\n                                              label: _vm.$t(\n                                                \"config.websocket.form.requiredInterface.instance\"\n                                              ),\n                                              placeholder: _vm.$t(\n                                                \"config.websocket.form.messages.interfaceInstance\"\n                                              ),\n                                              options: _vm.instances.service,\n                                              \"is-valid\": touched\n                                                ? valid\n                                                : null,\n                                              \"invalid-feedback\": _vm.$t(\n                                                errors[0]\n                                              )\n                                            },\n                                            on: {\n                                              \"update:value\": function($event) {\n                                                return _vm.$set(\n                                                  iface,\n                                                  \"instance\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          })\n                                        ]\n                                      }\n                                    }\n                                  ],\n                                  null,\n                                  true\n                                )\n                              }),\n                              _vm._v(\" \"),\n                              _vm.configuration.RequiredInterfaces.length > 1\n                                ? _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: { color: \"danger\" },\n                                      on: {\n                                        click: function($event) {\n                                          return _vm.removeInterface(i - 1)\n                                        }\n                                      }\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"config.websocket.form.requiredInterface.remove\"\n                                            )\n                                          ) +\n                                          \"\\n\\t\\t\\t\\t\\t\"\n                                      )\n                                    ]\n                                  )\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              i ===\n                              _vm.configuration.RequiredInterfaces.length - 1\n                                ? _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: {\n                                        color: \"success\",\n                                        disabled: !iface.name || !iface.instance\n                                      },\n                                      on: { click: _vm.addInterface }\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"config.websocket.form.requiredInterface.add\"\n                                            )\n                                          ) +\n                                          \"\\n\\t\\t\\t\\t\\t\"\n                                      )\n                                    ]\n                                  )\n                                : _vm._e()\n                            ],\n                            1\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              type: \"submit\",\n                              color: \"primary\",\n                              disabled: invalid\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.submitButton) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      2\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='saveInstance'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{required: \"config.websocket.form.messages.messagingInstance\"}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='configuration.instance'\n\t\t\t\t\t\t\t:label='$t(\"config.websocket.form.instance\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='configuration.acceptAsyncMsg'\n\t\t\t\t\t\t:label='$t(\"config.websocket.form.acceptAsyncMsg\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<h4>{{ $t('config.websocket.form.requiredInterfaces') }}</h4>\n\t\t\t\t\t<div\n\t\t\t\t\t\tv-for='(iface, i) of configuration.RequiredInterfaces'\n\t\t\t\t\t\t:key='i'\n\t\t\t\t\t\tclass='form-group'\n\t\t\t\t\t>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t:custom-messages='{required: \"config.websocket.form.messages.interfaceName\"}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CSelect\n\t\t\t\t\t\t\t\t:value.sync='iface.name'\n\t\t\t\t\t\t\t\t:label='$t(\"config.websocket.form.requiredInterface.name\")'\n\t\t\t\t\t\t\t\t:placeholder='$t(\"config.websocket.form.messages.interfaceName\")'\n\t\t\t\t\t\t\t\t:options='[\n\t\t\t\t\t\t\t\t\t{value: \"shape::IWebsocketService\", label: \"shape::IWebsocketService\"}\n\t\t\t\t\t\t\t\t]'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t:custom-messages='{required: \"config.websocket.form.messages.interfaceName\"}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CSelect\n\t\t\t\t\t\t\t\t:value.sync='iface.instance'\n\t\t\t\t\t\t\t\t:label='$t(\"config.websocket.form.requiredInterface.instance\")'\n\t\t\t\t\t\t\t\t:placeholder='$t(\"config.websocket.form.messages.interfaceInstance\")'\n\t\t\t\t\t\t\t\t:options='instances.service'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\tv-if='configuration.RequiredInterfaces.length > 1'\n\t\t\t\t\t\t\tcolor='danger'\n\t\t\t\t\t\t\t@click='removeInterface(i-1)'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ $t('config.websocket.form.requiredInterface.remove') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t<CButton \n\t\t\t\t\t\t\tv-if='i === (configuration.RequiredInterfaces.length - 1)'\n\t\t\t\t\t\t\tcolor='success' \n\t\t\t\t\t\t\t:disabled='!iface.name || !iface.instance'\n\t\t\t\t\t\t\t@click='addInterface'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ $t('config.websocket.form.requiredInterface.add') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</div>\n\t\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t\t{{ submitButton }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInput, CInputCheckbox, CSelect} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport {required} from 'vee-validate/dist/rules';\n\nexport default {\n\tname: 'WebsocketMessagingForm',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tCSelect,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tprops: {\n\t\tinstance: {\n\t\t\ttype: String,\n\t\t\trequired: false,\n\t\t\tdefault: null,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentNames: {\n\t\t\t\tmessaging: 'iqrf::WebsocketMessaging',\n\t\t\t\tservice: 'shape::WebsocketCppService',\n\t\t\t},\n\t\t\tinstances: {\n\t\t\t\tservice: [],\n\t\t\t},\n\t\t\tconfiguration: {\n\t\t\t\tinstance: null,\n\t\t\t\tacceptAsyncMsg: false,\n\t\t\t\tRequiredInterfaces: [{}],\n\t\t\t}\n\t\t};\n\t},\n\tcomputed: {\n\t\tsubmitButton() {\n\t\t\treturn this.$route.path === '/config/websocket/add-messaging' ?\n\t\t\t\tthis.$t('forms.add') : this.$t('forms.edit');\n\t\t},\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t\tif (this.instance) {\n\t\t\tthis.getConfig();\n\t\t} else {\n\t\t\tthis.getServices();\n\t\t}\n\t},\n\tmethods: {\n\t\taddInterface() {\n\t\t\tthis.configuration.RequiredInterfaces.push({});\n\t\t},\n\t\tremoveInterface(index) {\n\t\t\tthis.configuration.RequiredInterfaces.splice(index, 1);\n\t\t},\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\treturn Promise.all([\n\t\t\t\tDaemonConfigurationService.getInstance(this.componentNames.messaging, this.instance),\n\t\t\t\tDaemonConfigurationService.getComponent(this.componentNames.service),\n\t\t\t])\n\t\t\t\t.then((responses) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tlet interfaces = [];\n\t\t\t\t\tlet configuration = responses[0].data;\n\t\t\t\t\tconfiguration.RequiredInterfaces.forEach(item => {\n\t\t\t\t\t\tinterfaces.push({name: item.name, instance: item.target.instance});\n\t\t\t\t\t});\n\t\t\t\t\tconfiguration.RequiredInterfaces = interfaces;\n\t\t\t\t\tthis.configuration = configuration;\n\t\t\t\t\tresponses[1].data.instances.forEach(item => {\n\t\t\t\t\t\tthis.instances.service.push({value: item.instance, label: item.instance});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t},\n\t\tgetServices() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getComponent(this.componentNames.service)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tresponse.data.instances.forEach(item => {\n\t\t\t\t\t\tthis.instances.service.push({value: item.instance, label: item.instance});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t},\n\t\tsaveInstance() {\n\t\t\tlet instance = this.configuration;\n\t\t\tlet RequiredInterfaces = [];\n\t\t\tthis.configuration.RequiredInterfaces.forEach(item => {\n\t\t\t\tRequiredInterfaces.push({name: item.name, target: {instance: item.instance}});\n\t\t\t});\n\t\t\tinstance.RequiredInterfaces = RequiredInterfaces;\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.instance !== null) {\n\t\t\t\tDaemonConfigurationService.updateInstance(this.componentNames.messaging, this.instance, instance)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t} else {\n\t\t\t\tDaemonConfigurationService.createInstance(this.componentNames.messaging, instance)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$router.push('/config/websocket/');\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tif (this.$route.path === '/config/websocket/add-messaging') {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('config.websocket.messaging.messages.addSuccess', {messaging: this.configuration.instance})\n\t\t\t\t\t\t.toString()\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('config.websocket.messaging.messages.editSuccess', {messaging: this.instance})\n\t\t\t\t\t\t.toString()\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t},\n\tmetaInfo() {\n\t\treturn {\n\t\t\ttitle: this.$route.path === '/config/websocket/add-messaging' ?\n\t\t\t\tthis.$t('config.websocket.messaging.add') :\n\t\t\t\tthis.$t('config.websocket.messaging.edit')\n\t\t};\n\t}\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./WebsocketMessagingForm.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./WebsocketMessagingForm.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./WebsocketMessagingForm.vue?vue&type=template&id=b8be56ea&\"\nimport script from \"./WebsocketMessagingForm.vue?vue&type=script&lang=js&\"\nexport * from \"./WebsocketMessagingForm.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('b8be56ea')) {\n      api.createRecord('b8be56ea', component.options)\n    } else {\n      api.reload('b8be56ea', component.options)\n    }\n    module.hot.accept(\"./WebsocketMessagingForm.vue?vue&type=template&id=b8be56ea&\", function () {\n      api.rerender('b8be56ea', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/WebsocketMessagingForm.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      {\n                        on: {\n                          submit: function($event) {\n                            $event.preventDefault()\n                            return _vm.saveInstance($event)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"config.websocket.form.messages.serviceInstance\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"config.websocket.form.instance\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.instance,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"instance\",\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"configuration.instance\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required\",\n                            \"custom-messages\": {\n                              required:\n                                \"config.websocket.form.messages.WebsocketPort\",\n                              integer: \"forms.messages.integer\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        label: _vm.$t(\n                                          \"config.websocket.form.WebsocketPort\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.WebsocketPort,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration,\n                                            \"WebsocketPort\",\n                                            _vm._n($$v)\n                                          )\n                                        },\n                                        expression:\n                                          \"configuration.WebsocketPort\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.configuration.acceptOnlyLocalhost,\n                            label: _vm.$t(\n                              \"config.websocket.form.acceptOnlyLocalhost\"\n                            )\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              return _vm.$set(\n                                _vm.configuration,\n                                \"acceptOnlyLocalhost\",\n                                $event\n                              )\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              type: \"submit\",\n                              color: \"primary\",\n                              disabled: invalid\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.submitButton) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='saveInstance'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{required: \"config.websocket.form.messages.serviceInstance\"}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='configuration.instance'\n\t\t\t\t\t\t\t:label='$t(\"config.websocket.form.instance\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"config.websocket.form.messages.WebsocketPort\",\n\t\t\t\t\t\t\tinteger: \"forms.messages.integer\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='configuration.WebsocketPort'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t:label='$t(\"config.websocket.form.WebsocketPort\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='configuration.acceptOnlyLocalhost'\n\t\t\t\t\t\t:label='$t(\"config.websocket.form.acceptOnlyLocalhost\")'\n\t\t\t\t\t/>\n\t\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t\t{{ submitButton }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CForm, CInput, CInputCheckbox} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {integer, required} from 'vee-validate/dist/rules';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\n\nexport default {\n\tname: 'WebsocketServiceForm',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tprops: {\n\t\tinstance: {\n\t\t\ttype: String,\n\t\t\trequired: false,\n\t\t\tdefault: null,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'shape::WebsocketCppService',\n\t\t\tconfiguration: {\n\t\t\t\tinstance: null,\n\t\t\t\tWebsocketPort: null,\n\t\t\t\tacceptOnlyLocalhost: false,\n\t\t\t},\n\t\t};\n\t},\n\tcomputed: {\n\t\tsubmitButton() {\n\t\t\treturn this.$route.path === '/config/websocket/add-service' ?\n\t\t\t\tthis.$t('forms.add') : this.$t('forms.edit');\n\t\t},\n\t},\n\tcreated() {\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\tif (this.instance) {\n\t\t\tthis.getInstance();\n\t\t}\n\t},\n\tmethods: {\n\t\tgetInstance() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tDaemonConfigurationService.getInstance(this.componentName, this.instance)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.configuration = response.data;\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthis.$router.push('/config/websocket/');\n\t\t\t\t\tFormErrorHandler.configError(error);\n\t\t\t\t});\n\t\t},\n\t\tsaveInstance() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.instance !== null) {\n\t\t\t\tDaemonConfigurationService.updateInstance(this.componentName, this.instance, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t} else {\n\t\t\t\tDaemonConfigurationService.createInstance(this.componentName, this.configuration)\n\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t\t}\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$router.push('/config/websocket/');\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tif (this.$route.path === '/config/websocket/add-service') {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('config.websocket.service.messages.addSuccess', {service: this.configuration.instance})\n\t\t\t\t\t\t.toString()\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('config.websocket.service.messages.editSuccess', {service: this.instance})\n\t\t\t\t\t\t.toString()\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t},\n\tmetaInfo() {\n\t\treturn {\n\t\t\ttitle: this.$route.path === '/config/websocket/add-service' ?\n\t\t\t\tthis.$t('config.websocket.service.add') :\n\t\t\t\tthis.$t('config.websocket.service.edit')\n\t\t};\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./WebsocketServiceForm.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./WebsocketServiceForm.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./WebsocketServiceForm.vue?vue&type=template&id=0301a9fc&\"\nimport script from \"./WebsocketServiceForm.vue?vue&type=script&lang=js&\"\nexport * from \"./WebsocketServiceForm.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('0301a9fc')) {\n      api.createRecord('0301a9fc', component.options)\n    } else {\n      api.reload('0301a9fc', component.options)\n    }\n    module.hot.accept(\"./WebsocketServiceForm.vue?vue&type=template&id=0301a9fc&\", function () {\n      api.rerender('0301a9fc', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/WebsocketServiceForm.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.$store.getters[\"user/getRole\"] === \"power\"\n    ? _c(\n        \"div\",\n        [_c(\"WebsocketMessagingList\"), _vm._v(\" \"), _c(\"WebsocketServiceList\")],\n        1\n      )\n    : _c(\"div\", [_c(\"WebsocketInterfaceList\")], 1)\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        [\n          _c(\n            \"CCardHeader\",\n            [\n              _c(\n                \"CButton\",\n                {\n                  staticClass: \"float-right\",\n                  attrs: {\n                    color: \"success\",\n                    size: \"sm\",\n                    to: \"/config/websocket/add\"\n                  }\n                },\n                [\n                  _c(\"CIcon\", { attrs: { content: _vm.$options.icons.add } }),\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"table.actions.add\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ],\n                1\n              )\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\"CDataTable\", {\n                attrs: {\n                  fields: _vm.fields,\n                  items: _vm.instances,\n                  \"column-filter\": true,\n                  \"items-per-page\": 20,\n                  pagination: true,\n                  striped: true,\n                  sorter: { external: false, resetable: true }\n                },\n                scopedSlots: _vm._u([\n                  {\n                    key: \"acceptAsyncMsg\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          [\n                            _c(\n                              \"CDropdown\",\n                              {\n                                attrs: {\n                                  color: item.acceptAsyncMsg\n                                    ? \"success\"\n                                    : \"danger\",\n                                  \"toggler-text\": _vm.$t(\n                                    \"table.enabled.\" + item.acceptAsyncMsg\n                                  ),\n                                  size: \"sm\"\n                                }\n                              },\n                              [\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeAcceptAsyncMsg(\n                                          item.messaging,\n                                          true\n                                        )\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(_vm.$t(\"table.enabled.true\")) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                ),\n                                _vm._v(\" \"),\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeAcceptAsyncMsg(\n                                          item.messaging,\n                                          false\n                                        )\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(_vm.$t(\"table.enabled.false\")) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  },\n                  {\n                    key: \"acceptOnlyLocalhost\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          [\n                            _c(\n                              \"CDropdown\",\n                              {\n                                attrs: {\n                                  color: item.acceptOnlyLocalhost\n                                    ? \"success\"\n                                    : \"danger\",\n                                  \"toggler-text\": _vm.$t(\n                                    \"table.enabled.\" + item.acceptOnlyLocalhost\n                                  ),\n                                  size: \"sm\"\n                                }\n                              },\n                              [\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeAcceptOnlyLocalhost(\n                                          item.service,\n                                          true\n                                        )\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(_vm.$t(\"table.enabled.true\")) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                ),\n                                _vm._v(\" \"),\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeAcceptOnlyLocalhost(\n                                          item.service,\n                                          false\n                                        )\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(_vm.$t(\"table.enabled.false\")) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  },\n                  {\n                    key: \"actions\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          { staticClass: \"col-actions\" },\n                          [\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: {\n                                  color: \"info\",\n                                  size: \"sm\",\n                                  to:\n                                    \"/config/websocket/edit/\" +\n                                    item.instanceMessaging\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.edit }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.edit\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            ),\n                            _vm._v(\" \"),\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: { color: \"danger\", size: \"sm\" },\n                                on: {\n                                  click: function($event) {\n                                    _vm.modals.instances = {\n                                      messaging: item.messaging.instance,\n                                      service: item.service.instance\n                                    }\n                                  }\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.remove }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.delete\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  }\n                ])\n              })\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CModal\",\n        {\n          attrs: { color: \"danger\", show: _vm.modals.instances !== null },\n          on: {\n            \"update:show\": function($event) {\n              return _vm.$set(_vm.modals, \"instances !== null\", $event)\n            }\n          },\n          scopedSlots: _vm._u([\n            {\n              key: \"header\",\n              fn: function() {\n                return [\n                  _c(\"h5\", { staticClass: \"modal-title\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\n                            \"config.websocket.messages.delete.confirmTitle\"\n                          )\n                        ) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              },\n              proxy: true\n            },\n            {\n              key: \"footer\",\n              fn: function() {\n                return [\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"danger\" },\n                      on: {\n                        click: function($event) {\n                          _vm.modals.instances = null\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.no\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"success\" },\n                      on: {\n                        click: function($event) {\n                          return _vm.removeInterface()\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.yes\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  )\n                ]\n              },\n              proxy: true\n            }\n          ])\n        },\n        [\n          _vm._v(\" \"),\n          _vm.modals.instances !== null\n            ? _c(\"div\", [\n                _vm._v(\n                  \"\\n\\t\\t\\t\" +\n                    _vm._s(\n                      _vm.$t(\"config.websocket.messages.delete.confirm\", {\n                        service: _vm.modals.instances.messaging\n                      })\n                    ) +\n                    \"\\n\\t\\t\"\n                )\n              ])\n            : _vm._e()\n        ]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<div>\n\t\t<CCard>\n\t\t\t<CCardHeader>\n\t\t\t\t<CButton\n\t\t\t\t\tcolor='success'\n\t\t\t\t\tsize='sm'\n\t\t\t\t\tclass='float-right'\n\t\t\t\t\tto='/config/websocket/add'\n\t\t\t\t>\n\t\t\t\t\t<CIcon :content='$options.icons.add' />\n\t\t\t\t\t{{ $t('table.actions.add') }}\n\t\t\t\t</CButton>\n\t\t\t</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<CDataTable\n\t\t\t\t\t:fields='fields'\n\t\t\t\t\t:items='instances'\n\t\t\t\t\t:column-filter='true'\n\t\t\t\t\t:items-per-page='20'\n\t\t\t\t\t:pagination='true'\n\t\t\t\t\t:striped='true'\n\t\t\t\t\t:sorter='{ external: false, resetable: true }'\n\t\t\t\t>\n\t\t\t\t\t<template #acceptAsyncMsg='{item}'>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CDropdown\n\t\t\t\t\t\t\t\t:color='item.acceptAsyncMsg ? \"success\": \"danger\"'\n\t\t\t\t\t\t\t\t:toggler-text='$t(\"table.enabled.\" + item.acceptAsyncMsg)'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeAcceptAsyncMsg(item.messaging, true)'>\n\t\t\t\t\t\t\t\t\t{{ $t('table.enabled.true') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeAcceptAsyncMsg(item.messaging, false)'>\n\t\t\t\t\t\t\t\t\t{{ $t('table.enabled.false') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t</CDropdown>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template #acceptOnlyLocalhost='{item}'>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CDropdown\n\t\t\t\t\t\t\t\t:color='item.acceptOnlyLocalhost ? \"success\": \"danger\"'\n\t\t\t\t\t\t\t\t:toggler-text='$t(\"table.enabled.\" + item.acceptOnlyLocalhost)'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeAcceptOnlyLocalhost(item.service, true)'>\n\t\t\t\t\t\t\t\t\t{{ $t('table.enabled.true') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeAcceptOnlyLocalhost(item.service, false)'>\n\t\t\t\t\t\t\t\t\t{{ $t('table.enabled.false') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t</CDropdown>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template #actions='{item}'>\n\t\t\t\t\t\t<td class='col-actions'>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tcolor='info'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t\t:to='\"/config/websocket/edit/\" + item.instanceMessaging'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.edit' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.edit') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tcolor='danger'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t\t@click='modals.instances = {messaging: item.messaging.instance, service: item.service.instance}'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.remove' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.delete') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t</CDataTable>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t\t<CModal\n\t\t\tcolor='danger'\n\t\t\t:show.sync='modals.instances !== null'\n\t\t>\n\t\t\t<template #header>\n\t\t\t\t<h5 class='modal-title'>\n\t\t\t\t\t{{ $t('config.websocket.messages.delete.confirmTitle') }}\n\t\t\t\t</h5>\n\t\t\t</template>\n\t\t\t<div v-if='modals.instances !== null'>\n\t\t\t\t{{ $t('config.websocket.messages.delete.confirm', {service: modals.instances.messaging}) }}\n\t\t\t</div>\n\t\t\t<template #footer>\n\t\t\t\t<CButton color='danger' @click='modals.instances = null'>\n\t\t\t\t\t{{ $t('forms.no') }}\n\t\t\t\t</CButton>\n\t\t\t\t<CButton color='success' @click='removeInterface()'>\n\t\t\t\t\t{{ $t('forms.yes') }}\n\t\t\t\t</CButton>\n\t\t\t</template>\n\t\t</CModal>\n\t</div>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CDataTable, CDropdown, CDropdownItem, CIcon, CModal} from '@coreui/vue/src';\nimport {cilPencil, cilPlus, cilTrash} from '@coreui/icons';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\n\nexport default {\n\tname: 'WebsocketInterfaceList',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCDataTable,\n\t\tCDropdown,\n\t\tCDropdownItem,\n\t\tCIcon,\n\t\tCModal,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentNames: {\n\t\t\t\tmessaging: 'iqrf::WebsocketMessaging',\n\t\t\t\tservice: 'shape::WebsocketCppService',\n\t\t\t},\n\t\t\tfields: [\n\t\t\t\t{\n\t\t\t\t\tkey: 'instanceMessaging',\n\t\t\t\t\tlabel: this.$t('config.websocket.form.instance'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'port',\n\t\t\t\t\tlabel: this.$t('config.websocket.form.WebsocketPort'),\n\t\t\t\t},\n\n\t\t\t\t{\n\t\t\t\t\tkey: 'acceptAsyncMsg',\n\t\t\t\t\tlabel: this.$t('config.websocket.form.acceptAsyncMsg'),\n\t\t\t\t\tfilter: false,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'acceptOnlyLocalhost',\n\t\t\t\t\tlabel: this.$t('config.websocket.form.acceptOnlyLocalhost'),\n\t\t\t\t\tfilter: false,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'actions',\n\t\t\t\t\tlabel: this.$t('table.actions.title'),\n\t\t\t\t\tfilter: false,\n\t\t\t\t\tsorter: false,\n\t\t\t\t},\n\t\t\t],\n\t\t\tinstances: [],\n\t\t\tmodals: {\n\t\t\t\tinstances: null,\n\t\t\t},\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.$store.commit('spinner/SHOW');\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.instances = [];\n\t\t\treturn Promise.all([\n\t\t\t\tDaemonConfigurationService.getComponent(this.componentNames.messaging),\n\t\t\t\tDaemonConfigurationService.getComponent(this.componentNames.service),\n\t\t\t])\n\t\t\t\t.then((responses) => {\n\t\t\t\t\tconst messagings = responses[0].data.instances;\n\t\t\t\t\tconst services = responses[1].data.instances;\n\t\t\t\t\tfor (const messaging of messagings) {\n\t\t\t\t\t\tif (messaging.RequiredInterfaces === undefined ||\n\t\t\t\t\t\t\t\tmessaging.RequiredInterfaces === [] ||\n\t\t\t\t\t\t\t\tmessaging.RequiredInterfaces[0].name !== 'shape::IWebsocketService' ||\n\t\t\t\t\t\t\t\tmessaging.RequiredInterfaces[0].target.instance === undefined) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst serviceInstance = messaging.RequiredInterfaces[0].target.instance;\n\t\t\t\t\t\tfor (const service of services) {\n\t\t\t\t\t\t\tif (service.instance !== serviceInstance) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.instances.push({\n\t\t\t\t\t\t\t\tmessaging: messaging,\n\t\t\t\t\t\t\t\tservice: service,\n\t\t\t\t\t\t\t\tinstanceMessaging: messaging.instance,\n\t\t\t\t\t\t\t\tinstanceService: service.instance,\n\t\t\t\t\t\t\t\tacceptAsyncMsg: messaging.acceptAsyncMsg,\n\t\t\t\t\t\t\t\tport: service.WebsocketPort,\n\t\t\t\t\t\t\t\tacceptOnlyLocalhost: service.acceptOnlyLocalhost,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t});\n\t\t\t// TODO: add error message\n\t\t},\n\t\tchangeAcceptOnlyLocalhost(service, setting) {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tservice.acceptOnlyLocalhost = setting;\n\t\t\tDaemonConfigurationService.updateInstance(this.componentNames.service, service.instance, service)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getConfig().then(() => {\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('config.websocket.service.messages.editSuccess', {service: service.instance})\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t\tchangeAcceptAsyncMsg(instance, setting) {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tinstance.acceptAsyncMsg = setting;\n\t\t\tDaemonConfigurationService.updateInstance(this.componentNames.messaging, instance.instance, instance)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getConfig().then(() => {\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('config.websocket.messaging.messages.editSuccess', {messaging: instance.instance})\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t\tremoveInterface() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tPromise.all([\n\t\t\t\tDaemonConfigurationService.deleteInstance(this.componentNames.messaging, this.modals.instances.messaging),\n\t\t\t\tDaemonConfigurationService.deleteInstance(this.componentNames.service, this.modals.instances.service),\n\t\t\t])\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\tthis.$t('config.websocket.messages.delete.success', {instance: this.modals.instances.messaging})\n\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t);\n\t\t\t\t\tthis.instances = null;\n\t\t\t\t});\n\t\t\t// TODO: add error message\n\t\t},\n\t},\n\ticons: {\n\t\tadd: cilPlus,\n\t\tedit: cilPencil,\n\t\tremove: cilTrash,\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./WebsocketInterfaceList.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./WebsocketInterfaceList.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./WebsocketInterfaceList.vue?vue&type=template&id=72fc760c&\"\nimport script from \"./WebsocketInterfaceList.vue?vue&type=script&lang=js&\"\nexport * from \"./WebsocketInterfaceList.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('72fc760c')) {\n      api.createRecord('72fc760c', component.options)\n    } else {\n      api.reload('72fc760c', component.options)\n    }\n    module.hot.accept(\"./WebsocketInterfaceList.vue?vue&type=template&id=72fc760c&\", function () {\n      api.rerender('72fc760c', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/Config/WebsocketInterfaceList.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        [\n          _c(\n            \"CCardHeader\",\n            [\n              _vm._v(\n                \"\\n\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.websocket.messaging.title\")) +\n                  \"\\n\\t\\t\\t\"\n              ),\n              _c(\n                \"CButton\",\n                {\n                  staticClass: \"float-right\",\n                  attrs: {\n                    color: \"success\",\n                    size: \"sm\",\n                    to: \"/config/websocket/add-messaging\"\n                  }\n                },\n                [\n                  _c(\"CIcon\", { attrs: { content: _vm.$options.icons.add } }),\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"table.actions.add\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ],\n                1\n              )\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\"CDataTable\", {\n                attrs: {\n                  fields: _vm.fields,\n                  items: _vm.instances,\n                  \"column-filter\": true,\n                  \"items-per-page\": 20,\n                  pagination: true,\n                  striped: true,\n                  sorter: { external: false, resetable: true }\n                },\n                scopedSlots: _vm._u([\n                  {\n                    key: \"acceptAsyncMsg\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          [\n                            _c(\n                              \"CDropdown\",\n                              {\n                                attrs: {\n                                  color: item.acceptAsyncMsg\n                                    ? \"success\"\n                                    : \"danger\",\n                                  \"toggler-text\": _vm.$t(\n                                    \"table.enabled.\" + item.acceptAsyncMsg\n                                  ),\n                                  size: \"sm\"\n                                }\n                              },\n                              [\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeAccept(item, true)\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(_vm.$t(\"table.enabled.true\")) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                ),\n                                _vm._v(\" \"),\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeAccept(item, false)\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(_vm.$t(\"table.enabled.false\")) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  },\n                  {\n                    key: \"RequiredInterfaces\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\"td\", [\n                          _vm._v(\n                            \"\\n\\t\\t\\t\\t\\t\\t\" +\n                              _vm._s(\n                                item.RequiredInterfaces[0].target.instance\n                              ) +\n                              \"\\n\\t\\t\\t\\t\\t\"\n                          )\n                        ])\n                      ]\n                    }\n                  },\n                  {\n                    key: \"actions\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          { staticClass: \"col-actions\" },\n                          [\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: {\n                                  color: \"info\",\n                                  size: \"sm\",\n                                  to:\n                                    \"/config/websocket/edit-messaging/\" +\n                                    item.instance\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.edit }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.edit\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            ),\n                            _vm._v(\" \"),\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: { color: \"danger\", size: \"sm\" },\n                                on: {\n                                  click: function($event) {\n                                    _vm.modals.instance = item.instance\n                                  }\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.remove }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.delete\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  }\n                ])\n              })\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CModal\",\n        {\n          attrs: { color: \"danger\", show: _vm.modals.instance !== null },\n          on: {\n            \"update:show\": function($event) {\n              return _vm.$set(_vm.modals, \"instance !== null\", $event)\n            }\n          },\n          scopedSlots: _vm._u([\n            {\n              key: \"header\",\n              fn: function() {\n                return [\n                  _c(\"h5\", { staticClass: \"modal-title\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\n                            \"config.websocket.messaging.messages.deleteTitle\"\n                          )\n                        ) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              },\n              proxy: true\n            },\n            {\n              key: \"footer\",\n              fn: function() {\n                return [\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"danger\" },\n                      on: {\n                        click: function($event) {\n                          _vm.modals.instance = null\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.no\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"success\" },\n                      on: { click: _vm.removeInstance }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.yes\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  )\n                ]\n              },\n              proxy: true\n            }\n          ])\n        },\n        [\n          _vm._v(\n            \"\\n\\t\\t\" +\n              _vm._s(\n                _vm.$t(\"config.websocket.messaging.messages.deletePrompt\", {\n                  messaging: _vm.modals.instance\n                })\n              ) +\n              \"\\n\\t\\t\"\n          )\n        ]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<div>\n\t\t<CCard>\n\t\t\t<CCardHeader>\n\t\t\t\t{{ $t('config.websocket.messaging.title') }}\n\t\t\t\t<CButton\n\t\t\t\t\tcolor='success'\n\t\t\t\t\tsize='sm'\n\t\t\t\t\tclass='float-right'\n\t\t\t\t\tto='/config/websocket/add-messaging'\n\t\t\t\t>\n\t\t\t\t\t<CIcon :content='$options.icons.add' />\n\t\t\t\t\t{{ $t('table.actions.add') }}\n\t\t\t\t</CButton>\n\t\t\t</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<CDataTable\n\t\t\t\t\t:fields='fields'\n\t\t\t\t\t:items='instances'\n\t\t\t\t\t:column-filter='true'\n\t\t\t\t\t:items-per-page='20'\n\t\t\t\t\t:pagination='true'\n\t\t\t\t\t:striped='true'\n\t\t\t\t\t:sorter='{ external: false, resetable: true }'\n\t\t\t\t>\n\t\t\t\t\t<template #acceptAsyncMsg='{item}'>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CDropdown\n\t\t\t\t\t\t\t\t:color='item.acceptAsyncMsg ? \"success\": \"danger\"'\n\t\t\t\t\t\t\t\t:toggler-text='$t(\"table.enabled.\" + item.acceptAsyncMsg)'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeAccept(item, true)'>\n\t\t\t\t\t\t\t\t\t{{ $t('table.enabled.true') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeAccept(item, false)'>\n\t\t\t\t\t\t\t\t\t{{ $t('table.enabled.false') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t</CDropdown>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template #RequiredInterfaces='{item}'>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t{{ item.RequiredInterfaces[0].target.instance }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template #actions='{item}'>\n\t\t\t\t\t\t<td class='col-actions'>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tcolor='info'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t\t:to='\"/config/websocket/edit-messaging/\" + item.instance'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.edit' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.edit') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tcolor='danger'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t\t@click='modals.instance = item.instance'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.remove' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.delete') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t</CDataTable>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t\t<CModal\n\t\t\tcolor='danger'\n\t\t\t:show.sync='modals.instance !== null'\n\t\t>\n\t\t\t<template #header>\n\t\t\t\t<h5 class='modal-title'>\n\t\t\t\t\t{{ $t('config.websocket.messaging.messages.deleteTitle') }}\n\t\t\t\t</h5>\n\t\t\t</template>\n\t\t\t{{ $t('config.websocket.messaging.messages.deletePrompt', {messaging: modals.instance}) }}\n\t\t\t<template #footer>\n\t\t\t\t<CButton color='danger' @click='modals.instance = null'>\n\t\t\t\t\t{{ $t('forms.no') }}\n\t\t\t\t</CButton>\n\t\t\t\t<CButton color='success' @click='removeInstance'>\n\t\t\t\t\t{{ $t('forms.yes') }}\n\t\t\t\t</CButton>\n\t\t\t</template>\n\t\t</CModal>\n\t</div>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CDataTable, CDropdown, CDropdownItem, CIcon, CModal} from '@coreui/vue/src';\nimport {cilPencil, cilPlus, cilTrash} from '@coreui/icons';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\n\nexport default {\n\tname: 'WebsocketMessagingList',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCDataTable,\n\t\tCDropdown,\n\t\tCDropdownItem,\n\t\tCIcon,\n\t\tCModal,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'iqrf::WebsocketMessaging',\n\t\t\tfields: [\n\t\t\t\t{\n\t\t\t\t\tkey: 'instance',\n\t\t\t\t\tlabel: this.$t('config.websocket.form.instance'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'acceptAsyncMsg',\n\t\t\t\t\tlabel: this.$t('config.websocket.form.acceptAsyncMsg'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'RequiredInterfaces',\n\t\t\t\t\tlabel: this.$t('config.websocket.form.requiredInterface.instance'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'actions',\n\t\t\t\t\tlabel: this.$t('table.actions.title'),\n\t\t\t\t\tfilter: false,\n\t\t\t\t\tsorter: false,\n\t\t\t\t}\n\t\t\t],\n\t\t\tinstances: [],\n\t\t\tmodals: {\n\t\t\t\tinstance: null,\n\t\t\t},\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\treturn DaemonConfigurationService.getComponent(this.componentName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.instances = response.data.instances;\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t\tchangeAccept(instance, setting) {\n\t\t\tif (instance.acceptAsyncMsg !== setting) {\n\t\t\t\tinstance.acceptAsyncMsg = setting;\n\t\t\t\tDaemonConfigurationService.updateInstance(this.componentName, instance.instance, instance)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tthis.getConfig().then(() => {\n\t\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\t\tthis.$t('config.websocket.messaging.messages.editSuccess', {messaging: instance.instance})\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => FormErrorHandler.getConfig(error));\n\t\t\t}\n\t\t},\n\t\tremoveInstance() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tconst instance = this.modals.instance;\n\t\t\tthis.modals.instance = null;\n\t\t\tDaemonConfigurationService.deleteInstance(this.componentName, instance)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getConfig().then(() => {\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('config.websocket.messaging.messages.deleteSuccess', {messaging: instance})\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t});\t\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t}\n\t},\n\ticons: {\n\t\tadd: cilPlus,\n\t\tedit: cilPencil,\n\t\tremove: cilTrash,\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./WebsocketMessagingList.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./WebsocketMessagingList.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./WebsocketMessagingList.vue?vue&type=template&id=479d44d7&\"\nimport script from \"./WebsocketMessagingList.vue?vue&type=script&lang=js&\"\nexport * from \"./WebsocketMessagingList.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('479d44d7')) {\n      api.createRecord('479d44d7', component.options)\n    } else {\n      api.reload('479d44d7', component.options)\n    }\n    module.hot.accept(\"./WebsocketMessagingList.vue?vue&type=template&id=479d44d7&\", function () {\n      api.rerender('479d44d7', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/Config/WebsocketMessagingList.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        [\n          _c(\n            \"CCardHeader\",\n            [\n              _vm._v(\n                \"\\n\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"config.websocket.service.title\")) +\n                  \"\\n\\t\\t\\t\"\n              ),\n              _c(\n                \"CButton\",\n                {\n                  staticClass: \"float-right\",\n                  attrs: {\n                    color: \"success\",\n                    size: \"sm\",\n                    to: \"/config/websocket/add-service\"\n                  }\n                },\n                [\n                  _c(\"CIcon\", { attrs: { content: _vm.$options.icons.add } }),\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"table.actions.add\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ],\n                1\n              )\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\"CDataTable\", {\n                attrs: {\n                  fields: _vm.fields,\n                  items: _vm.instances,\n                  \"column-filter\": true,\n                  \"items-per-page\": 20,\n                  pagination: true,\n                  striped: true,\n                  sorter: { external: false, resetable: true }\n                },\n                scopedSlots: _vm._u([\n                  {\n                    key: \"acceptOnlyLocalhost\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          [\n                            _c(\n                              \"CDropdown\",\n                              {\n                                attrs: {\n                                  color: item.acceptOnlyLocalhost\n                                    ? \"success\"\n                                    : \"danger\",\n                                  \"toggler-text\": _vm.$t(\n                                    \"table.enabled.\" + item.acceptOnlyLocalhost\n                                  ),\n                                  size: \"sm\"\n                                }\n                              },\n                              [\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeAccept(item, true)\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(_vm.$t(\"table.enabled.true\")) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                ),\n                                _vm._v(\" \"),\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeAccept(item, false)\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(_vm.$t(\"table.enabled.false\")) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  },\n                  {\n                    key: \"actions\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          { staticClass: \"col-actions\" },\n                          [\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: {\n                                  color: \"info\",\n                                  size: \"sm\",\n                                  to:\n                                    \"/config/websocket/edit-service/\" +\n                                    item.instance\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.edit }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.edit\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            ),\n                            _vm._v(\" \"),\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: { color: \"danger\", size: \"sm\" },\n                                on: {\n                                  click: function($event) {\n                                    _vm.modals.service = item.instance\n                                  }\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.remove }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.delete\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  }\n                ])\n              })\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CModal\",\n        {\n          attrs: { color: \"danger\", show: _vm.modals.service !== null },\n          on: {\n            \"update:show\": function($event) {\n              return _vm.$set(_vm.modals, \"service !== null\", $event)\n            }\n          },\n          scopedSlots: _vm._u([\n            {\n              key: \"header\",\n              fn: function() {\n                return [\n                  _c(\"h5\", { staticClass: \"modal-title\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\n                            \"config.websocket.service.messages.deleteTitle\"\n                          )\n                        ) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              },\n              proxy: true\n            },\n            {\n              key: \"footer\",\n              fn: function() {\n                return [\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"danger\" },\n                      on: {\n                        click: function($event) {\n                          _vm.modals.service = null\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.no\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"success\" },\n                      on: { click: _vm.removeService }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.yes\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  )\n                ]\n              },\n              proxy: true\n            }\n          ])\n        },\n        [\n          _vm._v(\n            \"\\n\\t\\t\" +\n              _vm._s(\n                _vm.$t(\"config.websocket.service.messages.deletePrompt\", {\n                  service: _vm.modals.service\n                })\n              ) +\n              \"\\n\\t\\t\"\n          )\n        ]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<div>\n\t\t<CCard>\n\t\t\t<CCardHeader>\n\t\t\t\t{{ $t('config.websocket.service.title') }}\n\t\t\t\t<CButton\n\t\t\t\t\tcolor='success'\n\t\t\t\t\tsize='sm'\n\t\t\t\t\tclass='float-right'\n\t\t\t\t\tto='/config/websocket/add-service'\n\t\t\t\t>\n\t\t\t\t\t<CIcon :content='$options.icons.add' />\n\t\t\t\t\t{{ $t('table.actions.add') }}\n\t\t\t\t</CButton>\n\t\t\t</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<CDataTable\n\t\t\t\t\t:fields='fields'\n\t\t\t\t\t:items='instances'\n\t\t\t\t\t:column-filter='true'\n\t\t\t\t\t:items-per-page='20'\n\t\t\t\t\t:pagination='true'\n\t\t\t\t\t:striped='true'\n\t\t\t\t\t:sorter='{ external: false, resetable: true }'\n\t\t\t\t>\n\t\t\t\t\t<template #acceptOnlyLocalhost='{item}'>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CDropdown\n\t\t\t\t\t\t\t\t:color='item.acceptOnlyLocalhost ? \"success\": \"danger\"'\n\t\t\t\t\t\t\t\t:toggler-text='$t(\"table.enabled.\" + item.acceptOnlyLocalhost)'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeAccept(item, true)'>\n\t\t\t\t\t\t\t\t\t{{ $t('table.enabled.true') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeAccept(item, false)'>\n\t\t\t\t\t\t\t\t\t{{ $t('table.enabled.false') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t</CDropdown>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template #actions='{item}'>\n\t\t\t\t\t\t<td class='col-actions'>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tcolor='info'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t\t:to='\"/config/websocket/edit-service/\" + item.instance'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.edit' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.edit') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tcolor='danger'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t\t@click='modals.service = item.instance'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.remove' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.delete') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t</CDataTable>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t\t<CModal\n\t\t\tcolor='danger'\n\t\t\t:show.sync='modals.service !== null'\n\t\t>\n\t\t\t<template #header>\n\t\t\t\t<h5 class='modal-title'>\n\t\t\t\t\t{{ $t('config.websocket.service.messages.deleteTitle') }}\n\t\t\t\t</h5>\n\t\t\t</template>\n\t\t\t{{ $t('config.websocket.service.messages.deletePrompt', {service: modals.service}) }}\n\t\t\t<template #footer>\n\t\t\t\t<CButton color='danger' @click='modals.service = null'>\n\t\t\t\t\t{{ $t('forms.no') }}\n\t\t\t\t</CButton>\n\t\t\t\t<CButton color='success' @click='removeService'>\n\t\t\t\t\t{{ $t('forms.yes') }}\n\t\t\t\t</CButton>\n\t\t\t</template>\n\t\t</CModal>\n\t</div>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CDataTable, CDropdown, CDropdownItem, CIcon, CModal} from '@coreui/vue/src';\nimport {cilPencil, cilPlus, cilTrash} from '@coreui/icons';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\n\nexport default {\n\tname: 'WebsocketServiceList',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCDataTable,\n\t\tCDropdown,\n\t\tCDropdownItem,\n\t\tCIcon,\n\t\tCModal,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcomponentName: 'shape::WebsocketCppService',\n\t\t\tfields: [\n\t\t\t\t{\n\t\t\t\t\tkey: 'instance',\n\t\t\t\t\tlabel: this.$t('config.websocket.form.instance'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'WebsocketPort',\n\t\t\t\t\tlabel: this.$t('config.websocket.form.WebsocketPort'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'acceptOnlyLocalhost',\n\t\t\t\t\tlabel: this.$t('config.websocket.form.acceptOnlyLocalhost'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'actions',\n\t\t\t\t\tlabel: this.$t('table.actions.title'),\n\t\t\t\t\tfilter: false,\n\t\t\t\t\tsorter: false,\n\t\t\t\t},\n\t\t\t],\n\t\t\tinstances: null,\n\t\t\tmodals: {\n\t\t\t\tservice: null,\n\t\t\t},\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.getConfig();\n\t},\n\tmethods: {\n\t\tgetConfig() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\treturn DaemonConfigurationService.getComponent(this.componentName)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.instances = response.data.instances;\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t},\n\t\tchangeAccept(service, setting) {\n\t\t\tif (service.acceptOnlyLocalhost !== setting) {\n\t\t\t\tservice.acceptOnlyLocalhost = setting;\n\t\t\t\tDaemonConfigurationService.updateInstance(this.componentName, service.instance, service)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tthis.getConfig().then(() => {\n\t\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\t\tthis.$t('config.websocket.service.messages.editSuccess', {service: service.instance})\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => FormErrorHandler.getConfig(error));\n\t\t\t}\n\t\t},\n\t\tremoveService() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tconst service = this.modals.service;\n\t\t\tthis.modals.service = null;\n\t\t\tDaemonConfigurationService.deleteInstance(this.componentName, service)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getConfig().then(() => {\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('config.websocket.service.messages.deleteSuccess', {service: service})\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch((error) => FormErrorHandler.configError(error));\n\t\t}\n\t},\n\ticons: {\n\t\tadd: cilPlus,\n\t\tedit: cilPencil,\n\t\tremove: cilTrash,\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./WebsocketServiceList.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./WebsocketServiceList.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./WebsocketServiceList.vue?vue&type=template&id=2dc5cec8&\"\nimport script from \"./WebsocketServiceList.vue?vue&type=script&lang=js&\"\nexport * from \"./WebsocketServiceList.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('2dc5cec8')) {\n      api.createRecord('2dc5cec8', component.options)\n    } else {\n      api.reload('2dc5cec8', component.options)\n    }\n    module.hot.accept(\"./WebsocketServiceList.vue?vue&type=template&id=2dc5cec8&\", function () {\n      api.rerender('2dc5cec8', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/Config/WebsocketServiceList.vue\"\nexport default component.exports","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./WebsocketList.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./WebsocketList.vue?vue&type=script&lang=js&\"","<template>\n\t<div v-if='$store.getters[\"user/getRole\"] === \"power\"'>\n\t\t<WebsocketMessagingList />\n\t\t<WebsocketServiceList />\n\t</div>\n\t<div v-else>\n\t\t<WebsocketInterfaceList />\n\t</div>\n</template>\n\n<script>\nimport WebsocketInterfaceList from '../../components/Config/WebsocketInterfaceList';\nimport WebsocketMessagingList from '../../components/Config/WebsocketMessagingList';\nimport WebsocketServiceList from '../../components/Config/WebsocketServiceList';\n\nexport default {\n\tname: 'WebsocketList',\n\tcomponents: {\n\t\tWebsocketInterfaceList,\n\t\tWebsocketMessagingList,\n\t\tWebsocketServiceList,\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.websocket.title'\n\t}\n};\n</script>\n","import { render, staticRenderFns } from \"./WebsocketList.vue?vue&type=template&id=0d42dbcb&\"\nimport script from \"./WebsocketList.vue?vue&type=script&lang=js&\"\nexport * from \"./WebsocketList.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('0d42dbcb')) {\n      api.createRecord('0d42dbcb', component.options)\n    } else {\n      api.reload('0d42dbcb', component.options)\n    }\n    module.hot.accept(\"./WebsocketList.vue?vue&type=template&id=0d42dbcb&\", function () {\n      api.rerender('0d42dbcb', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/WebsocketList.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        [\n          _c(\"CCardHeader\", [\n            _c(\n              \"div\",\n              { staticClass: \"float-right\" },\n              [\n                _c(\n                  \"CButton\",\n                  {\n                    attrs: {\n                      color: \"success\",\n                      size: \"sm\",\n                      to: \"/config/scheduler/add\"\n                    }\n                  },\n                  [\n                    _c(\"CIcon\", { attrs: { content: _vm.$options.icons.add } }),\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"table.actions.add\")) +\n                        \"\\n\\t\\t\\t\\t\"\n                    )\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _c(\n                  \"CButton\",\n                  {\n                    attrs: { color: \"primary\", size: \"sm\" },\n                    on: {\n                      click: function($event) {\n                        _vm.importConfig.modal = true\n                      }\n                    }\n                  },\n                  [\n                    _c(\"CIcon\", {\n                      attrs: { content: _vm.$options.icons.import }\n                    }),\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"config.scheduler.buttons.import\")) +\n                        \"\\n\\t\\t\\t\\t\"\n                    )\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _c(\n                  \"CButton\",\n                  {\n                    attrs: { color: \"secondary\", size: \"sm\" },\n                    on: { click: _vm.exportScheduler }\n                  },\n                  [\n                    _c(\"CIcon\", {\n                      attrs: { content: _vm.$options.icons.export }\n                    }),\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"config.scheduler.buttons.export\")) +\n                        \"\\n\\t\\t\\t\\t\"\n                    )\n                  ],\n                  1\n                )\n              ],\n              1\n            )\n          ]),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\"CDataTable\", {\n                attrs: {\n                  fields: _vm.fields,\n                  items: _vm.tasks,\n                  \"column-filter\": true,\n                  \"items-per-page\": 20,\n                  pagination: true,\n                  striped: true,\n                  sorter: { external: false, resetable: true }\n                },\n                scopedSlots: _vm._u(\n                  [\n                    _vm.retrieved === \"rest\"\n                      ? {\n                          key: \"taskId\",\n                          fn: function(ref) {\n                            var item = ref.item\n                            return [\n                              _c(\"td\", [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(item.id) +\n                                    \"\\n\\t\\t\\t\\t\\t\"\n                                )\n                              ])\n                            ]\n                          }\n                        }\n                      : null,\n                    _vm.retrieved === \"rest\"\n                      ? {\n                          key: \"clientId\",\n                          fn: function(ref) {\n                            var item = ref.item\n                            return [\n                              _c(\"td\", [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(item.service) +\n                                    \"\\n\\t\\t\\t\\t\\t\"\n                                )\n                              ])\n                            ]\n                          }\n                        }\n                      : null,\n                    {\n                      key: \"timeSpec\",\n                      fn: function(ref) {\n                        var item = ref.item\n                        return [\n                          _vm.retrieved === \"daemon\"\n                            ? _c(\"td\", [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.timeString(item.timeSpec)) +\n                                    \"\\n\\t\\t\\t\\t\\t\"\n                                )\n                              ])\n                            : _c(\"td\", [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(item.time) +\n                                    \"\\n\\t\\t\\t\\t\\t\"\n                                )\n                              ])\n                        ]\n                      }\n                    },\n                    {\n                      key: \"task\",\n                      fn: function(ref) {\n                        var item = ref.item\n                        return [\n                          _vm.retrieved === \"daemon\"\n                            ? _c(\"td\", [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.displayMTypes(item.task)) +\n                                    \"\\n\\t\\t\\t\\t\\t\"\n                                )\n                              ])\n                            : _c(\"td\", [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.displayMTypes(item.mTypes)) +\n                                    \"\\n\\t\\t\\t\\t\\t\"\n                                )\n                              ])\n                        ]\n                      }\n                    },\n                    {\n                      key: \"actions\",\n                      fn: function(ref) {\n                        var item = ref.item\n                        return [\n                          _c(\n                            \"td\",\n                            { staticClass: \"col-actions\" },\n                            [\n                              _vm.retrieved === \"daemon\"\n                                ? _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: {\n                                        color: \"info\",\n                                        size: \"sm\",\n                                        to:\n                                          \"/config/scheduler/edit/\" +\n                                          item.taskId\n                                      }\n                                    },\n                                    [\n                                      _c(\"CIcon\", {\n                                        attrs: {\n                                          content: _vm.$options.icons.edit\n                                        }\n                                      }),\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(_vm.$t(\"table.actions.edit\")) +\n                                          \"\\n\\t\\t\\t\\t\\t\\t\"\n                                      )\n                                    ],\n                                    1\n                                  )\n                                : _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: {\n                                        color: \"info\",\n                                        size: \"sm\",\n                                        to: \"/config/scheduler/edit/\" + item.id\n                                      }\n                                    },\n                                    [\n                                      _c(\"CIcon\", {\n                                        attrs: {\n                                          content: _vm.$options.icons.edit\n                                        }\n                                      }),\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(_vm.$t(\"table.actions.edit\")) +\n                                          \"\\n\\t\\t\\t\\t\\t\\t\"\n                                      )\n                                    ],\n                                    1\n                                  ),\n                              _vm._v(\" \"),\n                              _vm.retrieved === \"daemon\"\n                                ? _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: { color: \"danger\", size: \"sm\" },\n                                      on: {\n                                        click: function($event) {\n                                          _vm.modal.task = item.taskId\n                                        }\n                                      }\n                                    },\n                                    [\n                                      _c(\"CIcon\", {\n                                        attrs: {\n                                          content: _vm.$options.icons.remove\n                                        }\n                                      }),\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(\n                                            _vm.$t(\"table.actions.delete\")\n                                          ) +\n                                          \"\\n\\t\\t\\t\\t\\t\\t\"\n                                      )\n                                    ],\n                                    1\n                                  )\n                                : _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: { color: \"danger\", size: \"sm\" },\n                                      on: {\n                                        click: function($event) {\n                                          _vm.modal.task = item.id\n                                        }\n                                      }\n                                    },\n                                    [\n                                      _c(\"CIcon\", {\n                                        attrs: {\n                                          content: _vm.$options.icons.remove\n                                        }\n                                      }),\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(\n                                            _vm.$t(\"table.actions.delete\")\n                                          ) +\n                                          \"\\n\\t\\t\\t\\t\\t\\t\"\n                                      )\n                                    ],\n                                    1\n                                  )\n                            ],\n                            1\n                          )\n                        ]\n                      }\n                    }\n                  ],\n                  null,\n                  true\n                )\n              })\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CModal\",\n        {\n          attrs: { show: _vm.importConfig.modal, color: \"primary\" },\n          on: {\n            \"update:show\": function($event) {\n              return _vm.$set(_vm.importConfig, \"modal\", $event)\n            }\n          },\n          scopedSlots: _vm._u([\n            {\n              key: \"header\",\n              fn: function() {\n                return [\n                  _c(\"h5\", { staticClass: \"modal-title\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"config.scheduler.form.import.title\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              },\n              proxy: true\n            },\n            {\n              key: \"footer\",\n              fn: function() {\n                return [\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"secondary\" },\n                      on: { click: _vm.closeImport }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" +\n                          _vm._s(_vm.$t(\"forms.cancel\")) +\n                          \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: {\n                        color: \"primary\",\n                        disabled: _vm.importConfig.empty\n                      },\n                      on: { click: _vm.importScheduler }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" +\n                          _vm._s(_vm.$t(\"config.scheduler.buttons.import\")) +\n                          \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  )\n                ]\n              },\n              proxy: true\n            }\n          ])\n        },\n        [\n          _vm._v(\" \"),\n          _c(\"CForm\", [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"CInputFile\", {\n                  ref: \"schedulerImport\",\n                  attrs: { label: _vm.$t(\"config.scheduler.form.import.file\") },\n                  on: { input: _vm.isEmpty, click: _vm.isEmpty }\n                }),\n                _vm._v(\" \"),\n                _vm.importConfig.empty && !_vm.importConfig.first\n                  ? _c(\"p\", { staticStyle: { color: \"red\" } }, [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\\t\" +\n                          _vm._s(\n                            _vm.$t(\"config.scheduler.form.import.fileEmpty\")\n                          ) +\n                          \"\\n\\t\\t\\t\\t\"\n                      )\n                    ])\n                  : _vm._e()\n              ],\n              1\n            )\n          ])\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CModal\",\n        {\n          attrs: { color: \"danger\", show: _vm.modal.task !== null },\n          on: {\n            \"update:show\": function($event) {\n              return _vm.$set(_vm.modal, \"task !== null\", $event)\n            }\n          },\n          scopedSlots: _vm._u([\n            {\n              key: \"header\",\n              fn: function() {\n                return [\n                  _c(\"h5\", { staticClass: \"modal-title\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\"config.scheduler.messages.deleteTitle\")\n                        ) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              },\n              proxy: true\n            },\n            {\n              key: \"footer\",\n              fn: function() {\n                return [\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"danger\" },\n                      on: {\n                        click: function($event) {\n                          _vm.modal.task = null\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.no\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"success\" },\n                      on: { click: _vm.removeTask }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.yes\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  )\n                ]\n              },\n              proxy: true\n            }\n          ])\n        },\n        [\n          _vm._v(\n            \"\\n\\t\\t\" +\n              _vm._s(\n                _vm.$t(\"config.scheduler.messages.deletePrompt\", {\n                  task: _vm.modal.task\n                })\n              ) +\n              \"\\n\\t\\t\"\n          )\n        ]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import store from '../store';\nimport axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\nvar SchedulerService = /** @class */ (function () {\n    function SchedulerService() {\n    }\n    /**\n     * Adds a new task via the Daemon API\n     * @param taskId scheduler task ID\n     * @param clientId client ID\n     * @param task scheduler task\n     * @param timeSpec scheduler task time settings\n     */\n    SchedulerService.prototype.addTask = function (taskId, clientId, task, timeSpec) {\n        var tasks = JSON.parse(JSON.stringify(task));\n        tasks.forEach(function (item) {\n            item.message = JSON.parse(item.message);\n        });\n        return store.dispatch('sendRequest', {\n            'mType': 'mngScheduler_AddTask',\n            'data': {\n                'req': {\n                    'clientId': clientId,\n                    'taskId': taskId,\n                    'task': tasks,\n                    'timeSpec': timeSpec,\n                    'persist': true,\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Adds a new task via the REST API\n     * @param taskId scheduler task ID\n     * @param clientId client ID\n     * @param task scheduler task\n     * @param timeSpec scheduler task time settings\n     */\n    SchedulerService.prototype.addTaskREST = function (taskId, clientId, task, timeSpec) {\n        var tasks = JSON.parse(JSON.stringify(task));\n        tasks.forEach(function (item) {\n            item.message = JSON.parse(item.message);\n        });\n        var newTask = {\n            'taskId': taskId,\n            'clientId': clientId,\n            'task': tasks,\n            'timeSpec': timeSpec\n        };\n        return axios.post('scheduler', newTask, { headers: authorizationHeader() });\n    };\n    /**\n     * Edits an existing task via the REST API\n     * @param oldTaskId existing task ID\n     * @param taskId new task ID\n     * @param clientId client ID\n     * @param task scheduler task\n     * @param timeSpec scheduler task time settings\n     */\n    SchedulerService.prototype.editTaskREST = function (oldTaskId, taskId, clientId, task, timeSpec) {\n        var tasks = JSON.parse(JSON.stringify(task));\n        tasks.forEach(function (item) {\n            item.message = JSON.parse(item.message);\n        });\n        var editTask = {\n            'taskId': taskId,\n            'clientId': clientId,\n            'task': tasks,\n            'timeSpec': timeSpec\n        };\n        return axios.put('scheduler/' + oldTaskId, editTask, { headers: authorizationHeader() });\n    };\n    /**\n     * Retrieves scheduler tasks via the Daemon API\n     */\n    SchedulerService.prototype.listTasks = function () {\n        return store.dispatch('sendRequest', {\n            'mType': 'mngScheduler_List',\n            'data': {\n                'req': {\n                    'clientId': 'SchedulerMessaging',\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Retrieves scheduler tasks via the REST API\n     */\n    SchedulerService.prototype.listTasksREST = function () {\n        return axios.get('scheduler', { headers: authorizationHeader() });\n    };\n    /**\n     * Retrieves task specified by ID via the Daemon API\n     * @param taskId scheduler task ID\n     */\n    SchedulerService.prototype.getTask = function (taskId) {\n        return store.dispatch('sendRequest', {\n            'mType': 'mngScheduler_GetTask',\n            'data': {\n                'req': {\n                    'clientId': 'SchedulerMessaging',\n                    'taskId': taskId,\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Retrieves task specified by ID via the REST API\n     * @param taskId scheduler task ID\n     */\n    SchedulerService.prototype.getTaskREST = function (taskId) {\n        return axios.get('scheduler/' + taskId, { headers: authorizationHeader() });\n    };\n    /**\n     * Removes a task specified by ID via the Daemon API\n     * @param taskId scheduler task ID\n     */\n    SchedulerService.prototype.removeTask = function (taskId) {\n        return store.dispatch('sendRequest', {\n            'mType': 'mngScheduler_RemoveTask',\n            'data': {\n                'req': {\n                    'clientId': 'SchedulerMessaging',\n                    'taskId': taskId,\n                },\n                'returnVerbose': true,\n            },\n        });\n    };\n    /**\n     * Removes a task specified by ID via the REST API\n     * @param taskId scheduler ID\n     */\n    SchedulerService.prototype.removeTaskREST = function (taskId) {\n        return axios.delete('/scheduler/' + taskId, { headers: authorizationHeader() });\n    };\n    /**\n     * Exports scheduler configuration\n     */\n    SchedulerService.prototype.exportConfig = function () {\n        return axios.get('scheduler/export', { headers: authorizationHeader(), responseType: 'arraybuffer' });\n    };\n    /**\n     * Import scheduler configuration\n     * @param config scheduler configuration\n     */\n    SchedulerService.prototype.importConfig = function (config) {\n        return axios.post('scheduler/import', config, { headers: authorizationHeader() });\n    };\n    return SchedulerService;\n}());\nexport default new SchedulerService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SchedulerList.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SchedulerList.vue?vue&type=script&lang=js&\"","<template>\n\t<div>\n\t\t<CCard>\n\t\t\t<CCardHeader>\n\t\t\t\t<div class='float-right'>\n\t\t\t\t\t<CButton\n\t\t\t\t\t\tcolor='success'\n\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\tto='/config/scheduler/add'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CIcon :content='$options.icons.add' />\n\t\t\t\t\t\t{{ $t('table.actions.add') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton color='primary' size='sm' @click='importConfig.modal = true'>\n\t\t\t\t\t\t<CIcon :content='$options.icons.import' />\n\t\t\t\t\t\t{{ $t('config.scheduler.buttons.import') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t\t<CButton color='secondary' size='sm' @click='exportScheduler'>\n\t\t\t\t\t\t<CIcon :content='$options.icons.export' />\n\t\t\t\t\t\t{{ $t('config.scheduler.buttons.export') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</div>\n\t\t\t</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<CDataTable\n\t\t\t\t\t:fields='fields'\n\t\t\t\t\t:items='tasks'\n\t\t\t\t\t:column-filter='true'\n\t\t\t\t\t:items-per-page='20'\n\t\t\t\t\t:pagination='true'\n\t\t\t\t\t:striped='true'\n\t\t\t\t\t:sorter='{external: false, resetable: true}'\n\t\t\t\t>\n\t\t\t\t\t<template v-if='retrieved === \"rest\"' #taskId='{item}'>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t{{ item.id }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template v-if='retrieved === \"rest\"' #clientId='{item}'>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t{{ item.service }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template #timeSpec='{item}'>\n\t\t\t\t\t\t<td v-if='retrieved === \"daemon\"'>\n\t\t\t\t\t\t\t{{ timeString(item.timeSpec) }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td v-else>\n\t\t\t\t\t\t\t{{ item.time }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template #task='{item}'>\n\t\t\t\t\t\t<td v-if='retrieved === \"daemon\"'>\n\t\t\t\t\t\t\t{{ displayMTypes(item.task) }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td v-else>\n\t\t\t\t\t\t\t{{ displayMTypes(item.mTypes) }}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template #actions='{item}'>\n\t\t\t\t\t\t<td class='col-actions'>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tv-if='retrieved === \"daemon\"'\n\t\t\t\t\t\t\t\tcolor='info'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t\t:to='\"/config/scheduler/edit/\" + item.taskId'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.edit' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.edit') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tv-else\n\t\t\t\t\t\t\t\tcolor='info'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t\t:to='\"/config/scheduler/edit/\" + item.id'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.edit' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.edit') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tv-if='retrieved === \"daemon\"'\n\t\t\t\t\t\t\t\tcolor='danger'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t\t@click='modal.task = item.taskId'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.remove' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.delete') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tv-else\n\t\t\t\t\t\t\t\tcolor='danger'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t\t@click='modal.task = item.id'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.remove' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.delete') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t</CDataTable>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t\t<CModal\n\t\t\t:show.sync='importConfig.modal'\n\t\t\tcolor='primary'\n\t\t>\n\t\t\t<template #header>\n\t\t\t\t<h5 class='modal-title'>\n\t\t\t\t\t{{ $t('config.scheduler.form.import.title') }}\n\t\t\t\t</h5>\n\t\t\t</template>\n\t\t\t<CForm>\n\t\t\t\t<div class='form-group'>\n\t\t\t\t\t<CInputFile\n\t\t\t\t\t\tref='schedulerImport'\n\t\t\t\t\t\t:label='$t(\"config.scheduler.form.import.file\")'\n\t\t\t\t\t\t@input='isEmpty'\n\t\t\t\t\t\t@click='isEmpty'\n\t\t\t\t\t/>\n\t\t\t\t\t<p v-if='importConfig.empty && !importConfig.first' style='color: red'>\n\t\t\t\t\t\t{{ $t('config.scheduler.form.import.fileEmpty') }}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</CForm>\n\t\t\t<template #footer>\n\t\t\t\t<CButton color='secondary' @click='closeImport'>\n\t\t\t\t\t{{ $t('forms.cancel') }}\n\t\t\t\t</CButton>\n\t\t\t\t<CButton\n\t\t\t\t\tcolor='primary'\n\t\t\t\t\t:disabled='importConfig.empty'\n\t\t\t\t\t@click='importScheduler'\n\t\t\t\t>\n\t\t\t\t\t{{ $t('config.scheduler.buttons.import') }}\n\t\t\t\t</CButton>\n\t\t\t</template>\n\t\t</CModal>\n\t\t<CModal\n\t\t\tcolor='danger'\n\t\t\t:show.sync='modal.task !== null'\n\t\t>\n\t\t\t<template #header>\n\t\t\t\t<h5 class='modal-title'>\n\t\t\t\t\t{{ $t('config.scheduler.messages.deleteTitle') }}\n\t\t\t\t</h5>\n\t\t\t</template>\n\t\t\t{{ $t('config.scheduler.messages.deletePrompt', {task: modal.task}) }}\n\t\t\t<template #footer>\n\t\t\t\t<CButton color='danger' @click='modal.task = null'>\n\t\t\t\t\t{{ $t('forms.no') }}\n\t\t\t\t</CButton>\n\t\t\t\t<CButton color='success' @click='removeTask'>\n\t\t\t\t\t{{ $t('forms.yes') }}\n\t\t\t\t</CButton>\n\t\t\t</template>\n\t\t</CModal>\n\t</div>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CForm, CIcon, CInputFile, CModal} from '@coreui/vue/src';\nimport {cilPencil, cilPlus, cilTrash, cilArrowTop, cilArrowBottom} from '@coreui/icons';\nimport {fileDownloader} from '../../helpers/fileDownloader';\nimport {TextareaAutogrowDirective} from 'vue-textarea-autogrow-directive/src/VueTextareaAutogrowDirective';\nimport SchedulerService from '../../services/SchedulerService';\nimport ServiceService from '../../services/ServiceService';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\nimport {DateTime} from 'luxon';\n\nexport default {\n\tname: 'SchedulerList',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCIcon,\n\t\tCInputFile,\n\t\tCModal,\n\t},\n\tdirectives: {\n\t\t'autogrow': TextareaAutogrowDirective\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tfields: [\n\t\t\t\t{\n\t\t\t\t\tkey: 'taskId',\n\t\t\t\t\tlabel: this.$t('config.scheduler.table.id'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'timeSpec',\n\t\t\t\t\tlabel: this.$t('config.scheduler.table.time'),\n\t\t\t\t\tfilter: false,\n\t\t\t\t\tsorter: false,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'clientId',\n\t\t\t\t\tlabel: this.$t('config.scheduler.table.service'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'task',\n\t\t\t\t\tlabel: this.$t('config.scheduler.table.mType'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'actions',\n\t\t\t\t\tlabel: this.$t('table.actions.title'),\n\t\t\t\t\tfilter: false,\n\t\t\t\t\tsorter: false,\n\t\t\t\t},\n\t\t\t],\n\t\t\timportConfig: {\n\t\t\t\tmodal: false,\n\t\t\t\tfirst: true,\n\t\t\t\tempty: false,\n\t\t\t},\n\t\t\tmodal: {\n\t\t\t\ttask: null,\n\t\t\t},\n\t\t\ttaskIds: null,\n\t\t\ttasks: [],\n\t\t\tdateFormat: {\n\t\t\t\tyear: 'numeric',\n\t\t\t\tmonth: 'short',\n\t\t\t\tday: 'numeric',\n\t\t\t\thour12: false,\n\t\t\t\thour: 'numeric',\n\t\t\t\tminute: 'numeric',\n\t\t\t\tsecond: 'numeric',\n\t\t\t},\n\t\t\tuseRest: true,\n\t\t\tretrieved: null,\n\t\t\tuntouched: true,\n\t\t};\n\t},\n\tcreated() {\n\t\tif (this.$store.getters.isSocketConnected) {\n\t\t\tthis.useRest = false;\n\t\t\tthis.getTasks();\n\t\t} else {\n\t\t\tthis.getTasks();\n\t\t}\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONOPEN') {\n\t\t\t\tthis.useRest = false;\n\t\t\t\tif (this.untouched) {\n\t\t\t\t\tthis.getTasks();\n\t\t\t\t}\n\t\t\t} else if (mutation.type === 'SOCKET_ONCLOSE' || \n\t\t\t\tmutation.type === 'SOCKET_ONERROR') {\n\t\t\t\tthis.useRest = true;\n\t\t\t} else if (mutation.type === 'SOCKET_ONSEND') {\n\t\t\t\tif (mutation.payload.mType === 'mngScheduler_List') {\n\t\t\t\t\tif (this.taskIds !== null) {\n\t\t\t\t\t\tthis.taskIds = null;\n\t\t\t\t\t\tthis.tasks = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (mutation.type === 'SOCKET_ONMESSAGE') {\n\t\t\t\tif (mutation.payload.mType === 'mngScheduler_List') {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (mutation.payload.data.status === 0) {\n\t\t\t\t\t\tthis.taskIds = mutation.payload.data.rsp.tasks;\n\t\t\t\t\t\tthis.taskIds.forEach(item => {\n\t\t\t\t\t\t\tthis.getTask(item);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.retrieved = 'daemon';\n\t\t\t\t\t}\n\t\t\t\t} else if (mutation.payload.mType === 'mngScheduler_GetTask') {\n\t\t\t\t\tif (mutation.payload.data.status === 0) {\n\t\t\t\t\t\tthis.tasks.push(mutation.payload.data.rsp);\n\t\t\t\t\t}\n\t\t\t\t} else if (mutation.payload.mType === 'mngScheduler_RemoveTask') {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (mutation.payload.data.status === 0) {\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('config.scheduler.messages.deleteSuccess').toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.getTasks();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('config.scheduler.messages.deleteFail').toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\tcloseImport() {\n\t\t\tthis.importConfig.modal = false;\n\t\t\tthis.importConfig.first = true;\n\t\t},\n\t\tdisplayMTypes(item) {\n\t\t\ttry {\n\t\t\t\tif (this.retrieved === 'rest') {\n\t\t\t\t\tif (Array.isArray(item)) {\n\t\t\t\t\t\treturn item.join(',');\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn item;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (Array.isArray(item)) {\n\t\t\t\t\tlet mTypes = '';\n\t\t\t\t\titem.forEach(task => {\n\t\t\t\t\t\tmTypes += task.message.mType + ', ';\n\t\t\t\t\t});\n\t\t\t\t\treturn mTypes.slice(0, -2);\n\t\t\t\t} else {\n\t\t\t\t\treturn item.message.mType;\n\t\t\t\t}\n\t\t\t} catch(err) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t},\n\t\tgetTasks() {\n\t\t\tthis.untouched = false;\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.useRest) {\n\t\t\t\tSchedulerService.listTasksREST()\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\tthis.tasks = response.data;\n\t\t\t\t\t\tthis.retrieved = 'rest';\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => FormErrorHandler.schedulerError(error));\n\t\t\t} else {\n\t\t\t\tSchedulerService.listTasks();\n\t\t\t}\n\t\t},\n\t\tgetTask(taskId) {\n\t\t\tSchedulerService.getTask(taskId);\n\t\t},\n\t\tremoveTask() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tconst task = this.modal.task;\n\t\t\tthis.modal.task = null;\n\t\t\tif (this.useRest) {\n\t\t\t\tSchedulerService.removeTaskREST(task)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('config.scheduler.messages.deleteSuccess').toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.getTasks();\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => FormErrorHandler.schedulerError(error));\n\t\t\t} else {\n\t\t\t\tSchedulerService.removeTask(task);\n\t\t\t}\n\t\t},\n\t\texportScheduler() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tSchedulerService.exportConfig()\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tconst fileName = 'iqrf-gateway-scheduler_' + + new Date().toISOString();\n\t\t\t\t\tconst file = fileDownloader(response, 'application/zip', fileName);\n\t\t\t\t\tfile.click();\n\t\t\t\t});\n\t\t},\n\t\timportScheduler () {\n\t\t\tthis.importConfig.modal = false;\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tSchedulerService.importConfig(this.$refs.schedulerImport.$el.children[1].files[0])\n\t\t\t\t.then(() => {\n\t\t\t\t\tServiceService.restart('iqrf-gateway-daemon')\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\t\tthis.$t('config.scheduler.messages.importSuccess').toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.$toast.info(\n\t\t\t\t\t\t\t\tthis.$t('service.iqrf-gateway-daemon.messages.restart')\n\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => FormErrorHandler.serviceError(error));\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (error.response.status === 400) {\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('config.scheduler.messages.importInvalidFile').toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (error.response.status === 415) {\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('config.scheduler.messages.invalidImportFormat')\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n\t\tisEmpty() {\n\t\t\tif (this.importConfig.first) {\n\t\t\t\tthis.importConfig.first = false;\n\t\t\t}\n\t\t\tthis.importConfig.empty = this.$refs.schedulerImport.$el.children[1].files.length === 0;\n\t\t},\n\t\ttimeString(item) {\n\t\t\ttry {\n\t\t\t\tif (item.exactTime) {\n\t\t\t\t\treturn 'oneshot (' + DateTime.fromISO(item.startTime).toLocaleString(this.dateFormat) + ')';\n\t\t\t\t}\n\t\t\t\tif (item.periodic) {\n\t\t\t\t\tlet message = 'every ';\n\t\t\t\t\tlet date = new Date(0);\n\t\t\t\t\tdate.setSeconds(item.period);\n\t\t\t\t\tif (item.period >= 0 && item.period < 60) {\n\t\t\t\t\t\tmessage += date.getSeconds() + ' s';\n\t\t\t\t\t} else if (item.period < 3600) {\n\t\t\t\t\t\tmessage += date.getMinutes() + ':' + date.getSeconds() + ' min';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmessage += date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds() + ' h';\n\t\t\t\t\t}\n\t\t\t\t\treturn message;\n\t\t\t\t}\n\t\t\t\tif (item.cronTime.length > 0) {\n\t\t\t\t\tlet timeString = '';\n\t\t\t\t\titem.cronTime.forEach(item => {\n\t\t\t\t\t\ttimeString += item + ' ';\n\t\t\t\t\t});\n\t\t\t\t\treturn timeString.trim();\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\treturn '';\n\t\t\t}\n\t\t},\n\t},\n\ticons: {\n\t\tadd: cilPlus,\n\t\tedit: cilPencil,\n\t\tremove: cilTrash,\n\t\timport: cilArrowTop,\n\t\texport: cilArrowBottom,\n\t},\n\tmetaInfo: {\n\t\ttitle: 'config.scheduler.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./SchedulerList.vue?vue&type=template&id=7fb34cbf&\"\nimport script from \"./SchedulerList.vue?vue&type=script&lang=js&\"\nexport * from \"./SchedulerList.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('7fb34cbf')) {\n      api.createRecord('7fb34cbf', component.options)\n    } else {\n      api.reload('7fb34cbf', component.options)\n    }\n    module.hot.accept(\"./SchedulerList.vue?vue&type=template&id=7fb34cbf&\", function () {\n      api.rerender('7fb34cbf', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/SchedulerList.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      {\n                        on: {\n                          submit: function($event) {\n                            $event.preventDefault()\n                            return _vm.saveTask($event)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required\",\n                            \"custom-messages\": {\n                              required: \"config.scheduler.form.messages.nums\",\n                              integer: \"config.scheduler.form.messages.nums\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        label: _vm.$t(\n                                          \"config.scheduler.form.task.taskId\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.taskId,\n                                        callback: function($$v) {\n                                          _vm.taskId = _vm._n($$v)\n                                        },\n                                        expression: \"taskId\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required: \"config.scheduler.form.messages.service\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CSelect\", {\n                                      attrs: {\n                                        value: _vm.clientId,\n                                        label: _vm.$t(\n                                          \"config.scheduler.table.service\"\n                                        ),\n                                        options: [\n                                          {\n                                            value: \"SchedulerMessaging\",\n                                            label: \"SchedulerMessaging\"\n                                          }\n                                        ],\n                                        placeholder: \"Select service\",\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      on: {\n                                        \"update:value\": function($event) {\n                                          _vm.clientId = $event\n                                        }\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _c(\"label\", { attrs: { for: \"cronTime\" } }, [\n                              _vm._v(\n                                \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                  _vm._s(\n                                    _vm.$t(\n                                      \"config.scheduler.form.task.cronTime\"\n                                    )\n                                  ) +\n                                  \"\\n\\t\\t\\t\\t\\t\"\n                              )\n                            ]),\n                            _vm._v(\" \"),\n                            _vm.cronMessage !== null\n                              ? _c(\"CBadge\", { attrs: { color: \"info\" } }, [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                      _vm._s(_vm.cronMessage) +\n                                      \"\\n\\t\\t\\t\\t\\t\"\n                                  )\n                                ])\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _c(\"CInput\", {\n                              attrs: {\n                                id: \"cronTime\",\n                                disabled:\n                                  _vm.timeSpec.exactTime ||\n                                  _vm.timeSpec.periodic\n                              },\n                              on: { input: _vm.calculateCron },\n                              model: {\n                                value: _vm.timeSpec.cronTime,\n                                callback: function($$v) {\n                                  _vm.$set(_vm.timeSpec, \"cronTime\", $$v)\n                                },\n                                expression: \"timeSpec.cronTime\"\n                              }\n                            })\n                          ],\n                          1\n                        ),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.timeSpec.exactTime,\n                            label: _vm.$t(\n                              \"config.scheduler.form.task.exactTime\"\n                            ),\n                            disabled: _vm.timeSpec.periodic\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              return _vm.$set(_vm.timeSpec, \"exactTime\", $event)\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"CInputCheckbox\", {\n                          attrs: {\n                            checked: _vm.timeSpec.periodic,\n                            label: _vm.$t(\n                              \"config.scheduler.form.task.periodic\"\n                            ),\n                            disabled: _vm.timeSpec.exactTime\n                          },\n                          on: {\n                            \"update:checked\": function($event) {\n                              return _vm.$set(_vm.timeSpec, \"periodic\", $event)\n                            }\n                          }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required\",\n                            \"custom-messages\": {\n                              required: \"config.scheduler.form.messages.nums\",\n                              integer: \"config.scheduler.form.messages.nums\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        label: _vm.$t(\n                                          \"config.scheduler.form.task.period\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0]),\n                                        disabled:\n                                          !_vm.timeSpec.periodic ||\n                                          _vm.timeSpec.exactTime\n                                      },\n                                      model: {\n                                        value: _vm.timeSpec.period,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.timeSpec,\n                                            \"period\",\n                                            _vm._n($$v)\n                                          )\n                                        },\n                                        expression: \"timeSpec.period\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _c(\"label\", { attrs: { for: \"exactTime\" } }, [\n                              _vm._v(\n                                \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                  _vm._s(\n                                    _vm.$t(\n                                      \"config.scheduler.form.task.startTime\"\n                                    )\n                                  ) +\n                                  \"\\n\\t\\t\\t\\t\\t\"\n                              )\n                            ]),\n                            _vm._v(\" \"),\n                            _c(\"Datetime\", {\n                              attrs: {\n                                id: \"exactTime\",\n                                type: \"datetime\",\n                                format: _vm.$options.pickerSettings.dateFormat,\n                                \"min-datetime\": new Date().toISOString(),\n                                \"input-class\": \"form-control\",\n                                disabled:\n                                  !_vm.timeSpec.exactTime ||\n                                  _vm.timeSpec.periodic\n                              },\n                              model: {\n                                value: _vm.timeSpec.startTime,\n                                callback: function($$v) {\n                                  _vm.$set(_vm.timeSpec, \"startTime\", $$v)\n                                },\n                                expression: \"timeSpec.startTime\"\n                              }\n                            })\n                          ],\n                          1\n                        ),\n                        _vm._v(\" \"),\n                        _c(\"h3\", [\n                          _vm._v(\n                            _vm._s(\n                              _vm.$t(\"config.scheduler.form.message.title\")\n                            )\n                          )\n                        ]),\n                        _c(\"hr\"),\n                        _vm._v(\" \"),\n                        _vm._l(_vm.task.length, function(i) {\n                          return _c(\n                            \"div\",\n                            { key: i, staticClass: \"form-group\" },\n                            [\n                              _c(\"ValidationProvider\", {\n                                attrs: {\n                                  rules: \"required\",\n                                  \"custom-messages\": {\n                                    required:\n                                      \"config.scheduler.form.messages.service\"\n                                  }\n                                },\n                                scopedSlots: _vm._u(\n                                  [\n                                    {\n                                      key: \"default\",\n                                      fn: function(ref) {\n                                        var errors = ref.errors\n                                        var touched = ref.touched\n                                        var valid = ref.valid\n                                        return [\n                                          _c(\"CSelect\", {\n                                            attrs: {\n                                              value: _vm.task[i - 1].messaging,\n                                              placeholder: _vm.$t(\n                                                \"config.scheduler.form.message.messagePlaceholder\"\n                                              ),\n                                              options: _vm.messagings,\n                                              \"is-valid\": touched\n                                                ? valid\n                                                : null,\n                                              \"invalid-feedback\": _vm.$t(\n                                                errors[0]\n                                              )\n                                            },\n                                            on: {\n                                              \"update:value\": function($event) {\n                                                return _vm.$set(\n                                                  _vm.task[i - 1],\n                                                  \"messaging\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          })\n                                        ]\n                                      }\n                                    }\n                                  ],\n                                  null,\n                                  true\n                                )\n                              }),\n                              _vm._v(\" \"),\n                              _c(\"ValidationProvider\", {\n                                attrs: {\n                                  rules: \"required|json|mType\",\n                                  \"custom-messages\": {\n                                    required:\n                                      \"config.scheduler.form.messages.message\",\n                                    json:\n                                      \"iqrfnet.sendJson.form.messages.invalid\",\n                                    mType:\n                                      \"iqrfnet.sendJson.form.messages.mType\"\n                                  }\n                                },\n                                scopedSlots: _vm._u(\n                                  [\n                                    {\n                                      key: \"default\",\n                                      fn: function(ref) {\n                                        var errors = ref.errors\n                                        var touched = ref.touched\n                                        var valid = ref.valid\n                                        return [\n                                          _c(\"CTextarea\", {\n                                            directives: [\n                                              {\n                                                name: \"autogrow\",\n                                                rawName: \"v-autogrow\"\n                                              }\n                                            ],\n                                            attrs: {\n                                              label: _vm.$t(\n                                                \"config.scheduler.form.message.label\"\n                                              ),\n                                              \"is-valid\": touched\n                                                ? valid\n                                                : null,\n                                              \"invalid-feedback\": _vm.$t(\n                                                errors[0]\n                                              )\n                                            },\n                                            model: {\n                                              value: _vm.task[i - 1].message,\n                                              callback: function($$v) {\n                                                _vm.$set(\n                                                  _vm.task[i - 1],\n                                                  \"message\",\n                                                  $$v\n                                                )\n                                              },\n                                              expression: \"task[i-1].message\"\n                                            }\n                                          })\n                                        ]\n                                      }\n                                    }\n                                  ],\n                                  null,\n                                  true\n                                )\n                              }),\n                              _vm._v(\" \"),\n                              _vm.task.length > 1\n                                ? _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: { color: \"danger\" },\n                                      on: {\n                                        click: function($event) {\n                                          return _vm.removeMessage(i - 1)\n                                        }\n                                      }\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"config.scheduler.buttons.remove\"\n                                            )\n                                          ) +\n                                          \"\\n\\t\\t\\t\\t\\t\"\n                                      )\n                                    ]\n                                  )\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              i === _vm.task.length\n                                ? _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: { color: \"success\" },\n                                      on: { click: _vm.addMessage }\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"config.scheduler.buttons.add\"\n                                            )\n                                          ) +\n                                          \"\\n\\t\\t\\t\\t\\t\"\n                                      )\n                                    ]\n                                  )\n                                : _vm._e()\n                            ],\n                            1\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              type: \"submit\",\n                              color: \"primary\",\n                              disabled: invalid\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.save\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      2\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SchedulerForm.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SchedulerForm.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='saveTask'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"config.scheduler.form.messages.nums\",\n\t\t\t\t\t\t\tinteger: \"config.scheduler.form.messages.nums\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='taskId'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t:label='$t(\"config.scheduler.form.task.taskId\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid}'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{required: \"config.scheduler.form.messages.service\"}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CSelect\n\t\t\t\t\t\t\t:value.sync='clientId'\n\t\t\t\t\t\t\t:label='$t(\"config.scheduler.table.service\")'\n\t\t\t\t\t\t\t:options='[\n\t\t\t\t\t\t\t\t{value: \"SchedulerMessaging\", label: \"SchedulerMessaging\"}\n\t\t\t\t\t\t\t]'\n\t\t\t\t\t\t\tplaceholder='Select service'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<div class='form-group'>\n\t\t\t\t\t\t<label for='cronTime'>\n\t\t\t\t\t\t\t{{ $t(\"config.scheduler.form.task.cronTime\") }}\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<CBadge v-if='cronMessage !== null' color='info'>\n\t\t\t\t\t\t\t{{ cronMessage }}\n\t\t\t\t\t\t</CBadge>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tid='cronTime'\n\t\t\t\t\t\t\tv-model='timeSpec.cronTime'\n\t\t\t\t\t\t\t:disabled='timeSpec.exactTime || timeSpec.periodic'\n\t\t\t\t\t\t\t@input='calculateCron'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='timeSpec.exactTime'\n\t\t\t\t\t\t:label='$t(\"config.scheduler.form.task.exactTime\")'\n\t\t\t\t\t\t:disabled='timeSpec.periodic'\n\t\t\t\t\t/>\n\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t:checked.sync='timeSpec.periodic'\n\t\t\t\t\t\t:label='$t(\"config.scheduler.form.task.periodic\")'\n\t\t\t\t\t\t:disabled='timeSpec.exactTime'\n\t\t\t\t\t/>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"config.scheduler.form.messages.nums\",\n\t\t\t\t\t\t\tinteger: \"config.scheduler.form.messages.nums\"\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='timeSpec.period'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t:label='$t(\"config.scheduler.form.task.period\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t:disabled='!timeSpec.periodic || timeSpec.exactTime'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<div class='form-group'>\n\t\t\t\t\t\t<label for='exactTime'>\n\t\t\t\t\t\t\t{{ $t(\"config.scheduler.form.task.startTime\") }}\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<Datetime\n\t\t\t\t\t\t\tid='exactTime'\n\t\t\t\t\t\t\tv-model='timeSpec.startTime' \n\t\t\t\t\t\t\ttype='datetime'\n\t\t\t\t\t\t\t:format='$options.pickerSettings.dateFormat'\n\t\t\t\t\t\t\t:min-datetime='new Date().toISOString()'\n\t\t\t\t\t\t\tinput-class='form-control'\n\t\t\t\t\t\t\t:disabled='!timeSpec.exactTime || timeSpec.periodic'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<h3>{{ $t('config.scheduler.form.message.title') }}</h3><hr>\n\t\t\t\t\t<div v-for='i of task.length' :key='i' class='form-group'>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid}'\n\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t:custom-messages='{required: \"config.scheduler.form.messages.service\"}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CSelect\n\t\t\t\t\t\t\t\t:value.sync='task[i-1].messaging'\n\t\t\t\t\t\t\t\t:placeholder='$t(\"config.scheduler.form.message.messagePlaceholder\")'\n\t\t\t\t\t\t\t\t:options='messagings'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\t\trules='required|json|mType'\n\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\trequired: \"config.scheduler.form.messages.message\",\n\t\t\t\t\t\t\t\tjson: \"iqrfnet.sendJson.form.messages.invalid\",\n\t\t\t\t\t\t\t\tmType: \"iqrfnet.sendJson.form.messages.mType\"\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CTextarea\n\t\t\t\t\t\t\t\tv-model='task[i-1].message'\n\t\t\t\t\t\t\t\tv-autogrow\n\t\t\t\t\t\t\t\t:label='$t(\"config.scheduler.form.message.label\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\tv-if='task.length > 1'\n\t\t\t\t\t\t\tcolor='danger'\n\t\t\t\t\t\t\t@click='removeMessage(i-1)'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ $t('config.scheduler.buttons.remove') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\tv-if='i === task.length'\n\t\t\t\t\t\t\tcolor='success'\n\t\t\t\t\t\t\t@click='addMessage'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ $t('config.scheduler.buttons.add') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</div>\n\t\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CBadge, CButton, CCard, CCardBody, CForm, CInput, CInputCheckbox, CSelect, CTextarea} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {integer, required} from 'vee-validate/dist/rules';\nimport DaemonConfigurationService from '../../services/DaemonConfigurationService';\nimport SchedulerService from '../../services/SchedulerService';\nimport {TextareaAutogrowDirective} from 'vue-textarea-autogrow-directive/src/VueTextareaAutogrowDirective';\nimport cronstrue from 'cronstrue';\nimport {Datetime} from 'vue-datetime';\nimport FormErrorHandler from '../../helpers/FormErrorHandler';\n\nexport default {\n\tname: 'SchedulerForm',\n\tcomponents: {\n\t\tCBadge,\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCForm,\n\t\tCInput,\n\t\tCInputCheckbox,\n\t\tCSelect,\n\t\tCTextarea,\n\t\tDatetime,\n\t\tValidationObserver,\n\t\tValidationProvider\n\t},\n\tdirectives: {\n\t\t'autogrow': TextareaAutogrowDirective\n\t},\n\tprops: {\n\t\tid: {\n\t\t\ttype: Number,\n\t\t\trequired: false,\n\t\t\tdefault: null,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\ttaskId: Math.floor(Date.now() / 1000),\n\t\t\tclientId: null,\n\t\t\ttask: [{}],\n\t\t\ttimeSpec: {\n\t\t\t\tcronTime: '',\n\t\t\t\tperiodic: false,\n\t\t\t\tperiod: 0,\n\t\t\t\texactTime: false,\n\t\t\t\tstartTime: '',\n\t\t\t},\n\t\t\tcomponents: {\n\t\t\t\tmq: 'iqrf::MqMessaging',\n\t\t\t\tmqtt: 'iqrf::MqttMessaging',\n\t\t\t\twebsocket: 'iqrf::WebsocketMessaging',\n\t\t\t},\n\t\t\tmessagings: [],\n\t\t\tcronMessage: null,\n\t\t\tuseRest: true,\n\t\t\tuntouched: true,\n\t\t};\n\t},\n\tcreated() {\n\t\tif (this.$store.getters.isSocketConnected) {\n\t\t\tthis.useRest = false;\n\t\t\tif (this.id) {\n\t\t\t\tthis.getTask(this.id);\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.id) {\n\t\t\t\tthis.getTask(this.id);\n\t\t\t}\n\t\t}\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\textend('json', (json) => {\n\t\t\ttry {\n\t\t\t\tJSON.parse(json);\n\t\t\t\treturn true;\n\t\t\t} catch (error) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t\textend('mType', (json) => {\n\t\t\tlet object = JSON.parse(json);\n\t\t\treturn {}.hasOwnProperty.call(object, 'mType');\n\t\t});\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONOPEN') {\n\t\t\t\tthis.useRest = false;\n\t\t\t\tif (this.id && this.untouched) {\n\t\t\t\t\tthis.getTask(this.id);\n\t\t\t\t}\n\t\t\t} else if (mutation.type === 'SOCKET_ONCLOSE' ||\n\t\t\t\tmutation.type === 'SOCKET_ONERROR') {\n\t\t\t\tthis.useRest = true;\n\t\t\t} else if (mutation.type === 'SOCKET_ONMESSAGE') {\n\t\t\t\tif (mutation.payload.mType === 'mngScheduler_GetTask') {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (mutation.payload.data.status === 0) {\n\t\t\t\t\t\tlet rsp = mutation.payload.data.rsp;\n\t\t\t\t\t\tthis.taskId = rsp.taskId;\n\t\t\t\t\t\tthis.clientId = rsp.clientId;\n\t\t\t\t\t\tthis.timeSpec = rsp.timeSpec;\n\t\t\t\t\t\tthis.timeSpec.cronTime = this.timeSpec.cronTime.join(' ');\n\t\t\t\t\t\tif (Array.isArray(rsp.task)) {\n\t\t\t\t\t\t\tlet tasks = [];\n\t\t\t\t\t\t\trsp.task.forEach(item => {\n\t\t\t\t\t\t\t\ttasks.push({\n\t\t\t\t\t\t\t\t\tmessaging: item.messaging,\n\t\t\t\t\t\t\t\t\tmessage: JSON.stringify(item.message, null, 2),\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthis.task = tasks;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.task = [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmessaging: rsp.task.messaging,\n\t\t\t\t\t\t\t\t\tmessage: JSON.stringify(rsp.task.message, null, 2),\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.$router.push('/config/scheduler/');\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('config.scheduler.messages.getFail', {task: this.id})\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (mutation.payload.mType === 'mngScheduler_AddTask') {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tif (mutation.payload.data.status === 0) {\n\t\t\t\t\t\tthis.successfulSave();\n\t\t\t\t\t}\n\t\t\t\t} else if (mutation.payload.mType === 'messageError') {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t});\n\t\tthis.getMessagings();\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\tcalculateCron() {\n\t\t\tconst cronTime = this.timeSpec.cronTime.split(' ');\n\t\t\tconst len = cronTime.length;\n\t\t\tif (len === 1) {\n\t\t\t\tconst alias = this.getCronAlias(this.timeSpec.cronTime);\n\t\t\t\tif (alias !== undefined) {\n\t\t\t\t\tthis.cronMessage = cronstrue.toString(alias);\n\t\t\t\t} else {\n\t\t\t\t\tthis.cronMessage = null;\n\t\t\t\t}\n\t\t\t} else if (len > 4 && len < 8) {\n\t\t\t\tthis.cronMessage = cronstrue.toString(this.timeSpec.cronTime);\n\t\t\t} else {\n\t\t\t\tthis.cronMessage = null;\n\t\t\t}\n\t\t},\n\t\taddMessage() {\n\t\t\tthis.task.push({});\n\t\t},\n\t\tremoveMessage(index) {\n\t\t\tthis.task.splice(index, 1);\n\t\t},\n\t\tgetTask(taskId) {\n\t\t\tthis.untouched = false;\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tif (this.useRest) {\n\t\t\t\tSchedulerService.getTaskREST(taskId)\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t\tthis.taskId = response.data.taskId;\n\t\t\t\t\t\tthis.clientId = response.data.clientId;\n\t\t\t\t\t\tthis.timeSpec = response.data.timeSpec;\n\t\t\t\t\t\tlet tasks = [];\n\t\t\t\t\t\tresponse.data.task.forEach(item => {\n\t\t\t\t\t\t\ttasks.push({messaging: item.messaging, message: JSON.stringify(item.message, null, 2)});\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.task = tasks;\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\tthis.$router.push('/config/scheduler/');\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('config.scheduler.messages.getFail', {task: this.id})\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tSchedulerService.getTask(taskId);\n\t\t\t}\n\t\t},\n\t\tgetMessagings() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tPromise.all([\n\t\t\t\tDaemonConfigurationService.getComponent(this.components.mq),\n\t\t\t\tDaemonConfigurationService.getComponent(this.components.mqtt),\n\t\t\t\tDaemonConfigurationService.getComponent(this.components.websocket),\n\t\t\t])\n\t\t\t\t.then((responses) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tresponses.forEach(item => {\n\t\t\t\t\t\tif (item.data.instances) {\n\t\t\t\t\t\t\titem.data.instances.forEach(messaging => {\n\t\t\t\t\t\t\t\tthis.messagings.push({\n\t\t\t\t\t\t\t\t\tvalue: messaging.instance, label: messaging.instance,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t},\n\t\tsaveTask() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tlet timeSpec = JSON.parse(JSON.stringify(this.timeSpec));\n\t\t\ttimeSpec.cronTime = timeSpec.cronTime.replace('?', '*');\n\t\t\ttimeSpec.cronTime = timeSpec.cronTime.split(' ');\n\t\t\tif (timeSpec.cronTime.length === 1) {\n\t\t\t\tconst alias = this.getCronAlias(timeSpec.cronTime[0]);\n\t\t\t\tif (alias !== undefined) {\n\t\t\t\t\ttimeSpec.cronTime = [alias, '', '', '', '', '', ''];\n\t\t\t\t}\n\t\t\t}\n\t\t\tswitch(timeSpec.cronTime.length) {\n\t\t\t\tcase 5:\n\t\t\t\t\ttimeSpec.cronTime.unshift('0');\n\t\t\t\t\ttimeSpec.cronTime.push('*');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tif (timeSpec.cronTime[5].length === 4) {\n\t\t\t\t\t\ttimeSpec.cronTime.unshift('0');\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttimeSpec.cronTime.push('*');\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 7:\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\ttimeSpec.cronTime = new Array(7).fill('');\n\t\t\t}\n\t\t\tif (timeSpec.exactTime) {\n\t\t\t\t//daemon datetime processing workeround\n\t\t\t\tlet date = new Date(timeSpec.startTime);\n\t\t\t\tdate.setMinutes(date.getMinutes() - date.getTimezoneOffset());\n\t\t\t\ttimeSpec.startTime = date.toISOString().split('.')[0];\n\t\t\t}\n\t\t\tif (this.$route.path === '/config/scheduler/add') {\n\t\t\t\tif (this.useRest) {\n\t\t\t\t\tSchedulerService.addTaskREST(this.taskId, this.clientId, this.task, timeSpec)\n\t\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t\t.catch((error) => FormErrorHandler.schedulerError(error));\n\t\t\t\t} else {\n\t\t\t\t\tSchedulerService.addTask(this.taskId, this.clientId, this.task, timeSpec);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this.useRest) {\n\t\t\t\t\tSchedulerService.editTaskREST(this.id, this.taskId, this.clientId, this.task, timeSpec)\n\t\t\t\t\t\t.then(() => this.successfulSave())\n\t\t\t\t\t\t.catch((error) => FormErrorHandler.schedulerError(error));\n\t\t\t\t} else {\n\t\t\t\t\tSchedulerService.removeTask(this.id);\n\t\t\t\t\tSchedulerService.addTask(this.taskId, this.clientId, this.task, timeSpec);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tgetCronAlias(input) {\n\t\t\tlet aliases = new Map();\n\t\t\taliases.set('@reboot', '');\n\t\t\taliases.set('@yearly', '0 0 0 1 1 * *');\n\t\t\taliases.set('@annually', '0 0 0 1 1 * *');\n\t\t\taliases.set('@monthly', '0 0 0 1 * * *');\n\t\t\taliases.set('@weekly', '0 0 0 * * 0 *');\n\t\t\taliases.set('@daily', '0 0 0 * * * *');\n\t\t\taliases.set('@hourly', '0 0 * * * * *');\n\t\t\taliases.set('@minutely', '0 * * * * * *');\n\t\t\treturn aliases.get(input);\n\t\t},\n\t\tsuccessfulSave() {\n\t\t\tthis.$router.push('/config/scheduler/');\n\t\t\tthis.$toast.success(\n\t\t\t\tthis.$t('config.scheduler.messages.addSuccess').toString()\n\t\t\t);\n\t\t}\n\t},\n\tpickerSettings: {\n\t\tdateFormat: {\n\t\t\tyear: 'numeric',\n\t\t\tmonth: 'short',\n\t\t\tday: 'numeric',\n\t\t\thour12: false,\n\t\t\thour: 'numeric',\n\t\t\tminute: 'numeric',\n\t\t\tsecond: 'numeric',\n\t\t}, \n\t},\n\tmetaInfo() {\n\t\treturn {\n\t\t\ttitle: this.$route.path === '/config/scheduler/add' ?\n\t\t\t\tthis.$t('config.scheduler.add') : this.$t('config.scheduler.edit')\n\t\t};\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./SchedulerForm.vue?vue&type=template&id=4bba25e5&\"\nimport script from \"./SchedulerForm.vue?vue&type=script&lang=js&\"\nexport * from \"./SchedulerForm.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('4bba25e5')) {\n      api.createRecord('4bba25e5', component.options)\n    } else {\n      api.reload('4bba25e5', component.options)\n    }\n    module.hot.accept(\"./SchedulerForm.vue?vue&type=template&id=4bba25e5&\", function () {\n      api.rerender('4bba25e5', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Config/SchedulerForm.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\"ValidationObserver\", {\n        scopedSlots: _vm._u([\n          {\n            key: \"default\",\n            fn: function(ref) {\n              var invalid = ref.invalid\n              return [\n                _c(\n                  \"CForm\",\n                  {\n                    on: {\n                      submit: function($event) {\n                        $event.preventDefault()\n                        return _vm.handleSubmit($event)\n                      }\n                    }\n                  },\n                  [\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required\",\n                        \"custom-messages\": {\n                          required: \"core.user.messages.missing.username\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var valid = ref.valid\n                              var touched = ref.touched\n                              var errors = ref.errors\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\"core.user.username\"),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0])\n                                  },\n                                  model: {\n                                    value: _vm.username,\n                                    callback: function($$v) {\n                                      _vm.username = $$v\n                                    },\n                                    expression: \"username\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required\",\n                        \"custom-messages\": {\n                          required: \"core.user.messages.missing.password\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var valid = ref.valid\n                              var touched = ref.touched\n                              var errors = ref.errors\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\"core.user.password\"),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0]),\n                                    type: \"password\"\n                                  },\n                                  model: {\n                                    value: _vm.password,\n                                    callback: function($$v) {\n                                      _vm.password = $$v\n                                    },\n                                    expression: \"password\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required\",\n                        \"custom-messages\": {\n                          required: \"core.user.messages.missing.role\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var valid = ref.valid\n                              var touched = ref.touched\n                              var errors = ref.errors\n                              return [\n                                _vm.$store.getters[\"user/getRole\"] === \"power\"\n                                  ? _c(\"CSelect\", {\n                                      attrs: {\n                                        value: _vm.role,\n                                        label: _vm.$t(\"core.user.role\"),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0]),\n                                        placeholder: _vm.$t(\n                                          \"core.user.messages.missing.role\"\n                                        ),\n                                        options: [\n                                          {\n                                            value: \"normal\",\n                                            label: _vm.$t(\n                                              \"core.user.roles.normal\"\n                                            )\n                                          },\n                                          {\n                                            value: \"power\",\n                                            label: _vm.$t(\n                                              \"core.user.roles.power\"\n                                            )\n                                          }\n                                        ]\n                                      },\n                                      on: {\n                                        \"update:value\": function($event) {\n                                          _vm.role = $event\n                                        }\n                                      }\n                                    })\n                                  : _vm._e()\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required\",\n                        \"custom-messages\": {\n                          required: \"core.user.messages.missing.language\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var valid = ref.valid\n                              var touched = ref.touched\n                              var errors = ref.errors\n                              return [\n                                _vm.$store.getters[\"user/getRole\"] === \"power\"\n                                  ? _c(\"CSelect\", {\n                                      attrs: {\n                                        value: _vm.language,\n                                        label: _vm.$t(\"core.user.language\"),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0]),\n                                        placeholder: _vm.$t(\n                                          \"core.user.messages.missing.language\"\n                                        ),\n                                        options: [\n                                          {\n                                            value: \"en\",\n                                            label: _vm.$t(\n                                              \"core.user.languages.en\"\n                                            )\n                                          }\n                                        ]\n                                      },\n                                      on: {\n                                        \"update:value\": function($event) {\n                                          _vm.language = $event\n                                        }\n                                      }\n                                    })\n                                  : _vm._e()\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\n                      \"CButton\",\n                      {\n                        attrs: {\n                          color: \"primary\",\n                          type: \"submit\",\n                          disabled: invalid\n                        }\n                      },\n                      [\n                        _vm._v(\n                          \"\\n\\t\\t\\t\\t\" +\n                            _vm._s(_vm.$t(\"forms.add\")) +\n                            \"\\n\\t\\t\\t\"\n                        )\n                      ]\n                    )\n                  ],\n                  1\n                )\n              ]\n            }\n          }\n        ])\n      })\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\n/**\n * User service\n */\nvar UserService = /** @class */ (function () {\n    function UserService() {\n    }\n    /**\n     * Changes password\n     * @param oldPassword Old password\n     * @param newPassword New password\n     */\n    UserService.prototype.changePassword = function (oldPassword, newPassword) {\n        var body = {\n            old: oldPassword,\n            new: newPassword\n        };\n        return axios.put('user/password', body, { headers: authorizationHeader() });\n    };\n    /**\n     * Adds the new user\n     * @param username Username\n     * @param password Password\n     * @param language Language\n     * @param role Role\n     */\n    UserService.prototype.add = function (username, password, language, role) {\n        var body = {\n            username: username,\n            password: password,\n            language: language,\n            role: role,\n        };\n        return axios.post('users/', body, { headers: authorizationHeader() });\n    };\n    /**\n     * Deletes the user\n     * @param id User ID\n     */\n    UserService.prototype.delete = function (id) {\n        return axios.delete('users/' + id, { headers: authorizationHeader() });\n    };\n    /**\n     * Edits the user\n     * @param id User ID\n     * @param user User settings\n     */\n    UserService.prototype.edit = function (id, user) {\n        return axios.put('users/' + id, user, { headers: authorizationHeader() });\n    };\n    /**\n     * Returns the user\n     * @param id User ID\n     */\n    UserService.prototype.get = function (id) {\n        return axios.get('users/' + id, { headers: authorizationHeader() });\n    };\n    /**\n     * Returns information about the logged in user\n     */\n    UserService.prototype.getLoggedIn = function () {\n        return axios.get('user', { headers: authorizationHeader() });\n    };\n    /**\n     * Lists all users\n     */\n    UserService.prototype.list = function () {\n        return axios.get('users', { headers: authorizationHeader() });\n    };\n    return UserService;\n}());\nexport default new UserService();\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./UserAdd.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./UserAdd.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard body-wrapper>\n\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t<CForm @submit.prevent='handleSubmit'>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\trequired: \"core.user.messages.missing.username\",\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='username'\n\t\t\t\t\t\t:label='$t(\"core.user.username\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\trequired: \"core.user.messages.missing.password\",\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='password'\n\t\t\t\t\t\t:label='$t(\"core.user.password\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\ttype='password'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\trequired: \"core.user.messages.missing.role\",\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CSelect\n\t\t\t\t\t\tv-if='$store.getters[\"user/getRole\"] === \"power\"'\n\t\t\t\t\t\t:value.sync='role'\n\t\t\t\t\t\t:label='$t(\"core.user.role\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t:placeholder='$t(\"core.user.messages.missing.role\")'\n\t\t\t\t\t\t:options='[\n\t\t\t\t\t\t\t{value: \"normal\", label: $t(\"core.user.roles.normal\")},\n\t\t\t\t\t\t\t{value: \"power\", label: $t(\"core.user.roles.power\")},\n\t\t\t\t\t\t]'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\trequired: \"core.user.messages.missing.language\",\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CSelect\n\t\t\t\t\t\tv-if='$store.getters[\"user/getRole\"] === \"power\"'\n\t\t\t\t\t\t:value.sync='language'\n\t\t\t\t\t\t:label='$t(\"core.user.language\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t:placeholder='$t(\"core.user.messages.missing.language\")'\n\t\t\t\t\t\t:options='[\n\t\t\t\t\t\t\t{value: \"en\", label: $t(\"core.user.languages.en\")},\n\t\t\t\t\t\t]'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t{{ $t('forms.add') }}\n\t\t\t\t</CButton>\n\t\t\t</CForm>\n\t\t</ValidationObserver>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CForm, CInput, CSelect} from '@coreui/vue/src';\nimport {required} from 'vee-validate/dist/rules';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport UserService from '../../services/UserService';\n\nexport default {\n\tname: 'UserAdd',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCForm,\n\t\tCInput,\n\t\tCSelect,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tusername: null,\n\t\t\tpassword: null,\n\t\t\tlanguage: null,\n\t\t\trole: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t},\n\tmethods: {\n\t\thandleSubmit() {\n\t\t\tconst language = this.language ?? 'en';\n\t\t\tconst role = this.role ?? 'normal';\n\t\t\tUserService.add(this.username, this.password, language, role)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$router.push('/user/');\n\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\tthis.$t('core.user.messages.add.success', {username: this.username})\n\t\t\t\t\t\t\t.toString());\n\t\t\t\t}).catch((error) => {\n\t\t\t\t\tif (error.response.status === 409) {\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('core.user.messages.conflict.username').toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'core.user.add.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./UserAdd.vue?vue&type=template&id=19ac1139&\"\nimport script from \"./UserAdd.vue?vue&type=script&lang=js&\"\nexport * from \"./UserAdd.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('19ac1139')) {\n      api.createRecord('19ac1139', component.options)\n    } else {\n      api.reload('19ac1139', component.options)\n    }\n    module.hot.accept(\"./UserAdd.vue?vue&type=template&id=19ac1139&\", function () {\n      api.rerender('19ac1139', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Core/UserAdd.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _vm.loaded\n        ? _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u(\n              [\n                {\n                  key: \"default\",\n                  fn: function(ref) {\n                    var invalid = ref.invalid\n                    return [\n                      _c(\n                        \"CForm\",\n                        {\n                          on: {\n                            submit: function($event) {\n                              $event.preventDefault()\n                              return _vm.handleSubmit($event)\n                            }\n                          }\n                        },\n                        [\n                          _c(\"ValidationProvider\", {\n                            attrs: {\n                              rules: \"required\",\n                              \"custom-messages\": {\n                                required: \"core.user.messages.missing.username\"\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"default\",\n                                  fn: function(ref) {\n                                    var valid = ref.valid\n                                    var touched = ref.touched\n                                    var errors = ref.errors\n                                    return [\n                                      _c(\"CInput\", {\n                                        attrs: {\n                                          label: _vm.$t(\"core.user.username\"),\n                                          \"is-valid\": touched ? valid : null,\n                                          \"invalid-feedback\": _vm.$t(errors[0])\n                                        },\n                                        model: {\n                                          value: _vm.username,\n                                          callback: function($$v) {\n                                            _vm.username = $$v\n                                          },\n                                          expression: \"username\"\n                                        }\n                                      })\n                                    ]\n                                  }\n                                }\n                              ],\n                              null,\n                              true\n                            )\n                          }),\n                          _vm._v(\" \"),\n                          _c(\"ValidationProvider\", {\n                            attrs: {\n                              rules: \"required\",\n                              \"custom-messages\": {\n                                required: \"core.user.messages.missing.role\"\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"default\",\n                                  fn: function(ref) {\n                                    var valid = ref.valid\n                                    var touched = ref.touched\n                                    var errors = ref.errors\n                                    return [\n                                      _vm.$store.getters[\"user/getRole\"] ===\n                                      \"power\"\n                                        ? _c(\"CSelect\", {\n                                            attrs: {\n                                              value: _vm.role,\n                                              label: _vm.$t(\"core.user.role\"),\n                                              \"is-valid\": touched\n                                                ? valid\n                                                : null,\n                                              \"invalid-feedback\": _vm.$t(\n                                                errors[0]\n                                              ),\n                                              placeholder: _vm.$t(\n                                                \"core.user.messages.missing.role\"\n                                              ),\n                                              options: [\n                                                {\n                                                  value: \"normal\",\n                                                  label: _vm.$t(\n                                                    \"core.user.roles.normal\"\n                                                  )\n                                                },\n                                                {\n                                                  value: \"power\",\n                                                  label: _vm.$t(\n                                                    \"core.user.roles.power\"\n                                                  )\n                                                }\n                                              ]\n                                            },\n                                            on: {\n                                              \"update:value\": function($event) {\n                                                _vm.role = $event\n                                              }\n                                            }\n                                          })\n                                        : _vm._e()\n                                    ]\n                                  }\n                                }\n                              ],\n                              null,\n                              true\n                            )\n                          }),\n                          _vm._v(\" \"),\n                          _c(\"ValidationProvider\", {\n                            attrs: {\n                              rules: \"required\",\n                              \"custom-messages\": {\n                                required: \"core.user.messages.missing.language\"\n                              }\n                            },\n                            scopedSlots: _vm._u(\n                              [\n                                {\n                                  key: \"default\",\n                                  fn: function(ref) {\n                                    var valid = ref.valid\n                                    var touched = ref.touched\n                                    var errors = ref.errors\n                                    return [\n                                      _vm.$store.getters[\"user/getRole\"] ===\n                                      \"power\"\n                                        ? _c(\"CSelect\", {\n                                            attrs: {\n                                              value: _vm.language,\n                                              label: _vm.$t(\n                                                \"core.user.language\"\n                                              ),\n                                              \"is-valid\": touched\n                                                ? valid\n                                                : null,\n                                              \"invalid-feedback\": _vm.$t(\n                                                errors[0]\n                                              ),\n                                              placeholder: _vm.$t(\n                                                \"core.user.messages.missing.language\"\n                                              ),\n                                              options: [\n                                                {\n                                                  value: \"en\",\n                                                  label: _vm.$t(\n                                                    \"core.user.languages.en\"\n                                                  )\n                                                }\n                                              ]\n                                            },\n                                            on: {\n                                              \"update:value\": function($event) {\n                                                _vm.language = $event\n                                              }\n                                            }\n                                          })\n                                        : _vm._e()\n                                    ]\n                                  }\n                                }\n                              ],\n                              null,\n                              true\n                            )\n                          }),\n                          _vm._v(\" \"),\n                          _vm.$store.getters[\"user/getId\"] === _vm.userId\n                            ? _c(\n                                \"div\",\n                                [\n                                  _c(\"ValidationProvider\", {\n                                    attrs: {\n                                      rules:\n                                        _vm.newPassword !== null\n                                          ? \"required\"\n                                          : \"\",\n                                      \"custom-messages\": {\n                                        required:\n                                          \"core.user.messages.missing.oldPassword\"\n                                      }\n                                    },\n                                    scopedSlots: _vm._u(\n                                      [\n                                        {\n                                          key: \"default\",\n                                          fn: function(ref) {\n                                            var valid = ref.valid\n                                            var touched = ref.touched\n                                            var errors = ref.errors\n                                            return [\n                                              _c(\"CInput\", {\n                                                attrs: {\n                                                  label: _vm.$t(\n                                                    \"core.user.oldPassword\"\n                                                  ),\n                                                  \"is-valid\": touched\n                                                    ? valid\n                                                    : null,\n                                                  \"invalid-feedback\": _vm.$t(\n                                                    errors[0]\n                                                  ),\n                                                  type: \"password\",\n                                                  autocomplete:\n                                                    \"current-password\"\n                                                },\n                                                model: {\n                                                  value: _vm.oldPassword,\n                                                  callback: function($$v) {\n                                                    _vm.oldPassword = $$v\n                                                  },\n                                                  expression: \"oldPassword\"\n                                                }\n                                              })\n                                            ]\n                                          }\n                                        }\n                                      ],\n                                      null,\n                                      true\n                                    )\n                                  }),\n                                  _vm._v(\" \"),\n                                  _c(\"ValidationProvider\", {\n                                    attrs: {\n                                      rules:\n                                        _vm.oldPassword !== null\n                                          ? \"required\"\n                                          : \"\",\n                                      \"custom-messages\": {\n                                        required:\n                                          \"core.user.messages.missing.newPassword\"\n                                      }\n                                    },\n                                    scopedSlots: _vm._u(\n                                      [\n                                        {\n                                          key: \"default\",\n                                          fn: function(ref) {\n                                            var valid = ref.valid\n                                            var touched = ref.touched\n                                            var errors = ref.errors\n                                            return [\n                                              _c(\"CInput\", {\n                                                attrs: {\n                                                  label: _vm.$t(\n                                                    \"core.user.newPassword\"\n                                                  ),\n                                                  \"is-valid\": touched\n                                                    ? valid\n                                                    : null,\n                                                  \"invalid-feedback\": _vm.$t(\n                                                    errors[0]\n                                                  ),\n                                                  type: \"password\",\n                                                  autocomplete: \"new-password\"\n                                                },\n                                                model: {\n                                                  value: _vm.newPassword,\n                                                  callback: function($$v) {\n                                                    _vm.newPassword = $$v\n                                                  },\n                                                  expression: \"newPassword\"\n                                                }\n                                              })\n                                            ]\n                                          }\n                                        }\n                                      ],\n                                      null,\n                                      true\n                                    )\n                                  })\n                                ],\n                                1\n                              )\n                            : _vm._e(),\n                          _vm._v(\" \"),\n                          _c(\n                            \"CButton\",\n                            {\n                              attrs: {\n                                color: \"primary\",\n                                type: \"submit\",\n                                disabled: invalid\n                              }\n                            },\n                            [\n                              _vm._v(\n                                \"\\n\\t\\t\\t\\t\" +\n                                  _vm._s(_vm.$t(\"forms.save\")) +\n                                  \"\\n\\t\\t\\t\"\n                              )\n                            ]\n                          )\n                        ],\n                        1\n                      )\n                    ]\n                  }\n                }\n              ],\n              null,\n              false,\n              2633783158\n            )\n          })\n        : _vm._e()\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<ValidationObserver v-if='loaded' v-slot='{ invalid }'>\n\t\t\t<CForm @submit.prevent='handleSubmit'>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\trequired: \"core.user.messages.missing.username\",\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='username'\n\t\t\t\t\t\t:label='$t(\"core.user.username\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\trequired: \"core.user.messages.missing.role\",\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CSelect\n\t\t\t\t\t\tv-if='$store.getters[\"user/getRole\"] === \"power\"'\n\t\t\t\t\t\t:value.sync='role'\n\t\t\t\t\t\t:label='$t(\"core.user.role\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t:placeholder='$t(\"core.user.messages.missing.role\")'\n\t\t\t\t\t\t:options='[\n\t\t\t\t\t\t\t{value: \"normal\", label: $t(\"core.user.roles.normal\")},\n\t\t\t\t\t\t\t{value: \"power\", label: $t(\"core.user.roles.power\")},\n\t\t\t\t\t\t]'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\trequired: \"core.user.messages.missing.language\",\n\t\t\t\t\t}'\n\t\t\t\t>\n\t\t\t\t\t<CSelect\n\t\t\t\t\t\tv-if='$store.getters[\"user/getRole\"] === \"power\"'\n\t\t\t\t\t\t:value.sync='language'\n\t\t\t\t\t\t:label='$t(\"core.user.language\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t:placeholder='$t(\"core.user.messages.missing.language\")'\n\t\t\t\t\t\t:options='[\n\t\t\t\t\t\t\t{value: \"en\", label: $t(\"core.user.languages.en\")},\n\t\t\t\t\t\t]'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<div v-if='$store.getters[\"user/getId\"] === userId'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t:rules='newPassword !== null ? \"required\" : \"\"'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"core.user.messages.missing.oldPassword\",\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='oldPassword'\n\t\t\t\t\t\t\t:label='$t(\"core.user.oldPassword\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\tautocomplete='current-password'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t:rules='oldPassword !== null ? \"required\" : \"\"'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\trequired: \"core.user.messages.missing.newPassword\",\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='newPassword'\n\t\t\t\t\t\t\t:label='$t(\"core.user.newPassword\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\tautocomplete='new-password'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t</div>\n\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t{{ $t('forms.save') }}\n\t\t\t\t</CButton>\n\t\t\t</CForm>\n\t\t</ValidationObserver>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CForm, CInput, CSelect} from '@coreui/vue/src';\nimport {required,} from 'vee-validate/dist/rules';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport UserService from '../../services/UserService';\n\nexport default {\n\tname: 'UserEdit',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCForm,\n\t\tCInput,\n\t\tCSelect,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tprops: {\n\t\tuserId: {\n\t\t\ttype: Number,\n\t\t\trequired: true,\n\t\t}\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tloaded: false,\n\t\t\tusername: null,\n\t\t\tlanguage: null,\n\t\t\trole: null,\n\t\t\toldPassword: null,\n\t\t\tnewPassword: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('required', required);\n\t\tthis.$store.commit('spinner/SHOW');\n\t\tUserService.get(this.userId)\n\t\t\t.then((response) => {\n\t\t\t\tthis.loaded = true;\n\t\t\t\tthis.username = response.data.username;\n\t\t\t\tthis.language = response.data.language;\n\t\t\t\tthis.role = response.data.role;\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tthis.loaded = false;\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\tif (error.response.status === 404) {\n\t\t\t\t\tthis.$router.push('/user/');\n\t\t\t\t\tthis.$toast.error(this.$t('core.user.messages.notFound').toString());\n\t\t\t\t}\n\t\t\t});\n\t},\n\tmethods: {\n\t\thandleSubmit() {\n\t\t\tif (this.$store.getters['user/getId'] === this.userId &&\n\t\t\t\t\tthis.oldPassword !== null && this.newPassword !== null) {\n\t\t\t\tUserService.changePassword(this.oldPassword, this.newPassword)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tthis.performEdit();\n\t\t\t\t\t\tthis.signOut();\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('core.user.messages.invalid.oldPassword').toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.performEdit();\n\t\t\t\tif (this.$store.getters['user/getId'] === this.userId) {\n\t\t\t\t\tthis.signOut();\n\t\t\t\t}\n\t\t\t}\n\n\t\t},\n\t\tperformEdit() {\n\t\t\treturn UserService.edit(this.userId, {\n\t\t\t\tusername: this.username,\n\t\t\t\tlanguage: this.language,\n\t\t\t\trole: this.role,\n\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$router.push('/user/');\n\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\tthis.$t('core.user.messages.edit.success', {username: this.username})\n\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tif (error.response.status === 409) {\n\t\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\t\tthis.$t('core.user.messages.conflict.username').toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n\t\tsignOut() {\n\t\t\tthis.$store.dispatch('user/signOut')\n\t\t\t\t.then(() => {\n\t\t\t\t\tlocation.replace('/sign/in');\n\t\t\t\t});\n\t\t}\n\t},\n\tmetaInfo: {\n\t\ttitle: 'core.user.edit.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./UserEdit.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./UserEdit.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./UserEdit.vue?vue&type=template&id=70c685bc&\"\nimport script from \"./UserEdit.vue?vue&type=script&lang=js&\"\nexport * from \"./UserEdit.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('70c685bc')) {\n      api.createRecord('70c685bc', component.options)\n    } else {\n      api.reload('70c685bc', component.options)\n    }\n    module.hot.accept(\"./UserEdit.vue?vue&type=template&id=70c685bc&\", function () {\n      api.rerender('70c685bc', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Core/UserEdit.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"CCard\",\n        [\n          _c(\n            \"CCardHeader\",\n            [\n              _c(\n                \"CButton\",\n                {\n                  staticClass: \"float-right\",\n                  attrs: { color: \"success\", to: \"/user/add/\", size: \"sm\" }\n                },\n                [\n                  _c(\"CIcon\", { attrs: { content: _vm.$options.icons.add } }),\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"table.actions.add\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ],\n                1\n              )\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\"CDataTable\", {\n                attrs: {\n                  items: _vm.users,\n                  fields: _vm.fields,\n                  \"column-filter\": true,\n                  \"items-per-page\": 20,\n                  pagination: true,\n                  striped: true,\n                  sorter: { external: false, resetable: true }\n                },\n                scopedSlots: _vm._u([\n                  {\n                    key: \"role\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          [\n                            _c(\n                              \"CDropdown\",\n                              {\n                                attrs: {\n                                  color: \"success\",\n                                  \"toggler-text\": _vm.$t(\n                                    \"core.user.roles.\" + item.role\n                                  ),\n                                  size: \"sm\"\n                                }\n                              },\n                              [\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeRole(item, \"normal\")\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(\n                                          _vm.$t(\"core.user.roles.normal\")\n                                        ) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                ),\n                                _vm._v(\" \"),\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeRole(item, \"power\")\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(\n                                          _vm.$t(\"core.user.roles.power\")\n                                        ) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  },\n                  {\n                    key: \"language\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          [\n                            _c(\n                              \"CDropdown\",\n                              {\n                                attrs: {\n                                  color: \"success\",\n                                  \"toggler-text\": _vm.$t(\n                                    \"core.user.languages.\" + item.language\n                                  ),\n                                  size: \"sm\"\n                                }\n                              },\n                              [\n                                _c(\n                                  \"CDropdownItem\",\n                                  {\n                                    on: {\n                                      click: function($event) {\n                                        return _vm.changeLanguage(item, \"en\")\n                                      }\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(\n                                          _vm.$t(\"core.user.languages.en\")\n                                        ) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  },\n                  {\n                    key: \"actions\",\n                    fn: function(ref) {\n                      var item = ref.item\n                      return [\n                        _c(\n                          \"td\",\n                          { staticClass: \"col-actions\" },\n                          [\n                            _vm.$store.getters[\"user/getRole\"] === \"power\" ||\n                            _vm.$store.getters[\"user/getName\"] === item.username\n                              ? _c(\n                                  \"CButton\",\n                                  {\n                                    attrs: {\n                                      color: \"primary\",\n                                      to: \"/user/edit/\" + item.id,\n                                      size: \"sm\"\n                                    }\n                                  },\n                                  [\n                                    _c(\"CIcon\", {\n                                      attrs: {\n                                        content: _vm.$options.icons.edit\n                                      }\n                                    }),\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(_vm.$t(\"table.actions.edit\")) +\n                                        \"\\n\\t\\t\\t\\t\\t\\t\"\n                                    )\n                                  ],\n                                  1\n                                )\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _c(\n                              \"CButton\",\n                              {\n                                attrs: { color: \"danger\", size: \"sm\" },\n                                on: {\n                                  click: function($event) {\n                                    return _vm.confirmDelete(item)\n                                  }\n                                }\n                              },\n                              [\n                                _c(\"CIcon\", {\n                                  attrs: { content: _vm.$options.icons.delete }\n                                }),\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$t(\"table.actions.delete\")) +\n                                    \"\\n\\t\\t\\t\\t\\t\\t\"\n                                )\n                              ],\n                              1\n                            )\n                          ],\n                          1\n                        )\n                      ]\n                    }\n                  }\n                ])\n              })\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CModal\",\n        {\n          attrs: { color: \"danger\", show: _vm.modals.delete.user !== null },\n          on: {\n            \"update:show\": function($event) {\n              return _vm.$set(_vm.modals.delete, \"user !== null\", $event)\n            }\n          },\n          scopedSlots: _vm._u([\n            {\n              key: \"header\",\n              fn: function() {\n                return [\n                  _c(\"h5\", { staticClass: \"modal-title\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(\n                          _vm.$t(\"core.user.messages.delete.confirmTitle\")\n                        ) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"CButtonClose\", {\n                    staticClass: \"text-white\",\n                    on: {\n                      click: function($event) {\n                        _vm.modals.delete.user = null\n                      }\n                    }\n                  })\n                ]\n              },\n              proxy: true\n            },\n            {\n              key: \"footer\",\n              fn: function() {\n                return [\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"danger\" },\n                      on: {\n                        click: function($event) {\n                          _vm.modals.delete.user = null\n                        }\n                      }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.no\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"CButton\",\n                    {\n                      attrs: { color: \"success\" },\n                      on: { click: _vm.performDelete }\n                    },\n                    [\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"forms.yes\")) + \"\\n\\t\\t\\t\"\n                      )\n                    ]\n                  )\n                ]\n              },\n              proxy: true\n            }\n          ])\n        },\n        [\n          _vm._v(\" \"),\n          _vm.modals.delete.user !== null\n            ? _c(\"span\", [\n                _vm._v(\n                  \"\\n\\t\\t\\t\" +\n                    _vm._s(\n                      _vm.$t(\"core.user.messages.delete.confirm\", {\n                        username: _vm.modals.delete.user.username\n                      })\n                    ) +\n                    \"\\n\\t\\t\"\n                )\n              ])\n            : _vm._e()\n        ]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<div>\n\t\t<CCard>\n\t\t\t<CCardHeader>\n\t\t\t\t<CButton\n\t\t\t\t\tcolor='success'\n\t\t\t\t\tto='/user/add/'\n\t\t\t\t\tsize='sm'\n\t\t\t\t\tclass='float-right'\n\t\t\t\t>\n\t\t\t\t\t<CIcon :content='$options.icons.add' />\n\t\t\t\t\t{{ $t('table.actions.add') }}\n\t\t\t\t</CButton>\n\t\t\t</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<CDataTable\n\t\t\t\t\t:items='users'\n\t\t\t\t\t:fields='fields'\n\t\t\t\t\t:column-filter='true'\n\t\t\t\t\t:items-per-page='20'\n\t\t\t\t\t:pagination='true'\n\t\t\t\t\t:striped='true'\n\t\t\t\t\t:sorter='{ external: false, resetable: true }'\n\t\t\t\t>\n\t\t\t\t\t<template #role='{item}'>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CDropdown\n\t\t\t\t\t\t\t\tcolor='success'\n\t\t\t\t\t\t\t\t:toggler-text='$t(\"core.user.roles.\" + item.role)'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeRole(item, \"normal\")'>\n\t\t\t\t\t\t\t\t\t{{ $t('core.user.roles.normal') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeRole(item, \"power\")'>\n\t\t\t\t\t\t\t\t\t{{ $t('core.user.roles.power') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t</CDropdown>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template #language='{item}'>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<CDropdown\n\t\t\t\t\t\t\t\tcolor='success'\n\t\t\t\t\t\t\t\t:toggler-text='$t(\"core.user.languages.\" + item.language)'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CDropdownItem @click='changeLanguage(item, \"en\")'>\n\t\t\t\t\t\t\t\t\t{{ $t('core.user.languages.en') }}\n\t\t\t\t\t\t\t\t</CDropdownItem>\n\t\t\t\t\t\t\t</CDropdown>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template #actions='{item}'>\n\t\t\t\t\t\t<td class='col-actions'>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tv-if='$store.getters[\"user/getRole\"] === \"power\" || $store.getters[\"user/getName\"] === item.username'\n\t\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\t\t:to='\"/user/edit/\" + item.id'\n\t\t\t\t\t\t\t\tsize='sm'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.edit' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.edit') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton color='danger' size='sm' @click='confirmDelete(item)'>\n\t\t\t\t\t\t\t\t<CIcon :content='$options.icons.delete' />\n\t\t\t\t\t\t\t\t{{ $t('table.actions.delete') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</template>\n\t\t\t\t</CDataTable>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t\t<CModal\n\t\t\tcolor='danger'\n\t\t\t:show.sync='modals.delete.user !== null'\n\t\t>\n\t\t\t<template #header>\n\t\t\t\t<h5 class='modal-title'>\n\t\t\t\t\t{{ $t('core.user.messages.delete.confirmTitle') }}\n\t\t\t\t</h5>\n\t\t\t\t<CButtonClose class='text-white' @click='modals.delete.user = null' />\n\t\t\t</template>\n\t\t\t<span v-if='modals.delete.user !== null'>\n\t\t\t\t{{ $t('core.user.messages.delete.confirm', {username: modals.delete.user.username}) }}\n\t\t\t</span>\n\t\t\t<template #footer>\n\t\t\t\t<CButton color='danger' @click='modals.delete.user = null'>\n\t\t\t\t\t{{ $t('forms.no') }}\n\t\t\t\t</CButton>\n\t\t\t\t<CButton color='success' @click='performDelete'>\n\t\t\t\t\t{{ $t('forms.yes') }}\n\t\t\t\t</CButton>\n\t\t\t</template>\n\t\t</CModal>\n\t</div>\n</template>\n\n<script>\nimport {\n\tCButton,\n\tCButtonClose,\n\tCCard,\n\tCCardBody,\n\tCCardHeader,\n\tCDataTable,\n\tCDropdown,\n\tCDropdownItem,\n\tCIcon,\n\tCModal\n} from '@coreui/vue/src';\nimport {cilPencil, cilPlus, cilTrash} from '@coreui/icons';\nimport UserService from '../../services/UserService';\n\nexport default {\n\tname: 'UserList',\n\tcomponents: {\n\t\tCButton,\n\t\tCButtonClose,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCDataTable,\n\t\tCDropdown,\n\t\tCDropdownItem,\n\t\tCIcon,\n\t\tCModal,\n\t},\n\tdata() {\n\t\tlet fields = [];\n\t\tif (this.$store.getters['user/getRole'] === 'normal') {\n\t\t\tfields = [\n\t\t\t\t{\n\t\t\t\t\tkey: 'username',\n\t\t\t\t\tlabel: this.$t('core.user.username'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'actions',\n\t\t\t\t\tlabel: this.$t('table.actions.title'),\n\t\t\t\t\tsorter: false,\n\t\t\t\t\tfilter: false,\n\t\t\t\t},\n\t\t\t];\n\t\t} else {\n\t\t\tfields = [\n\t\t\t\t{\n\t\t\t\t\tkey: 'id',\n\t\t\t\t\tlabel: this.$t('core.user.id'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'username',\n\t\t\t\t\tlabel: this.$t('core.user.username'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'role',\n\t\t\t\t\tlabel: this.$t('core.user.role'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'language',\n\t\t\t\t\tlabel: this.$t('core.user.language'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'actions',\n\t\t\t\t\tlabel: this.$t('table.actions.title'),\n\t\t\t\t\tsorter: false,\n\t\t\t\t\tfilter: false,\n\t\t\t\t},\n\t\t\t];\n\t\t}\n\t\treturn {\n\t\t\tfields,\n\t\t\tmodals: {\n\t\t\t\tdelete: {\n\t\t\t\t\tuser: null,\n\t\t\t\t}\n\t\t\t},\n\t\t\tusers: [],\n\t\t};\n\t},\n\tcreated() {\n\t\tthis.$store.commit('spinner/SHOW');\n\t\tthis.getUsers();\n\t},\n\tmethods: {\n\t\tgetUsers() {\n\t\t\treturn UserService.list()\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.users = response.data;\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t});\n\t\t},\n\t\tchangeRole(user, newRole) {\n\t\t\tthis.edit(user, {role: newRole});\n\t\t},\n\t\tchangeLanguage(user, newLanguage) {\n\t\t\tthis.edit(user, {language: newLanguage});\n\t\t},\n\t\tedit(user, newSettings) {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tlet settings = {\n\t\t\t\t...user,\n\t\t\t\t...newSettings,\n\t\t\t};\n\t\t\tdelete settings.id;\n\t\t\treturn UserService.edit(user.id, settings)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getUsers().then(() => {\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('core.user.messages.edit.success', {username: user.username})\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t});\n\t\t},\n\t\tconfirmDelete(user) {\n\t\t\tthis.modals.delete.user = user;\n\t\t},\n\t\tperformDelete() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tconst user = this.modals.delete.user;\n\t\t\tthis.modals.delete.user = null;\n\t\t\tUserService.delete(user.id)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.getUsers().then(() => {\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('core.user.messages.delete.success', {username: user.username})\n\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t});\n\t\t},\n\t},\n\ticons: {\n\t\tadd: cilPlus,\n\t\tdelete: cilTrash,\n\t\tedit: cilPencil,\n\t},\n\tmetaInfo: {\n\t\ttitle: 'core.user.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./UserList.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./UserList.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./UserList.vue?vue&type=template&id=8f56d494&\"\nimport script from \"./UserList.vue?vue&type=script&lang=js&\"\nexport * from \"./UserList.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('8f56d494')) {\n      api.createRecord('8f56d494', component.options)\n    } else {\n      api.reload('8f56d494', component.options)\n    }\n    module.hot.accept(\"./UserList.vue?vue&type=template&id=8f56d494&\", function () {\n      api.rerender('8f56d494', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Core/UserList.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\n        \"CListGroup\",\n        [\n          _c(\"CListGroupItem\", { attrs: { to: \"/network/ethernet\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"network.ethernet.title\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"network.ethernet.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ])\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<CListGroup>\n\t\t\t<CListGroupItem to='/network/ethernet'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('network.ethernet.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('network.ethernet.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t</CListGroup>\n\t</CCard>\n</template>\n\n<script>\nimport {CCard, CListGroup, CListGroupItem} from '@coreui/vue/src';\n\nexport default {\n\tname: 'NetworkDisambiguation',\n\tcomponents: {\n\t\tCCard,\n\t\tCListGroup,\n\t\tCListGroupItem\n\t},\n\tmetaInfo: {\n\t\ttitle: 'network.title',\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetworkDisambiguation.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetworkDisambiguation.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./NetworkDisambiguation.vue?vue&type=template&id=2a916c50&\"\nimport script from \"./NetworkDisambiguation.vue?vue&type=script&lang=js&\"\nexport * from \"./NetworkDisambiguation.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('2a916c50')) {\n      api.createRecord('2a916c50', component.options)\n    } else {\n      api.reload('2a916c50', component.options)\n    }\n    module.hot.accept(\"./NetworkDisambiguation.vue?vue&type=template&id=2a916c50&\", function () {\n      api.rerender('2a916c50', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Network/NetworkDisambiguation.vue\"\nexport default component.exports","import axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\nexport var ConnectionType;\n(function (ConnectionType) {\n    ConnectionType[\"BLUETOOTH\"] = \"bluetooth\";\n    ConnectionType[\"BRIDGE\"] = \"bridge\";\n    ConnectionType[\"DUMMY\"] = \"dummy\";\n    ConnectionType[\"ETHERNET\"] = \"802-3-ethernet\";\n    ConnectionType[\"GSM\"] = \"gsm\";\n    ConnectionType[\"INFINIBAND\"] = \"infiniband\";\n    ConnectionType[\"TUN\"] = \"tun\";\n    ConnectionType[\"VLAN\"] = \"vlan\";\n    ConnectionType[\"VPN\"] = \"vpn\";\n    ConnectionType[\"WIFI\"] = \"802-11-wireless\";\n    ConnectionType[\"WIMAX\"] = \"wimax\";\n    ConnectionType[\"WIREGUARD\"] = \"wireguard\";\n    ConnectionType[\"WPAN\"] = \"wpan\";\n})(ConnectionType || (ConnectionType = {}));\n/**\n * Network connection service\n */\nvar NetworkConnectionService = /** @class */ (function () {\n    function NetworkConnectionService() {\n    }\n    /**\n     * Connects the network connection\n     * @param uuid Network connection UUID\n     * @param interfaceName Network interface name\n     */\n    NetworkConnectionService.prototype.connect = function (uuid, interfaceName) {\n        if (interfaceName === void 0) { interfaceName = null; }\n        var config = { headers: authorizationHeader() };\n        if (interfaceName !== null) {\n            Object.assign(config, { params: { 'interface': interfaceName } });\n        }\n        return axios.post('network/connections/' + uuid + '/connect', null, config);\n    };\n    /**\n     * Disconnects the network connection\n     * @param uuid Network connection UUID\n     */\n    NetworkConnectionService.prototype.disconnect = function (uuid) {\n        var config = { headers: authorizationHeader() };\n        return axios.post('network/connections/' + uuid + '/disconnect', null, config);\n    };\n    /**\n     * Edits the network configuration\n     * @param uuid Network configuration UUID\n     * @param configuration Network connection cionfiguration\n     */\n    NetworkConnectionService.prototype.edit = function (uuid, configuration) {\n        var config = { headers: authorizationHeader() };\n        return axios.put('network/connections/' + uuid, configuration, config);\n    };\n    /**\n     * Retrieves the network connection configuration\n     * @param uuid Network connection UUID\n     */\n    NetworkConnectionService.prototype.get = function (uuid) {\n        return axios.get('network/connections/' + uuid, { headers: authorizationHeader() });\n    };\n    /**\n     * Lists available network connections\n     * @param type Network connection type\n     */\n    NetworkConnectionService.prototype.list = function (type) {\n        if (type === void 0) { type = null; }\n        var config = { headers: authorizationHeader() };\n        if (type !== null) {\n            Object.assign(config, { params: { type: type } });\n        }\n        return axios.get('network/connections', config);\n    };\n    return NetworkConnectionService;\n}());\nexport default new NetworkConnectionService();\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\"ValidationObserver\", {\n        scopedSlots: _vm._u([\n          {\n            key: \"default\",\n            fn: function(ref) {\n              var invalid = ref.invalid\n              return [\n                _c(\n                  \"CForm\",\n                  {\n                    on: {\n                      submit: function($event) {\n                        $event.preventDefault()\n                        return _vm.handleSubmit($event)\n                      }\n                    }\n                  },\n                  [\n                    _c(\"ValidationProvider\", {\n                      attrs: {\n                        rules: \"required\",\n                        \"custom-messages\": {\n                          required: \"network.connection.form.messages.instance\"\n                        }\n                      },\n                      scopedSlots: _vm._u(\n                        [\n                          {\n                            key: \"default\",\n                            fn: function(ref) {\n                              var errors = ref.errors\n                              var touched = ref.touched\n                              var valid = ref.valid\n                              return [\n                                _c(\"CInput\", {\n                                  attrs: {\n                                    label: _vm.$t(\"network.connection.name\"),\n                                    \"is-valid\": touched ? valid : null,\n                                    \"invalid-feedback\": _vm.$t(errors[0])\n                                  },\n                                  model: {\n                                    value: _vm.configuration.name,\n                                    callback: function($$v) {\n                                      _vm.$set(_vm.configuration, \"name\", $$v)\n                                    },\n                                    expression: \"configuration.name\"\n                                  }\n                                })\n                              ]\n                            }\n                          }\n                        ],\n                        null,\n                        true\n                      )\n                    }),\n                    _vm._v(\" \"),\n                    _c(\n                      \"fieldset\",\n                      [\n                        _c(\"legend\", [\n                          _vm._v(\n                            _vm._s(_vm.$t(\"network.connection.ipv4.title\"))\n                          )\n                        ]),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"network.connection.ipv4.messages.method\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CSelect\", {\n                                      attrs: {\n                                        value: _vm.configuration.ipv4.method,\n                                        label: _vm.$t(\n                                          \"network.connection.ipv4.method\"\n                                        ),\n                                        options: _vm.ipv4Methods,\n                                        placeholder: _vm.$t(\n                                          \"network.connection.ipv4.methods.null\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      on: {\n                                        \"update:value\": function($event) {\n                                          return _vm.$set(\n                                            _vm.configuration.ipv4,\n                                            \"method\",\n                                            $event\n                                          )\n                                        }\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _vm._l(_vm.configuration.ipv4.addresses, function(\n                          address,\n                          index\n                        ) {\n                          return _c(\n                            \"div\",\n                            { key: index },\n                            [\n                              _c(\"ValidationProvider\", {\n                                attrs: {\n                                  rules: \"required\",\n                                  \"custom-messages\": {\n                                    required:\n                                      \"network.connection.ipv4.messages.address\"\n                                  }\n                                },\n                                scopedSlots: _vm._u(\n                                  [\n                                    {\n                                      key: \"default\",\n                                      fn: function(ref) {\n                                        var errors = ref.errors\n                                        var touched = ref.touched\n                                        var valid = ref.valid\n                                        return [\n                                          _c(\"CInput\", {\n                                            attrs: {\n                                              label: _vm.$t(\n                                                \"network.connection.ipv4.address\"\n                                              ),\n                                              \"is-valid\": touched\n                                                ? valid\n                                                : null,\n                                              \"invalid-feedback\": _vm.$t(\n                                                errors[0]\n                                              )\n                                            },\n                                            model: {\n                                              value: address.address,\n                                              callback: function($$v) {\n                                                _vm.$set(\n                                                  address,\n                                                  \"address\",\n                                                  $$v\n                                                )\n                                              },\n                                              expression: \"address.address\"\n                                            }\n                                          })\n                                        ]\n                                      }\n                                    }\n                                  ],\n                                  null,\n                                  true\n                                )\n                              }),\n                              _vm._v(\" \"),\n                              _c(\"ValidationProvider\", {\n                                attrs: {\n                                  rules: \"required\",\n                                  \"custom-messages\": {\n                                    required:\n                                      \"network.connection.ipv4.messages.mask\"\n                                  }\n                                },\n                                scopedSlots: _vm._u(\n                                  [\n                                    {\n                                      key: \"default\",\n                                      fn: function(ref) {\n                                        var errors = ref.errors\n                                        var touched = ref.touched\n                                        var valid = ref.valid\n                                        return [\n                                          _c(\"CInput\", {\n                                            attrs: {\n                                              label: _vm.$t(\n                                                \"network.connection.ipv4.mask\"\n                                              ),\n                                              \"is-valid\": touched\n                                                ? valid\n                                                : null,\n                                              \"invalid-feedback\": _vm.$t(\n                                                errors[0]\n                                              )\n                                            },\n                                            model: {\n                                              value: address.mask,\n                                              callback: function($$v) {\n                                                _vm.$set(address, \"mask\", $$v)\n                                              },\n                                              expression: \"address.mask\"\n                                            }\n                                          })\n                                        ]\n                                      }\n                                    }\n                                  ],\n                                  null,\n                                  true\n                                )\n                              }),\n                              _vm._v(\" \"),\n                              _c(\n                                \"div\",\n                                { staticClass: \"form-group\" },\n                                [\n                                  _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: { color: \"danger\" },\n                                      on: {\n                                        click: function($event) {\n                                          return _vm.deleteIpv4Address(index)\n                                        }\n                                      }\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"network.connection.ipv4.addresses.remove\"\n                                            )\n                                          ) +\n                                          \"\\n\\t\\t\\t\\t\\t\\t\"\n                                      )\n                                    ]\n                                  ),\n                                  _vm._v(\" \"),\n                                  index ===\n                                  _vm.configuration.ipv4.addresses.length - 1\n                                    ? _c(\n                                        \"CButton\",\n                                        {\n                                          attrs: { color: \"success\" },\n                                          on: { click: _vm.addIpv4Address }\n                                        },\n                                        [\n                                          _vm._v(\n                                            \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                              _vm._s(\n                                                _vm.$t(\n                                                  \"network.connection.ipv4.addresses.add\"\n                                                )\n                                              ) +\n                                              \"\\n\\t\\t\\t\\t\\t\\t\"\n                                          )\n                                        ]\n                                      )\n                                    : _vm._e()\n                                ],\n                                1\n                              )\n                            ],\n                            1\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _vm.configuration.ipv4.addresses.length === 0\n                              ? _c(\n                                  \"CButton\",\n                                  {\n                                    attrs: { color: \"success\" },\n                                    on: { click: _vm.addIpv4Address }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(\n                                          _vm.$t(\n                                            \"network.connection.ipv4.addresses.add\"\n                                          )\n                                        ) +\n                                        \"\\n\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                )\n                              : _vm._e()\n                          ],\n                          1\n                        ),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules:\n                              _vm.configuration.ipv4.method === \"manual\"\n                                ? \"required\"\n                                : \"\",\n                            \"custom-messages\": {\n                              required:\n                                \"network.connection.ipv4.messages.gateway\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        label: _vm.$t(\n                                          \"network.connection.ipv4.gateway\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.configuration.ipv4.gateway,\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.configuration.ipv4,\n                                            \"gateway\",\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"configuration.ipv4.gateway\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _vm._l(_vm.configuration.ipv4.dns, function(\n                          address,\n                          index\n                        ) {\n                          return _c(\n                            \"div\",\n                            { key: index },\n                            [\n                              _c(\"ValidationProvider\", {\n                                attrs: {\n                                  rules: \"required\",\n                                  \"custom-messages\": {\n                                    required:\n                                      \"network.connection.ipv4.messages.dns\"\n                                  }\n                                },\n                                scopedSlots: _vm._u(\n                                  [\n                                    {\n                                      key: \"default\",\n                                      fn: function(ref) {\n                                        var errors = ref.errors\n                                        var touched = ref.touched\n                                        var valid = ref.valid\n                                        return [\n                                          _c(\"CInput\", {\n                                            attrs: {\n                                              label: _vm.$t(\n                                                \"network.connection.ipv4.dns.address\"\n                                              ),\n                                              \"is-valid\": touched\n                                                ? valid\n                                                : null,\n                                              \"invalid-feedback\": _vm.$t(\n                                                errors[0]\n                                              )\n                                            },\n                                            model: {\n                                              value: address.address,\n                                              callback: function($$v) {\n                                                _vm.$set(\n                                                  address,\n                                                  \"address\",\n                                                  $$v\n                                                )\n                                              },\n                                              expression: \"address.address\"\n                                            }\n                                          })\n                                        ]\n                                      }\n                                    }\n                                  ],\n                                  null,\n                                  true\n                                )\n                              }),\n                              _vm._v(\" \"),\n                              _c(\n                                \"div\",\n                                { staticClass: \"form-group\" },\n                                [\n                                  _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: { color: \"danger\" },\n                                      on: {\n                                        click: function($event) {\n                                          return _vm.deleteIpv4Dns(index)\n                                        }\n                                      }\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"network.connection.ipv4.dns.remove\"\n                                            )\n                                          ) +\n                                          \"\\n\\t\\t\\t\\t\\t\\t\"\n                                      )\n                                    ]\n                                  ),\n                                  _vm._v(\" \"),\n                                  index ===\n                                  _vm.configuration.ipv4.dns.length - 1\n                                    ? _c(\n                                        \"CButton\",\n                                        {\n                                          attrs: { color: \"success\" },\n                                          on: { click: _vm.addIpv4Dns }\n                                        },\n                                        [\n                                          _vm._v(\n                                            \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                              _vm._s(\n                                                _vm.$t(\n                                                  \"network.connection.ipv4.dns.add\"\n                                                )\n                                              ) +\n                                              \"\\n\\t\\t\\t\\t\\t\\t\"\n                                          )\n                                        ]\n                                      )\n                                    : _vm._e()\n                                ],\n                                1\n                              )\n                            ],\n                            1\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _vm.configuration.ipv4.dns.length === 0\n                          ? _c(\n                              \"div\",\n                              { staticClass: \"form-group\" },\n                              [\n                                _c(\n                                  \"CButton\",\n                                  {\n                                    attrs: { color: \"success\" },\n                                    on: { click: _vm.addIpv4Dns }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(\n                                          _vm.$t(\n                                            \"network.connection.ipv4.dns.add\"\n                                          )\n                                        ) +\n                                        \"\\n\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          : _vm._e()\n                      ],\n                      2\n                    ),\n                    _vm._v(\" \"),\n                    _c(\n                      \"fieldset\",\n                      [\n                        _c(\"legend\", [\n                          _vm._v(\n                            _vm._s(_vm.$t(\"network.connection.ipv6.title\"))\n                          )\n                        ]),\n                        _vm._v(\" \"),\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"required\",\n                            \"custom-messages\": {\n                              required:\n                                \"network.connection.ipv6.messages.method\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CSelect\", {\n                                      attrs: {\n                                        value: _vm.configuration.ipv6.method,\n                                        label: _vm.$t(\n                                          \"network.connection.ipv6.method\"\n                                        ),\n                                        options: _vm.ipv6Methods,\n                                        placeholder: _vm.$t(\n                                          \"network.connection.ipv6.methods.null\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      on: {\n                                        \"update:value\": function($event) {\n                                          return _vm.$set(\n                                            _vm.configuration.ipv6,\n                                            \"method\",\n                                            $event\n                                          )\n                                        }\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _vm._l(_vm.configuration.ipv6.addresses, function(\n                          address,\n                          index\n                        ) {\n                          return _c(\n                            \"div\",\n                            { key: index },\n                            [\n                              _c(\"ValidationProvider\", {\n                                attrs: {\n                                  rules: \"required\",\n                                  \"custom-messages\": {\n                                    required:\n                                      \"network.connection.ipv6.messages.address\"\n                                  }\n                                },\n                                scopedSlots: _vm._u(\n                                  [\n                                    {\n                                      key: \"default\",\n                                      fn: function(ref) {\n                                        var errors = ref.errors\n                                        var touched = ref.touched\n                                        var valid = ref.valid\n                                        return [\n                                          _c(\"CInput\", {\n                                            attrs: {\n                                              label: _vm.$t(\n                                                \"network.connection.ipv6.address\"\n                                              ),\n                                              \"is-valid\": touched\n                                                ? valid\n                                                : null,\n                                              \"invalid-feedback\": _vm.$t(\n                                                errors[0]\n                                              )\n                                            },\n                                            model: {\n                                              value: address.address,\n                                              callback: function($$v) {\n                                                _vm.$set(\n                                                  address,\n                                                  \"address\",\n                                                  $$v\n                                                )\n                                              },\n                                              expression: \"address.address\"\n                                            }\n                                          })\n                                        ]\n                                      }\n                                    }\n                                  ],\n                                  null,\n                                  true\n                                )\n                              }),\n                              _vm._v(\" \"),\n                              _c(\"ValidationProvider\", {\n                                attrs: {\n                                  rules: \"required\",\n                                  \"custom-messages\": {\n                                    required:\n                                      \"network.connection.ipv6.messages.prefix\"\n                                  }\n                                },\n                                scopedSlots: _vm._u(\n                                  [\n                                    {\n                                      key: \"default\",\n                                      fn: function(ref) {\n                                        var errors = ref.errors\n                                        var touched = ref.touched\n                                        var valid = ref.valid\n                                        return [\n                                          _c(\"CInput\", {\n                                            attrs: {\n                                              label: _vm.$t(\n                                                \"network.connection.ipv6.prefix\"\n                                              ),\n                                              \"is-valid\": touched\n                                                ? valid\n                                                : null,\n                                              \"invalid-feedback\": _vm.$t(\n                                                errors[0]\n                                              )\n                                            },\n                                            model: {\n                                              value: address.prefix,\n                                              callback: function($$v) {\n                                                _vm.$set(\n                                                  address,\n                                                  \"prefix\",\n                                                  _vm._n($$v)\n                                                )\n                                              },\n                                              expression: \"address.prefix\"\n                                            }\n                                          })\n                                        ]\n                                      }\n                                    }\n                                  ],\n                                  null,\n                                  true\n                                )\n                              }),\n                              _vm._v(\" \"),\n                              _c(\"ValidationProvider\", {\n                                scopedSlots: _vm._u(\n                                  [\n                                    {\n                                      key: \"default\",\n                                      fn: function(ref) {\n                                        var errors = ref.errors\n                                        var touched = ref.touched\n                                        var valid = ref.valid\n                                        return [\n                                          _c(\"CInput\", {\n                                            attrs: {\n                                              label: _vm.$t(\n                                                \"network.connection.ipv6.gateway\"\n                                              ),\n                                              \"is-valid\": touched\n                                                ? valid\n                                                : null,\n                                              \"invalid-feedback\": _vm.$t(\n                                                errors[0]\n                                              )\n                                            },\n                                            model: {\n                                              value: address.gateway,\n                                              callback: function($$v) {\n                                                _vm.$set(\n                                                  address,\n                                                  \"gateway\",\n                                                  $$v\n                                                )\n                                              },\n                                              expression: \"address.gateway\"\n                                            }\n                                          })\n                                        ]\n                                      }\n                                    }\n                                  ],\n                                  null,\n                                  true\n                                )\n                              }),\n                              _vm._v(\" \"),\n                              _c(\n                                \"div\",\n                                { staticClass: \"form-group\" },\n                                [\n                                  _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: { color: \"danger\" },\n                                      on: {\n                                        click: function($event) {\n                                          return _vm.deleteIpv6Address(index)\n                                        }\n                                      }\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"network.connection.ipv6.addresses.remove\"\n                                            )\n                                          ) +\n                                          \"\\n\\t\\t\\t\\t\\t\\t\"\n                                      )\n                                    ]\n                                  ),\n                                  _vm._v(\" \"),\n                                  index ===\n                                  _vm.configuration.ipv6.addresses.length - 1\n                                    ? _c(\n                                        \"CButton\",\n                                        {\n                                          attrs: { color: \"success\" },\n                                          on: { click: _vm.addIpv6Address }\n                                        },\n                                        [\n                                          _vm._v(\n                                            \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                              _vm._s(\n                                                _vm.$t(\n                                                  \"network.connection.ipv6.addresses.add\"\n                                                )\n                                              ) +\n                                              \"\\n\\t\\t\\t\\t\\t\\t\"\n                                          )\n                                        ]\n                                      )\n                                    : _vm._e()\n                                ],\n                                1\n                              )\n                            ],\n                            1\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _vm.configuration.ipv6.addresses.length === 0\n                              ? _c(\n                                  \"CButton\",\n                                  {\n                                    attrs: { color: \"success\" },\n                                    on: { click: _vm.addIpv6Address }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(\n                                          _vm.$t(\n                                            \"network.connection.ipv6.addresses.add\"\n                                          )\n                                        ) +\n                                        \"\\n\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                )\n                              : _vm._e()\n                          ],\n                          1\n                        ),\n                        _vm._v(\" \"),\n                        _vm._l(_vm.configuration.ipv6.dns, function(\n                          address,\n                          index\n                        ) {\n                          return _c(\n                            \"div\",\n                            { key: index },\n                            [\n                              _c(\"ValidationProvider\", {\n                                attrs: {\n                                  rules: \"required\",\n                                  \"custom-messages\": {\n                                    required:\n                                      \"network.connection.ipv6.messages.dns\"\n                                  }\n                                },\n                                scopedSlots: _vm._u(\n                                  [\n                                    {\n                                      key: \"default\",\n                                      fn: function(ref) {\n                                        var errors = ref.errors\n                                        var touched = ref.touched\n                                        var valid = ref.valid\n                                        return [\n                                          _c(\"CInput\", {\n                                            attrs: {\n                                              label: _vm.$t(\n                                                \"network.connection.ipv6.dns.address\"\n                                              ),\n                                              \"is-valid\": touched\n                                                ? valid\n                                                : null,\n                                              \"invalid-feedback\": _vm.$t(\n                                                errors[0]\n                                              )\n                                            },\n                                            model: {\n                                              value: address.address,\n                                              callback: function($$v) {\n                                                _vm.$set(\n                                                  address,\n                                                  \"address\",\n                                                  $$v\n                                                )\n                                              },\n                                              expression: \"address.address\"\n                                            }\n                                          })\n                                        ]\n                                      }\n                                    }\n                                  ],\n                                  null,\n                                  true\n                                )\n                              }),\n                              _vm._v(\" \"),\n                              _c(\n                                \"div\",\n                                { staticClass: \"form-group\" },\n                                [\n                                  _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: { color: \"danger\" },\n                                      on: {\n                                        click: function($event) {\n                                          return _vm.deleteIpv6Dns(index)\n                                        }\n                                      }\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(\n                                            _vm.$t(\n                                              \"network.connection.ipv6.dns.remove\"\n                                            )\n                                          ) +\n                                          \"\\n\\t\\t\\t\\t\\t\\t\"\n                                      )\n                                    ]\n                                  ),\n                                  _vm._v(\" \"),\n                                  index ===\n                                  _vm.configuration.ipv6.dns.length - 1\n                                    ? _c(\n                                        \"CButton\",\n                                        {\n                                          attrs: { color: \"success\" },\n                                          on: { click: _vm.addIpv6Dns }\n                                        },\n                                        [\n                                          _vm._v(\n                                            \"\\n\\t\\t\\t\\t\\t\\t\\t\" +\n                                              _vm._s(\n                                                _vm.$t(\n                                                  \"network.connection.ipv6.dns.add\"\n                                                )\n                                              ) +\n                                              \"\\n\\t\\t\\t\\t\\t\\t\"\n                                          )\n                                        ]\n                                      )\n                                    : _vm._e()\n                                ],\n                                1\n                              )\n                            ],\n                            1\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _vm.configuration.ipv6.dns.length === 0\n                          ? _c(\n                              \"div\",\n                              { staticClass: \"form-group\" },\n                              [\n                                _c(\n                                  \"CButton\",\n                                  {\n                                    attrs: { color: \"success\" },\n                                    on: { click: _vm.addIpv6Dns }\n                                  },\n                                  [\n                                    _vm._v(\n                                      \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                        _vm._s(\n                                          _vm.$t(\n                                            \"network.connection.ipv6.dns.add\"\n                                          )\n                                        ) +\n                                        \"\\n\\t\\t\\t\\t\\t\"\n                                    )\n                                  ]\n                                )\n                              ],\n                              1\n                            )\n                          : _vm._e()\n                      ],\n                      2\n                    ),\n                    _vm._v(\" \"),\n                    _c(\n                      \"CButton\",\n                      {\n                        attrs: {\n                          type: \"submit\",\n                          color: \"primary\",\n                          disabled: invalid\n                        }\n                      },\n                      [\n                        _vm._v(\n                          \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.submitButton) + \"\\n\\t\\t\\t\"\n                        )\n                      ]\n                    )\n                  ],\n                  1\n                )\n              ]\n            }\n          }\n        ])\n      })\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ConnectionForm.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ConnectionForm.vue?vue&type=script&lang=js&\"","<template>\n\t<CCard body-wrapper>\n\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t<CForm @submit.prevent='handleSubmit'>\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\trules='required'\n\t\t\t\t\t:custom-messages='{required: \"network.connection.form.messages.instance\"}'\n\t\t\t\t>\n\t\t\t\t\t<CInput\n\t\t\t\t\t\tv-model='configuration.name'\n\t\t\t\t\t\t:label='$t(\"network.connection.name\")'\n\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t/>\n\t\t\t\t</ValidationProvider>\n\t\t\t\t<fieldset>\n\t\t\t\t\t<legend>{{ $t('network.connection.ipv4.title') }}</legend>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid}'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{required: \"network.connection.ipv4.messages.method\"}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CSelect\n\t\t\t\t\t\t\t:value.sync='configuration.ipv4.method'\n\t\t\t\t\t\t\t:label='$t(\"network.connection.ipv4.method\")'\n\t\t\t\t\t\t\t:options='ipv4Methods'\n\t\t\t\t\t\t\t:placeholder='$t(\"network.connection.ipv4.methods.null\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<div\n\t\t\t\t\t\tv-for='(address, index) in configuration.ipv4.addresses'\n\t\t\t\t\t\t:key='index'\n\t\t\t\t\t>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid}'\n\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t:custom-messages='{required: \"network.connection.ipv4.messages.address\"}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model='address.address'\n\t\t\t\t\t\t\t\t:label='$t(\"network.connection.ipv4.address\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid}'\n\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t:custom-messages='{required: \"network.connection.ipv4.messages.mask\"}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model='address.mask'\n\t\t\t\t\t\t\t\t:label='$t(\"network.connection.ipv4.mask\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<div class='form-group'>\n\t\t\t\t\t\t\t<CButton color='danger' @click='deleteIpv4Address(index)'>\n\t\t\t\t\t\t\t\t{{ $t('network.connection.ipv4.addresses.remove') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tv-if='index === (configuration.ipv4.addresses.length - 1)'\n\t\t\t\t\t\t\t\tcolor='success'\n\t\t\t\t\t\t\t\t@click='addIpv4Address'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{{ $t('network.connection.ipv4.addresses.add') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='form-group'>\n\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\tv-if='configuration.ipv4.addresses.length === 0'\n\t\t\t\t\t\t\tcolor='success'\n\t\t\t\t\t\t\t@click='addIpv4Address'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ $t('network.connection.ipv4.addresses.add') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</div>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid}'\n\t\t\t\t\t\t:rules='configuration.ipv4.method === \"manual\" ? \"required\" : \"\"'\n\t\t\t\t\t\t:custom-messages='{required: \"network.connection.ipv4.messages.gateway\"}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model='configuration.ipv4.gateway'\n\t\t\t\t\t\t\t:label='$t(\"network.connection.ipv4.gateway\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<div v-for='(address, index) in configuration.ipv4.dns' :key='index'>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid}'\n\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t:custom-messages='{required: \"network.connection.ipv4.messages.dns\"}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model='address.address'\n\t\t\t\t\t\t\t\t:label='$t(\"network.connection.ipv4.dns.address\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<div class='form-group'>\n\t\t\t\t\t\t\t<CButton color='danger' @click='deleteIpv4Dns(index)'>\n\t\t\t\t\t\t\t\t{{ $t('network.connection.ipv4.dns.remove') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tv-if='index === (configuration.ipv4.dns.length - 1)'\n\t\t\t\t\t\t\t\tcolor='success'\n\t\t\t\t\t\t\t\t@click='addIpv4Dns'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{{ $t('network.connection.ipv4.dns.add') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-if='configuration.ipv4.dns.length === 0' class='form-group'>\n\t\t\t\t\t\t<CButton color='success' @click='addIpv4Dns'>\n\t\t\t\t\t\t\t{{ $t('network.connection.ipv4.dns.add') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</div>\n\t\t\t\t</fieldset>\n\t\t\t\t<fieldset>\n\t\t\t\t\t<legend>{{ $t('network.connection.ipv6.title') }}</legend>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid}'\n\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t:custom-messages='{required: \"network.connection.ipv6.messages.method\"}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CSelect\n\t\t\t\t\t\t\t:value.sync='configuration.ipv6.method'\n\t\t\t\t\t\t\t:label='$t(\"network.connection.ipv6.method\")'\n\t\t\t\t\t\t\t:options='ipv6Methods'\n\t\t\t\t\t\t\t:placeholder='$t(\"network.connection.ipv6.methods.null\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<div\n\t\t\t\t\t\tv-for='(address, index) in configuration.ipv6.addresses'\n\t\t\t\t\t\t:key='index'\n\t\t\t\t\t>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid}'\n\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t:custom-messages='{required: \"network.connection.ipv6.messages.address\"}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model='address.address'\n\t\t\t\t\t\t\t\t:label='$t(\"network.connection.ipv6.address\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid}'\n\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t:custom-messages='{required: \"network.connection.ipv6.messages.prefix\"}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model.number='address.prefix'\n\t\t\t\t\t\t\t\t:label='$t(\"network.connection.ipv6.prefix\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model='address.gateway'\n\t\t\t\t\t\t\t\t:label='$t(\"network.connection.ipv6.gateway\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<div class='form-group'>\n\t\t\t\t\t\t\t<CButton color='danger' @click='deleteIpv6Address(index)'>\n\t\t\t\t\t\t\t\t{{ $t('network.connection.ipv6.addresses.remove') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tv-if='index === (configuration.ipv6.addresses.length - 1)'\n\t\t\t\t\t\t\t\tcolor='success'\n\t\t\t\t\t\t\t\t@click='addIpv6Address'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{{ $t('network.connection.ipv6.addresses.add') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='form-group'>\n\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\tv-if='configuration.ipv6.addresses.length === 0'\n\t\t\t\t\t\t\tcolor='success'\n\t\t\t\t\t\t\t@click='addIpv6Address'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{ $t('network.connection.ipv6.addresses.add') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div\n\t\t\t\t\t\tv-for='(address, index) in configuration.ipv6.dns'\n\t\t\t\t\t\t:key='index'\n\t\t\t\t\t>\n\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\tv-slot='{ errors, touched, valid}'\n\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t:custom-messages='{required: \"network.connection.ipv6.messages.dns\"}'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\tv-model='address.address'\n\t\t\t\t\t\t\t\t:label='$t(\"network.connection.ipv6.dns.address\")'\n\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t<div class='form-group'>\n\t\t\t\t\t\t\t<CButton color='danger' @click='deleteIpv6Dns(index)'>\n\t\t\t\t\t\t\t\t{{ $t('network.connection.ipv6.dns.remove') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t\t<CButton\n\t\t\t\t\t\t\t\tv-if='index === (configuration.ipv6.dns.length - 1)'\n\t\t\t\t\t\t\t\tcolor='success'\n\t\t\t\t\t\t\t\t@click='addIpv6Dns'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{{ $t('network.connection.ipv6.dns.add') }}\n\t\t\t\t\t\t\t</CButton>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-if='configuration.ipv6.dns.length === 0' class='form-group'>\n\t\t\t\t\t\t<CButton color='success' @click='addIpv6Dns'>\n\t\t\t\t\t\t\t{{ $t('network.connection.ipv6.dns.add') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</div>\n\t\t\t\t</fieldset>\n\t\t\t\t<CButton type='submit' color='primary' :disabled='invalid'>\n\t\t\t\t\t{{ submitButton }}\n\t\t\t\t</CButton>\n\t\t\t</CForm>\n\t\t</ValidationObserver>\n\t</CCard>\n</template>\n\n<script>import {CButton, CCard, CForm, CInput, CSelect} from '@coreui/vue';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {required} from 'vee-validate/dist/rules';\nimport NetworkConnectionService from '../../services/NetworkConnectionService';\n\nexport default {\n\tname: 'ConnectionForm',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCForm,\n\t\tCInput,\n\t\tCSelect,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tprops: {\n\t\tuuid: {\n\t\t\ttype: String,\n\t\t\trequired: false,\n\t\t\tdefault: null,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tconfiguration: {\n\t\t\t\tid: undefined,\n\t\t\t\tipv4: {\n\t\t\t\t\taddresses: [],\n\t\t\t\t\tdns: [],\n\t\t\t\t\tgateway: undefined,\n\t\t\t\t\tmethod: undefined,\n\t\t\t\t},\n\t\t\t\tipv6: {\n\t\t\t\t\taddresses: [],\n\t\t\t\t\tdns: [],\n\t\t\t\t\tmethod: undefined,\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t},\n\tcomputed: {\n\t\tipv4Methods() {\n\t\t\tconst methods = ['auto', 'disabled', 'link-local', 'manual', 'shared'];\n\t\t\treturn methods.map(\n\t\t\t\t(method) => ({\n\t\t\t\t\tvalue: method,\n\t\t\t\t\tlabel: this.$t('network.connection.ipv4.methods.' + method),\n\t\t\t\t})\n\t\t\t);\n\t\t},\n\t\tipv6Methods() {\n\t\t\tconst methods = [\n\t\t\t\t'auto', 'disabled', 'dhcp', 'ignore', 'link-local', 'manual', 'shared',\n\t\t\t];\n\t\t\treturn methods.map((method) =>\n\t\t\t\t({\n\t\t\t\t\tvalue: method,\n\t\t\t\t\tlabel: this.$t('network.connection.ipv6.methods.' + method),\n\t\t\t\t})\n\t\t\t);\n\t\t},\n\t\tsubmitButton() {\n\t\t\treturn this.$route.path === '/network/add' ?\n\t\t\t\tthis.$t('forms.add') : this.$t('forms.save');\n\t\t},\n\t},\n\tcreated() {\n\t\tthis.$store.commit('spinner/SHOW');\n\t\textend('required', required);\n\t\tNetworkConnectionService.get(this.uuid)\n\t\t\t.then((response) => {\n\t\t\t\tthis.configuration = response.data;\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t});\n\t},\n\tmethods: {\n\t\taddIpv4Address() {\n\t\t\tthis.configuration.ipv4.addresses.push({address: null, mask: null});\n\t\t},\n\t\taddIpv4Dns() {\n\t\t\tthis.configuration.ipv4.dns.push({address: null});\n\t\t},\n\t\tdeleteIpv4Address(index) {\n\t\t\tthis.configuration.ipv4.addresses.splice(index, 1);\n\t\t},\n\t\tdeleteIpv4Dns(index) {\n\t\t\tthis.configuration.ipv4.dns.splice(index, 1);\n\t\t},\n\t\taddIpv6Address() {\n\t\t\tthis.configuration.ipv6.addresses.push({address: null, mask: null});\n\t\t},\n\t\taddIpv6Dns() {\n\t\t\tthis.configuration.ipv6.dns.push({address: null});\n\t\t},\n\t\tdeleteIpv6Address(index) {\n\t\t\tthis.configuration.ipv6.addresses.splice(index, 1);\n\t\t},\n\t\tdeleteIpv6Dns(index) {\n\t\t\tthis.configuration.ipv6.dns.splice(index, 1);\n\t\t},\n\t\thandleSubmit() {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tNetworkConnectionService.edit(this.uuid, this.configuration)\n\t\t\t\t.then(() => {\n\t\t\t\t\tNetworkConnectionService.connect(this.uuid).then(() => {\n\t\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\t\tthis.$t('network.connection.messages.edit.success').toString()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\t});\n\t\t\t\t}).catch(() => {\n\t\t\t\t\tthis.$toast.error(\n\t\t\t\t\t\tthis.$t('network.connection.messages.edit.failure').toString()\n\t\t\t\t\t);\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t});\n\t\t}\n\t},\n\tmetaInfo: {\n\t\ttitle: 'network.ethernet.edit',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./ConnectionForm.vue?vue&type=template&id=6d424596&\"\nimport script from \"./ConnectionForm.vue?vue&type=script&lang=js&\"\nexport * from \"./ConnectionForm.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6d424596')) {\n      api.createRecord('6d424596', component.options)\n    } else {\n      api.reload('6d424596', component.options)\n    }\n    module.hot.accept(\"./ConnectionForm.vue?vue&type=template&id=6d424596&\", function () {\n      api.rerender('6d424596', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Network/ConnectionForm.vue\"\nexport default component.exports","import axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\n/**\n * Network interface state enum\n */\nexport var InterfaceState;\n(function (InterfaceState) {\n    InterfaceState[\"CONNECTED\"] = \"connected\";\n    InterfaceState[\"CONNECTING\"] = \"connecting\";\n    InterfaceState[\"CONFIGURING\"] = \"connecting (configuring)\";\n    InterfaceState[\"DEACTIVATING\"] = \"deactivating\";\n    InterfaceState[\"DISCONNECTED\"] = \"disconnected\";\n    InterfaceState[\"FAILED\"] = \"connection failed\";\n    InterfaceState[\"IP_CONFIG\"] = \"connecting (getting IP configuration)\";\n    InterfaceState[\"IP_CHECK\"] = \"connecting (checking IP connectivity)\";\n    InterfaceState[\"NEED_AUTH\"] = \"connecting (need authentication)\";\n    InterfaceState[\"PREPARE\"] = \"connecting (prepare)\";\n    InterfaceState[\"SECONDARIES\"] = \"connecting (starting secondary connections)\";\n    InterfaceState[\"UNAVAILABLE\"] = \"unavailable\";\n    InterfaceState[\"UNMANAGED\"] = \"unmanaged\";\n    InterfaceState[\"UNKNOWN\"] = \"unknown\";\n})(InterfaceState || (InterfaceState = {}));\n/**\n * Network interface type enum\n */\nexport var InterfaceType;\n(function (InterfaceType) {\n    InterfaceType[\"BOND\"] = \"bond\";\n    InterfaceType[\"BRIDGE\"] = \"bridge\";\n    InterfaceType[\"DUMMY\"] = \"dummy\";\n    InterfaceType[\"ETHERNET\"] = \"ethernet\";\n    InterfaceType[\"LOOPBACK\"] = \"loopback\";\n    InterfaceType[\"TUN\"] = \"tun\";\n    InterfaceType[\"VLAN\"] = \"vlan\";\n    InterfaceType[\"WIFI\"] = \"wifi\";\n    InterfaceType[\"WIFI_P2P\"] = \"wifi-p2p\";\n})(InterfaceType || (InterfaceType = {}));\n/**\n * Network interface service\n */\nvar NetworkInterfaceService = /** @class */ (function () {\n    function NetworkInterfaceService() {\n    }\n    /**\n     * Lists available network interfaces\n     * @param type Network interface type\n     */\n    NetworkInterfaceService.prototype.list = function (type) {\n        if (type === void 0) { type = null; }\n        var config = { headers: authorizationHeader() };\n        if (type !== null) {\n            Object.assign(config, { params: { type: type } });\n        }\n        return axios.get('network/interfaces', config);\n    };\n    return NetworkInterfaceService;\n}());\nexport default new NetworkInterfaceService();\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    _vm._l(_vm.interfaces, function(iface) {\n      return _c(\n        \"CCard\",\n        { key: iface.name },\n        [\n          _c(\n            \"CCardHeader\",\n            { staticClass: \"d-flex\" },\n            [\n              _vm._v(\"\\n\\t\\t\\t\" + _vm._s(iface.name) + \"\\n\\t\\t\\t\"),\n              _c(\n                \"CBadge\",\n                {\n                  staticClass: \"ml-auto\",\n                  attrs: { color: _vm.getStatusBadgeColor(iface.state) }\n                },\n                [_vm._v(\"\\n\\t\\t\\t\\t\" + _vm._s(iface.state) + \"\\n\\t\\t\\t\")]\n              )\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"CCardBody\",\n            [\n              _c(\"EthernetConnections\", {\n                attrs: {\n                  connections: _vm.connections,\n                  \"interface-name\": iface.name\n                },\n                on: { updateConnection: _vm.getConnections }\n              })\n            ],\n            1\n          )\n        ],\n        1\n      )\n    }),\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"CDataTable\", {\n    attrs: {\n      items: _vm.connections,\n      fields: _vm.fields,\n      \"column-filter\": true,\n      \"items-per-page\": 20,\n      pagination: true,\n      striped: true,\n      sorter: { external: false, resetable: true }\n    },\n    scopedSlots: _vm._u([\n      {\n        key: \"actions\",\n        fn: function(ref) {\n          var item = ref.item\n          return [\n            _c(\n              \"td\",\n              { staticClass: \"col-actions\" },\n              [\n                item.interfaceName !== _vm.interfaceName\n                  ? _c(\n                      \"CButton\",\n                      {\n                        attrs: { color: \"success\", size: \"sm\" },\n                        on: {\n                          click: function($event) {\n                            return _vm.connect(item)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"CIcon\", {\n                          attrs: { content: _vm.$options.icons.connect }\n                        }),\n                        _vm._v(\n                          \"\\n\\t\\t\\t\\t\" +\n                            _vm._s(_vm.$t(\"network.table.connect\")) +\n                            \"\\n\\t\\t\\t\"\n                        )\n                      ],\n                      1\n                    )\n                  : _c(\n                      \"CButton\",\n                      {\n                        attrs: { color: \"danger\", size: \"sm\" },\n                        on: {\n                          click: function($event) {\n                            return _vm.disconnect(item)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"CIcon\", {\n                          attrs: { content: _vm.$options.icons.disconnect }\n                        }),\n                        _vm._v(\n                          \"\\n\\t\\t\\t\\t\" +\n                            _vm._s(_vm.$t(\"network.table.disconnect\")) +\n                            \"\\n\\t\\t\\t\"\n                        )\n                      ],\n                      1\n                    ),\n                _vm._v(\" \"),\n                _c(\n                  \"CButton\",\n                  {\n                    attrs: {\n                      color: \"primary\",\n                      to: \"/network/edit/\" + item.uuid,\n                      size: \"sm\"\n                    }\n                  },\n                  [\n                    _c(\"CIcon\", {\n                      attrs: { content: _vm.$options.icons.edit }\n                    }),\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"table.actions.edit\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ],\n                  1\n                )\n              ],\n              1\n            )\n          ]\n        }\n      }\n    ])\n  })\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EthernetConnections.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EthernetConnections.vue?vue&type=script&lang=js&\"","<template>\n\t<CDataTable\n\t\t:items='connections'\n\t\t:fields='fields'\n\t\t:column-filter='true'\n\t\t:items-per-page='20'\n\t\t:pagination='true'\n\t\t:striped='true'\n\t\t:sorter='{ external: false, resetable: true }'\n\t>\n\t\t<template #actions='{item}'>\n\t\t\t<td class='col-actions'>\n\t\t\t\t<CButton\n\t\t\t\t\tv-if='item.interfaceName !== interfaceName'\n\t\t\t\t\tcolor='success'\n\t\t\t\t\tsize='sm'\n\t\t\t\t\t@click='connect(item)'\n\t\t\t\t>\n\t\t\t\t\t<CIcon :content='$options.icons.connect' />\n\t\t\t\t\t{{ $t('network.table.connect') }}\n\t\t\t\t</CButton>\n\t\t\t\t<CButton\n\t\t\t\t\tv-else\n\t\t\t\t\tcolor='danger'\n\t\t\t\t\tsize='sm'\n\t\t\t\t\t@click='disconnect(item)'\n\t\t\t\t>\n\t\t\t\t\t<CIcon :content='$options.icons.disconnect' />\n\t\t\t\t\t{{ $t('network.table.disconnect') }}\n\t\t\t\t</CButton>\n\t\t\t\t<CButton\n\t\t\t\t\tcolor='primary'\n\t\t\t\t\t:to='\"/network/edit/\" + item.uuid'\n\t\t\t\t\tsize='sm'\n\t\t\t\t>\n\t\t\t\t\t<CIcon :content='$options.icons.edit' />\n\t\t\t\t\t{{ $t('table.actions.edit') }}\n\t\t\t\t</CButton>\n\t\t\t</td>\n\t\t</template>\n\t</CDataTable>\n</template>\n\n<script>\nimport {CButton, CDataTable, CIcon} from '@coreui/vue/src';\nimport {cilLink, cilLinkBroken, cilPencil, cilPlus, cilTrash} from '@coreui/icons';\nimport NetworkConnectionService from '../../services/NetworkConnectionService';\n\nexport default {\n\tname: 'EthernetConnections',\n\tcomponents: {\n\t\tCButton,\n\t\tCDataTable,\n\t\tCIcon,\n\t},\n\tprops: {\n\t\tinterfaceName: {\n\t\t\ttype: [String, null],\n\t\t\trequired: false,\n\t\t\tdefault: null,\n\t\t},\n\t\tconnections: {\n\t\t\ttype: [Array, null,],\n\t\t\trequired: true,\n\t\t}\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tfields: [\n\t\t\t\t{\n\t\t\t\t\tkey: 'name',\n\t\t\t\t\tlabel: this.$t('network.connection.name'),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkey: 'actions',\n\t\t\t\t\tlabel: this.$t('table.actions.title'),\n\t\t\t\t\tsorter: false,\n\t\t\t\t\tfilter: false,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t},\n\tmethods: {\n\t\tconnect(connection) {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tNetworkConnectionService.connect(connection.uuid, this.interfaceName)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\tthis.$t(\n\t\t\t\t\t\t\t'network.connection.messages.connect.success',\n\t\t\t\t\t\t\t{interface: this.interfaceName, connection: connection.name}\n\t\t\t\t\t\t).toString());\n\t\t\t\t\tthis.$emit('updateConnection');\n\t\t\t\t})\n\t\t\t\t.catch(() => this.$store.commit('spinner/HIDE'));\n\t\t},\n\t\tdisconnect(connection) {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tNetworkConnectionService.disconnect(connection.uuid)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\t\tthis.$toast.success(\n\t\t\t\t\t\tthis.$t(\n\t\t\t\t\t\t\t'network.connection.messages.disconnect.success',\n\t\t\t\t\t\t\t{interface: this.interfaceName, connection: connection.name}\n\t\t\t\t\t\t).toString());\n\t\t\t\t\tthis.$emit('updateConnection');\n\t\t\t\t})\n\t\t\t\t.catch(() => this.$store.commit('spinner/HIDE'));\n\t\t}\n\t},\n\ticons: {\n\t\tadd: cilPlus,\n\t\tconnect: cilLink,\n\t\tdelete: cilTrash,\n\t\tdisconnect: cilLinkBroken,\n\t\tedit: cilPencil,\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./EthernetConnections.vue?vue&type=template&id=df970668&\"\nimport script from \"./EthernetConnections.vue?vue&type=script&lang=js&\"\nexport * from \"./EthernetConnections.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('df970668')) {\n      api.createRecord('df970668', component.options)\n    } else {\n      api.reload('df970668', component.options)\n    }\n    module.hot.accept(\"./EthernetConnections.vue?vue&type=template&id=df970668&\", function () {\n      api.rerender('df970668', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/Network/EthernetConnections.vue\"\nexport default component.exports","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EthernetInterfaces.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./EthernetInterfaces.vue?vue&type=script&lang=js&\"","<template>\n\t<div>\n\t\t<CCard v-for='iface of interfaces' :key='iface.name'>\n\t\t\t<CCardHeader class='d-flex'>\n\t\t\t\t{{ iface.name }}\n\t\t\t\t<CBadge :color='getStatusBadgeColor(iface.state)' class='ml-auto'>\n\t\t\t\t\t{{ iface.state }}\n\t\t\t\t</CBadge>\n\t\t\t</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<EthernetConnections\n\t\t\t\t\t:connections='connections'\n\t\t\t\t\t:interface-name='iface.name'\n\t\t\t\t\t@updateConnection='getConnections'\n\t\t\t\t/>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t</div>\n</template>\n\n<script>\nimport {CBadge, CCard, CCardBody, CCardHeader} from '@coreui/vue/src';\nimport NetworkConnectionService, {ConnectionType} from '../../services/NetworkConnectionService';\nimport NetworkInterfaceService, {InterfaceState, InterfaceType} from '../../services/NetworkInterfaceService';\nimport EthernetConnections from '../../components/Network/EthernetConnections';\n\nexport default {\n\tname: 'EthernetInterfaces',\n\tcomponents: {\n\t\tEthernetConnections,\n\t\tCBadge,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tconnections: [],\n\t\t\tinterfaces: [],\n\t\t};\n\t},\n\tcreated() {\n\t\tNetworkInterfaceService.list(InterfaceType.ETHERNET)\n\t\t\t.then((response) => {\n\t\t\t\tthis.interfaces = response.data;\n\t\t\t});\n\t\tthis.getConnections();\n\t},\n\tmethods: {\n\t\tgetConnections() {\n\t\t\treturn NetworkConnectionService.list(ConnectionType.ETHERNET)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.connections = response.data;\n\t\t\t\t});\n\t\t},\n\t\tgetStatusBadgeColor(status) {\n\t\t\tswitch (status) {\n\t\t\t\tcase InterfaceState.CONNECTED:\n\t\t\t\t\treturn 'success';\n\t\t\t\tcase InterfaceState.FAILED:\n\t\t\t\t\treturn 'danger';\n\t\t\t\tdefault:\n\t\t\t\t\treturn 'warning';\n\t\t\t}\n\t\t},\n\t},\n\tmetaInfo: {\n\t\ttitle: 'network.ethernet.title',\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./EthernetInterfaces.vue?vue&type=template&id=3235ace5&\"\nimport script from \"./EthernetInterfaces.vue?vue&type=script&lang=js&\"\nexport * from \"./EthernetInterfaces.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('3235ace5')) {\n      api.createRecord('3235ace5', component.options)\n    } else {\n      api.reload('3235ace5', component.options)\n    }\n    module.hot.accept(\"./EthernetInterfaces.vue?vue&type=template&id=3235ace5&\", function () {\n      api.rerender('3235ace5', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/pages/Network/EthernetInterfaces.vue\"\nexport default component.exports","import Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport CloudDisambiguation from '../pages/Cloud/CloudDisambiguation.vue';\nimport AzureCreator from '../pages/Cloud/AzureCreator.vue';\nimport AwsCreator from '../pages/Cloud/AwsCreator.vue';\nimport HexioCreator from '../pages/Cloud/HexioCreator.vue';\nimport IbmCreator from '../pages/Cloud/IbmCreator.vue';\nimport InteliGlueCreator from '../pages/Cloud/InteliGlueCreator.vue';\nimport PixlaControl from '../pages/Cloud/PixlaControl.vue';\nimport GatewayDisambiguation from '../pages/Gateway/GatewayDisambiguation.vue';\nimport GatewayInfo from '../pages/Gateway/GatewayInfo.vue';\nimport DaemonLogViewer from '../pages/Gateway/DaemonLogViewer.vue';\nimport DaemonMode from '../pages/Gateway/DaemonMode.vue';\nimport PowerControl from '../pages/Gateway/PowerControl.vue';\nimport ServiceControl from '../pages/Gateway/ServiceControl.vue';\nimport SignIn from '../components/SignIn.vue';\nimport IqrfNetDisambiguation from '../pages/IqrfNet/IqrfNetDisambiguation.vue';\nimport DeviceEnumeration from '../pages/IqrfNet/DeviceEnumeration.vue';\nimport NetworkManager from '../pages/IqrfNet/NetworkManager.vue';\nimport SendJsonRequest from '../pages/IqrfNet/SendJsonRequest.vue';\nimport SendDpaPacket from '../pages/IqrfNet/SendDpaPacket.vue';\nimport StandardManager from '../pages/IqrfNet/StandardManager.vue';\nimport ConfigDisambiguation from '../pages/Config/ConfigDisambiguation.vue';\nimport ConfigMigration from '../pages/Config/ConfigMigration.vue';\nimport TranslatorConfig from '../pages/Config/TranslatorConfig.vue';\nimport ControllerConfig from '../pages/Config/ControllerConfig.vue';\nimport MenderConfig from '../pages/Config/MenderConfig.vue';\nimport IqrfInfo from '../pages/Config/IqrfInfo.vue';\nimport IqrfRepository from '../pages/Config/IqrfRepository.vue';\nimport IqrfCdc from '../pages/Config/IqrfCdc.vue';\nimport IqrfDpa from '../pages/Config/IqrfDpa.vue';\nimport IqrfSpi from '../pages/Config/IqrfSpi.vue';\nimport IqrfUart from '../pages/Config/IqrfUart.vue';\nimport JsonMngMetaDataApi from '../pages/Config/JsonMngMetaDataApi.vue';\nimport JsonRawApi from '../pages/Config/JsonRawApi.vue';\nimport JsonSplitter from '../pages/Config/JsonSplitter.vue';\nimport MonitorForm from '../pages/Config/MonitorForm.vue';\nimport MonitorList from '../pages/Config/MonitorList.vue';\nimport MqMessagingForm from '../pages/Config/MqMessagingForm.vue';\nimport MqMessagingTable from '../pages/Config/MqMessagingTable.vue';\nimport MqttMessagingForm from '../pages/Config/MqttMessagingForm.vue';\nimport MqttMessagingTable from '../pages/Config/MqttMessagingTable.vue';\nimport UdpMessagingForm from '../pages/Config/UdpMessagingForm.vue';\nimport UdpMessagingTable from '../pages/Config/UdpMessagingTable.vue';\nimport TracerList from '../pages/Config/TracerList.vue';\nimport TracerForm from '../pages/Config/TracerForm.vue';\nimport MainConfiguration from '../pages/Config/MainConfiguration.vue';\nimport ComponentList from '../pages/Config/ComponentList.vue';\nimport ComponentForm from '../pages/Config/ComponentForm.vue';\nimport IqmeshServices from '../pages/Config/IqmeshServices.vue';\nimport WebsocketInterfaceForm from '../pages/Config/WebsocketInterfaceForm.vue';\nimport WebsocketMessagingForm from '../pages/Config/WebsocketMessagingForm.vue';\nimport WebsocketServiceForm from '../pages/Config/WebsocketServiceForm.vue';\nimport WebsocketList from '../pages/Config/WebsocketList.vue';\nimport SchedulerList from '../pages/Config/SchedulerList.vue';\nimport SchedulerForm from '../pages/Config/SchedulerForm.vue';\nimport UserAdd from '../pages/Core/UserAdd.vue';\nimport UserEdit from '../pages/Core/UserEdit.vue';\nimport UserList from '../pages/Core/UserList.vue';\nimport NetworkDisambiguation from '../pages/Network/NetworkDisambiguation.vue';\nimport ConnectionForm from '../pages/Network/ConnectionForm.vue';\nimport EthernetInterfaces from '../pages/Network/EthernetInterfaces.vue';\nimport i18n from '../i18n';\nimport store from '../store';\nVue.use(VueRouter);\nvar routes = [\n    {\n        component: SignIn,\n        name: 'signIn',\n        path: '/sign/in',\n    },\n    {\n        path: '/',\n        component: {\n            render: function (c) {\n                return c('router-view');\n            }\n        },\n        children: [\n            {\n                path: '/cloud',\n                component: {\n                    render: function (c) {\n                        return c('router-view');\n                    }\n                },\n                children: [\n                    {\n                        component: CloudDisambiguation,\n                        path: '',\n                        meta: { title: 'cloud.title' }\n                    },\n                    {\n                        component: AzureCreator,\n                        path: 'azure',\n                        meta: { title: 'cloud.msAzure.form.title' }\n                    },\n                    {\n                        component: AwsCreator,\n                        path: 'aws',\n                        meta: { title: 'cloud.amazonAws.form.title' }\n                    },\n                    {\n                        component: HexioCreator,\n                        path: 'hexio',\n                        meta: { title: 'cloud.hexio.form.title' }\n                    },\n                    {\n                        component: IbmCreator,\n                        path: 'ibm-cloud',\n                        meta: { title: 'cloud.ibmCloud.form.title' }\n                    },\n                    {\n                        component: InteliGlueCreator,\n                        path: 'inteli-glue',\n                        meta: { title: 'cloud.intelimentsInteliGlue.form.title' },\n                    },\n                    {\n                        component: PixlaControl,\n                        path: 'pixla',\n                        meta: { title: 'cloud.pixla.title' },\n                    },\n                ]\n            },\n            {\n                path: '/config',\n                component: {\n                    render: function (c) {\n                        return c('router-view');\n                    }\n                },\n                children: [\n                    {\n                        component: ConfigDisambiguation,\n                        path: '',\n                        meta: { title: 'config.title' }\n                    },\n                    {\n                        component: MainConfiguration,\n                        path: 'main',\n                        meta: { title: 'config.main.title' }\n                    },\n                    {\n                        path: 'component',\n                        component: {\n                            render: function (c) {\n                                return c('router-view');\n                            }\n                        },\n                        children: [\n                            {\n                                path: '',\n                                component: ComponentList,\n                                meta: { title: 'config.components.title' }\n                            },\n                            {\n                                component: ComponentForm,\n                                path: 'add',\n                                meta: { title: 'config.components.add' }\n                            },\n                            {\n                                component: ComponentForm,\n                                path: 'edit/:component',\n                                props: true,\n                                meta: { title: 'config.components.edit' }\n                            },\n                        ],\n                    },\n                    {\n                        component: IqrfCdc,\n                        path: 'iqrf-cdc',\n                        meta: { title: 'config.iqrfCdc.title' }\n                    },\n                    {\n                        component: IqrfDpa,\n                        path: 'iqrf-dpa',\n                        meta: { title: 'config.iqrfDpa.title' }\n                    },\n                    {\n                        component: IqrfInfo,\n                        path: 'iqrf-info',\n                        meta: { title: 'config.iqrfInfo.title' }\n                    },\n                    {\n                        component: IqmeshServices,\n                        path: 'iqmesh',\n                        meta: { title: 'config.iqmesh.title' }\n                    },\n                    {\n                        component: IqrfRepository,\n                        path: 'iqrf-repository',\n                        meta: { title: 'config.iqrfRepository.title' }\n                    },\n                    {\n                        component: IqrfSpi,\n                        path: 'iqrf-spi',\n                        meta: { title: 'config.iqrfSpi.title' }\n                    },\n                    {\n                        component: IqrfUart,\n                        path: 'iqrf-uart',\n                        meta: { title: 'config.iqrfUart.title' }\n                    },\n                    {\n                        component: JsonRawApi,\n                        path: 'json-raw-api',\n                        meta: { title: 'config.jsonRawApi.title' }\n                    },\n                    {\n                        component: JsonMngMetaDataApi,\n                        path: 'json-mng-meta-data-api',\n                        meta: { title: 'config.jsonMngMetaDataApi.title' }\n                    },\n                    {\n                        component: JsonSplitter,\n                        path: 'json-splitter',\n                        meta: { title: 'config.jsonSplitter.title' }\n                    },\n                    {\n                        path: 'monitor',\n                        component: {\n                            render: function (c) {\n                                return c('router-view');\n                            }\n                        },\n                        children: [\n                            {\n                                path: '',\n                                component: MonitorList,\n                                meta: { title: 'config.monitor.title' }\n                            },\n                            {\n                                component: MonitorForm,\n                                path: 'add',\n                                meta: { title: 'config.monitor.add' }\n                            },\n                            {\n                                component: MonitorForm,\n                                path: 'edit/:instance',\n                                props: true,\n                                meta: { title: 'config.monitor.edit' }\n                            },\n                        ],\n                    },\n                    {\n                        path: 'scheduler',\n                        component: {\n                            render: function (c) {\n                                return c('router-view');\n                            }\n                        },\n                        children: [\n                            {\n                                path: '',\n                                component: SchedulerList,\n                                meta: { title: 'config.scheduler.title' }\n                            },\n                            {\n                                path: 'add',\n                                component: SchedulerForm,\n                                meta: { title: 'config.scheduler.add' }\n                            },\n                            {\n                                path: 'edit/:id',\n                                component: SchedulerForm,\n                                props: function (route) {\n                                    var id = Number.parseInt(route.params.id, 10);\n                                    if (Number.isNaN(id)) {\n                                        return 0;\n                                    }\n                                    return { id: id };\n                                },\n                                meta: { title: 'config.scheduler.edit' }\n                            }\n                        ]\n                    },\n                    {\n                        path: 'mq',\n                        component: {\n                            render: function (c) {\n                                return c('router-view');\n                            }\n                        },\n                        children: [\n                            {\n                                path: '',\n                                component: MqMessagingTable,\n                                meta: { title: 'config.mq.title' }\n                            },\n                            {\n                                component: MqMessagingForm,\n                                path: 'add',\n                                meta: { title: 'config.mq.add' }\n                            },\n                            {\n                                component: MqMessagingForm,\n                                path: 'edit/:instance',\n                                props: true,\n                                meta: { title: 'config.mq.edit' }\n                            },\n                        ],\n                    },\n                    {\n                        path: 'mqtt',\n                        component: {\n                            render: function (c) {\n                                return c('router-view');\n                            }\n                        },\n                        children: [\n                            {\n                                path: '',\n                                component: MqttMessagingTable,\n                                meta: { title: 'config.mqtt.title' }\n                            },\n                            {\n                                component: MqttMessagingForm,\n                                path: 'add',\n                                meta: { title: 'config.mqtt.add' }\n                            },\n                            {\n                                component: MqttMessagingForm,\n                                path: 'edit/:instance',\n                                props: true,\n                                meta: { title: 'config.mqtt.edit' }\n                            },\n                        ],\n                    },\n                    {\n                        path: 'udp',\n                        component: {\n                            render: function (c) {\n                                return c('router-view');\n                            }\n                        },\n                        children: [\n                            {\n                                path: '',\n                                component: UdpMessagingTable,\n                                meta: { title: 'config.udp.title' }\n                            },\n                            {\n                                component: UdpMessagingForm,\n                                path: 'add',\n                                meta: { title: 'config.udp.add' }\n                            },\n                            {\n                                component: UdpMessagingForm,\n                                path: 'edit/:instance',\n                                props: true,\n                                meta: { title: 'config.udp.edit' }\n                            },\n                        ],\n                    },\n                    {\n                        path: 'websocket',\n                        component: {\n                            render: function (c) {\n                                return c('router-view');\n                            }\n                        },\n                        children: [\n                            {\n                                path: '',\n                                component: WebsocketList,\n                                meta: { title: 'config.websocket.title' }\n                            },\n                            {\n                                component: WebsocketInterfaceForm,\n                                path: 'add',\n                                meta: { title: 'config.websocket.interface.add' }\n                            },\n                            {\n                                component: WebsocketMessagingForm,\n                                path: 'add-messaging',\n                                meta: { title: 'config.websocket.messaging.add' }\n                            },\n                            {\n                                component: WebsocketServiceForm,\n                                path: 'add-service',\n                                meta: { title: 'config.websocket.service.add' }\n                            },\n                            {\n                                component: WebsocketInterfaceForm,\n                                path: 'edit/:instance',\n                                props: true,\n                                meta: { title: 'config.websocket.interface.edit' }\n                            },\n                            {\n                                component: WebsocketMessagingForm,\n                                path: 'edit-messaging/:instance',\n                                props: true,\n                                meta: { title: 'config.websocket.service.edit' }\n                            },\n                            {\n                                component: WebsocketServiceForm,\n                                path: 'edit-service/:instance',\n                                props: true,\n                                meta: { title: 'config.websocket.service.edit' }\n                            },\n                        ],\n                    },\n                    {\n                        path: 'tracer',\n                        component: {\n                            render: function (c) {\n                                return c('router-view');\n                            },\n                        },\n                        children: [\n                            {\n                                path: '',\n                                component: TracerList,\n                                meta: { title: 'config.tracer.title' }\n                            },\n                            {\n                                component: TracerForm,\n                                path: 'add',\n                                meta: { title: 'config.tracer.add' }\n                            },\n                            {\n                                component: TracerForm,\n                                path: 'edit/:instance',\n                                props: true,\n                                meta: { title: 'config.tracer.edit' }\n                            },\n                        ],\n                    },\n                    {\n                        component: ConfigMigration,\n                        path: 'migration',\n                        meta: { title: 'config.migration.title' }\n                    },\n                    {\n                        component: MenderConfig,\n                        path: 'mender',\n                        meta: { title: 'config.mender.description' }\n                    },\n                    {\n                        component: TranslatorConfig,\n                        path: 'translator',\n                        meta: { title: 'translatorConfig.description' }\n                    },\n                    {\n                        component: ControllerConfig,\n                        path: 'controller',\n                        meta: { title: 'controllerConfig.description' }\n                    },\n                ]\n            },\n            {\n                path: '/gateway',\n                component: {\n                    render: function (c) {\n                        return c('router-view');\n                    }\n                },\n                children: [\n                    {\n                        component: GatewayDisambiguation,\n                        path: '',\n                        meta: { title: 'gateway.title' }\n                    },\n                    {\n                        component: GatewayInfo,\n                        path: 'info',\n                        meta: { title: 'gateway.info.title' },\n                    },\n                    {\n                        component: DaemonLogViewer,\n                        path: 'log',\n                        meta: { title: 'gateway.log.title' },\n                    },\n                    {\n                        component: DaemonMode,\n                        path: 'change-mode',\n                        meta: { title: 'gateway.mode.title' },\n                    },\n                    {\n                        component: PowerControl,\n                        path: 'power',\n                        meta: { title: 'gateway.power.title' },\n                    },\n                ]\n            },\n            {\n                component: ServiceControl,\n                name: 'serviceControl',\n                path: '/service/:serviceName',\n                props: true,\n                meta: { title: 'service.%serviceName%.title' },\n            },\n            {\n                path: '/iqrfnet',\n                component: {\n                    render: function (c) {\n                        return c('router-view');\n                    }\n                },\n                children: [\n                    {\n                        component: IqrfNetDisambiguation,\n                        path: '',\n                        meta: { title: 'iqrfnet.title' }\n                    },\n                    {\n                        component: DeviceEnumeration,\n                        path: 'enumeration/:address',\n                        props: function (route) {\n                            var address = Number.parseInt(route.params.address, 10);\n                            if (Number.isNaN(address)) {\n                                return 0;\n                            }\n                            return { address: address };\n                        },\n                        meta: { title: 'iqrfnet.enumeration.title' },\n                    },\n                    {\n                        component: NetworkManager,\n                        path: 'network',\n                        meta: { title: 'iqrfnet.networkManager.title' }\n                    },\n                    {\n                        component: StandardManager,\n                        path: 'standard',\n                        meta: { title: 'iqrfnet.standard.title' }\n                    },\n                    {\n                        component: SendDpaPacket,\n                        path: 'send-raw',\n                        meta: { title: 'iqrfnet.sendPacket.title' },\n                    },\n                    {\n                        component: SendJsonRequest,\n                        path: 'send-json',\n                        meta: { title: 'iqrfnet.sendJson.title' }\n                    },\n                ]\n            },\n            {\n                path: '/network',\n                component: {\n                    render: function (c) {\n                        return c('router-view');\n                    }\n                },\n                children: [\n                    {\n                        component: NetworkDisambiguation,\n                        path: '',\n                        meta: { title: 'network.title' }\n                    },\n                    {\n                        component: EthernetInterfaces,\n                        path: 'ethernet',\n                        meta: { title: 'network.ethernet.title' }\n                    },\n                    {\n                        component: ConnectionForm,\n                        path: 'edit/:uuid',\n                        props: true,\n                        meta: { title: 'network.ethernet.edit' }\n                    },\n                ]\n            },\n            {\n                path: '/user',\n                component: {\n                    render: function (c) {\n                        return c('router-view');\n                    }\n                },\n                meta: { title: 'core.user.title' },\n                children: [\n                    {\n                        component: UserList,\n                        path: '',\n                        meta: { title: 'core.user.title' },\n                    },\n                    {\n                        component: UserAdd,\n                        path: 'add',\n                        meta: { title: 'core.user.add.title' },\n                    },\n                    {\n                        component: UserEdit,\n                        path: 'edit/:userId',\n                        props: function (route) {\n                            var userId = Number.parseInt(route.params.userId, 10);\n                            if (Number.isNaN(userId)) {\n                                return 0;\n                            }\n                            return { userId: userId };\n                        },\n                        meta: { title: 'core.user.edit.title' },\n                    },\n                ]\n            },\n            {\n                path: '*',\n                name: 'legacyComponent',\n                component: {\n                    // @ts-ignore\n                    metaInfo: { titleTemplate: null },\n                },\n            },\n        ],\n    },\n];\nvar router = new VueRouter({\n    mode: 'history',\n    routes: routes\n});\nfunction metaTranslate(route, type) {\n    var text = '';\n    if (route.meta[type]) {\n        var parts = route.meta[type].split('%');\n        if (parts.length === 1) {\n            text = i18n.t(route.meta[type]).toString();\n        }\n        else {\n            text = i18n.t(parts[0] + route.params[parts[1]] + parts[2]).toString();\n        }\n    }\n    return text;\n}\nrouter.beforeEach(function (to, from, next) {\n    if (!to.path.startsWith('/install/') && to.name !== 'signIn' &&\n        !store.getters['user/isLoggedIn']) {\n        store.dispatch('user/signOut').then(function () {\n            next('/sign/in');\n        });\n        return;\n    }\n    if (to.name === 'legacyComponent') {\n        if (from.name !== null) {\n            location.replace(to.fullPath);\n        }\n        else {\n            next();\n        }\n        return;\n    }\n    var titleEl = document.getElementById('title');\n    if (titleEl !== null && to.meta.title !== undefined) {\n        titleEl.innerText = metaTranslate(to, 'title');\n    }\n    var content = document.getElementById('content');\n    if (content !== null) {\n        content.remove();\n    }\n    var flashes = document.getElementById('snippet--flashes');\n    if (flashes !== null && from.name !== null) {\n        flashes.remove();\n    }\n    next();\n});\nexport default router;\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\")\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t\n</template>\n\n<script>\nexport default {\n\tname: 'App'\n};\n</script>\n\n<style scoped>\n\n</style>\n","import mod from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=6a6fa670&scoped=true&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"6a6fa670\",\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6a6fa670')) {\n      api.createRecord('6a6fa670', component.options)\n    } else {\n      api.reload('6a6fa670', component.options)\n    }\n    module.hot.accept(\"./App.vue?vue&type=template&id=6a6fa670&scoped=true&\", function () {\n      api.rerender('6a6fa670', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/App.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"c-app\" },\n    [\n      _c(\"LoadingSpinner\"),\n      _vm._v(\" \"),\n      _c(\"TheSidebar\"),\n      _vm._v(\" \"),\n      _c(\n        \"CWrapper\",\n        [\n          _c(\"TheHeader\"),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"c-body\" }, [\n            _c(\n              \"main\",\n              { staticClass: \"c-main\" },\n              [\n                _c(\"CContainer\", { attrs: { fluid: \"\" } }, [\n                  _c(\"div\", { staticClass: \"fade-in\" }, [_vm._t(\"default\")], 2)\n                ])\n              ],\n              1\n            )\n          ])\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.enabled\n    ? _c(\"div\", { staticClass: \"loading\" }, [\n        _c(\"div\", { staticClass: \"loading-group\" }, [\n          _c(\"div\", { staticClass: \"spinner\" }),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"loading-text\" }, [\n            _vm._v(\"\\n\\t\\t\\t\" + _vm._s(_vm.text) + \"\\n\\t\\t\")\n          ])\n        ])\n      ])\n    : _vm._e()\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<div v-if='enabled' class='loading'>\n\t\t<div class='loading-group'>\n\t\t\t<div class='spinner' />\n\t\t\t<div class='loading-text'>\n\t\t\t\t{{ text }}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\n\nexport default {\n\tname: 'LoadingSpinner',\n\tcomputed: {\n\t\t...mapGetters({\n\t\t\tenabled: 'spinner/isEnabled',\n\t\t\ttext: 'spinner/text',\n\t\t}),\n\t},\n};\n</script>\n\n<style scoped lang='scss'>\n.loading {\n\tposition: fixed;\n\twidth: 100%;\n\theight: 100%;\n\tbackground-color: rgba(0, 0, 0, 0.75);\n\tz-index: 9999;\n\tcursor: wait;\n\toverflow: auto;\n\ttext-align: center;\n\t&:before {\n\t\tcontent: '';\n\t\tdisplay: inline flow-root;\n\t\theight: 100%;\n\t\tvertical-align: middle;\n\t}\n}\n\n.loading-group {\n\tdisplay: inline flow-root;\n\tvertical-align: middle;\n}\n\n.loading-text {\n\tfont-size: 20pt;\n\tposition: relative;\n\tz-index: 10000;\n\tcolor: white;\n\ttext-align: center;\n\twhite-space: pre-wrap;\n}\n\n.spinner {\n\tdisplay: block;\n\tposition: relative;\n\tz-index: 10000;\n\twidth: 150px;\n\theight: 150px;\n\tmargin: auto;\n\tborder: 16px solid #f3f3f3;\n\tborder-radius: 50%;\n\tborder-top: 16px solid #3498db;\n\tanimation: spin 2s linear infinite;\n}\n\n@keyframes spin {\n\t0% {\n\t\ttransform: rotate(0deg);\n\t}\n\t100% {\n\t\ttransform: rotate(360deg);\n\t}\n}\n</style>\n","import mod from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LoadingSpinner.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LoadingSpinner.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./LoadingSpinner.vue?vue&type=template&id=e0752284&scoped=true&\"\nimport script from \"./LoadingSpinner.vue?vue&type=script&lang=js&\"\nexport * from \"./LoadingSpinner.vue?vue&type=script&lang=js&\"\nimport style0 from \"./LoadingSpinner.vue?vue&type=style&index=0&id=e0752284&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"e0752284\",\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('e0752284')) {\n      api.createRecord('e0752284', component.options)\n    } else {\n      api.reload('e0752284', component.options)\n    }\n    module.hot.accept(\"./LoadingSpinner.vue?vue&type=template&id=e0752284&scoped=true&\", function () {\n      api.rerender('e0752284', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/LoadingSpinner.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CHeader\",\n    { attrs: { fixed: false, \"color-scheme\": \"dark\" } },\n    [\n      _c(\"CToggler\", {\n        staticClass: \"ml-3 d-lg-none\",\n        attrs: { \"in-header\": \"\" },\n        on: {\n          click: function($event) {\n            return _vm.$store.commit(\"sidebar/toggleSidebarMobile\")\n          }\n        }\n      }),\n      _vm._v(\" \"),\n      _c(\"CToggler\", {\n        staticClass: \"ml-3 d-md-down-none\",\n        attrs: { \"in-header\": \"\" },\n        on: {\n          click: function($event) {\n            return _vm.$store.commit(\"sidebar/toggleSidebarDesktop\")\n          }\n        }\n      }),\n      _vm._v(\" \"),\n      _c(\n        \"CHeaderBrand\",\n        { staticClass: \"mx-auto d-lg-none\", attrs: { to: \"/\" } },\n        [\n          _c(\"img\", {\n            attrs: { src: \"/img/logo-big.svg\", alt: _vm.$t(\"core.title\") }\n          })\n        ]\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"CHeaderNav\",\n        { staticClass: \"ml-auto mr-3\" },\n        [\n          _vm.$store.getters[\"user/isLoggedIn\"]\n            ? _c(\n                \"CDropdown\",\n                {\n                  staticClass: \"c-header-nav-items\",\n                  attrs: {\n                    \"in-nav\": true,\n                    placement: \"bottom-end\",\n                    \"add-menu-classes\": \"pt-0\"\n                  },\n                  scopedSlots: _vm._u(\n                    [\n                      {\n                        key: \"toggler\",\n                        fn: function() {\n                          return [\n                            _c(\n                              \"CHeaderNavLink\",\n                              { staticClass: \"dropdown-toggle\" },\n                              [\n                                _vm._v(\n                                  \"\\n\\t\\t\\t\\t\\t\" +\n                                    _vm._s(_vm.$store.getters[\"user/getName\"]) +\n                                    \"\\n\\t\\t\\t\\t\"\n                                )\n                              ]\n                            )\n                          ]\n                        },\n                        proxy: true\n                      }\n                    ],\n                    null,\n                    false,\n                    2615873522\n                  )\n                },\n                [\n                  _vm._v(\" \"),\n                  _c(\n                    \"CDropdownItem\",\n                    { on: { click: _vm.signOut } },\n                    [\n                      _c(\"CIcon\", {\n                        attrs: { content: _vm.$options.icons.cilLockLocked }\n                      }),\n                      _vm._v(\n                        \"\\n\\t\\t\\t\\t\" +\n                          _vm._s(_vm.$t(\"core.sign.out.title\")) +\n                          \"\\n\\t\\t\\t\"\n                      )\n                    ],\n                    1\n                  )\n                ],\n                1\n              )\n            : _vm._e()\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TheHeader.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TheHeader.vue?vue&type=script&lang=js&\"","<template>\n\t<CHeader :fixed='false' color-scheme='dark'>\n\t\t<CToggler\n\t\t\tin-header\n\t\t\tclass='ml-3 d-lg-none'\n\t\t\t@click='$store.commit(\"sidebar/toggleSidebarMobile\")'\n\t\t/>\n\t\t<CToggler\n\t\t\tin-header\n\t\t\tclass='ml-3 d-md-down-none'\n\t\t\t@click='$store.commit(\"sidebar/toggleSidebarDesktop\")'\n\t\t/>\n\t\t<CHeaderBrand class='mx-auto d-lg-none' to='/'>\n\t\t\t<img\n\t\t\t\tsrc='/img/logo-big.svg'\n\t\t\t\t:alt='$t(\"core.title\")'\n\t\t\t>\n\t\t</CHeaderBrand>\n\t\t<CHeaderNav class='ml-auto mr-3'>\n\t\t\t<CDropdown\n\t\t\t\tv-if='$store.getters[\"user/isLoggedIn\"]'\n\t\t\t\t:in-nav='true'\n\t\t\t\tclass='c-header-nav-items'\n\t\t\t\tplacement='bottom-end'\n\t\t\t\tadd-menu-classes='pt-0'\n\t\t\t>\n\t\t\t\t<template #toggler>\n\t\t\t\t\t<CHeaderNavLink class='dropdown-toggle'>\n\t\t\t\t\t\t{{ $store.getters['user/getName'] }}\n\t\t\t\t\t</CHeaderNavLink>\n\t\t\t\t</template>\n\t\t\t\t<CDropdownItem @click='signOut'>\n\t\t\t\t\t<CIcon :content='$options.icons.cilLockLocked' />\n\t\t\t\t\t{{ $t('core.sign.out.title') }}\n\t\t\t\t</CDropdownItem>\n\t\t\t</CDropdown>\n\t\t</CHeaderNav>\n\t</CHeader>\n</template>\n\n<script>\nimport {\n\tCDropdown,\n\tCHeader,\n\tCHeaderBrand,\n\tCHeaderNav,\n\tCHeaderNavLink,\n\tCIcon,\n\tCToggler\n} from '@coreui/vue/src';\n\nimport {cilLockLocked} from '@coreui/icons';\n\nexport default {\n\tname: 'TheHeader',\n\tcomponents: {\n\t\tCDropdown,\n\t\tCHeader,\n\t\tCHeaderBrand,\n\t\tCHeaderNav,\n\t\tCHeaderNavLink,\n\t\tCIcon,\n\t\tCToggler,\n\t},\n\ticons: {\n\t\tcilLockLocked,\n\t},\n\tmethods: {\n\t\tsignOut() {\n\t\t\tthis.$store.dispatch('user/signOut')\n\t\t\t\t.then(() => {\n\t\t\t\t\tlocation.replace('/sign/in');\n\t\t\t\t\tthis.$toast.success(this.$t('core.sign.out.message').toString());\n\t\t\t\t});\n\t\t}\n\t}\n};\n</script>\n","import { render, staticRenderFns } from \"./TheHeader.vue?vue&type=template&id=71d0b6ed&\"\nimport script from \"./TheHeader.vue?vue&type=script&lang=js&\"\nexport * from \"./TheHeader.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('71d0b6ed')) {\n      api.createRecord('71d0b6ed', component.options)\n    } else {\n      api.reload('71d0b6ed', component.options)\n    }\n    module.hot.accept(\"./TheHeader.vue?vue&type=template&id=71d0b6ed&\", function () {\n      api.rerender('71d0b6ed', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/TheHeader.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CSidebar\",\n    {\n      attrs: { fixed: \"\", minimize: _vm.minimize, show: _vm.show },\n      on: {\n        \"update:show\": function(value) {\n          return _vm.$store.commit(\"sidebar/set\", [\"show\", value])\n        }\n      }\n    },\n    [\n      _c(\n        \"CSidebarBrand\",\n        { staticClass: \"d-md-down-none\", attrs: { to: \"/\" } },\n        [\n          _c(\"img\", {\n            staticClass: \"c-sidebar-brand-full\",\n            attrs: { src: \"/img/logo-big.svg\", alt: _vm.$t(\"core.title\") }\n          }),\n          _vm._v(\" \"),\n          _c(\"img\", {\n            staticClass: \"c-sidebar-brand-minimized\",\n            attrs: { src: \"/img/logo-small.svg\", alt: _vm.$t(\"core.title\") }\n          })\n        ]\n      ),\n      _vm._v(\" \"),\n      _c(\"CRenderFunction\", {\n        attrs: { flat: \"\", \"content-to-render\": _vm.getNav }\n      }),\n      _vm._v(\" \"),\n      _c(\"CSidebarMinimizer\", {\n        staticClass: \"d-md-down-none\",\n        nativeOn: {\n          click: function($event) {\n            return _vm.$store.commit(\"sidebar/set\", [\"minimize\", !_vm.minimize])\n          }\n        }\n      })\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import mod from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TheSidebar.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TheSidebar.vue?vue&type=script&lang=js&\"","<template>\n\t<CSidebar\n\t\tfixed\n\t\t:minimize='minimize'\n\t\t:show='show'\n\t\t@update:show='(value) => $store.commit(\"sidebar/set\", [\"show\", value])'\n\t>\n\t\t<CSidebarBrand class='d-md-down-none' to='/'>\n\t\t\t<img class='c-sidebar-brand-full' src='/img/logo-big.svg' :alt='$t(\"core.title\")'>\n\t\t\t<img class='c-sidebar-brand-minimized' src='/img/logo-small.svg' :alt='$t(\"core.title\")'>\n\t\t</CSidebarBrand>\n\t\t<CRenderFunction flat :content-to-render='getNav' />\n\t\t<CSidebarMinimizer\n\t\t\tclass='d-md-down-none'\n\t\t\t@click.native='$store.commit(\"sidebar/set\", [\"minimize\", !minimize])'\n\t\t/>\n\t</CSidebar>\n</template>\n\n<script>\nimport {\n\tCRenderFunction,\n\tCSidebar,\n\tCSidebarBrand,\n\tCSidebarMinimizer,\n} from '@coreui/vue/src';\nimport {\n\tcibGrafana,\n\tcibNodeRed,\n\tcilBook,\n\tcilCloud,\n\tcilLan,\n\tcilStorage,\n\tcilSettings,\n\tcilToggleOff,\n\tcilUser,\n\tcilWifiSignal4,\n} from '@coreui/icons';\n\nexport default {\n\tname: 'TheSidebar',\n\tcomponents: {\n\t\tCRenderFunction,\n\t\tCSidebar,\n\t\tCSidebarBrand,\n\t\tCSidebarMinimizer,\n\t},\n\tcomputed: {\n\t\tshow() {\n\t\t\treturn this.$store.state.sidebar.show;\n\t\t},\n\t\tminimize() {\n\t\t\treturn this.$store.state.sidebar.minimize;\n\t\t},\n\t\tgetNav() {\n\t\t\tconst data = [\n\t\t\t\t{\n\t\t\t\t\t_name: 'CSidebarNav',\n\t\t\t\t\t_children: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavDropdown',\n\t\t\t\t\t\t\tname: this.$t('gateway.title'),\n\t\t\t\t\t\t\tto: '/gateway/',\n\t\t\t\t\t\t\troute: '/gateway/',\n\t\t\t\t\t\t\ticon: {content: cilStorage},\n\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('gateway.info.title'),\n\t\t\t\t\t\t\t\t\tto: '/gateway/info/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('gateway.log.title'),\n\t\t\t\t\t\t\t\t\tto: '/gateway/log/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('gateway.mode.title'),\n\t\t\t\t\t\t\t\t\tto: '/gateway/change-mode/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('service.iqrf-gateway-daemon.title'),\n\t\t\t\t\t\t\t\t\tto: '/service/iqrf-gateway-daemon/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('service.ssh.title'),\n\t\t\t\t\t\t\t\t\tto: '/service/ssh/',\n\t\t\t\t\t\t\t\t\tfeature: 'ssh',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('service.unattended-upgrades.title'),\n\t\t\t\t\t\t\t\t\tto: '/service/unattended-upgrades/',\n\t\t\t\t\t\t\t\t\tfeature: 'unattendedUpgrades',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('gateway.updater.title'),\n\t\t\t\t\t\t\t\t\tto: '/gateway/updater/',\n\t\t\t\t\t\t\t\t\tfeature: 'updater',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('gateway.power.title'),\n\t\t\t\t\t\t\t\t\tto: '/gateway/power/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavDropdown',\n\t\t\t\t\t\t\tname: this.$t('config.title'),\n\t\t\t\t\t\t\tto: '/config/',\n\t\t\t\t\t\t\troute: '/config/',\n\t\t\t\t\t\t\ticon: {content: cilSettings},\n\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.main.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/main/',\n\t\t\t\t\t\t\t\t\troles: ['power'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.components.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/component/',\n\t\t\t\t\t\t\t\t\troles: ['power'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.selectedComponents.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/component/',\n\t\t\t\t\t\t\t\t\troles: ['normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.iqrfSpi.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/iqrf-spi/',\n\t\t\t\t\t\t\t\t\tcomponent: 'iqrf::IqrfSpi',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.iqrfCdc.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/iqrf-cdc/',\n\t\t\t\t\t\t\t\t\tcomponent: 'iqrf::IqrfCdc',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.iqrfUart.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/iqrf-uart/',\n\t\t\t\t\t\t\t\t\tcomponent: 'iqrf::IqrfUart',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.iqrfDpa.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/iqrf-dpa/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.iqrfRepository.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/iqrf-repository/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.iqrfInfo.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/iqrf-info/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.iqmesh.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/iqmesh/',\n\t\t\t\t\t\t\t\t\troles: ['power'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.mqtt.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/mqtt/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.websocket.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/websocket/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.mq.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/mq/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.udp.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/udp/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.jsonRawApi.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/json-raw-api/',\n\t\t\t\t\t\t\t\t\troles: ['power'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.jsonMngMetaDataApi.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/json-mng-meta-data-api/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.jsonSplitter.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/json-splitter/',\n\t\t\t\t\t\t\t\t\troles: ['power'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.scheduler.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/scheduler/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.tracer.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/tracer/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.monitor.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/monitor/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.migration.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/migration/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('translatorConfig.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/translator/',\n\t\t\t\t\t\t\t\t\tfeature: 'iqrfGatewayTranslator',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('controllerConfig.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/controller/',\n\t\t\t\t\t\t\t\t\tfeature: 'iqrfGatewayController',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('config.mender.title'),\n\t\t\t\t\t\t\t\t\tto: '/config/mender/',\n\t\t\t\t\t\t\t\t\tfeature: 'mender',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal']\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavDropdown',\n\t\t\t\t\t\t\tname: this.$t('iqrfnet.title'),\n\t\t\t\t\t\t\tto: '/iqrfnet/',\n\t\t\t\t\t\t\troute: '/iqrfnet/',\n\t\t\t\t\t\t\ticon: {content: cilWifiSignal4},\n\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('iqrfnet.sendPacket.title'),\n\t\t\t\t\t\t\t\t\tto: '/iqrfnet/send-raw/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('iqrfnet.sendJson.title'),\n\t\t\t\t\t\t\t\t\tto: '/iqrfnet/send-json/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('iqrfnet.trUpload.title'),\n\t\t\t\t\t\t\t\t\tto: '/iqrfnet/tr-upload/',\n\t\t\t\t\t\t\t\t\tfeature: 'trUpload',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('iqrfnet.trConfiguration.title'),\n\t\t\t\t\t\t\t\t\tto: '/iqrfnet/tr-config/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('iqrfnet.networkManager.title'),\n\t\t\t\t\t\t\t\t\tto: '/iqrfnet/network/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('iqrfnet.standard.title'),\n\t\t\t\t\t\t\t\t\tto: '/iqrfnet/standard/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavDropdown',\n\t\t\t\t\t\t\tname: this.$t('network.title'),\n\t\t\t\t\t\t\tto: '/network/',\n\t\t\t\t\t\t\troute: '/network/',\n\t\t\t\t\t\t\tfeature: 'networkManager',\n\t\t\t\t\t\t\ticon: {content: cilLan},\n\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('network.ethernet.title'),\n\t\t\t\t\t\t\t\t\tto: '/network/ethernet',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavDropdown',\n\t\t\t\t\t\t\tname: this.$t('cloud.title'),\n\t\t\t\t\t\t\tto: '/cloud/',\n\t\t\t\t\t\t\troute: '/cloud/',\n\t\t\t\t\t\t\ticon: {content: cilCloud},\n\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('cloud.ibmCloud.title'),\n\t\t\t\t\t\t\t\t\tto: '/cloud/ibm-cloud/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('cloud.msAzure.title'),\n\t\t\t\t\t\t\t\t\tto: '/cloud/azure/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('cloud.amazonAws.title'),\n\t\t\t\t\t\t\t\t\tto: '/cloud/aws/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('cloud.hexio.title'),\n\t\t\t\t\t\t\t\t\tto: '/cloud/hexio/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('cloud.intelimentsInteliGlue.title'),\n\t\t\t\t\t\t\t\t\tto: '/cloud/inteli-glue/',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('cloud.pixla.title'),\n\t\t\t\t\t\t\t\t\tto: '/cloud/pixla/',\n\t\t\t\t\t\t\t\t\tfeature: 'pixla',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavItem',\n\t\t\t\t\t\t\tname: this.$t('core.grafana.title'),\n\t\t\t\t\t\t\thref: this.$store.getters['features/configuration']('grafana').url,\n\t\t\t\t\t\t\ttarget: '_blank',\n\t\t\t\t\t\t\tfeature: 'grafana',\n\t\t\t\t\t\t\ticon: {content: cibGrafana},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavDropdown',\n\t\t\t\t\t\t\tname: this.$t('core.nodeRed.title'),\n\t\t\t\t\t\t\tfeature: 'nodeRed',\n\t\t\t\t\t\t\ticon: {content: cibNodeRed},\n\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('core.nodeRed.workflow.title'),\n\t\t\t\t\t\t\t\t\thref: this.$store.getters['features/configuration']('nodeRed').url,\n\t\t\t\t\t\t\t\t\ttarget: '_blank',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: this.$t('core.nodeRed.dashboard.title'),\n\t\t\t\t\t\t\t\t\thref: this.$store.getters['features/configuration']('nodeRed').url + 'ui/',\n\t\t\t\t\t\t\t\t\ttarget: '_blank',\n\t\t\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavItem',\n\t\t\t\t\t\t\tname: this.$t('core.supervisor.title'),\n\t\t\t\t\t\t\thref: this.$store.getters['features/configuration']('supervisord').url,\n\t\t\t\t\t\t\ttarget: '_blank',\n\t\t\t\t\t\t\tfeature: 'supervisord',\n\t\t\t\t\t\t\ticon: {content: cilToggleOff},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavItem',\n\t\t\t\t\t\t\tname: this.$t('core.user.title'),\n\t\t\t\t\t\t\tto: '/user/',\n\t\t\t\t\t\t\ticon: {content: cilUser},\n\t\t\t\t\t\t\troles: ['power', 'normal'],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_name: 'CSidebarNavItem',\n\t\t\t\t\t\t\tname: this.$t('core.documentation.title'),\n\t\t\t\t\t\t\thref: this.$store.getters['features/configuration']('docs').url,\n\t\t\t\t\t\t\ttarget: '_blank',\n\t\t\t\t\t\t\tfeature: 'docs',\n\t\t\t\t\t\t\ticon: {content: cilBook},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t];\n\t\t\treturn data.filter((element) => {\n\t\t\t\telement._children = element._children.filter((element) => {\n\t\t\t\t\tif (element.roles !== undefined &&\n\t\t\t\t\t\t\t!element.roles.includes(this.$store.getters['user/getRole'])) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tif (element.feature !== undefined &&\n\t\t\t\t\t\t\t!this.$store.getters['features/isEnabled'](element.feature)) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tif (element.items) {\n\t\t\t\t\t\telement.items = element.items.filter((element) => {\n\t\t\t\t\t\t\tif (element.roles !== undefined &&\n\t\t\t\t\t\t\t\t\t!element.roles.includes(this.$store.getters['user/getRole'])) {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (element.feature !== undefined &&\n\t\t\t\t\t\t\t\t\t!this.$store.getters['features/isEnabled'](element.feature)) {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn element;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn element;\n\t\t\t\t});\n\t\t\t\treturn element;\n\t\t\t});\n\t\t}\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./TheSidebar.vue?vue&type=template&id=6bd688ac&\"\nimport script from \"./TheSidebar.vue?vue&type=script&lang=js&\"\nexport * from \"./TheSidebar.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6bd688ac')) {\n      api.createRecord('6bd688ac', component.options)\n    } else {\n      api.reload('6bd688ac', component.options)\n    }\n    module.hot.accept(\"./TheSidebar.vue?vue&type=template&id=6bd688ac&\", function () {\n      api.rerender('6bd688ac', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/TheSidebar.vue\"\nexport default component.exports","import mod from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TheDashboard.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TheDashboard.vue?vue&type=script&lang=js&\"","<template>\n\t<div class='c-app'>\n\t\t<LoadingSpinner />\n\t\t<TheSidebar />\n\t\t<CWrapper>\n\t\t\t<TheHeader />\n\t\t\t<div class='c-body'>\n\t\t\t\t<main class='c-main'>\n\t\t\t\t\t<CContainer fluid>\n\t\t\t\t\t\t<div class='fade-in'>\n\t\t\t\t\t\t\t<slot />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</CContainer>\n\t\t\t\t</main>\n\t\t\t</div>\n\t\t</CWrapper>\n\t</div>\n</template>\n\n<script>\nimport {CContainer, CWrapper} from '@coreui/vue';\nimport LoadingSpinner from './LoadingSpinner';\nimport TheHeader from './TheHeader';\nimport TheSidebar from './TheSidebar';\n\nexport default {\n\tname: 'TheDashboard',\n\tcomponents: {\n\t\tCContainer,\n\t\tCWrapper,\n\t\tLoadingSpinner,\n\t\tTheHeader,\n\t\tTheSidebar,\n\t},\n};\n</script>\n","import { render, staticRenderFns } from \"./TheDashboard.vue?vue&type=template&id=655c8438&\"\nimport script from \"./TheDashboard.vue?vue&type=script&lang=js&\"\nexport * from \"./TheDashboard.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('655c8438')) {\n      api.createRecord('655c8438', component.options)\n    } else {\n      api.reload('655c8438', component.options)\n    }\n    module.hot.accept(\"./TheDashboard.vue?vue&type=template&id=655c8438&\", function () {\n      api.rerender('655c8438', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/TheDashboard.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\"AddressChanger\", { attrs: { \"current-address\": _vm.address } }),\n      _vm._v(\" \"),\n      _vm.config !== null\n        ? _c(\n            \"CCard\",\n            [\n              _c(\"CCardHeader\", [\n                _vm._v(_vm._s(_vm.$t(\"iqrfnet.trConfiguration.title\")))\n              ]),\n              _vm._v(\" \"),\n              _c(\n                \"CCardBody\",\n                [\n                  _c(\"ValidationObserver\", {\n                    scopedSlots: _vm._u(\n                      [\n                        {\n                          key: \"default\",\n                          fn: function(ref) {\n                            var invalid = ref.invalid\n                            return [\n                              _c(\n                                \"CForm\",\n                                {\n                                  on: {\n                                    submit: function($event) {\n                                      $event.preventDefault()\n                                      return _vm.handleSubmit($event)\n                                    }\n                                  }\n                                },\n                                [\n                                  _c(\n                                    \"CRow\",\n                                    [\n                                      _c(\n                                        \"CCol\",\n                                        { attrs: { md: \"6\" } },\n                                        [\n                                          _c(\"h2\", [\n                                            _vm._v(\n                                              _vm._s(\n                                                _vm.$t(\n                                                  \"iqrfnet.trConfiguration.form.rf\"\n                                                )\n                                              )\n                                            )\n                                          ]),\n                                          _vm._v(\" \"),\n                                          _c(\"CSelect\", {\n                                            attrs: {\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.rfBand\"\n                                              ),\n                                              options: [\n                                                {\n                                                  value: \"443\",\n                                                  label: _vm.$t(\n                                                    \"iqrfnet.trConfiguration.form.rfBands.443\"\n                                                  )\n                                                },\n                                                {\n                                                  value: \"868\",\n                                                  label: _vm.$t(\n                                                    \"iqrfnet.trConfiguration.form.rfBands.868\"\n                                                  )\n                                                },\n                                                {\n                                                  value: \"916\",\n                                                  label: _vm.$t(\n                                                    \"iqrfnet.trConfiguration.form.rfBands.916\"\n                                                  )\n                                                }\n                                              ],\n                                              disabled: \"true\"\n                                            },\n                                            model: {\n                                              value: _vm.config.rfBand,\n                                              callback: function($$v) {\n                                                _vm.$set(\n                                                  _vm.config,\n                                                  \"rfBand\",\n                                                  $$v\n                                                )\n                                              },\n                                              expression: \"config.rfBand\"\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"ValidationProvider\", {\n                                            attrs: {\n                                              rules: _vm.rfChannelRules.rule,\n                                              \"custom-messages\":\n                                                _vm.rfChannelValidatorMessages\n                                            },\n                                            scopedSlots: _vm._u(\n                                              [\n                                                {\n                                                  key: \"default\",\n                                                  fn: function(ref) {\n                                                    var valid = ref.valid\n                                                    var touched = ref.touched\n                                                    var errors = ref.errors\n                                                    return [\n                                                      _c(\"CInput\", {\n                                                        attrs: {\n                                                          label: _vm.$t(\n                                                            \"iqrfnet.trConfiguration.form.rfChannelA\"\n                                                          ),\n                                                          \"is-valid\": touched\n                                                            ? valid\n                                                            : null,\n                                                          \"invalid-feedback\": _vm.$t(\n                                                            errors[0]\n                                                          ),\n                                                          type: \"number\",\n                                                          max:\n                                                            _vm.rfChannelRules\n                                                              .max,\n                                                          min:\n                                                            _vm.rfChannelRules\n                                                              .min\n                                                        },\n                                                        model: {\n                                                          value:\n                                                            _vm.config\n                                                              .rfChannelA,\n                                                          callback: function(\n                                                            $$v\n                                                          ) {\n                                                            _vm.$set(\n                                                              _vm.config,\n                                                              \"rfChannelA\",\n                                                              _vm._n($$v)\n                                                            )\n                                                          },\n                                                          expression:\n                                                            \"config.rfChannelA\"\n                                                        }\n                                                      })\n                                                    ]\n                                                  }\n                                                }\n                                              ],\n                                              null,\n                                              true\n                                            )\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"ValidationProvider\", {\n                                            attrs: {\n                                              rules: _vm.rfChannelRules.rule,\n                                              \"custom-messages\":\n                                                _vm.rfChannelValidatorMessages\n                                            },\n                                            scopedSlots: _vm._u(\n                                              [\n                                                {\n                                                  key: \"default\",\n                                                  fn: function(ref) {\n                                                    var valid = ref.valid\n                                                    var touched = ref.touched\n                                                    var errors = ref.errors\n                                                    return [\n                                                      _c(\"CInput\", {\n                                                        attrs: {\n                                                          label: _vm.$t(\n                                                            \"iqrfnet.trConfiguration.form.rfChannelB\"\n                                                          ),\n                                                          \"is-valid\": touched\n                                                            ? valid\n                                                            : null,\n                                                          \"invalid-feedback\": _vm.$t(\n                                                            errors[0]\n                                                          ),\n                                                          type: \"number\",\n                                                          max:\n                                                            _vm.rfChannelRules\n                                                              .max,\n                                                          min:\n                                                            _vm.rfChannelRules\n                                                              .min\n                                                        },\n                                                        model: {\n                                                          value:\n                                                            _vm.config\n                                                              .rfChannelB,\n                                                          callback: function(\n                                                            $$v\n                                                          ) {\n                                                            _vm.$set(\n                                                              _vm.config,\n                                                              \"rfChannelB\",\n                                                              _vm._n($$v)\n                                                            )\n                                                          },\n                                                          expression:\n                                                            \"config.rfChannelB\"\n                                                        }\n                                                      })\n                                                    ]\n                                                  }\n                                                }\n                                              ],\n                                              null,\n                                              true\n                                            )\n                                          }),\n                                          _vm._v(\" \"),\n                                          _vm.config.rfSubChannelA !== undefined\n                                            ? _c(\"ValidationProvider\", {\n                                                attrs: {\n                                                  rules:\n                                                    _vm.rfChannelRules.rule,\n                                                  \"custom-messages\":\n                                                    _vm.rfChannelValidatorMessages\n                                                },\n                                                scopedSlots: _vm._u(\n                                                  [\n                                                    {\n                                                      key: \"default\",\n                                                      fn: function(ref) {\n                                                        var valid = ref.valid\n                                                        var touched =\n                                                          ref.touched\n                                                        var errors = ref.errors\n                                                        return [\n                                                          _c(\"CInput\", {\n                                                            attrs: {\n                                                              label: _vm.$t(\n                                                                \"iqrfnet.trConfiguration.form.rfSubChannelA\"\n                                                              ),\n                                                              \"is-valid\": touched\n                                                                ? valid\n                                                                : null,\n                                                              \"invalid-feedback\": _vm.$t(\n                                                                errors[0]\n                                                              ),\n                                                              type: \"number\",\n                                                              max:\n                                                                _vm\n                                                                  .rfChannelRules\n                                                                  .max,\n                                                              min:\n                                                                _vm\n                                                                  .rfChannelRules\n                                                                  .min\n                                                            },\n                                                            model: {\n                                                              value:\n                                                                _vm.config\n                                                                  .rfSubChannelA,\n                                                              callback: function(\n                                                                $$v\n                                                              ) {\n                                                                _vm.$set(\n                                                                  _vm.config,\n                                                                  \"rfSubChannelA\",\n                                                                  _vm._n($$v)\n                                                                )\n                                                              },\n                                                              expression:\n                                                                \"config.rfSubChannelA\"\n                                                            }\n                                                          })\n                                                        ]\n                                                      }\n                                                    }\n                                                  ],\n                                                  null,\n                                                  true\n                                                )\n                                              })\n                                            : _vm._e(),\n                                          _vm._v(\" \"),\n                                          _vm.config.rfSubChannelB !== undefined\n                                            ? _c(\"ValidationProvider\", {\n                                                attrs: {\n                                                  rules:\n                                                    _vm.rfChannelRules.rule,\n                                                  \"custom-messages\":\n                                                    _vm.rfChannelValidatorMessages\n                                                },\n                                                scopedSlots: _vm._u(\n                                                  [\n                                                    {\n                                                      key: \"default\",\n                                                      fn: function(ref) {\n                                                        var valid = ref.valid\n                                                        var touched =\n                                                          ref.touched\n                                                        var errors = ref.errors\n                                                        return [\n                                                          _c(\"CInput\", {\n                                                            attrs: {\n                                                              label: _vm.$t(\n                                                                \"iqrfnet.trConfiguration.form.rfSubChannelB\"\n                                                              ),\n                                                              \"is-valid\": touched\n                                                                ? valid\n                                                                : null,\n                                                              \"invalid-feedback\": _vm.$t(\n                                                                errors[0]\n                                                              ),\n                                                              type: \"number\",\n                                                              max:\n                                                                _vm\n                                                                  .rfChannelRules\n                                                                  .max,\n                                                              min:\n                                                                _vm\n                                                                  .rfChannelRules\n                                                                  .min\n                                                            },\n                                                            model: {\n                                                              value:\n                                                                _vm.config\n                                                                  .rfSubChannelB,\n                                                              callback: function(\n                                                                $$v\n                                                              ) {\n                                                                _vm.$set(\n                                                                  _vm.config,\n                                                                  \"rfSubChannelB\",\n                                                                  _vm._n($$v)\n                                                                )\n                                                              },\n                                                              expression:\n                                                                \"config.rfSubChannelB\"\n                                                            }\n                                                          })\n                                                        ]\n                                                      }\n                                                    }\n                                                  ],\n                                                  null,\n                                                  true\n                                                )\n                                              })\n                                            : _vm._e(),\n                                          _vm._v(\" \"),\n                                          _vm.config.rfAltDsmChannel !==\n                                          undefined\n                                            ? _c(\"ValidationProvider\", {\n                                                attrs: {\n                                                  rules:\n                                                    _vm.rfChannelRules.rule,\n                                                  \"custom-messages\":\n                                                    _vm.rfChannelValidatorMessages\n                                                },\n                                                scopedSlots: _vm._u(\n                                                  [\n                                                    {\n                                                      key: \"default\",\n                                                      fn: function(ref) {\n                                                        var valid = ref.valid\n                                                        var touched =\n                                                          ref.touched\n                                                        var errors = ref.errors\n                                                        return [\n                                                          _c(\"CInput\", {\n                                                            attrs: {\n                                                              label: _vm.$t(\n                                                                \"iqrfnet.trConfiguration.form.rfAltDsmChannel\"\n                                                              ),\n                                                              \"is-valid\": touched\n                                                                ? valid\n                                                                : null,\n                                                              \"invalid-feedback\": _vm.$t(\n                                                                errors[0]\n                                                              ),\n                                                              type: \"number\",\n                                                              max:\n                                                                _vm\n                                                                  .rfChannelRules\n                                                                  .max,\n                                                              min:\n                                                                _vm\n                                                                  .rfChannelRules\n                                                                  .min\n                                                            },\n                                                            model: {\n                                                              value:\n                                                                _vm.config\n                                                                  .rfAltDsmChannel,\n                                                              callback: function(\n                                                                $$v\n                                                              ) {\n                                                                _vm.$set(\n                                                                  _vm.config,\n                                                                  \"rfAltDsmChannel\",\n                                                                  _vm._n($$v)\n                                                                )\n                                                              },\n                                                              expression:\n                                                                \"config.rfAltDsmChannel\"\n                                                            }\n                                                          })\n                                                        ]\n                                                      }\n                                                    }\n                                                  ],\n                                                  null,\n                                                  true\n                                                )\n                                              })\n                                            : _vm._e(),\n                                          _vm._v(\" \"),\n                                          _vm.config.stdAndLpNetwork === false\n                                            ? _c(\n                                                \"CAlert\",\n                                                { attrs: { color: \"warning\" } },\n                                                [\n                                                  _vm._v(\n                                                    \"\\n\\t\\t\\t\\t\\t\\t\\t\\t\" +\n                                                      _vm._s(\n                                                        _vm.$t(\n                                                          \"iqrfnet.trConfiguration.form.messages.breakInteroperability\"\n                                                        )\n                                                      ) +\n                                                      \"\\n\\t\\t\\t\\t\\t\\t\\t\"\n                                                  )\n                                                ]\n                                              )\n                                            : _vm._e(),\n                                          _vm._v(\" \"),\n                                          _vm.config.stdAndLpNetwork !==\n                                          undefined\n                                            ? _c(\"CInputCheckbox\", {\n                                                attrs: {\n                                                  checked:\n                                                    _vm.config.stdAndLpNetwork,\n                                                  label: _vm.$t(\n                                                    \"iqrfnet.trConfiguration.form.stdAndLpNetwork\"\n                                                  )\n                                                },\n                                                on: {\n                                                  \"update:checked\": function(\n                                                    $event\n                                                  ) {\n                                                    return _vm.$set(\n                                                      _vm.config,\n                                                      \"stdAndLpNetwork\",\n                                                      $event\n                                                    )\n                                                  }\n                                                }\n                                              })\n                                            : _vm._e(),\n                                          _vm._v(\" \"),\n                                          _c(\"ValidationProvider\", {\n                                            attrs: {\n                                              rules:\n                                                \"integer|between:0,7|required\",\n                                              \"custom-messages\": {\n                                                between:\n                                                  \"iqrfnet.trConfiguration.form.messages.txPower\",\n                                                integer:\n                                                  \"iqrfnet.trConfiguration.form.messages.txPower\",\n                                                required:\n                                                  \"iqrfnet.trConfiguration.form.messages.txPower\"\n                                              }\n                                            },\n                                            scopedSlots: _vm._u(\n                                              [\n                                                {\n                                                  key: \"default\",\n                                                  fn: function(ref) {\n                                                    var valid = ref.valid\n                                                    var touched = ref.touched\n                                                    var errors = ref.errors\n                                                    return [\n                                                      _c(\"CInput\", {\n                                                        attrs: {\n                                                          label: _vm.$t(\n                                                            \"iqrfnet.trConfiguration.form.txPower\"\n                                                          ),\n                                                          \"is-valid\": touched\n                                                            ? valid\n                                                            : null,\n                                                          \"invalid-feedback\": _vm.$t(\n                                                            errors[0]\n                                                          ),\n                                                          type: \"number\",\n                                                          max: \"7\",\n                                                          min: \"0\"\n                                                        },\n                                                        model: {\n                                                          value:\n                                                            _vm.config.txPower,\n                                                          callback: function(\n                                                            $$v\n                                                          ) {\n                                                            _vm.$set(\n                                                              _vm.config,\n                                                              \"txPower\",\n                                                              _vm._n($$v)\n                                                            )\n                                                          },\n                                                          expression:\n                                                            \"config.txPower\"\n                                                        }\n                                                      })\n                                                    ]\n                                                  }\n                                                }\n                                              ],\n                                              null,\n                                              true\n                                            )\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"ValidationProvider\", {\n                                            attrs: {\n                                              rules:\n                                                \"integer|between:0,64|required\",\n                                              \"custom-messages\": {\n                                                between:\n                                                  \"iqrfnet.trConfiguration.form.messages.rxFilter\",\n                                                integer:\n                                                  \"iqrfnet.trConfiguration.form.messages.rxFilter\",\n                                                required:\n                                                  \"iqrfnet.trConfiguration.form.messages.rxFilter\"\n                                              }\n                                            },\n                                            scopedSlots: _vm._u(\n                                              [\n                                                {\n                                                  key: \"default\",\n                                                  fn: function(ref) {\n                                                    var valid = ref.valid\n                                                    var touched = ref.touched\n                                                    var errors = ref.errors\n                                                    return [\n                                                      _c(\"CInput\", {\n                                                        attrs: {\n                                                          label: _vm.$t(\n                                                            \"iqrfnet.trConfiguration.form.rxFilter\"\n                                                          ),\n                                                          \"is-valid\": touched\n                                                            ? valid\n                                                            : null,\n                                                          \"invalid-feedback\": _vm.$t(\n                                                            errors[0]\n                                                          ),\n                                                          type: \"number\",\n                                                          max: \"64\",\n                                                          min: \"0\"\n                                                        },\n                                                        model: {\n                                                          value:\n                                                            _vm.config.rxFilter,\n                                                          callback: function(\n                                                            $$v\n                                                          ) {\n                                                            _vm.$set(\n                                                              _vm.config,\n                                                              \"rxFilter\",\n                                                              _vm._n($$v)\n                                                            )\n                                                          },\n                                                          expression:\n                                                            \"config.rxFilter\"\n                                                        }\n                                                      })\n                                                    ]\n                                                  }\n                                                }\n                                              ],\n                                              null,\n                                              true\n                                            )\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"ValidationProvider\", {\n                                            attrs: {\n                                              rules:\n                                                \"integer|between:1,255|required\",\n                                              \"custom-messages\": {\n                                                between:\n                                                  \"iqrfnet.trConfiguration.form.messages.lpRxTimeout\",\n                                                integer:\n                                                  \"iqrfnet.trConfiguration.form.messages.lpRxTimeout\",\n                                                required:\n                                                  \"iqrfnet.trConfiguration.form.messages.lpRxTimeout\"\n                                              }\n                                            },\n                                            scopedSlots: _vm._u(\n                                              [\n                                                {\n                                                  key: \"default\",\n                                                  fn: function(ref) {\n                                                    var valid = ref.valid\n                                                    var touched = ref.touched\n                                                    var errors = ref.errors\n                                                    return [\n                                                      _c(\"CInput\", {\n                                                        attrs: {\n                                                          label: _vm.$t(\n                                                            \"iqrfnet.trConfiguration.form.lpRxTimeout\"\n                                                          ),\n                                                          \"is-valid\": touched\n                                                            ? valid\n                                                            : null,\n                                                          \"invalid-feedback\": _vm.$t(\n                                                            errors[0]\n                                                          ),\n                                                          type: \"number\"\n                                                        },\n                                                        model: {\n                                                          value:\n                                                            _vm.config\n                                                              .lpRxTimeout,\n                                                          callback: function(\n                                                            $$v\n                                                          ) {\n                                                            _vm.$set(\n                                                              _vm.config,\n                                                              \"lpRxTimeout\",\n                                                              _vm._n($$v)\n                                                            )\n                                                          },\n                                                          expression:\n                                                            \"config.lpRxTimeout\"\n                                                        }\n                                                      })\n                                                    ]\n                                                  }\n                                                }\n                                              ],\n                                              null,\n                                              true\n                                            )\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"h2\", [\n                                            _vm._v(\n                                              _vm._s(\n                                                _vm.$t(\n                                                  \"iqrfnet.trConfiguration.form.rfPgm\"\n                                                )\n                                              )\n                                            )\n                                          ]),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked:\n                                                _vm.config\n                                                  .rfPgmEnableAfterReset,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.rfPgmEnableAfterReset\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"rfPgmEnableAfterReset\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked:\n                                                _vm.config\n                                                  .rfPgmTerminateAfter1Min,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.rfPgmTerminateAfter1Min\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"rfPgmTerminateAfter1Min\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked:\n                                                _vm.config.rfPgmTerminateMcuPin,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.rfPgmTerminateMcuPin\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"rfPgmTerminateMcuPin\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked:\n                                                _vm.config.rfPgmDualChannel,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.rfPgmDualChannel\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"rfPgmDualChannel\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked: _vm.config.rfPgmLpMode,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.rfPgmLpMode\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"rfPgmLpMode\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked:\n                                                _vm.config.rfPgmIncorrectUpload,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.rfPgmIncorrectUpload\"\n                                              ),\n                                              disabled: \"true\"\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"rfPgmIncorrectUpload\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          })\n                                        ],\n                                        1\n                                      ),\n                                      _vm._v(\" \"),\n                                      _c(\n                                        \"CCol\",\n                                        { attrs: { md: \"6\" } },\n                                        [\n                                          _c(\"h2\", [\n                                            _vm._v(\n                                              _vm._s(\n                                                _vm.$t(\n                                                  \"iqrfnet.trConfiguration.form.dpa.embeddedPeripherals\"\n                                                )\n                                              )\n                                            )\n                                          ]),\n                                          _vm._v(\" \"),\n                                          _vm._l(_vm.peripherals, function(\n                                            peripheral\n                                          ) {\n                                            return _c(\"CInputCheckbox\", {\n                                              key: peripheral.name,\n                                              attrs: {\n                                                checked: peripheral.enabled,\n                                                disabled: _vm.unchangeablePeripherals.includes(\n                                                  peripheral.name\n                                                ),\n                                                label: _vm.$t(\n                                                  \"iqrfnet.trConfiguration.form.embPers.\" +\n                                                    peripheral.name\n                                                )\n                                              },\n                                              on: {\n                                                \"update:checked\": function(\n                                                  $event\n                                                ) {\n                                                  return _vm.$set(\n                                                    peripheral,\n                                                    \"enabled\",\n                                                    $event\n                                                  )\n                                                }\n                                              }\n                                            })\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"h2\", [\n                                            _vm._v(\n                                              _vm._s(\n                                                _vm.$t(\n                                                  \"iqrfnet.trConfiguration.form.dpa.other\"\n                                                )\n                                              )\n                                            )\n                                          ]),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked:\n                                                _vm.config.customDpaHandler,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.customDpaHandler\"\n                                              ),\n                                              disabled: !_vm.dpaHandlerDetected\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"customDpaHandler\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _vm.config.dpaPeerToPeer !== undefined\n                                            ? _c(\"CInputCheckbox\", {\n                                                attrs: {\n                                                  checked:\n                                                    _vm.config.dpaPeerToPeer,\n                                                  label: _vm.$t(\n                                                    \"iqrfnet.trConfiguration.form.dpaPeerToPeer\"\n                                                  )\n                                                },\n                                                on: {\n                                                  \"update:checked\": function(\n                                                    $event\n                                                  ) {\n                                                    return _vm.$set(\n                                                      _vm.config,\n                                                      \"dpaPeerToPeer\",\n                                                      $event\n                                                    )\n                                                  }\n                                                }\n                                              })\n                                            : _vm._e(),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked: _vm.config.peerToPeer,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.peerToPeer\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"peerToPeer\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _vm.config.localFrcReception !==\n                                            undefined && _vm.address !== 0\n                                            ? _c(\"CInputCheckbox\", {\n                                                attrs: {\n                                                  checked:\n                                                    _vm.config\n                                                      .localFrcReception,\n                                                  label: _vm.$t(\n                                                    \"iqrfnet.trConfiguration.form.localFrcReception\"\n                                                  )\n                                                },\n                                                on: {\n                                                  \"update:checked\": function(\n                                                    $event\n                                                  ) {\n                                                    return _vm.$set(\n                                                      _vm.config,\n                                                      \"localFrcReception\",\n                                                      $event\n                                                    )\n                                                  }\n                                                }\n                                              })\n                                            : _vm._e(),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked: _vm.config.ioSetup,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.ioSetup\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"ioSetup\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked: _vm.config.dpaAutoexec,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.dpaAutoexec\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"dpaAutoexec\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _c(\"CInputCheckbox\", {\n                                            attrs: {\n                                              checked: _vm.config.routingOff,\n                                              label: _vm.$t(\n                                                \"iqrfnet.trConfiguration.form.routingOff\"\n                                              )\n                                            },\n                                            on: {\n                                              \"update:checked\": function(\n                                                $event\n                                              ) {\n                                                return _vm.$set(\n                                                  _vm.config,\n                                                  \"routingOff\",\n                                                  $event\n                                                )\n                                              }\n                                            }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _vm.config.neverSleep !== undefined\n                                            ? _c(\"CInputCheckbox\", {\n                                                attrs: {\n                                                  checked:\n                                                    _vm.config.neverSleep,\n                                                  label: _vm.$t(\n                                                    \"iqrfnet.trConfiguration.form.neverSleep\"\n                                                  )\n                                                },\n                                                on: {\n                                                  \"update:checked\": function(\n                                                    $event\n                                                  ) {\n                                                    return _vm.$set(\n                                                      _vm.config,\n                                                      \"neverSleep\",\n                                                      $event\n                                                    )\n                                                  }\n                                                }\n                                              })\n                                            : _vm._e(),\n                                          _vm._v(\" \"),\n                                          _c(\"ValidationProvider\", {\n                                            attrs: {\n                                              rules: \"required\",\n                                              \"custom-messages\": {\n                                                required:\n                                                  \"iqrfnet.trConfiguration.form.messages.uartBaudrate\"\n                                              }\n                                            },\n                                            scopedSlots: _vm._u(\n                                              [\n                                                {\n                                                  key: \"default\",\n                                                  fn: function(ref) {\n                                                    var valid = ref.valid\n                                                    var touched = ref.touched\n                                                    var errors = ref.errors\n                                                    return [\n                                                      _c(\"CSelect\", {\n                                                        attrs: {\n                                                          value:\n                                                            _vm.config\n                                                              .uartBaudrate,\n                                                          label: _vm.$t(\n                                                            \"iqrfnet.trConfiguration.form.uartBaudrate\"\n                                                          ),\n                                                          \"is-valid\": touched\n                                                            ? valid\n                                                            : null,\n                                                          \"invalid-feedback\": _vm.$t(\n                                                            errors[0]\n                                                          ),\n                                                          placeholder: _vm.$t(\n                                                            \"iqrfnet.trConfiguration.form.messages.uartBaudrate\"\n                                                          ),\n                                                          options:\n                                                            _vm.uartBaudRates\n                                                        },\n                                                        on: {\n                                                          \"update:value\": function(\n                                                            $event\n                                                          ) {\n                                                            return _vm.$set(\n                                                              _vm.config,\n                                                              \"uartBaudrate\",\n                                                              $event\n                                                            )\n                                                          }\n                                                        }\n                                                      })\n                                                    ]\n                                                  }\n                                                }\n                                              ],\n                                              null,\n                                              true\n                                            )\n                                          }),\n                                          _vm._v(\" \"),\n                                          _vm.config.nodeDpaInterface !==\n                                          undefined\n                                            ? _c(\"CInputCheckbox\", {\n                                                attrs: {\n                                                  checked:\n                                                    _vm.config.nodeDpaInterface,\n                                                  label: _vm.$t(\n                                                    \"iqrfnet.trConfiguration.form.nodeDpaInterface\"\n                                                  )\n                                                },\n                                                on: {\n                                                  \"update:checked\": function(\n                                                    $event\n                                                  ) {\n                                                    return _vm.$set(\n                                                      _vm.config,\n                                                      \"nodeDpaInterface\",\n                                                      $event\n                                                    )\n                                                  }\n                                                }\n                                              })\n                                            : _vm._e()\n                                        ],\n                                        2\n                                      )\n                                    ],\n                                    1\n                                  ),\n                                  _vm._v(\" \"),\n                                  _c(\n                                    \"CButton\",\n                                    {\n                                      attrs: {\n                                        color: \"primary\",\n                                        type: \"submit\",\n                                        disabled: invalid\n                                      }\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n\\t\\t\\t\\t\\t\\t\" +\n                                          _vm._s(_vm.$t(\"forms.write\")) +\n                                          \"\\n\\t\\t\\t\\t\\t\"\n                                      )\n                                    ]\n                                  )\n                                ],\n                                1\n                              )\n                            ]\n                          }\n                        }\n                      ],\n                      null,\n                      false,\n                      2043800768\n                    )\n                  })\n                ],\n                1\n              )\n            ],\n            1\n          )\n        : _vm._e()\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    [\n      _c(\"CCardHeader\", [\n        _vm._v(\n          \"\\n\\t\\t\" + _vm._s(_vm.$t(\"iqrfnet.addressChange.title\")) + \"\\n\\t\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"CCardBody\",\n        [\n          _c(\"ValidationObserver\", {\n            scopedSlots: _vm._u([\n              {\n                key: \"default\",\n                fn: function(ref) {\n                  var invalid = ref.invalid\n                  return [\n                    _c(\n                      \"CForm\",\n                      {\n                        on: {\n                          submit: function($event) {\n                            $event.preventDefault()\n                            return _vm.changeAddress($event)\n                          }\n                        }\n                      },\n                      [\n                        _c(\"ValidationProvider\", {\n                          attrs: {\n                            rules: \"integer|required|between:0,239\",\n                            \"custom-messages\": {\n                              between: \"iqrfnet.addressChange.messages.address\",\n                              integer: \"iqrfnet.addressChange.messages.address\",\n                              required: \"iqrfnet.addressChange.messages.address\"\n                            }\n                          },\n                          scopedSlots: _vm._u(\n                            [\n                              {\n                                key: \"default\",\n                                fn: function(ref) {\n                                  var errors = ref.errors\n                                  var touched = ref.touched\n                                  var valid = ref.valid\n                                  return [\n                                    _c(\"CInput\", {\n                                      attrs: {\n                                        type: \"number\",\n                                        min: \"0\",\n                                        max: \"239\",\n                                        label: _vm.$t(\n                                          \"iqrfnet.addressChange.address\"\n                                        ),\n                                        \"is-valid\": touched ? valid : null,\n                                        \"invalid-feedback\": _vm.$t(errors[0])\n                                      },\n                                      model: {\n                                        value: _vm.address,\n                                        callback: function($$v) {\n                                          _vm.address = _vm._n($$v)\n                                        },\n                                        expression: \"address\"\n                                      }\n                                    })\n                                  ]\n                                }\n                              }\n                            ],\n                            null,\n                            true\n                          )\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"CButton\",\n                          {\n                            attrs: {\n                              color: \"primary\",\n                              type: \"submit\",\n                              disabled: invalid\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n\\t\\t\\t\\t\\t\" +\n                                _vm._s(_vm.$t(\"forms.read\")) +\n                                \"\\n\\t\\t\\t\\t\"\n                            )\n                          ]\n                        )\n                      ],\n                      1\n                    )\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard>\n\t\t<CCardHeader>\n\t\t\t{{ $t('iqrfnet.addressChange.title') }}\n\t\t</CCardHeader>\n\t\t<CCardBody>\n\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t<CForm @submit.prevent='changeAddress'>\n\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\tv-slot='{ errors, touched, valid }'\n\t\t\t\t\t\trules='integer|required|between:0,239'\n\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\tbetween: \"iqrfnet.addressChange.messages.address\",\n\t\t\t\t\t\t\tinteger: \"iqrfnet.addressChange.messages.address\",\n\t\t\t\t\t\t\trequired: \"iqrfnet.addressChange.messages.address\",\n\t\t\t\t\t\t}'\n\t\t\t\t\t>\n\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\tv-model.number='address'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='239'\n\t\t\t\t\t\t\t:label='$t(\"iqrfnet.addressChange.address\")'\n\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t\t{{ $t('forms.read') }}\n\t\t\t\t\t</CButton>\n\t\t\t\t</CForm>\n\t\t\t</ValidationObserver>\n\t\t</CCardBody>\n\t</CCard>\n</template>\n\n<script>\nimport {CButton, CCard, CCardBody, CCardHeader, CForm, CInput} from '@coreui/vue/src';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport {between, integer, required} from 'vee-validate/dist/rules';\n\nexport default {\n\tname: 'AddressChanger',\n\tcomponents: {\n\t\tCButton,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tprops: {\n\t\tcurrentAddress: {\n\t\t\ttype: Number,\n\t\t\trequired: true\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\taddress: null,\n\t\t};\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('required', required);\n\t\tthis.address = this.currentAddress;\n\t},\n\tmethods: {\n\t\tchangeAddress() {\n\t\t\tthis.$router.push('/iqrfnet/tr-config/' + this.address);\n\t\t},\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AddressChanger.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AddressChanger.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./AddressChanger.vue?vue&type=template&id=211e5a7d&\"\nimport script from \"./AddressChanger.vue?vue&type=script&lang=js&\"\nexport * from \"./AddressChanger.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('211e5a7d')) {\n      api.createRecord('211e5a7d', component.options)\n    } else {\n      api.reload('211e5a7d', component.options)\n    }\n    module.hot.accept(\"./AddressChanger.vue?vue&type=template&id=211e5a7d&\", function () {\n      api.rerender('211e5a7d', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/AddressChanger.vue\"\nexport default component.exports","<template>\n\t<div>\n\t\t<AddressChanger :current-address='address' />\n\t\t<CCard v-if='config !== null'>\n\t\t\t<CCardHeader>{{ $t('iqrfnet.trConfiguration.title') }}</CCardHeader>\n\t\t\t<CCardBody>\n\t\t\t\t<ValidationObserver v-slot='{ invalid }'>\n\t\t\t\t\t<CForm @submit.prevent='handleSubmit'>\n\t\t\t\t\t\t<CRow>\n\t\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t\t<h2>{{ $t('iqrfnet.trConfiguration.form.rf') }}</h2>\n\t\t\t\t\t\t\t\t<CSelect\n\t\t\t\t\t\t\t\t\tv-model='config.rfBand'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfBand\")'\n\t\t\t\t\t\t\t\t\t:options='[\n\t\t\t\t\t\t\t\t\t\t{value: \"443\", label: $t(\"iqrfnet.trConfiguration.form.rfBands.443\")},\n\t\t\t\t\t\t\t\t\t\t{value: \"868\", label: $t(\"iqrfnet.trConfiguration.form.rfBands.868\")},\n\t\t\t\t\t\t\t\t\t\t{value: \"916\", label: $t(\"iqrfnet.trConfiguration.form.rfBands.916\")},\n\t\t\t\t\t\t\t\t\t]'\n\t\t\t\t\t\t\t\t\tdisabled='true'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\t:rules='rfChannelRules.rule'\n\t\t\t\t\t\t\t\t\t:custom-messages='rfChannelValidatorMessages'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\tv-model.number='config.rfChannelA'\n\t\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfChannelA\")'\n\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\t\t:max='rfChannelRules.max'\n\t\t\t\t\t\t\t\t\t\t:min='rfChannelRules.min'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\t:rules='rfChannelRules.rule'\n\t\t\t\t\t\t\t\t\t:custom-messages='rfChannelValidatorMessages'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\tv-model.number='config.rfChannelB'\n\t\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfChannelB\")'\n\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\t\t:max='rfChannelRules.max'\n\t\t\t\t\t\t\t\t\t\t:min='rfChannelRules.min'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\tv-if='config.rfSubChannelA !== undefined'\n\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\t:rules='rfChannelRules.rule'\n\t\t\t\t\t\t\t\t\t:custom-messages='rfChannelValidatorMessages'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\tv-model.number='config.rfSubChannelA'\n\t\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfSubChannelA\")'\n\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\t\t:max='rfChannelRules.max'\n\t\t\t\t\t\t\t\t\t\t:min='rfChannelRules.min'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\tv-if='config.rfSubChannelB !== undefined'\n\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\t:rules='rfChannelRules.rule'\n\t\t\t\t\t\t\t\t\t:custom-messages='rfChannelValidatorMessages'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\tv-model.number='config.rfSubChannelB'\n\t\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfSubChannelB\")'\n\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\t\t:max='rfChannelRules.max'\n\t\t\t\t\t\t\t\t\t\t:min='rfChannelRules.min'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\tv-if='config.rfAltDsmChannel !== undefined'\n\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\t:rules='rfChannelRules.rule'\n\t\t\t\t\t\t\t\t\t:custom-messages='rfChannelValidatorMessages'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\tv-model.number='config.rfAltDsmChannel'\n\t\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfAltDsmChannel\")'\n\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\t\t:max='rfChannelRules.max'\n\t\t\t\t\t\t\t\t\t\t:min='rfChannelRules.min'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t<CAlert v-if='config.stdAndLpNetwork === false' color='warning'>\n\t\t\t\t\t\t\t\t\t{{ $t('iqrfnet.trConfiguration.form.messages.breakInteroperability') }}\n\t\t\t\t\t\t\t\t</CAlert>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\tv-if='config.stdAndLpNetwork !== undefined'\n\t\t\t\t\t\t\t\t\t:checked.sync='config.stdAndLpNetwork'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.stdAndLpNetwork\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\trules='integer|between:0,7|required'\n\t\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.trConfiguration.form.messages.txPower\",\n\t\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.trConfiguration.form.messages.txPower\",\n\t\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.trConfiguration.form.messages.txPower\",\n\t\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\tv-model.number='config.txPower'\n\t\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.txPower\")'\n\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\t\tmax='7'\n\t\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\trules='integer|between:0,64|required'\n\t\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.trConfiguration.form.messages.rxFilter\",\n\t\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.trConfiguration.form.messages.rxFilter\",\n\t\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.trConfiguration.form.messages.rxFilter\",\n\t\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\tv-model.number='config.rxFilter'\n\t\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rxFilter\")'\n\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\t\tmax='64'\n\t\t\t\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\trules='integer|between:1,255|required'\n\t\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\t\tbetween: \"iqrfnet.trConfiguration.form.messages.lpRxTimeout\",\n\t\t\t\t\t\t\t\t\t\tinteger: \"iqrfnet.trConfiguration.form.messages.lpRxTimeout\",\n\t\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.trConfiguration.form.messages.lpRxTimeout\",\n\t\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CInput\n\t\t\t\t\t\t\t\t\t\tv-model.number='config.lpRxTimeout'\n\t\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.lpRxTimeout\")'\n\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t<h2>{{ $t('iqrfnet.trConfiguration.form.rfPgm') }}</h2>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.rfPgmEnableAfterReset'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfPgmEnableAfterReset\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.rfPgmTerminateAfter1Min'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfPgmTerminateAfter1Min\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.rfPgmTerminateMcuPin'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfPgmTerminateMcuPin\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.rfPgmDualChannel'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfPgmDualChannel\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.rfPgmLpMode'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfPgmLpMode\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.rfPgmIncorrectUpload'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.rfPgmIncorrectUpload\")'\n\t\t\t\t\t\t\t\t\tdisabled='true'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</CCol>\n\t\t\t\t\t\t\t<CCol md='6'>\n\t\t\t\t\t\t\t\t<h2>{{ $t('iqrfnet.trConfiguration.form.dpa.embeddedPeripherals') }}</h2>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\tv-for='peripheral of peripherals'\n\t\t\t\t\t\t\t\t\t:key='peripheral.name'\n\t\t\t\t\t\t\t\t\t:checked.sync='peripheral.enabled'\n\t\t\t\t\t\t\t\t\t:disabled='unchangeablePeripherals.includes(peripheral.name)'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.embPers.\" + peripheral.name)'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<h2>{{ $t('iqrfnet.trConfiguration.form.dpa.other') }}</h2>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.customDpaHandler'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.customDpaHandler\")'\n\t\t\t\t\t\t\t\t\t:disabled='!dpaHandlerDetected'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\tv-if='config.dpaPeerToPeer !== undefined'\n\t\t\t\t\t\t\t\t\t:checked.sync='config.dpaPeerToPeer'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.dpaPeerToPeer\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.peerToPeer'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.peerToPeer\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\tv-if='config.localFrcReception !== undefined && address !== 0'\n\t\t\t\t\t\t\t\t\t:checked.sync='config.localFrcReception'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.localFrcReception\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.ioSetup'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.ioSetup\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.dpaAutoexec'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.dpaAutoexec\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\t:checked.sync='config.routingOff'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.routingOff\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\tv-if='config.neverSleep !== undefined'\n\t\t\t\t\t\t\t\t\t:checked.sync='config.neverSleep'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.neverSleep\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<ValidationProvider\n\t\t\t\t\t\t\t\t\tv-slot='{ valid, touched, errors }'\n\t\t\t\t\t\t\t\t\trules='required'\n\t\t\t\t\t\t\t\t\t:custom-messages='{\n\t\t\t\t\t\t\t\t\t\trequired: \"iqrfnet.trConfiguration.form.messages.uartBaudrate\",\n\t\t\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CSelect\n\t\t\t\t\t\t\t\t\t\t:value.sync='config.uartBaudrate'\n\t\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.uartBaudrate\")'\n\t\t\t\t\t\t\t\t\t\t:is-valid='touched ? valid : null'\n\t\t\t\t\t\t\t\t\t\t:invalid-feedback='$t(errors[0])'\n\t\t\t\t\t\t\t\t\t\t:placeholder='$t(\"iqrfnet.trConfiguration.form.messages.uartBaudrate\")'\n\t\t\t\t\t\t\t\t\t\t:options='uartBaudRates'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ValidationProvider>\n\t\t\t\t\t\t\t\t<CInputCheckbox\n\t\t\t\t\t\t\t\t\tv-if='config.nodeDpaInterface !== undefined'\n\t\t\t\t\t\t\t\t\t:checked.sync='config.nodeDpaInterface'\n\t\t\t\t\t\t\t\t\t:label='$t(\"iqrfnet.trConfiguration.form.nodeDpaInterface\")'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</CCol>\n\t\t\t\t\t\t</CRow>\n\t\t\t\t\t\t<CButton color='primary' type='submit' :disabled='invalid'>\n\t\t\t\t\t\t\t{{ $t('forms.write') }}\n\t\t\t\t\t\t</CButton>\n\t\t\t\t\t</CForm>\n\t\t\t\t</ValidationObserver>\n\t\t\t</CCardBody>\n\t\t</CCard>\n\t</div>\n</template>\n\n<script>\nimport {CCard, CCardBody, CCardHeader, CForm, CInput} from '@coreui/vue/src';\nimport {\n\tbetween,\n\tinteger,\n\tmin_value,\n\tmax_value,\n\trequired,\n} from 'vee-validate/dist/rules';\nimport {extend, ValidationObserver, ValidationProvider} from 'vee-validate';\nimport AddressChanger from './AddressChanger';\nimport IqrfNetService from '../../services/IqrfNetService';\n\nexport default {\n\tname: 'TrConfiguration',\n\tcomponents: {\n\t\tAddressChanger,\n\t\tCCard,\n\t\tCCardBody,\n\t\tCCardHeader,\n\t\tCForm,\n\t\tCInput,\n\t\tValidationObserver,\n\t\tValidationProvider,\n\t},\n\tprops: {\n\t\taddress: {\n\t\t\ttype: Number,\n\t\t\trequired: true\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tconfig: null,\n\t\t\tperipherals: [],\n\t\t\tdpaHandlerDetected: null,\n\t\t\tdpaVersion: null,\n\t\t\tunchangeablePeripherals: ['coordinator', 'node', 'os'],\n\t\t};\n\t},\n\tcomputed: {\n\t\trfChannelRules() {\n\t\t\tswitch (this.config.rfBand) {\n\t\t\t\tcase '433':\n\t\t\t\t\treturn {rule:'integer|between:0,16|required', min: 0, max: 16};\n\t\t\t\tcase '868':\n\t\t\t\t\treturn {rule: 'integer|between:0,67|required', min: 0, max: 67};\n\t\t\t\tcase '916':\n\t\t\t\t\treturn {rule: 'integer|between:0,255|required', min: 0, max: 255};\n\t\t\t}\n\t\t\treturn undefined;\n\t\t},\n\t\trfChannelValidatorMessages() {\n\t\t\tlet message = '';\n\t\t\tswitch (this.config.rfBand) {\n\t\t\t\tcase '433':\n\t\t\t\t\tmessage = 'iqrfnet.trConfiguration.form.messages.rfChannel.433';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '868':\n\t\t\t\t\tmessage = 'iqrfnet.trConfiguration.form.messages.rfChannel.868';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '916':\n\t\t\t\t\tmessage = 'iqrfnet.trConfiguration.form.messages.rfChannel.916';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tbetween: message,\n\t\t\t\tinteger: message,\n\t\t\t\trequired: message\n\t\t\t};\n\t\t},\n\t\tuartBaudRates() {\n\t\t\tconst uartBaudRates = [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200, 230400];\n\t\t\treturn uartBaudRates.map((uartBaudRate) => {\n\t\t\t\treturn {\n\t\t\t\t\tvalue: uartBaudRate,\n\t\t\t\t\tlabel: this.$t('iqrfnet.trConfiguration.form.uartBaudrates.' + uartBaudRate).toString(),\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\t},\n\twatch: {\n\t\taddress: function (newVal) {\n\t\t\tthis.config = null;\n\t\t\tthis.peripherals = [];\n\t\t\tthis.address = newVal;\n\t\t\tif (this.$store.getters.isSocketConnected) {\n\t\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\t\tIqrfNetService.enumerateDevice(this.address);\n\t\t\t}\n\t\t},\n\t},\n\tcreated() {\n\t\textend('between', between);\n\t\textend('integer', integer);\n\t\textend('min', min_value);\n\t\textend('max', max_value);\n\t\textend('required', required);\n\t\tthis.unsubscribe = this.$store.subscribe(mutation => {\n\t\t\tif (mutation.type === 'SOCKET_ONOPEN') {\n\t\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\t\tIqrfNetService.enumerateDevice(this.address);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (mutation.type !== 'SOCKET_ONMESSAGE') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (mutation.payload.mType === 'iqmeshNetwork_WriteTrConf') {\n\t\t\t\tthis.handleWriteResponse(mutation.payload);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (mutation.payload.mType === 'iqmeshNetwork_EnumerateDevice') {\n\t\t\t\tthis.handleEnumerationResponse(mutation.payload);\n\t\t\t}\n\t\t});\n\t\tif (this.$store.getters.isSocketConnected) {\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tIqrfNetService.enumerateDevice(this.address);\n\t\t}\n\t},\n\tbeforeDestroy() {\n\t\tthis.unsubscribe();\n\t},\n\tmethods: {\n\t\thandleEnumerationResponse(response) {\n\t\t\tif (response.data.status !== 0) {\n\t\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\t\tthis.$toast.error(\n\t\t\t\t\tthis.$t('iqrfnet.trConfiguration.messages.read.failure').toString()\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet rsp = response.data.rsp;\n\t\t\tthis.config = rsp.trConfiguration;\n\t\t\tthis.dpaHandlerDetected = rsp.osRead.flags.dpaHandlerDetected;\n\t\t\tthis.dpaVersion = rsp.peripheralEnumeration.dpaVer;\n\t\t\tthis.setEmbeddedPeripherals();\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tif (this.$store.getters['user/getRole'] === 'normal') {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('iqrfnet.trConfiguration.messages.read.success').toString()\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\thandleSubmit() {\n\t\t\tlet config = JSON.parse(JSON.stringify(this.config));\n\t\t\tconfig.embPers = this.getEmbeddedPeripherals();\n\t\t\tthis.$store.commit('spinner/SHOW');\n\t\t\tIqrfNetService.writeTrConfiguration(this.address, config);\n\t\t},\n\t\thandleWriteResponse(response) {\n\t\t\tthis.$store.commit('spinner/HIDE');\n\t\t\tif (response.data.status === 0) {\n\t\t\t\tthis.$toast.success(\n\t\t\t\t\tthis.$t('iqrfnet.trConfiguration.messages.write.success').toString()\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.$toast.error(\n\t\t\t\t\tthis.$t('iqrfnet.trConfiguration.messages.write.failure').toString()\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\tsetEmbeddedPeripherals() {\n\t\t\tlet peripherals = JSON.parse(JSON.stringify(this.config.embPers));\n\t\t\tthis.peripherals = [];\n\t\t\tfor (let peripheral in peripherals) {\n\t\t\t\tif (!peripherals.hasOwnProperty(peripheral)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (typeof this.config.embPers[peripheral] !== 'boolean') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (this.unchangeablePeripherals.includes(peripheral) &&\n\t\t\t\t\t\tthis.$store.getters['user/getRole'] === 'normal') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.peripherals.push({\n\t\t\t\t\tname: peripheral,\n\t\t\t\t\tenabled: this.config.embPers[peripheral],\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tgetEmbeddedPeripherals() {\n\t\t\tlet peripherals = {};\n\t\t\tfor (let peripheral of this.peripherals) {\n\t\t\t\tperipherals[peripheral.name] = peripheral.enabled;\n\t\t\t}\n\t\t\treturn peripherals;\n\t\t}\n\t},\n};\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TrConfiguration.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--3!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TrConfiguration.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TrConfiguration.vue?vue&type=template&id=6d56b44e&\"\nimport script from \"./TrConfiguration.vue?vue&type=script&lang=js&\"\nexport * from \"./TrConfiguration.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6d56b44e')) {\n      api.createRecord('6d56b44e', component.options)\n    } else {\n      api.reload('6d56b44e', component.options)\n    }\n    module.hot.accept(\"./TrConfiguration.vue?vue&type=template&id=6d56b44e&\", function () {\n      api.rerender('6d56b44e', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/IqrfNet/TrConfiguration.vue\"\nexport default component.exports","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"CCard\",\n    { attrs: { \"body-wrapper\": \"\" } },\n    [\n      _c(\n        \"CListGroup\",\n        [\n          _c(\"CListGroupItem\", { attrs: { to: \"/gateway/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"gateway.title\")) + \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"gateway.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/config/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"config.title\")) + \"\\n\\t\\t\\t\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"config.description\")) + \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/iqrfnet/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"iqrfnet.title\")) + \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"iqrfnet.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"networkManager\")\n            ? _c(\"CListGroupItem\", { attrs: { to: \"/network/\" } }, [\n                _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"network.title\")) + \"\\n\\t\\t\\t\"\n                  )\n                ]),\n                _vm._v(\" \"),\n                _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                  _vm._v(\n                    \"\\n\\t\\t\\t\\t\" +\n                      _vm._s(_vm.$t(\"network.description\")) +\n                      \"\\n\\t\\t\\t\"\n                  )\n                ])\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/cloud/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"cloud.title\")) + \"\\n\\t\\t\\t\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"cloud.description\")) + \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"grafana\")\n            ? _c(\n                \"CListGroupItem\",\n                {\n                  attrs: {\n                    href: _vm.$store.getters[\"features/configuration\"](\n                      \"grafana\"\n                    ).url,\n                    target: \"_blank\"\n                  }\n                },\n                [\n                  _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.grafana.title\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.grafana.description\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"nodeRed\")\n            ? _c(\n                \"CListGroupItem\",\n                {\n                  attrs: {\n                    href: _vm.$store.getters[\"features/configuration\"](\n                      \"nodeRed\"\n                    ).url,\n                    target: \"_blank\"\n                  }\n                },\n                [\n                  _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.nodeRed.workflow.title\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.nodeRed.workflow.description\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"nodeRed\")\n            ? _c(\n                \"CListGroupItem\",\n                {\n                  attrs: {\n                    href:\n                      _vm.$store.getters[\"features/configuration\"](\"nodeRed\")\n                        .url + \"ui/\",\n                    target: \"_blank\"\n                  }\n                },\n                [\n                  _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.nodeRed.dashboard.title\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.nodeRed.dashboard.description\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"supervisord\")\n            ? _c(\n                \"CListGroupItem\",\n                {\n                  attrs: {\n                    href: _vm.$store.getters[\"features/configuration\"](\n                      \"supervisord\"\n                    ).url,\n                    target: \"_blank\"\n                  }\n                },\n                [\n                  _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.supervisor.title\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.supervisor.description\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\"CListGroupItem\", { attrs: { to: \"/user/\" } }, [\n            _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" + _vm._s(_vm.$t(\"core.user.title\")) + \"\\n\\t\\t\\t\"\n              )\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n              _vm._v(\n                \"\\n\\t\\t\\t\\t\" +\n                  _vm._s(_vm.$t(\"core.user.description\")) +\n                  \"\\n\\t\\t\\t\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _vm.$store.getters[\"features/isEnabled\"](\"docs\")\n            ? _c(\n                \"CListGroupItem\",\n                {\n                  attrs: {\n                    href: _vm.$store.getters[\"features/configuration\"](\"docs\")\n                      .url,\n                    target: \"_blank\"\n                  }\n                },\n                [\n                  _c(\"header\", { staticClass: \"list-group-item-heading\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.documentation.title\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"p\", { staticClass: \"list-group-item-text\" }, [\n                    _vm._v(\n                      \"\\n\\t\\t\\t\\t\" +\n                        _vm._s(_vm.$t(\"core.documentation.description\")) +\n                        \"\\n\\t\\t\\t\"\n                    )\n                  ])\n                ]\n              )\n            : _vm._e()\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n\t<CCard body-wrapper>\n\t\t<CListGroup>\n\t\t\t<CListGroupItem to='/gateway/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('gateway.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('gateway.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/config/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('config.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('config.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/iqrfnet/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('iqrfnet.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('iqrfnet.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem v-if='$store.getters[\"features/isEnabled\"](\"networkManager\")' to='/network/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('network.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('network.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/cloud/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('cloud.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('cloud.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"grafana\")'\n\t\t\t\t:href='$store.getters[\"features/configuration\"](\"grafana\").url'\n\t\t\t\ttarget='_blank'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('core.grafana.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('core.grafana.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"nodeRed\")'\n\t\t\t\t:href='$store.getters[\"features/configuration\"](\"nodeRed\").url'\n\t\t\t\ttarget='_blank'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('core.nodeRed.workflow.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('core.nodeRed.workflow.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"nodeRed\")'\n\t\t\t\t:href='$store.getters[\"features/configuration\"](\"nodeRed\").url + \"ui/\"'\n\t\t\t\ttarget='_blank'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('core.nodeRed.dashboard.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('core.nodeRed.dashboard.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"supervisord\")'\n\t\t\t\t:href='$store.getters[\"features/configuration\"](\"supervisord\").url'\n\t\t\t\ttarget='_blank'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('core.supervisor.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('core.supervisor.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem to='/user/'>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('core.user.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('core.user.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t\t<CListGroupItem\n\t\t\t\tv-if='$store.getters[\"features/isEnabled\"](\"docs\")'\n\t\t\t\t:href='$store.getters[\"features/configuration\"](\"docs\").url'\n\t\t\t\ttarget='_blank'\n\t\t\t>\n\t\t\t\t<header class='list-group-item-heading'>\n\t\t\t\t\t{{ $t('core.documentation.title') }}\n\t\t\t\t</header>\n\t\t\t\t<p class='list-group-item-text'>\n\t\t\t\t\t{{ $t('core.documentation.description') }}\n\t\t\t\t</p>\n\t\t\t</CListGroupItem>\n\t\t</CListGroup>\n\t</CCard>\n</template>\n\n<script>\nimport {CCard, CListGroup, CListGroupItem} from '@coreui/vue/src';\n\nexport default {\n\tname: 'MainDisambiguation',\n\tcomponents: {\n\t\tCCard,\n\t\tCListGroup,\n\t\tCListGroupItem\n\t},\n\t//metaInfo: {\n\t//\ttitle: 'core.dashboard',\n\t//},\n};\n</script>\n","import mod from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MainDisambiguation.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??ref--3!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MainDisambiguation.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./MainDisambiguation.vue?vue&type=template&id=df00ba80&\"\nimport script from \"./MainDisambiguation.vue?vue&type=script&lang=js&\"\nexport * from \"./MainDisambiguation.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/roman/gitlab/iqrf/iqrf-gateway-webapp/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('df00ba80')) {\n      api.createRecord('df00ba80', component.options)\n    } else {\n      api.reload('df00ba80', component.options)\n    }\n    module.hot.accept(\"./MainDisambiguation.vue?vue&type=template&id=df00ba80&\", function () {\n      api.rerender('df00ba80', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"js/components/MainDisambiguation.vue\"\nexport default component.exports","/**\n * Copyright 2017 MICRORISC s.r.o.\n * Copyright 2017-2019 IQRF Tech s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport axios from 'axios';\nimport CoreuiVue from '@coreui/vue/src';\nimport * as Sentry from '@sentry/browser';\nimport { Vue as VueIntegration } from '@sentry/integrations/dist/vue';\nimport Vue from 'vue';\nimport VueMeta from 'vue-meta';\n// @ts-ignore\nimport VueNativeSock from 'vue-native-websocket';\nimport VueToast from 'vue-toast-notification';\nimport Clipboard from 'v-clipboard';\nimport store from './store';\nimport router from './router';\nimport i18n from './i18n';\nimport '../css/app.scss';\nimport 'vue-toast-notification/dist/theme-sugar.css';\nimport 'vue-datetime/dist/vue-datetime.css';\nimport App from './components/App.vue';\nimport TheDashboard from './components/TheDashboard.vue';\nimport TrConfiguration from './components/IqrfNet/TrConfiguration.vue';\nimport MainDisambiguation from './components/MainDisambiguation.vue';\nSentry.init({\n    dsn: 'https://435ee2b55f994e5f85e21a9ca93ea7a7@sentry.iqrf.org/5',\n    integrations: [new VueIntegration({ Vue: Vue, attachProps: true, logErrors: true })],\n});\nstore.commit('SOCKET_ONCLOSE');\nstore.commit('spinner/HIDE');\nVue.prototype.$appName = 'IQRF Gateway Webapp frontend';\nvar wsApi = 'ws://' + window.location.hostname + ':1338';\nVue.use(VueNativeSock, wsApi, {\n    store: store,\n    format: 'json',\n    reconnection: true,\n});\nVue.use(CoreuiVue);\nVue.use(VueMeta);\nVue.use(VueToast, {\n    position: 'top',\n    duration: 10000\n});\nVue.use(Clipboard);\naxios.defaults.baseURL = '//' + window.location.host + '/api/v0/';\naxios.defaults.timeout = 30000;\naxios.interceptors.response.use(function (response) {\n    return response;\n}, function (error) {\n    if (error.response === undefined) {\n        // TODO: Add Network error toaster notification\n        return Promise.reject(error);\n    }\n    if (error.response.status === 401) {\n        store.dispatch('user/signOut')\n            .then(function () {\n            location.replace('/sign/in');\n        });\n    }\n    return Promise.reject(error);\n});\nnew Vue({\n    el: '#app',\n    components: {\n        App: App,\n        TheDashboard: TheDashboard,\n        TrConfiguration: TrConfiguration,\n        MainDisambiguation: MainDisambiguation,\n    },\n    router: router,\n    store: store,\n    i18n: i18n,\n    metaInfo: {\n        titleTemplate: function (titleChunk) {\n            return (titleChunk ? i18n.t(titleChunk).toString() + \" | \" : '') +\n                i18n.t('core.title').toString();\n        }\n    },\n});\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ResourceUsage.vue?vue&type=style&index=0&id=6ed3f697&scoped=true&lang=css&\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"9f045b6e\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ResourceUsage.vue?vue&type=style&index=0&id=6ed3f697&scoped=true&lang=css&\", function() {\n     var newContent = require(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ResourceUsage.vue?vue&type=style&index=0&id=6ed3f697&scoped=true&lang=css&\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SignIn.vue?vue&type=style&index=0&id=7b84bbc3&scoped=true&lang=css&\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"0498fb9a\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SignIn.vue?vue&type=style&index=0&id=7b84bbc3&scoped=true&lang=css&\", function() {\n     var newContent = require(\"!!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SignIn.vue?vue&type=style&index=0&id=7b84bbc3&scoped=true&lang=css&\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DeviceEnumeration.vue?vue&type=style&index=0&id=7b8817a0&scoped=true&lang=css&\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"7b132150\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DeviceEnumeration.vue?vue&type=style&index=0&id=7b8817a0&scoped=true&lang=css&\", function() {\n     var newContent = require(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DeviceEnumeration.vue?vue&type=style&index=0&id=7b8817a0&scoped=true&lang=css&\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/sass-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DevicesInfo.vue?vue&type=style&index=0&id=22f61cec&scoped=true&lang=scss&\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"3449c1ff\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/sass-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DevicesInfo.vue?vue&type=style&index=0&id=22f61cec&scoped=true&lang=scss&\", function() {\n     var newContent = require(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/sass-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DevicesInfo.vue?vue&type=style&index=0&id=22f61cec&scoped=true&lang=scss&\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetworkManager.vue?vue&type=style&index=0&id=9bbbfec0&scoped=true&lang=css&\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"5dbd6372\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetworkManager.vue?vue&type=style&index=0&id=9bbbfec0&scoped=true&lang=css&\", function() {\n     var newContent = require(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetworkManager.vue?vue&type=style&index=0&id=9bbbfec0&scoped=true&lang=css&\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BinaryOutputManager.vue?vue&type=style&index=0&id=1e7284a8&scoped=true&lang=css&\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"f3b35bc8\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BinaryOutputManager.vue?vue&type=style&index=0&id=1e7284a8&scoped=true&lang=css&\", function() {\n     var newContent = require(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BinaryOutputManager.vue?vue&type=style&index=0&id=1e7284a8&scoped=true&lang=css&\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SensorManager.vue?vue&type=style&index=0&id=09a96214&scoped=true&lang=css&\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"a9bcff4c\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SensorManager.vue?vue&type=style&index=0&id=09a96214&scoped=true&lang=css&\", function() {\n     var newContent = require(\"!!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SensorManager.vue?vue&type=style&index=0&id=09a96214&scoped=true&lang=css&\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LoadingSpinner.vue?vue&type=style&index=0&id=e0752284&scoped=true&lang=scss&\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"42e34533\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LoadingSpinner.vue?vue&type=style&index=0&id=e0752284&scoped=true&lang=scss&\", function() {\n     var newContent = require(\"!!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/sass-loader/dist/cjs.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./LoadingSpinner.vue?vue&type=style&index=0&id=e0752284&scoped=true&lang=scss&\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","// @ts-ignore\nimport store from '../store';\nexport function authorizationHeader() {\n    var token = store.getters['user/getToken'];\n    if (token === null) {\n        return {};\n    }\n    return { 'Authorization': 'Bearer ' + token };\n}\n","import axios from 'axios';\nimport { authorizationHeader } from '../helpers/authorizationHeader';\n/**\n * Optional feature service\n */\nvar FeatureService = /** @class */ (function () {\n    function FeatureService() {\n    }\n    /**\n     * Fetch all features\n     */\n    FeatureService.prototype.fetchAll = function () {\n        return axios.get('features', { headers: authorizationHeader() });\n    };\n    return FeatureService;\n}());\nexport default new FeatureService();\n","import FeatureService from '../../services/FeatureService';\nvar state = {\n    features: {},\n};\nvar actions = {\n    // @ts-ignore\n    fetch: function (_a) {\n        var commit = _a.commit;\n        return FeatureService.fetchAll()\n            .then(function (response) {\n            commit('SET', response.data);\n        });\n    },\n};\nvar getters = {\n    isEnabled: function (state) { return function (name) {\n        try {\n            return state.features[name].enabled;\n        }\n        catch (e) {\n            return undefined;\n        }\n    }; },\n    configuration: function (state) { return function (name) {\n        try {\n            return state.features[name];\n        }\n        catch (e) {\n            return undefined;\n        }\n    }; },\n};\nvar mutations = {\n    SET: function (state, features) {\n        state.features = features;\n    }\n};\nexport default {\n    namespaced: true,\n    state: state,\n    actions: actions,\n    getters: getters,\n    mutations: mutations,\n};\n","var state = {\n    show: 'responsive',\n    minimize: false,\n};\nvar mutations = {\n    toggleSidebarDesktop: function (state) {\n        var sidebarOpened = [true, 'responsive'].includes(state.show);\n        state.show = sidebarOpened ? false : 'responsive';\n    },\n    toggleSidebarMobile: function (state) {\n        var sidebarClosed = [false, 'responsive'].includes(state.show);\n        state.show = sidebarClosed ? true : 'responsive';\n    },\n    set: function (state, _a) {\n        var variable = _a[0], value = _a[1];\n        state[variable] = value;\n    }\n};\nexport default {\n    namespaced: true,\n    state: state,\n    mutations: mutations\n};\n","var state = {\n    enabled: null,\n    text: null,\n};\nvar getters = {\n    isEnabled: function (state) {\n        return state.enabled;\n    },\n    text: function (state) {\n        return state.text;\n    },\n};\nvar mutations = {\n    HIDE: function (state) {\n        state.enabled = false;\n        state.text = null;\n    },\n    SHOW: function (state, text) {\n        if (text === void 0) { text = null; }\n        state.enabled = true;\n        state.text = text;\n    },\n    UPDATE_TEXT: function (state, text) {\n        state.text = text;\n    },\n};\nexport default {\n    namespaced: true,\n    state: state,\n    getters: getters,\n    mutations: mutations,\n};\n","import axios from 'axios';\n/**\n * Authentication service\n */\nvar AuthenticationService = /** @class */ (function () {\n    function AuthenticationService() {\n    }\n    /**\n     * Signs in the user (REST API)\n     * @param username Username\n     * @param password Password\n     */\n    AuthenticationService.prototype.apiLogin = function (username, password) {\n        var data = {\n            username: username,\n            password: password\n        };\n        return axios.post('user/signIn', data);\n    };\n    /**\n     * Signs in the user (Nette login)\n     * @param username Username\n     * @param password Password\n     */\n    AuthenticationService.prototype.netteLogin = function (username, password) {\n        var data = new URLSearchParams();\n        data.append('username', username);\n        data.append('password', password);\n        data.append('remember', 'on');\n        data.append('send', 'Sign+in');\n        data.append('_do', 'signInForm-submit');\n        return axios.post('//' + window.location.host + '/sign/in', data);\n    };\n    /**\n     * Signs in the user\n     * @param username Username\n     * @param password Password\n     */\n    AuthenticationService.prototype.login = function (username, password) {\n        return Promise.all([\n            this.apiLogin(username, password),\n            this.netteLogin(username, password)\n        ]);\n    };\n    /**\n     * Signs out the user (Nette)\n     */\n    AuthenticationService.prototype.logout = function () {\n        return axios.get('//' + window.location.host + '/sign/out');\n    };\n    return AuthenticationService;\n}());\nexport default new AuthenticationService();\n","import AuthenticationService from '../../services/AuthenticationService';\nvar state = {\n    user: null,\n};\nvar actions = {\n    signIn: function (_a, credentials) {\n        var commit = _a.commit;\n        return AuthenticationService.login(credentials.username, credentials.password)\n            .then(function (responses) {\n            var apiResponse = responses[0];\n            commit('SIGN_IN', apiResponse.data);\n            return responses;\n        })\n            .catch(function (error) {\n            console.error(error);\n            return Promise.reject(error);\n        });\n    },\n    signOut: function (_a) {\n        var commit = _a.commit;\n        return AuthenticationService.logout()\n            .then(function () {\n            commit('SIGN_OUT');\n        });\n    },\n};\nvar getters = {\n    isLoggedIn: function (state) {\n        return state.user !== null;\n    },\n    getId: function (state) {\n        if (state.user === null) {\n            return null;\n        }\n        return state.user.id;\n    },\n    getName: function (state) {\n        if (state.user === null) {\n            return null;\n        }\n        return state.user.username;\n    },\n    getRole: function (state) {\n        if (state.user === null) {\n            return null;\n        }\n        return state.user.role;\n    },\n    getToken: function (state) {\n        if (state.user === null) {\n            return null;\n        }\n        return state.user.token;\n    },\n};\nvar mutations = {\n    SIGN_IN: function (state, data) {\n        state.user = data;\n    },\n    SIGN_OUT: function (state) {\n        state.user = null;\n    },\n};\nexport default {\n    namespaced: true,\n    state: state,\n    actions: actions,\n    getters: getters,\n    mutations: mutations,\n};\n","import Vue from 'vue';\nimport { v4 as uuidv4 } from 'uuid';\nvar state = {\n    socket: {\n        isConnected: false,\n        reconnectError: false,\n    },\n    requests: {},\n    responses: {},\n};\nvar actions = {\n    sendRequest: function (context, request) {\n        if (request.data !== undefined && request.data.msgId === undefined) {\n            request.data.msgId = uuidv4();\n        }\n        Vue.prototype.$socket.sendObj(request);\n        context.commit('SOCKET_ONSEND', request);\n    },\n};\nvar getters = {\n    isSocketConnected: function (state) {\n        return state.socket.isConnected;\n    },\n};\nvar mutations = {\n    SOCKET_ONOPEN: function (state, event) {\n        Vue.prototype.$socket = event.currentTarget;\n        state.socket.isConnected = true;\n    },\n    SOCKET_ONCLOSE: function () {\n        state.socket.isConnected = false;\n    },\n    SOCKET_ONERROR: function (state, event) {\n        console.error(state, event);\n    },\n    SOCKET_ONMESSAGE: function (state, message) {\n        state.responses[message.data.msgId] = message;\n    },\n    SOCKET_ONSEND: function (state, request) {\n        state.requests[request.data.msgId] = request;\n    },\n    SOCKET_RECONNECT: function (state, count) {\n        // eslint-disable-next-line no-console\n        console.info(state, count);\n    },\n    SOCKET_RECONNECT_ERROR: function (state) {\n        state.socket.reconnectError = true;\n    },\n};\nexport default {\n    state: state,\n    actions: actions,\n    getters: getters,\n    mutations: mutations,\n};\n","import Vue from 'vue';\nimport Vuex from 'vuex';\nimport createPersistentState from 'vuex-persistedstate';\nimport features from './modules/features.module';\nimport sidebar from './modules/sidebar.module';\nimport spinner from './modules/spinner.module';\nimport user from './modules/user.module';\nimport webSocketClient from './modules/webSocketClient.module';\nVue.use(Vuex);\nvar store = new Vuex.Store({\n    modules: {\n        features: features,\n        sidebar: sidebar,\n        spinner: spinner,\n        user: user,\n        webSocketClient: webSocketClient,\n    },\n    plugins: [createPersistentState()]\n});\nexport default store;\n"],"sourceRoot":""}