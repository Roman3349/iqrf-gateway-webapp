{
	"cloud": {
		"title": "Clouds",
		"description": "Add a connection into cloud services.",
		"messages": {
			"downloadFailure": "The webapp has not been able to download the root CA certificate. Probably the gateway has not been connected into the Internet.",
			"cannotCreateDir": "The webapp has not been able to create a directory for the certificates.",
			"success": "The new connection to the cloud service has been created successfully.",
			"timeout": "Request to create new connection has timed out."
		},
		"amazonAws": {
			"title": "Amazon AWS IoT",
			"description": "Adds a new MQTT connection into Amazon AWS IoT.",
			"form": {
				"title": "Amazon AWS IoT MQTT connection wizard",
				"endpoint": "Endpoint",
				"certificate": "Certificate",
				"key": "Private key",
				"messages": {
					"endpoint": "Please enter the endpoint.",
					"certificate": "Please enter the certificate.",
					"key": "Please enter the private key."
				}
			},
			"messages": {
				"mismatchedCrtAndKey": "The private key does not correspond to the certificate."
			}
		},
		"hexio": {
			"title": "Hexio IoT Platform",
			"description": "Adds a new MQTT connection into Hexio IoT Platform.",
			"form": {
				"title": "Hexio IoT Platform MQTT connection wizard",
				"broker": "MQTT broker address",
				"clientId": "Client ID",
				"topicRequest": "Topic for requests",
				"topicResponse": "Topic for responses",
				"username": "Username",
				"password": "Password",
				"messages": {
					"broker": "Please enter the MQTT broker address.",
					"clientId": "Please enter client ID.",
					"topicRequest": "Please enter topic for requests.",
					"topicResponse": "Please enter topic for responses.",
					"username": "Please enter the username.",
					"password": "Please enter the password."
				}
			}
		},
		"ibmCloud": {
			"title": "IBM Cloud",
			"description": "Adds a new MQTT connection into IBM Cloud.",
			"form": {
				"title": "IBM Cloud MQTT connection wizard",
				"organizationId": "Organization ID",
				"deviceType": "Device type",
				"deviceId": "Device ID",
				"token": "Authentication token",
				"eventId": "Command and event ID",
				"messages": {
					"organizationId": "Please enter the organization ID.",
					"deviceType": "Please enter the device type.",
					"deviceId": "Please enter the device ID.",
					"token": "Please enter the authentication token.",
					"eventId": "Please enter command and event ID."
				}
			}
		},
		"intelimentsInteliGlue": {
			"title": "Inteliments InteliGlue",
			"description": "Adds a new MQTT connection into Inteliments InteliGlue.",
			"form": {
				"title": "Inteliments InteliGlue MQTT connection wizard",
				"rootTopic": "Root Topic",
				"assignedPort": "Assigned Port",
				"clientId": "Client ID",
				"password": "Password",
				"messages": {
					"rootTopic": "Please enter the root topic.",
					"assignedPort": "Please enter the assigned port.",
					"assignedPortRange": "Port has to be an integer in range from 0 to 65535.",
					"clientId": "Please enter the client ID.",
					"password": "Please enter the password."
				}
			}
		},
		"msAzure": {
			"title": "Microsoft Azure IoT hub",
			"description": "Adds a new MQTT connection into Microsoft Azure IoT Hub.",
			"form": {
				"title": "Microsoft Azure IoT Hub MQTT connection wizard",
				"connectionString": "IoT Hub Connection String for Device",
				"messages": {
					"connectionString": "Please enter IoT Hub Connection String for Device."
				}
			},
			"messages": {
				"invalidConnectionString": "Invalid MS Azure IoT Hub connection string for device."
			}
		},
		"pixla": {
			"title": "PIXLA device management",
			"description": "Manages PIXLA client service.",
			"dashboard": "Visit dashboard",
			"disable": "Disable service",
			"enable": "Enable service",
			"status": "Service status",
			"statuses": {
				"enabled": "Enabled",
				"disabled": "Disabled",
				"missing": "Missing"
			},
			"editModal": {
				"title": "Set new PIXLA platform token",
				"token": "New PIXLA token",
				"messages": {
					"token": "Please enter PIXLA platform token.",
					"failure": "An error occurred while saving the new PIXLA token.",
					"success": "New PIXLA token has been successfully saved."
				}
			},
			"token": "Token",
			"messages": {
				"disabled": "PIXLA manager is disabled.",
				"disable": "PIXLA client service has been disabled.",
				"enable": "PIXLA client service has been enabled."
			}
		},
		"guides": {
			"pdf": "PDF guide",
			"video": "Video guide"
		}
	},
	"forms": {
		"start": "Start",
		"ok": "OK",
		"add": "Add",
		"cancel": "Cancel",
		"edit": "Edit",
		"pingNodes": "Ping nodes",
		"no": "No",
		"read": "Read",
		"save": "Save",
		"saveRestart": "Save and restart",
		"send": "Send",
		"yes": "Yes",
		"write": "Write",
		"discovery": "Discovery",
		"bond": "Bond Node",
		"unbond": "Unbond Node",
		"clearBonds": "Clear All Bonds",
		"enumerate": "Enumerate",
		"messages": {
			"getConfTimeout": "The request to retrieve current configuration timed out.",
			"saveConfTimeout": "The request to save new configuration timed out.",
			"integer": "This parameter should be an integer.",
			"saveSuccess": "Configuration has been successfully saved.",
			"submitBadRequest": "Invalid JSON syntax.",
			"submitServerError": "Internal server error has occurred.",
			"componentNotFound": "Component or instance not found."
		}
	},
	"config": {
		"title": "Configuration",
		"description": "Edit configuration.",
		"success": "The configuration has been saved successfully.",
		"migration": {
			"title": "Configuration migration",
			"description": "Migration of IQRF Gateway Daemon's configuration",
			"form": {
				"importButton": "Configuration to import",
				"import": "Import configuraiton",
				"export": "Export configuration"
			},
			"messages": {
				"importButton": "Please select a ZIP archive with a configuration to import.",
				"imported": "The configuration has been imported.",
				"invalidConfig": "The ZIP archive contains invalid configuration.",
				"invalidFormat": "Uploaded invalid file format."
			}
		},
		"components": {
			"title": "Components",
			"description": "Manage components."
		},
		"interfaceMapping": {
			"cdc": "Available CDC mappings",
			"spi": "Available SPI mappings",
			"uart": "Available UART mappings",
			"boards": "Boards",
			"interfaces": "Interfaces"
		},
		"iqmesh": {
			"title": "IQMESH services",
			"description": "Manage IQMESH services."
		},
		"iqrfCdc": {
			"title": "IQRF CDC interface",
			"description": "IQRF CDC interface settings."
		},
		"iqrfDpa":{
			"title": "IQRF DPA interface",
			"description": "IQRF DPA interface settings."
		},
		"iqrfInfo": {
			"title": "IQRF Info",
			"description": "IQRF Info database settings.",
			"form": {
				"instance": "Name of instance",
				"enumAtStartUp": "Initialize network full enumeration just after startup",
				"enumPeriod": "Period in minutes of regular check enumeration",
				"enumUniformDpaVer": "Obtain only HWPID and HWPID version from nodes"
			},
			"messages": {
				"instance": "Please enter name of IQRF Info instance",
				"enumPeriod": "Period must be bigger than 0"
			}
		},
		"iqrfRepository": {
			"title": "IQRF Repository",
			"description": "Manage IQRF Repository's settings."
		},
		"iqrfSpi": {
			"title": "IQRF SPI interface",
			"description": "IQRF SPI interface settings."
		},
		"iqrfUart": {
			"title": "IQRF UART interface",
			"description": "IQRF UART interface settings."
		},
		"jsonMngMetaDataApi": {
			"title": "JSON Metadata API",
			"description": "JSON Metadata API settings."
		},
		"jsonRawApi": {
			"title": "JSON Raw API",
			"description": "JSON Raw API settings."
		},
		"jsonSplitter": {
			"title": "JSON Splitter",
			"description": "JSON Splitter settings."
		},
		"main": {
			"title": "Main configuration",
			"description": "Main configuration of IQRF Gateway Daemon."
		},
		"monitor": {
			"title": "Monitoring service",
			"description": "Monitoring service configuration."
		},
		"mq": {
			"title": "MQ interface",
			"description": "MQ interface settings."
		},
		"mqtt": {
			"title": "MQTT interface",
			"description": "MQTT interface settings."
		},
		"selectedComponents": {
			"title": "Selected components",
			"description": "Manage selected components."
		},
		"scheduler": {
			"title": "Scheduler",
			"description": "Scheduler settings.",
			"form": {
				"addOrEdit": {
					"addTitle": "Add task",
					"editTitle": "Edit task",
					"taskId": "Task ID",
					"time": "Time",
					"service": "Service",
					"timeSpec": {
						"cronTime": "Time in cron format",
						"exactTime": "Exact time",
						"periodic": "Periodic",
						"period": "Period in seconds",
						"startTime": "Start time"
					},
					"message": {
						"title": "Messages",
						"label": "Message (JSON request)",
						"add": "Add another message",
						"remove": "Remove message"
					},
					"verbose": "Enable verbose response"
				},
				"import": {
					"title": "Import task(s)",
					"file": "JSON task file or ZIP archive with tasks",
					"fileEmpty": "Please select file to import."
				}
			},
			"buttons": {
				"add": "Add",
				"edit": "Edit",
				"remove": "Remove",
				"import": "Import",
				"export": "Export"
			},
			"emptyTasks": "No records have been found.",
			"messages": {
				"importSuccess": "The tasks has been imported successfully.",
				"importInvalidFormat": "The uploaded file is not JSON file or ZIP archive.",
				"importInvalidFile": "The uploaded file is invalid."
			}
		},
		"tracer": {
			"title": "Tracer file",
			"description": "Tracer file settings."
		},
		"udp": {
			"title": "UDP interface",
			"description": "IQRF UDP interface settings."
		},
		"websocket": {
			"title": "WebSocket interface",
			"description": "IQRF WebSocket interface settings."
		},
		"mender": {
			"title": "Mender",
			"description": "Mender client configuration",
			"form": {
				"inventoryPollInterval": "Inventory update interval (seconds)",
				"retryPollInterval": "Communication retry interval (seconds)",
				"server": "Server address",
				"tenantToken": "Tenant token",
				"updatePollInterval": "Update check interval (seconds)",
				"messages": {
					"inventoryPollInterval": "Please enter an integer greater or equal to 0 for for inventory update interval.",
					"retryPollInterval": "Please enter an integer greater or equal to 0 for communication retry interval.",
					"updatePollInterval": "Please enter an integer greater or equal to 0 for update check interval",
					"missing": {
						"server": "Please enter the server address.",
						"tenantToken": "Please enter the tenant token."
					},
					"invalid": {
						"server": "Server address should contain the HTTP protocol."
					}
				}
			}
		}
	},
	"core": {
		"title": "IQRF Gateway Webapp",
		"dashboard": "Dashboard",
		"documentation": {
			"title": "Documentation",
			"description": "Opens the documentation in a new tab."
		},
		"grafana": {
			"title": "Grafana",
			"description": "Open Grafana dashboard."
		},
		"navigation": {
			"toggle": "Toggle navigation"
		},
		"nodeRed": {
			"title": "Node-RED",
			"dashboard": {
				"title": "Node-RED dashboard",
				"description": "Open Node-RED dashboard."
			},
			"workflow": {
				"title": "Node-RED workflow",
				"description": "Open Node-RED workflow."
			}
		},
		"languages": {
			"title": "Language",
			"cs": "Czech",
			"en": "English"
		},
		"user": {
			"title": "User manager",
			"description": "Manage users of this webapp.",
			"add": {
				"title": "Add a new user"
			},
			"edit": {
				"title": "Edit an existing user"
			},
			"id": "User ID",
			"username": "User name",
			"password": "Password",
			"role": "User role",
			"roles": {
				"normal": "Normal user",
				"power": "Power user"
			},
			"language": "Language",
			"languages": {
				"en": "English"
			},
			"oldPassword": "Old password (only if you want change password)",
			"newPassword": "New password (only if you want change password)",
			"messages": {
				"conflict": {
					"username": "Username is already used."
				},
				"invalid": {
					"oldPassword": "The old password is mismatched."
				},
				"missing": {
					"username": "Please enter the username.",
					"password": "Please enter the password.",
					"oldPassword": "Please enter the old password.",
					"newPassword": "Please enter the new password."
				},
				"add": {
					"success": "User {username} has been added successfully."
				},
				"delete": {
					"confirm": "Do you really want to delete user {username}?",
					"confirmTitle": "Delete user",
					"success": "User {username} has been deleted successfully."
				},
				"edit": {
					"success": "User {username} has been edited successfully."
				},
				"notFound": "User not found."
			}
		},
		"sign": {
			"in": {
				"title": "Sign in",
				"username": "Username",
				"password": "Password",
				"remember": "Keep me signed in",
				"send": "Sign in",
				"messages": {
					"username": "Please enter your username.",
					"password": "Please enter your password.",
					"incorrectUsernameOrPassword": "The username or password you entered is incorrect.",
					"success": "You have been signed in successfully."
				}
			},
			"out": {
				"title": "Sign out",
				"message": "You have been signed out."
			}
		},
		"supervisor": {
			"title": "Supervisor Dashboard",
			"description": "Open Supervisor Dashboard."
		}
	},
	"gateway": {
		"title": "Gateway",
		"description": "Control this gateway.",
		"info": {
			"title": "Information",
			"description": "Show information about this gateway.",
			"board": "Board",
			"gwId": "IQRF Gateway ID",
			"gwmonId": "PIXLA token",
			"version": {
				"iqrfGatewayController": "IQRF Gateway Controller",
				"iqrfGatewayDaemon": "IQRF Gateway Daemon",
				"iqrfGatewayWebapp": "IQRF Gateway Webapp"
			},
			"hostname": "Hostname",
			"addresses": {
				"ip": "IP addresses",
				"mac": "MAC addresses"
			},
			"tr": {
				"title": "TR info",
				"error": "Cannot get information about the Coordinator.",
				"moduleType": "Module type",
				"mcuType": "MCU type",
				"moduleId": "MID",
				"os": "OS",
				"dpa": "DPA",
				"rfMode": "RF mode",
				"networkType": "Network type",
				"voltage": "Supply voltage"
			},
			"usages": {
				"memory": "Memory usage",
				"disks": "Disk usages",
				"swap": "Swap usage",
				"used": "Used"
			},
			"gwMode": "Gateway mode"
		},
		"diagnostics": {
			"download": "Download diagnostics"
		},
		"log": {
			"title": "Log file",
			"description": "Shows log of IQRF Gateway Daemon.",
			"download": "Download",
			"messages": {
				"nonExistingDir": "IQRF Gateway Daemon's log directory does not exist.",
				"readError": "Cannot read IQRF Gateway Daemon's log file.",
				"notFound": "IQRF Gateway Daemon log file cannot be found."
			}
		},
		"mode": {
			"title": "Change mode",
			"description": "Change gateway mode.",
			"modes": {
				"forwarding": "Forwarding mode",
				"operational": "Operational mode",
				"service": "Service mode",
				"unknown": "An error occurred while getting the current gateway mode"
			},
			"messages": {
				"failures": {
					"get": "An error occurred while getting the current gateway mode",
					"set": "An error occurred while setting a new gateway mode"
				},
				"forwarding": "IQRF Gateway Daemon's mode has been changed to forwarding mode.",
				"operational": "IQRF Gateway Daemon's mode has been changed to operational mode.",
				"service": "IQRF Gateway Daemon's mode has been changed to service mode."
			}
		},
		"power": {
			"title": "Power control",
			"description": "Powers off or reboots this gateway.",
			"powerOff": {
				"title": "Power off",
				"description": "Powers off the operating system of your device.",
				"button": "Perform power off",
				"success": "Your device has been powered off successfully."
			},
			"reboot": {
				"title": "Reboot",
				"description": "Reboots the operating system of your device.",
				"button": "Perform reboot",
				"success": "Your device has been restarted successfully."
			}
		},
		"updater": {
			"title": "System updater",
			"description": "System updater.",
			"warning": "System updater is an experimental feature and could change at any time. Please wait until the process displays its output.",
			"update": "Update packages list",
			"listUpgradable": "List upgradable packages",
			"upgrade": "Upgrade packages",
			"upgradablePackages": {
				"title": "List of upgradable packages",
				"packageName": "Name",
				"oldVersion": "Old version",
				"newVersion": "New version"
			},
			"output": "Command output",
			"messages": {
				"disabled": "System updater is disabled.",
				"unsupportedManager": "This device is using an unsupported package manager."
			}
		},
		"errors": {
			"log-read": "Cannot read log file."
		}
	},
	"iqrfnet": {
		"title": "IQRF network",
		"description": "Control IQRF network.",
		"addressChange": {
			"title": "Change network address",
			"address": "Address",
			"messages": {
				"address": "Address has to be an integer from 0 to 239."
			}
		},
		"networkManager": {
			"title": "Network manager",
			"description": "Network manager.",
			"autoNetwork": {
				"title": "AutoNetwork",
				"form": {
					"discoveryTxPower": "TX power to use in discovery process",
					"discoveryBeforeStart": "Run discovery before start",
					"skipDiscoveryEachWave": "Skip discovery in each wave",
					"actionRetries": "Number of retry DPA transactions",
					"bondingControl": "Bonding control",
					"overlappingNetworks": "Overlapping networks",
					"networks": "Number of networks",
					"network": "Network number",
					"hwpidFiltering": "HWPID filtering conditions",
					"hwpidEnable": "Enable HWPID filtering",
					"hwpids": "HWPIDs",
					"stopConditions": "Stop conditions",
					"waves": "Maximum number of waves",
					"emptyWaves": "Number of empty waves",
					"nodes": "Number of total or new nodes",
					"numberOfTotalNodes": "Number of total nodes",
					"numberOfNewNodes": "Number of new nodes",
					"abortOnTooManyNodesFound": "Abort the AutoNetwork if too many nodes were found",
					"verbose": "Verbose mode"
				}
			},
			"bonding": {
				"title": "Bonding",
				"form": {
					"address": "Address",
					"autoAddress": "Auto address",
					"bondMethod": "Bonding method",
					"bondMethodLocal": "Local bonding",
					"bondMethodSmart": "Smart Connect",
					"bondingRetries": "Bonding test retries",
					"smartConnect": "IQRF Smart Connect Code",
					"unbondCoordinatorOnly": "Unbonds the Node only on Coordinator side"
				}
			},
			"devicesInfo": {
				"title": "Devices Info",
				"icons": {
					"coordinator": "Coordinator",
					"bonded": "Bonded device",
					"bondedOnline": "Online bonded device",
					"discovered": "Discovered device",
					"discoveredOnline": "Online discovered device",
					"unbonded": "Unbonded device"
				},
				"messages": {
					"empty": "No response from IQRF Network",
					"bonded": {
						"failure": "Failed to retrieve list of bonded devices."
					},
					"discovered": {
						"failure": "Failed to retrieve list of discovered devices."
					},
					"ping": {
						"failure": "FRC ping request failed."
					}
				}
			},
			"discovery": {
				"title": "Discovery",
				"form": {
					"txPower": "TX Power",
					"maxAddr": "Max. Node address"
				}
			},
			"messages": {
				"submit": {
					"autoNetwork": {
						"success": "The AutoNetwork process has been successful.",
						"failure": "An error occurred during the AutoNetwork process."
					},
					"invalidMessage": "Invalid request.",
					"timeout": "Request timed out.",
					"bonding": {
						"success": "A new device has been bonded successfully.",
						"error_fail": "Failed to bond new node."
					},
					"removeBond": {
						"confirmUnbond": "Do you really want to remove this node from the network?",
						"confirmClear": "Do you really want to clear all bonds?",
						"success": "Remove bond call successful.",
						"error_fail": "Failed to remove bond.",
						"remove_error": "An error occurred while removing a device from the network.",
						"clearSuccess": "All bonds have been cleared successfully."
					},
					"discovery": {
						"success": "The discovery has been finished successfully.",
						"error_fail": "An error occurred while running discovery."
					}
				},
				"invalid": {
					"integer": "This parameter should be an integer.",
					"autoNetwork": {
						"hwpidFilter": "HWPID filter should be a list of integers from between 0 and 65535 separated by a space."
					},
					"bonding": {
						"scCode": "IQRF Smart Connect code should be a string of 34 alphanumeric characters."
					}
				},
				"autoNetwork": {
					"actionRetries": "Please enter an integer between 0 and 3 for number retry DPA transactions.",
					"networks": "Please enter an integer between 1 and 50 for number of networks.",
					"network": "Please enter an integer between 1 and 50 for network number.",
					"waves": "Please enter an integer between 1 and 127 for maximum number of waves.",
					"emptyWaves": "Please enter an integer between 1 and 127 for maximum number of consecutive empty waves.",
					"totalNodes": "Please enter an integer between 1 and 239 for total number of nodes.",
					"newNodes": "Please enter an integer between 1 and 239 for number of new nodes."
				},
				"bonding": {
					"address": "Please enter an integer between 1 and 239 for new node address",
					"bondingRetries": "Please enter an integer between 0 and 255 for number of bonding test retry requests."
				},
				"discovery": {
					"txPower": "Please enter an integer between 0 and 7 for Discovery TX power.",
					"maxAddr": "Please enter an integer between 0 and 239 for Discovery maximum node address."
				},
				"missing": {
					"bonding": {
						"scCode": "Please enter the IQRF Smart Connect code."
					}
				}
			}
		},
		"sendJson": {
			"title": "Send JSON request",
			"description": "Send JSON request.",
			"documentation": "Show API documentation.",
			"response": "Response",
			"request": "Request",
			"form": {
				"json": "JSON request",
				"messages": {
					"timeout": "Daemon API request timed out.",
					"invalid": "Invalid JSON API request.",
					"missing": "Please enter JSON request.",
					"mType": "JSON object does not have mType key.",
					"success": "JSON request has been sent successfully.",
					"error": {
						"timeout": "Request timed out.",
						"fail": "An error occurred while proccesing JSON request.",
						"pcmd": "Sent JSON request contains incorrect PCMD.",
						"pnum": "Sent JSON request contains incorrect PNUM.",
						"addr": "Sent JSON request contains incorrect address parameter.",
						"dataLen": "Sent JSON request contains incorrect data length.",
						"data": "Sent JSON request contains incorrect data.",
						"hwpid": "Sent JSON request contains incorrect HWPID.",
						"nadr": "Sent JSON request contains incorrect NADR."
					}
				}
			}
		},
		"sendPacket": {
			"title": "Send DPA packet",
			"description": "Send DPA packet.",
			"macros": "Macros",
			"request": "Request",
			"response": "Response",
			"form": {
				"packet": "DPA packet",
				"address": "Custom NADR",
				"addressOverwrite": "Set own NADR",
				"timeout": "Custom DPA timeout (ms)",
				"timeoutOverwrite": "Set own DPA timeout",
				"messages": {
					"invalid": {
						"address": "Invalid custom NADR has been entered. It has to be a decimal number from 0 to 239.",
						"packet": "Invalid DPA packet has been entered.",
						"timeout": "Invalid custom DPA timeout has been entered."
					},
					"missing": {
						"address": "Please enter the custom NADR.",
						"packet": "Please enter the DPA packet.",
						"timeout": "Please enter the custom DPA timeout."
					}
				}
			},
			"messages": {
				"failure": "An error occurred while DPA packet sending.",
				"success": "DPA packet has been sent successfully.",
				"incorrect": {
					"nadr": "Sent DPA packet contains incorrect NADR.",
					"pcmd": "Sent DPA packet contains incorrect PCMD.",
					"pnum": "Sent DPA packet contains incorrect PNUM.",
					"hwpid": "Sent DPA packet contains incorrect HWPID.",
					"data": "Sent DPA packet contains incorrect data,",
					"dataLength": "Sent DPA packet contains incorrect data length."
				}
			}
		},
		"standard": {
			"title": "Standard manager",
			"description": "IQRF Standard manager.",
			"form": {
				"address": "Address",
				"messages": {
					"address": "Address has to be an integer between 1 and 239"
				}
			},
			"binaryOutput": {
				"title": "IQRF Binary Output",
				"outputs": "Outputs",
				"index": "Index",
				"state": "State",
				"prev": "Previous output states",
				"enum": "Binary Output enumeration",
				"form": {
					"index": "Index of the binary output",
					"state": "State of the binary output",
					"enabled": "ON",
					"disabled": "OFF",
					"getStates": "Get states",
					"setState": "Set state",
					"messages": {
						"index": "Index has to be an integer between 0 and 31"
					}
				},
				"messages": {
					"timeout": "Binary output request timed out.",
					"success": "Binary output request has been sent successfully.",
					"failure": "An error occurred during the Binary output request.",
					"pnum": "Device does not support the Binary Output standard."
				}
			},
			"dali": {
				"title": "IQRF DALI",
				"answers": "Answers",
				"status": "Status",
				"value": "Value",
				"form": {
					"command": "DALI command",
					"addCommand": "Add command",
					"removeCommand": "Remove command",
					"sendCommand": "Send commands",
					"messages": {
						"command": "DALI command has to be an integer between 0 and 65535."
					}
				},
				"messages": {
					"timeout": "DALI request timed out.",
					"success": "DALI request has been sent successfully.",
					"failure": "An error occurred during the DALI request.",
					"pnum": "Device does not support the DALI standard."
				}
			},
			"light": {
				"title": "IQRF Light",
				"lights": "Lights",
				"index": "Index",
				"power": "Previous power",
				"enum": "Light enumeration",
				"powerInfo": "Power info",
				"form": {
					"index": "Index of the light",
					"power": "Power of the light",
					"getPower": "Get power",
					"setPower": "Set power",
					"increment": "Increment power",
					"decrement": "Decrement power",
					"messages": {
						"index": "Light index has to be an integer between 0 and 31.",
						"power": "Light power has to be an integer between 0 and 100."
					}
				},
				"messages": {
					"timeout": "Light request timed out.",
					"success": "Light request has been sent successfully.",
					"failure": "An error occurred during the Light request.",
					"pnum": "Device does not support the Light standard."
				}
			},
			"sensor": {
				"title": "IQRF Sensor",
				"sensors": "Sensors",
				"type": "Type",
				"unit": "Unit",
				"value": "Value",
				"readAll": "Read all",
				"enum": "Sensor enumeration",
				"messages": {
					"timeout": "Sensor request timed out.",
					"success": "Sensor request has been sent successfully.",
					"failure": "An error occurred during the Sensor request.",
					"pnum": "Device does not support the Sensor standard."
				}
			}
		},
		"trConfiguration": {
			"title": "TR configuration",
			"description": "Edit TR configuration.",
			"form": {
				"rf": "RF",
				"rfBand": "RF Band",
				"rfBands": {
					"443": "443 MHz",
					"868": "868 MHz",
					"916": "916 MHz"
				},
				"rfChannelA": "RF channel A",
				"rfChannelB": "RF channel B",
				"rfSubChannelA": "RF channel 2nd network",
				"rfSubChannelB": "Alternative DSM channel",
				"rfAltDsmChannel": "Alternative DSM channel",
				"stdAndLpNetwork": "STD and LP network",
				"txPower": "TX power",
				"rxFilter": "RX filter",
				"lpRxTimeout": "LP RX timeout",
				"rfPgm": "RFPGM",
				"rfPgmEnableAfterReset": "Enable after reset",
				"rfPgmTerminateAfter1Min": "Termination after ~1 minute",
				"rfPgmTerminateMcuPin": "Termination by MCU pin",
				"rfPgmDualChannel": "Dual channel",
				"rfPgmLpMode": "LP mode",
				"rfPgmIncorrectUpload": "Incorrect upload",
				"dpa": {
					"embeddedPeripherals": "DPA - Embedded peripherals",
					"other": "DPA - Other"
				},
				"embPers": {
					"coordinator": "Coordinator",
					"node": "Node",
					"os": "OS",
					"eeprom": "EEPROM",
					"eeeprom": "EEEPROM",
					"ram": "RAM",
					"ledr": "LEDR",
					"ledg": "LEDG",
					"spi": "SPI",
					"io": "IO",
					"thermometer": "Thermometer",
					"pwm": "PWM",
					"uart": "UART",
					"frc": "FRC"
				},
				"customDpaHandler": "Custom DPA Handler",
				"ioSetup": "IO Setup",
				"dpaAutoexec": "Autoexec",
				"routingOff": "Routing off",
				"peerToPeer": "User Peer-to-Peer",
				"dpaPeerToPeer": "DPA Peer-to-Peer",
				"neverSleep": "Stay awake when not bonded",
				"uartBaudrate": "UART interface baud rate",
				"uartBaudrates": {
					"1200": "1200 Bd",
					"2400": "2400 Bd",
					"4800": "4800 Bd",
					"9600": "9600 Bd",
					"19200": "19200 Bd",
					"38400": "38400 Bd",
					"57600": "57600 Bd",
					"115200": "115200 Bd",
					"230400": "230400 Bd"
				},
				"nodeDpaInterface": "Node DPA interface",
				"messages": {
					"breakInteroperability": "You will break interoperability if you disable STD and LP network.",
					"lpRxTimeout": "LP RX timeout has to be in range from 1 to 255.",
					"rfChannel": {
						"433": "RF Channel has to be in range from 0 to 16.",
						"868": "RF Channel has to be in range from 0 to 67.",
						"916": "RF Channel has to be in range from 0 to 255."
					},
					"rxFilter": "RX filter have to be integer from 0 to 64.",
					"txPower": "TX Power have to be integer from 0 to 7."
				}
			},
			"messages": {
				"read": {
					"failure": "An error occurred while TR configuration reading.",
					"success": "The TR configuration has been read successfully."
				},
				"write": {
					"failure": "An error occurred while TR configuration saving.",
					"success": "The TR configuration has been saved successfully."
				}
			}
		},
		"trUpload": {
			"title": "Coordinator upload",
			"description": "IQRF Coordinator upload."
		}
	},
	"network": {
		"title": "Network manager",
		"description": "Controls the network.",
		"ethernet": {
			"title": "Ethernet connections",
			"description": "Controls the Ethernet connections."
		}
	},
	"service": {
		"actions": {
			"disable": "Disable",
			"enable": "Enable",
			"start": "Start",
			"stop": "Stop",
			"restart": "Restart",
			"status": "Refresh status"
		},
		"status": "Service status",
		"states": {
			"active": "active",
			"inactive": "inactive",
			"disabled": "Disabled",
			"enabled": "Enabled",
			"missing": "Missing",
			"unsupported": "Unsupported"
		},
		"iqrf-gateway-daemon": {
			"title": "IQRF service",
			"description": "Control IQRF Gateway Daemon's service.",
			"messages": {
				"disable": "IQRF Gateway Daemon has been disabled.",
				"enable": "IQRF Gateway Daemon has been enabled.",
				"start": "IQRF Gateway Daemon has been started.",
				"stop": "IQRF Gateway Daemon has been stopped.",
				"restart": "IQRF Gateway Daemon has been restarted. It takes tens of seconds before the system is ready."
			}
		},
		"gwman-client": {
			"messages": {
				"disabled": "PIXLA manager is disabled.",
				"disable": "PIXLA client service has been disabled.",
				"enable": "PIXLA client service has been enabled.",
				"start": "PIXLA client service has been started.",
				"stop": "PIXLA client service has been stopped.",
				"restart": "PIXLA client service has been restarted."
			}
		},
		"ssh": {
			"title": "SSH service",
			"description": "Controls the SSH daemon service.",
			"messages": {
				"disabled": "SSH daemon manager is disabled.",
				"disable": "SSH daemon service has been disabled.",
				"enable": "SSH daemon service has been enabled.",
				"start": "SSH daemon service has been started.",
				"stop": "SSH daemon service has been stopped.",
				"restart": "SSH daemon service has been restarted."
			}
		},
		"unattended-upgrades": {
			"title": "Automatic upgrades",
			"description": "Controls the automatic unattended upgrades service.",
			"messages": {
				"disabled": "Automatic upgrades are disabled.",
				"disable": "Automatic upgrades service has been disabled.",
				"enable": "Automatic upgrades service has been enabled.",
				"start": "Automatic upgrades service has been started.",
				"stop": "Automatic upgrades service has been stopped.",
				"restart": "Automatic upgrades service has been restarted."
			}
		},
		"unsupported": {
			"title": "Unsupported service"
		},
		"errors": {
			"unsupportedInit": "Not supported init system is used.",
			"processTimeout": "Service manager process timed out.",
			"missingService": "Requested service not found",
			"unsupportedService": "Unsupported service"
		}
	},
	"translatorConfig": {
		"title": "Translator",
		"description": "Translator configuration",
		"form": {
			"rest": {
				"title": "REST API client configuration",
				"addr": "Address",
				"port": "Port",
				"api_key": "API key"
			},
			"mqtt": {
				"title": "MQTT client configuration",
				"cid": "Client ID",
				"addr": "Broker address",
				"port": "Broker port",
				"topic": "Request topic",
				"user": "Username",
				"pw": "Password"
			},
			"messages": {
				"integer": "This parameter should be an integer.",
				"port": "Please enter an integer between 1 and 49151 for port number.",
				"invalid": {
					"api_key": "Invalid REST API key format. The API key format should match [./A-Za-z0-9]{22}\\.[A-Za-z0-9+/=]{44}.",
					"mtopic": "Invalid MQTT requests topic format. The request topic format should be: gateway/{GWID}/rest/requests/+/# (GWID is 16 hexadecimal digits).",
					"mcid": "Invalid MQTT client ID. The client ID should be the GWID (16 hexadecimal digits)."
				},
				"missing": {
					"maddr": "Please enter the MQTT broker address.",
					"mcid": "Please enter the MQTT client ID.",
					"mtopic": "Please enter the MQTT requests topic.",
					"muser": "Please enter the MQTT client username.",
					"mpw": "Please enter the MQTT client password.",
					"raddr": "Please enter the REST API address.",
					"rapi_key": "Please enter the REST API client key."
				}
			}
		}
	},
	"controllerConfig": {
		"title": "Controller",
		"description": "Controller configuration",
		"form": {
			"daemonApi": {
				"autoNetwork": {
					"title": "AutoNetwork API call configuration",
					"stopConditions": {
						"title": "AutoNetwork stop conditions"

					},
					"verbose": "Verbose mode"
				},
				"discovery": {
					"title": "Discovery API call configuration",
					"verbose": "Verbose mode"
				}
			},
			"factoryReset": {
				"title": "Factory reset configuration",
				"coordinator": "Coordinator",
				"daemon": "Daemon",
				"network": "Network",
				"webapp": "Web application"
			},
			"resetButton": {
				"title": "Button configuration",
				"api": "Daemon API call",
				"custom": "Other API call",
				"pin": "Button GPIO pin",
				"setCustom": "Set other API call"
			},
			"statusLed": {
				"title": "Status LED configuration",
				"green": "Green LED GPIO pin",
				"red": "Red LED GPIO pin"
			},
			"logger": {
				"title": "Logger configuration",
				"filePath": "Path to log file",
				"severity": "Severity level"
			},
			"wsServers": {
				"title": "Websocker configuration",
				"api": "Daemon API server",
				"monitor": "Monitor server"
			},
			"messages": {
				"integer": "This parameter should be an integer.",
				"daEwaves": "Please enter an integer between 1 and 127 for empty waves stop condition.",
				"daWaves": "Please enter an integer between 1 and 127 for maximum waves stop condition.",
				"ddMaxAddr": "Please enter an integer between 0 and 239 for Discovery process.",
				"invalid": {
					"ws_format": "Invalid websocket server address format. Example: ws://example:1883.",
					"gpio": "GPIO pin should be an integer."
				},
				"missing": {
					"ws_api": "Please enter the Daemon API websocket server address.",
					"ws_monitir": "Please enter the Monitor websocket server address",
					"l_file": "Please enter path to log file.",
					"rb_pin": "Please enter GPIO pin number for the button.",
					"rb_custom": "Please enter API call identifier.",
					"sl_green": "Please enter GPIO pin number for green LED.",
					"sl_red": "Please enter GPIO pin number for red LED."
				}
			}
		}
	},
	"table": {
		"actions": {
			"title": "Actions",
			"add": "Add",
			"delete": "Delete",
			"edit": "Edit"
		}
	}
}
